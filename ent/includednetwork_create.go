// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/google/uuid"
)

// IncludedNetworkCreate is the builder for creating a IncludedNetwork entity.
type IncludedNetworkCreate struct {
	config
	mutation *IncludedNetworkMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (inc *IncludedNetworkCreate) SetName(s string) *IncludedNetworkCreate {
	inc.mutation.SetName(s)
	return inc
}

// SetIncludedHosts sets the "included_hosts" field.
func (inc *IncludedNetworkCreate) SetIncludedHosts(s []string) *IncludedNetworkCreate {
	inc.mutation.SetIncludedHosts(s)
	return inc
}

// SetID sets the "id" field.
func (inc *IncludedNetworkCreate) SetID(u uuid.UUID) *IncludedNetworkCreate {
	inc.mutation.SetID(u)
	return inc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (inc *IncludedNetworkCreate) SetNillableID(u *uuid.UUID) *IncludedNetworkCreate {
	if u != nil {
		inc.SetID(*u)
	}
	return inc
}

// AddTagIDs adds the "Tags" edge to the Tag entity by IDs.
func (inc *IncludedNetworkCreate) AddTagIDs(ids ...uuid.UUID) *IncludedNetworkCreate {
	inc.mutation.AddTagIDs(ids...)
	return inc
}

// AddTags adds the "Tags" edges to the Tag entity.
func (inc *IncludedNetworkCreate) AddTags(t ...*Tag) *IncludedNetworkCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return inc.AddTagIDs(ids...)
}

// AddHostIDs adds the "Hosts" edge to the Host entity by IDs.
func (inc *IncludedNetworkCreate) AddHostIDs(ids ...uuid.UUID) *IncludedNetworkCreate {
	inc.mutation.AddHostIDs(ids...)
	return inc
}

// AddHosts adds the "Hosts" edges to the Host entity.
func (inc *IncludedNetworkCreate) AddHosts(h ...*Host) *IncludedNetworkCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return inc.AddHostIDs(ids...)
}

// SetNetworkID sets the "Network" edge to the Network entity by ID.
func (inc *IncludedNetworkCreate) SetNetworkID(id uuid.UUID) *IncludedNetworkCreate {
	inc.mutation.SetNetworkID(id)
	return inc
}

// SetNillableNetworkID sets the "Network" edge to the Network entity by ID if the given value is not nil.
func (inc *IncludedNetworkCreate) SetNillableNetworkID(id *uuid.UUID) *IncludedNetworkCreate {
	if id != nil {
		inc = inc.SetNetworkID(*id)
	}
	return inc
}

// SetNetwork sets the "Network" edge to the Network entity.
func (inc *IncludedNetworkCreate) SetNetwork(n *Network) *IncludedNetworkCreate {
	return inc.SetNetworkID(n.ID)
}

// AddEnvironmentIDs adds the "Environments" edge to the Environment entity by IDs.
func (inc *IncludedNetworkCreate) AddEnvironmentIDs(ids ...uuid.UUID) *IncludedNetworkCreate {
	inc.mutation.AddEnvironmentIDs(ids...)
	return inc
}

// AddEnvironments adds the "Environments" edges to the Environment entity.
func (inc *IncludedNetworkCreate) AddEnvironments(e ...*Environment) *IncludedNetworkCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return inc.AddEnvironmentIDs(ids...)
}

// Mutation returns the IncludedNetworkMutation object of the builder.
func (inc *IncludedNetworkCreate) Mutation() *IncludedNetworkMutation {
	return inc.mutation
}

// Save creates the IncludedNetwork in the database.
func (inc *IncludedNetworkCreate) Save(ctx context.Context) (*IncludedNetwork, error) {
	var (
		err  error
		node *IncludedNetwork
	)
	inc.defaults()
	if len(inc.hooks) == 0 {
		if err = inc.check(); err != nil {
			return nil, err
		}
		node, err = inc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IncludedNetworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = inc.check(); err != nil {
				return nil, err
			}
			inc.mutation = mutation
			if node, err = inc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(inc.hooks) - 1; i >= 0; i-- {
			if inc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = inc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, inc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*IncludedNetwork)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IncludedNetworkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (inc *IncludedNetworkCreate) SaveX(ctx context.Context) *IncludedNetwork {
	v, err := inc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (inc *IncludedNetworkCreate) Exec(ctx context.Context) error {
	_, err := inc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (inc *IncludedNetworkCreate) ExecX(ctx context.Context) {
	if err := inc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (inc *IncludedNetworkCreate) defaults() {
	if _, ok := inc.mutation.ID(); !ok {
		v := includednetwork.DefaultID()
		inc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (inc *IncludedNetworkCreate) check() error {
	if _, ok := inc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "IncludedNetwork.name"`)}
	}
	if _, ok := inc.mutation.IncludedHosts(); !ok {
		return &ValidationError{Name: "included_hosts", err: errors.New(`ent: missing required field "IncludedNetwork.included_hosts"`)}
	}
	return nil
}

func (inc *IncludedNetworkCreate) sqlSave(ctx context.Context) (*IncludedNetwork, error) {
	_node, _spec := inc.createSpec()
	if err := sqlgraph.CreateNode(ctx, inc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (inc *IncludedNetworkCreate) createSpec() (*IncludedNetwork, *sqlgraph.CreateSpec) {
	var (
		_node = &IncludedNetwork{config: inc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: includednetwork.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: includednetwork.FieldID,
			},
		}
	)
	if id, ok := inc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := inc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: includednetwork.FieldName,
		})
		_node.Name = value
	}
	if value, ok := inc.mutation.IncludedHosts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: includednetwork.FieldIncludedHosts,
		})
		_node.IncludedHosts = value
	}
	if nodes := inc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   includednetwork.TagsTable,
			Columns: []string{includednetwork.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := inc.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   includednetwork.HostsTable,
			Columns: includednetwork.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := inc.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   includednetwork.NetworkTable,
			Columns: []string{includednetwork.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.included_network_network = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := inc.mutation.EnvironmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   includednetwork.EnvironmentsTable,
			Columns: includednetwork.EnvironmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IncludedNetworkCreateBulk is the builder for creating many IncludedNetwork entities in bulk.
type IncludedNetworkCreateBulk struct {
	config
	builders []*IncludedNetworkCreate
}

// Save creates the IncludedNetwork entities in the database.
func (incb *IncludedNetworkCreateBulk) Save(ctx context.Context) ([]*IncludedNetwork, error) {
	specs := make([]*sqlgraph.CreateSpec, len(incb.builders))
	nodes := make([]*IncludedNetwork, len(incb.builders))
	mutators := make([]Mutator, len(incb.builders))
	for i := range incb.builders {
		func(i int, root context.Context) {
			builder := incb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncludedNetworkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, incb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, incb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, incb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (incb *IncludedNetworkCreateBulk) SaveX(ctx context.Context) []*IncludedNetwork {
	v, err := incb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (incb *IncludedNetworkCreateBulk) Exec(ctx context.Context) error {
	_, err := incb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (incb *IncludedNetworkCreateBulk) ExecX(ctx context.Context) {
	if err := incb.Exec(ctx); err != nil {
		panic(err)
	}
}
