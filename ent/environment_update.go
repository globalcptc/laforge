// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// EnvironmentUpdate is the builder for updating Environment entities.
type EnvironmentUpdate struct {
	config
	hooks    []Hook
	mutation *EnvironmentMutation
}

// Where appends a list predicates to the EnvironmentUpdate builder.
func (eu *EnvironmentUpdate) Where(ps ...predicate.Environment) *EnvironmentUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetHclID sets the "hcl_id" field.
func (eu *EnvironmentUpdate) SetHclID(s string) *EnvironmentUpdate {
	eu.mutation.SetHclID(s)
	return eu
}

// SetCompetitionID sets the "competition_id" field.
func (eu *EnvironmentUpdate) SetCompetitionID(s string) *EnvironmentUpdate {
	eu.mutation.SetCompetitionID(s)
	return eu
}

// SetName sets the "name" field.
func (eu *EnvironmentUpdate) SetName(s string) *EnvironmentUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetDescription sets the "description" field.
func (eu *EnvironmentUpdate) SetDescription(s string) *EnvironmentUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetBuilder sets the "builder" field.
func (eu *EnvironmentUpdate) SetBuilder(s string) *EnvironmentUpdate {
	eu.mutation.SetBuilder(s)
	return eu
}

// SetTeamCount sets the "team_count" field.
func (eu *EnvironmentUpdate) SetTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.ResetTeamCount()
	eu.mutation.SetTeamCount(i)
	return eu
}

// AddTeamCount adds i to the "team_count" field.
func (eu *EnvironmentUpdate) AddTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.AddTeamCount(i)
	return eu
}

// SetRevision sets the "revision" field.
func (eu *EnvironmentUpdate) SetRevision(i int) *EnvironmentUpdate {
	eu.mutation.ResetRevision()
	eu.mutation.SetRevision(i)
	return eu
}

// AddRevision adds i to the "revision" field.
func (eu *EnvironmentUpdate) AddRevision(i int) *EnvironmentUpdate {
	eu.mutation.AddRevision(i)
	return eu
}

// SetAdminCidrs sets the "admin_cidrs" field.
func (eu *EnvironmentUpdate) SetAdminCidrs(s []string) *EnvironmentUpdate {
	eu.mutation.SetAdminCidrs(s)
	return eu
}

// SetExposedVdiPorts sets the "exposed_vdi_ports" field.
func (eu *EnvironmentUpdate) SetExposedVdiPorts(s []string) *EnvironmentUpdate {
	eu.mutation.SetExposedVdiPorts(s)
	return eu
}

// SetConfig sets the "config" field.
func (eu *EnvironmentUpdate) SetConfig(m map[string]string) *EnvironmentUpdate {
	eu.mutation.SetConfig(m)
	return eu
}

// SetTags sets the "tags" field.
func (eu *EnvironmentUpdate) SetTags(m map[string]string) *EnvironmentUpdate {
	eu.mutation.SetTags(m)
	return eu
}

// AddUserIDs adds the "Users" edge to the User entity by IDs.
func (eu *EnvironmentUpdate) AddUserIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddUserIDs(ids...)
	return eu
}

// AddUsers adds the "Users" edges to the User entity.
func (eu *EnvironmentUpdate) AddUsers(u ...*User) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserIDs(ids...)
}

// AddHostIDs adds the "Hosts" edge to the Host entity by IDs.
func (eu *EnvironmentUpdate) AddHostIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddHostIDs(ids...)
	return eu
}

// AddHosts adds the "Hosts" edges to the Host entity.
func (eu *EnvironmentUpdate) AddHosts(h ...*Host) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddHostIDs(ids...)
}

// AddCompetitionIDs adds the "Competitions" edge to the Competition entity by IDs.
func (eu *EnvironmentUpdate) AddCompetitionIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddCompetitionIDs(ids...)
	return eu
}

// AddCompetitions adds the "Competitions" edges to the Competition entity.
func (eu *EnvironmentUpdate) AddCompetitions(c ...*Competition) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCompetitionIDs(ids...)
}

// AddIdentityIDs adds the "Identities" edge to the Identity entity by IDs.
func (eu *EnvironmentUpdate) AddIdentityIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddIdentityIDs(ids...)
	return eu
}

// AddIdentities adds the "Identities" edges to the Identity entity.
func (eu *EnvironmentUpdate) AddIdentities(i ...*Identity) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddIdentityIDs(ids...)
}

// AddCommandIDs adds the "Commands" edge to the Command entity by IDs.
func (eu *EnvironmentUpdate) AddCommandIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddCommandIDs(ids...)
	return eu
}

// AddCommands adds the "Commands" edges to the Command entity.
func (eu *EnvironmentUpdate) AddCommands(c ...*Command) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCommandIDs(ids...)
}

// AddScriptIDs adds the "Scripts" edge to the Script entity by IDs.
func (eu *EnvironmentUpdate) AddScriptIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddScriptIDs(ids...)
	return eu
}

// AddScripts adds the "Scripts" edges to the Script entity.
func (eu *EnvironmentUpdate) AddScripts(s ...*Script) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddScriptIDs(ids...)
}

// AddFileDownloadIDs adds the "FileDownloads" edge to the FileDownload entity by IDs.
func (eu *EnvironmentUpdate) AddFileDownloadIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddFileDownloadIDs(ids...)
	return eu
}

// AddFileDownloads adds the "FileDownloads" edges to the FileDownload entity.
func (eu *EnvironmentUpdate) AddFileDownloads(f ...*FileDownload) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFileDownloadIDs(ids...)
}

// AddFileDeleteIDs adds the "FileDeletes" edge to the FileDelete entity by IDs.
func (eu *EnvironmentUpdate) AddFileDeleteIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddFileDeleteIDs(ids...)
	return eu
}

// AddFileDeletes adds the "FileDeletes" edges to the FileDelete entity.
func (eu *EnvironmentUpdate) AddFileDeletes(f ...*FileDelete) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFileDeleteIDs(ids...)
}

// AddFileExtractIDs adds the "FileExtracts" edge to the FileExtract entity by IDs.
func (eu *EnvironmentUpdate) AddFileExtractIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddFileExtractIDs(ids...)
	return eu
}

// AddFileExtracts adds the "FileExtracts" edges to the FileExtract entity.
func (eu *EnvironmentUpdate) AddFileExtracts(f ...*FileExtract) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFileExtractIDs(ids...)
}

// AddIncludedNetworkIDs adds the "IncludedNetworks" edge to the IncludedNetwork entity by IDs.
func (eu *EnvironmentUpdate) AddIncludedNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddIncludedNetworkIDs(ids...)
	return eu
}

// AddIncludedNetworks adds the "IncludedNetworks" edges to the IncludedNetwork entity.
func (eu *EnvironmentUpdate) AddIncludedNetworks(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddIncludedNetworkIDs(ids...)
}

// AddFindingIDs adds the "Findings" edge to the Finding entity by IDs.
func (eu *EnvironmentUpdate) AddFindingIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddFindingIDs(ids...)
	return eu
}

// AddFindings adds the "Findings" edges to the Finding entity.
func (eu *EnvironmentUpdate) AddFindings(f ...*Finding) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFindingIDs(ids...)
}

// AddDNSRecordIDs adds the "DNSRecords" edge to the DNSRecord entity by IDs.
func (eu *EnvironmentUpdate) AddDNSRecordIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddDNSRecordIDs(ids...)
	return eu
}

// AddDNSRecords adds the "DNSRecords" edges to the DNSRecord entity.
func (eu *EnvironmentUpdate) AddDNSRecords(d ...*DNSRecord) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDNSRecordIDs(ids...)
}

// AddDNSIDs adds the "DNS" edge to the DNS entity by IDs.
func (eu *EnvironmentUpdate) AddDNSIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddDNSIDs(ids...)
	return eu
}

// AddDNS adds the "DNS" edges to the DNS entity.
func (eu *EnvironmentUpdate) AddDNS(d ...*DNS) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDNSIDs(ids...)
}

// AddNetworkIDs adds the "Networks" edge to the Network entity by IDs.
func (eu *EnvironmentUpdate) AddNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddNetworkIDs(ids...)
	return eu
}

// AddNetworks adds the "Networks" edges to the Network entity.
func (eu *EnvironmentUpdate) AddNetworks(n ...*Network) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddNetworkIDs(ids...)
}

// AddHostDependencyIDs adds the "HostDependencies" edge to the HostDependency entity by IDs.
func (eu *EnvironmentUpdate) AddHostDependencyIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddHostDependencyIDs(ids...)
	return eu
}

// AddHostDependencies adds the "HostDependencies" edges to the HostDependency entity.
func (eu *EnvironmentUpdate) AddHostDependencies(h ...*HostDependency) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddHostDependencyIDs(ids...)
}

// AddAnsibleIDs adds the "Ansibles" edge to the Ansible entity by IDs.
func (eu *EnvironmentUpdate) AddAnsibleIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddAnsibleIDs(ids...)
	return eu
}

// AddAnsibles adds the "Ansibles" edges to the Ansible entity.
func (eu *EnvironmentUpdate) AddAnsibles(a ...*Ansible) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAnsibleIDs(ids...)
}

// AddScheduledStepIDs adds the "ScheduledSteps" edge to the ScheduledStep entity by IDs.
func (eu *EnvironmentUpdate) AddScheduledStepIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddScheduledStepIDs(ids...)
	return eu
}

// AddScheduledSteps adds the "ScheduledSteps" edges to the ScheduledStep entity.
func (eu *EnvironmentUpdate) AddScheduledSteps(s ...*ScheduledStep) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddScheduledStepIDs(ids...)
}

// AddBuildIDs adds the "Builds" edge to the Build entity by IDs.
func (eu *EnvironmentUpdate) AddBuildIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddBuildIDs(ids...)
	return eu
}

// AddBuilds adds the "Builds" edges to the Build entity.
func (eu *EnvironmentUpdate) AddBuilds(b ...*Build) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.AddBuildIDs(ids...)
}

// AddRepositoryIDs adds the "Repositories" edge to the Repository entity by IDs.
func (eu *EnvironmentUpdate) AddRepositoryIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddRepositoryIDs(ids...)
	return eu
}

// AddRepositories adds the "Repositories" edges to the Repository entity.
func (eu *EnvironmentUpdate) AddRepositories(r ...*Repository) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRepositoryIDs(ids...)
}

// AddServerTaskIDs adds the "ServerTasks" edge to the ServerTask entity by IDs.
func (eu *EnvironmentUpdate) AddServerTaskIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.AddServerTaskIDs(ids...)
	return eu
}

// AddServerTasks adds the "ServerTasks" edges to the ServerTask entity.
func (eu *EnvironmentUpdate) AddServerTasks(s ...*ServerTask) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddServerTaskIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (eu *EnvironmentUpdate) Mutation() *EnvironmentMutation {
	return eu.mutation
}

// ClearUsers clears all "Users" edges to the User entity.
func (eu *EnvironmentUpdate) ClearUsers() *EnvironmentUpdate {
	eu.mutation.ClearUsers()
	return eu
}

// RemoveUserIDs removes the "Users" edge to User entities by IDs.
func (eu *EnvironmentUpdate) RemoveUserIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveUserIDs(ids...)
	return eu
}

// RemoveUsers removes "Users" edges to User entities.
func (eu *EnvironmentUpdate) RemoveUsers(u ...*User) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserIDs(ids...)
}

// ClearHosts clears all "Hosts" edges to the Host entity.
func (eu *EnvironmentUpdate) ClearHosts() *EnvironmentUpdate {
	eu.mutation.ClearHosts()
	return eu
}

// RemoveHostIDs removes the "Hosts" edge to Host entities by IDs.
func (eu *EnvironmentUpdate) RemoveHostIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveHostIDs(ids...)
	return eu
}

// RemoveHosts removes "Hosts" edges to Host entities.
func (eu *EnvironmentUpdate) RemoveHosts(h ...*Host) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveHostIDs(ids...)
}

// ClearCompetitions clears all "Competitions" edges to the Competition entity.
func (eu *EnvironmentUpdate) ClearCompetitions() *EnvironmentUpdate {
	eu.mutation.ClearCompetitions()
	return eu
}

// RemoveCompetitionIDs removes the "Competitions" edge to Competition entities by IDs.
func (eu *EnvironmentUpdate) RemoveCompetitionIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveCompetitionIDs(ids...)
	return eu
}

// RemoveCompetitions removes "Competitions" edges to Competition entities.
func (eu *EnvironmentUpdate) RemoveCompetitions(c ...*Competition) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCompetitionIDs(ids...)
}

// ClearIdentities clears all "Identities" edges to the Identity entity.
func (eu *EnvironmentUpdate) ClearIdentities() *EnvironmentUpdate {
	eu.mutation.ClearIdentities()
	return eu
}

// RemoveIdentityIDs removes the "Identities" edge to Identity entities by IDs.
func (eu *EnvironmentUpdate) RemoveIdentityIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveIdentityIDs(ids...)
	return eu
}

// RemoveIdentities removes "Identities" edges to Identity entities.
func (eu *EnvironmentUpdate) RemoveIdentities(i ...*Identity) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveIdentityIDs(ids...)
}

// ClearCommands clears all "Commands" edges to the Command entity.
func (eu *EnvironmentUpdate) ClearCommands() *EnvironmentUpdate {
	eu.mutation.ClearCommands()
	return eu
}

// RemoveCommandIDs removes the "Commands" edge to Command entities by IDs.
func (eu *EnvironmentUpdate) RemoveCommandIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveCommandIDs(ids...)
	return eu
}

// RemoveCommands removes "Commands" edges to Command entities.
func (eu *EnvironmentUpdate) RemoveCommands(c ...*Command) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCommandIDs(ids...)
}

// ClearScripts clears all "Scripts" edges to the Script entity.
func (eu *EnvironmentUpdate) ClearScripts() *EnvironmentUpdate {
	eu.mutation.ClearScripts()
	return eu
}

// RemoveScriptIDs removes the "Scripts" edge to Script entities by IDs.
func (eu *EnvironmentUpdate) RemoveScriptIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveScriptIDs(ids...)
	return eu
}

// RemoveScripts removes "Scripts" edges to Script entities.
func (eu *EnvironmentUpdate) RemoveScripts(s ...*Script) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveScriptIDs(ids...)
}

// ClearFileDownloads clears all "FileDownloads" edges to the FileDownload entity.
func (eu *EnvironmentUpdate) ClearFileDownloads() *EnvironmentUpdate {
	eu.mutation.ClearFileDownloads()
	return eu
}

// RemoveFileDownloadIDs removes the "FileDownloads" edge to FileDownload entities by IDs.
func (eu *EnvironmentUpdate) RemoveFileDownloadIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveFileDownloadIDs(ids...)
	return eu
}

// RemoveFileDownloads removes "FileDownloads" edges to FileDownload entities.
func (eu *EnvironmentUpdate) RemoveFileDownloads(f ...*FileDownload) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFileDownloadIDs(ids...)
}

// ClearFileDeletes clears all "FileDeletes" edges to the FileDelete entity.
func (eu *EnvironmentUpdate) ClearFileDeletes() *EnvironmentUpdate {
	eu.mutation.ClearFileDeletes()
	return eu
}

// RemoveFileDeleteIDs removes the "FileDeletes" edge to FileDelete entities by IDs.
func (eu *EnvironmentUpdate) RemoveFileDeleteIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveFileDeleteIDs(ids...)
	return eu
}

// RemoveFileDeletes removes "FileDeletes" edges to FileDelete entities.
func (eu *EnvironmentUpdate) RemoveFileDeletes(f ...*FileDelete) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFileDeleteIDs(ids...)
}

// ClearFileExtracts clears all "FileExtracts" edges to the FileExtract entity.
func (eu *EnvironmentUpdate) ClearFileExtracts() *EnvironmentUpdate {
	eu.mutation.ClearFileExtracts()
	return eu
}

// RemoveFileExtractIDs removes the "FileExtracts" edge to FileExtract entities by IDs.
func (eu *EnvironmentUpdate) RemoveFileExtractIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveFileExtractIDs(ids...)
	return eu
}

// RemoveFileExtracts removes "FileExtracts" edges to FileExtract entities.
func (eu *EnvironmentUpdate) RemoveFileExtracts(f ...*FileExtract) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFileExtractIDs(ids...)
}

// ClearIncludedNetworks clears all "IncludedNetworks" edges to the IncludedNetwork entity.
func (eu *EnvironmentUpdate) ClearIncludedNetworks() *EnvironmentUpdate {
	eu.mutation.ClearIncludedNetworks()
	return eu
}

// RemoveIncludedNetworkIDs removes the "IncludedNetworks" edge to IncludedNetwork entities by IDs.
func (eu *EnvironmentUpdate) RemoveIncludedNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveIncludedNetworkIDs(ids...)
	return eu
}

// RemoveIncludedNetworks removes "IncludedNetworks" edges to IncludedNetwork entities.
func (eu *EnvironmentUpdate) RemoveIncludedNetworks(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveIncludedNetworkIDs(ids...)
}

// ClearFindings clears all "Findings" edges to the Finding entity.
func (eu *EnvironmentUpdate) ClearFindings() *EnvironmentUpdate {
	eu.mutation.ClearFindings()
	return eu
}

// RemoveFindingIDs removes the "Findings" edge to Finding entities by IDs.
func (eu *EnvironmentUpdate) RemoveFindingIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveFindingIDs(ids...)
	return eu
}

// RemoveFindings removes "Findings" edges to Finding entities.
func (eu *EnvironmentUpdate) RemoveFindings(f ...*Finding) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFindingIDs(ids...)
}

// ClearDNSRecords clears all "DNSRecords" edges to the DNSRecord entity.
func (eu *EnvironmentUpdate) ClearDNSRecords() *EnvironmentUpdate {
	eu.mutation.ClearDNSRecords()
	return eu
}

// RemoveDNSRecordIDs removes the "DNSRecords" edge to DNSRecord entities by IDs.
func (eu *EnvironmentUpdate) RemoveDNSRecordIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveDNSRecordIDs(ids...)
	return eu
}

// RemoveDNSRecords removes "DNSRecords" edges to DNSRecord entities.
func (eu *EnvironmentUpdate) RemoveDNSRecords(d ...*DNSRecord) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDNSRecordIDs(ids...)
}

// ClearDNS clears all "DNS" edges to the DNS entity.
func (eu *EnvironmentUpdate) ClearDNS() *EnvironmentUpdate {
	eu.mutation.ClearDNS()
	return eu
}

// RemoveDNSIDs removes the "DNS" edge to DNS entities by IDs.
func (eu *EnvironmentUpdate) RemoveDNSIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveDNSIDs(ids...)
	return eu
}

// RemoveDNS removes "DNS" edges to DNS entities.
func (eu *EnvironmentUpdate) RemoveDNS(d ...*DNS) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDNSIDs(ids...)
}

// ClearNetworks clears all "Networks" edges to the Network entity.
func (eu *EnvironmentUpdate) ClearNetworks() *EnvironmentUpdate {
	eu.mutation.ClearNetworks()
	return eu
}

// RemoveNetworkIDs removes the "Networks" edge to Network entities by IDs.
func (eu *EnvironmentUpdate) RemoveNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveNetworkIDs(ids...)
	return eu
}

// RemoveNetworks removes "Networks" edges to Network entities.
func (eu *EnvironmentUpdate) RemoveNetworks(n ...*Network) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveNetworkIDs(ids...)
}

// ClearHostDependencies clears all "HostDependencies" edges to the HostDependency entity.
func (eu *EnvironmentUpdate) ClearHostDependencies() *EnvironmentUpdate {
	eu.mutation.ClearHostDependencies()
	return eu
}

// RemoveHostDependencyIDs removes the "HostDependencies" edge to HostDependency entities by IDs.
func (eu *EnvironmentUpdate) RemoveHostDependencyIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveHostDependencyIDs(ids...)
	return eu
}

// RemoveHostDependencies removes "HostDependencies" edges to HostDependency entities.
func (eu *EnvironmentUpdate) RemoveHostDependencies(h ...*HostDependency) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveHostDependencyIDs(ids...)
}

// ClearAnsibles clears all "Ansibles" edges to the Ansible entity.
func (eu *EnvironmentUpdate) ClearAnsibles() *EnvironmentUpdate {
	eu.mutation.ClearAnsibles()
	return eu
}

// RemoveAnsibleIDs removes the "Ansibles" edge to Ansible entities by IDs.
func (eu *EnvironmentUpdate) RemoveAnsibleIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveAnsibleIDs(ids...)
	return eu
}

// RemoveAnsibles removes "Ansibles" edges to Ansible entities.
func (eu *EnvironmentUpdate) RemoveAnsibles(a ...*Ansible) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAnsibleIDs(ids...)
}

// ClearScheduledSteps clears all "ScheduledSteps" edges to the ScheduledStep entity.
func (eu *EnvironmentUpdate) ClearScheduledSteps() *EnvironmentUpdate {
	eu.mutation.ClearScheduledSteps()
	return eu
}

// RemoveScheduledStepIDs removes the "ScheduledSteps" edge to ScheduledStep entities by IDs.
func (eu *EnvironmentUpdate) RemoveScheduledStepIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveScheduledStepIDs(ids...)
	return eu
}

// RemoveScheduledSteps removes "ScheduledSteps" edges to ScheduledStep entities.
func (eu *EnvironmentUpdate) RemoveScheduledSteps(s ...*ScheduledStep) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveScheduledStepIDs(ids...)
}

// ClearBuilds clears all "Builds" edges to the Build entity.
func (eu *EnvironmentUpdate) ClearBuilds() *EnvironmentUpdate {
	eu.mutation.ClearBuilds()
	return eu
}

// RemoveBuildIDs removes the "Builds" edge to Build entities by IDs.
func (eu *EnvironmentUpdate) RemoveBuildIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveBuildIDs(ids...)
	return eu
}

// RemoveBuilds removes "Builds" edges to Build entities.
func (eu *EnvironmentUpdate) RemoveBuilds(b ...*Build) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.RemoveBuildIDs(ids...)
}

// ClearRepositories clears all "Repositories" edges to the Repository entity.
func (eu *EnvironmentUpdate) ClearRepositories() *EnvironmentUpdate {
	eu.mutation.ClearRepositories()
	return eu
}

// RemoveRepositoryIDs removes the "Repositories" edge to Repository entities by IDs.
func (eu *EnvironmentUpdate) RemoveRepositoryIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveRepositoryIDs(ids...)
	return eu
}

// RemoveRepositories removes "Repositories" edges to Repository entities.
func (eu *EnvironmentUpdate) RemoveRepositories(r ...*Repository) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRepositoryIDs(ids...)
}

// ClearServerTasks clears all "ServerTasks" edges to the ServerTask entity.
func (eu *EnvironmentUpdate) ClearServerTasks() *EnvironmentUpdate {
	eu.mutation.ClearServerTasks()
	return eu
}

// RemoveServerTaskIDs removes the "ServerTasks" edge to ServerTask entities by IDs.
func (eu *EnvironmentUpdate) RemoveServerTaskIDs(ids ...uuid.UUID) *EnvironmentUpdate {
	eu.mutation.RemoveServerTaskIDs(ids...)
	return eu
}

// RemoveServerTasks removes "ServerTasks" edges to ServerTask entities.
func (eu *EnvironmentUpdate) RemoveServerTasks(s ...*ServerTask) *EnvironmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveServerTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnvironmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnvironmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnvironmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnvironmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EnvironmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: environment.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldHclID,
		})
	}
	if value, ok := eu.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := eu.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := eu.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := eu.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := eu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldTags,
		})
	}
	if eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.UsersTable,
			Columns: environment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.UsersTable,
			Columns: environment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.UsersTable,
			Columns: environment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostsTable,
			Columns: []string{environment.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedHostsIDs(); len(nodes) > 0 && !eu.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostsTable,
			Columns: []string{environment.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostsTable,
			Columns: []string{environment.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionsTable,
			Columns: []string{environment.CompetitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCompetitionsIDs(); len(nodes) > 0 && !eu.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionsTable,
			Columns: []string{environment.CompetitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CompetitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionsTable,
			Columns: []string{environment.CompetitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.IdentitiesTable,
			Columns: []string{environment.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: identity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !eu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.IdentitiesTable,
			Columns: []string{environment.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.IdentitiesTable,
			Columns: []string{environment.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CommandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CommandsTable,
			Columns: []string{environment.CommandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCommandsIDs(); len(nodes) > 0 && !eu.mutation.CommandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CommandsTable,
			Columns: []string{environment.CommandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CommandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CommandsTable,
			Columns: []string{environment.CommandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ScriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScriptsTable,
			Columns: []string{environment.ScriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedScriptsIDs(); len(nodes) > 0 && !eu.mutation.ScriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScriptsTable,
			Columns: []string{environment.ScriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ScriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScriptsTable,
			Columns: []string{environment.ScriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FileDownloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDownloadsTable,
			Columns: []string{environment.FileDownloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFileDownloadsIDs(); len(nodes) > 0 && !eu.mutation.FileDownloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDownloadsTable,
			Columns: []string{environment.FileDownloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FileDownloadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDownloadsTable,
			Columns: []string{environment.FileDownloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FileDeletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDeletesTable,
			Columns: []string{environment.FileDeletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFileDeletesIDs(); len(nodes) > 0 && !eu.mutation.FileDeletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDeletesTable,
			Columns: []string{environment.FileDeletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FileDeletesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDeletesTable,
			Columns: []string{environment.FileDeletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FileExtractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileExtractsTable,
			Columns: []string{environment.FileExtractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFileExtractsIDs(); len(nodes) > 0 && !eu.mutation.FileExtractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileExtractsTable,
			Columns: []string{environment.FileExtractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FileExtractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileExtractsTable,
			Columns: []string{environment.FileExtractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.IncludedNetworksTable,
			Columns: environment.IncludedNetworksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIncludedNetworksIDs(); len(nodes) > 0 && !eu.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.IncludedNetworksTable,
			Columns: environment.IncludedNetworksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IncludedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.IncludedNetworksTable,
			Columns: environment.IncludedNetworksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FindingsTable,
			Columns: []string{environment.FindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: finding.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFindingsIDs(); len(nodes) > 0 && !eu.mutation.FindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FindingsTable,
			Columns: []string{environment.FindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FindingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FindingsTable,
			Columns: []string{environment.FindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DNSRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.DNSRecordsTable,
			Columns: []string{environment.DNSRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDNSRecordsIDs(); len(nodes) > 0 && !eu.mutation.DNSRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.DNSRecordsTable,
			Columns: []string{environment.DNSRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DNSRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.DNSRecordsTable,
			Columns: []string{environment.DNSRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.DNSTable,
			Columns: environment.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDNSIDs(); len(nodes) > 0 && !eu.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.DNSTable,
			Columns: environment.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.DNSTable,
			Columns: environment.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.NetworksTable,
			Columns: []string{environment.NetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNetworksIDs(); len(nodes) > 0 && !eu.mutation.NetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.NetworksTable,
			Columns: []string{environment.NetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.NetworksTable,
			Columns: []string{environment.NetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostDependenciesTable,
			Columns: []string{environment.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedHostDependenciesIDs(); len(nodes) > 0 && !eu.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostDependenciesTable,
			Columns: []string{environment.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.HostDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostDependenciesTable,
			Columns: []string{environment.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AnsiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.AnsiblesTable,
			Columns: []string{environment.AnsiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAnsiblesIDs(); len(nodes) > 0 && !eu.mutation.AnsiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.AnsiblesTable,
			Columns: []string{environment.AnsiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AnsiblesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.AnsiblesTable,
			Columns: []string{environment.AnsiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScheduledStepsTable,
			Columns: []string{environment.ScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedScheduledStepsIDs(); len(nodes) > 0 && !eu.mutation.ScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScheduledStepsTable,
			Columns: []string{environment.ScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ScheduledStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScheduledStepsTable,
			Columns: []string{environment.ScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.BuildsTable,
			Columns: []string{environment.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedBuildsIDs(); len(nodes) > 0 && !eu.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.BuildsTable,
			Columns: []string{environment.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.BuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.BuildsTable,
			Columns: []string{environment.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.RepositoriesTable,
			Columns: environment.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !eu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.RepositoriesTable,
			Columns: environment.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.RepositoriesTable,
			Columns: environment.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.ServerTasksTable,
			Columns: []string{environment.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedServerTasksIDs(); len(nodes) > 0 && !eu.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.ServerTasksTable,
			Columns: []string{environment.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.ServerTasksTable,
			Columns: []string{environment.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EnvironmentUpdateOne is the builder for updating a single Environment entity.
type EnvironmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnvironmentMutation
}

// SetHclID sets the "hcl_id" field.
func (euo *EnvironmentUpdateOne) SetHclID(s string) *EnvironmentUpdateOne {
	euo.mutation.SetHclID(s)
	return euo
}

// SetCompetitionID sets the "competition_id" field.
func (euo *EnvironmentUpdateOne) SetCompetitionID(s string) *EnvironmentUpdateOne {
	euo.mutation.SetCompetitionID(s)
	return euo
}

// SetName sets the "name" field.
func (euo *EnvironmentUpdateOne) SetName(s string) *EnvironmentUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetDescription sets the "description" field.
func (euo *EnvironmentUpdateOne) SetDescription(s string) *EnvironmentUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetBuilder sets the "builder" field.
func (euo *EnvironmentUpdateOne) SetBuilder(s string) *EnvironmentUpdateOne {
	euo.mutation.SetBuilder(s)
	return euo
}

// SetTeamCount sets the "team_count" field.
func (euo *EnvironmentUpdateOne) SetTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetTeamCount()
	euo.mutation.SetTeamCount(i)
	return euo
}

// AddTeamCount adds i to the "team_count" field.
func (euo *EnvironmentUpdateOne) AddTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.AddTeamCount(i)
	return euo
}

// SetRevision sets the "revision" field.
func (euo *EnvironmentUpdateOne) SetRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetRevision()
	euo.mutation.SetRevision(i)
	return euo
}

// AddRevision adds i to the "revision" field.
func (euo *EnvironmentUpdateOne) AddRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.AddRevision(i)
	return euo
}

// SetAdminCidrs sets the "admin_cidrs" field.
func (euo *EnvironmentUpdateOne) SetAdminCidrs(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetAdminCidrs(s)
	return euo
}

// SetExposedVdiPorts sets the "exposed_vdi_ports" field.
func (euo *EnvironmentUpdateOne) SetExposedVdiPorts(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetExposedVdiPorts(s)
	return euo
}

// SetConfig sets the "config" field.
func (euo *EnvironmentUpdateOne) SetConfig(m map[string]string) *EnvironmentUpdateOne {
	euo.mutation.SetConfig(m)
	return euo
}

// SetTags sets the "tags" field.
func (euo *EnvironmentUpdateOne) SetTags(m map[string]string) *EnvironmentUpdateOne {
	euo.mutation.SetTags(m)
	return euo
}

// AddUserIDs adds the "Users" edge to the User entity by IDs.
func (euo *EnvironmentUpdateOne) AddUserIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddUserIDs(ids...)
	return euo
}

// AddUsers adds the "Users" edges to the User entity.
func (euo *EnvironmentUpdateOne) AddUsers(u ...*User) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserIDs(ids...)
}

// AddHostIDs adds the "Hosts" edge to the Host entity by IDs.
func (euo *EnvironmentUpdateOne) AddHostIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddHostIDs(ids...)
	return euo
}

// AddHosts adds the "Hosts" edges to the Host entity.
func (euo *EnvironmentUpdateOne) AddHosts(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddHostIDs(ids...)
}

// AddCompetitionIDs adds the "Competitions" edge to the Competition entity by IDs.
func (euo *EnvironmentUpdateOne) AddCompetitionIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddCompetitionIDs(ids...)
	return euo
}

// AddCompetitions adds the "Competitions" edges to the Competition entity.
func (euo *EnvironmentUpdateOne) AddCompetitions(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCompetitionIDs(ids...)
}

// AddIdentityIDs adds the "Identities" edge to the Identity entity by IDs.
func (euo *EnvironmentUpdateOne) AddIdentityIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddIdentityIDs(ids...)
	return euo
}

// AddIdentities adds the "Identities" edges to the Identity entity.
func (euo *EnvironmentUpdateOne) AddIdentities(i ...*Identity) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddIdentityIDs(ids...)
}

// AddCommandIDs adds the "Commands" edge to the Command entity by IDs.
func (euo *EnvironmentUpdateOne) AddCommandIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddCommandIDs(ids...)
	return euo
}

// AddCommands adds the "Commands" edges to the Command entity.
func (euo *EnvironmentUpdateOne) AddCommands(c ...*Command) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCommandIDs(ids...)
}

// AddScriptIDs adds the "Scripts" edge to the Script entity by IDs.
func (euo *EnvironmentUpdateOne) AddScriptIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddScriptIDs(ids...)
	return euo
}

// AddScripts adds the "Scripts" edges to the Script entity.
func (euo *EnvironmentUpdateOne) AddScripts(s ...*Script) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddScriptIDs(ids...)
}

// AddFileDownloadIDs adds the "FileDownloads" edge to the FileDownload entity by IDs.
func (euo *EnvironmentUpdateOne) AddFileDownloadIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddFileDownloadIDs(ids...)
	return euo
}

// AddFileDownloads adds the "FileDownloads" edges to the FileDownload entity.
func (euo *EnvironmentUpdateOne) AddFileDownloads(f ...*FileDownload) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFileDownloadIDs(ids...)
}

// AddFileDeleteIDs adds the "FileDeletes" edge to the FileDelete entity by IDs.
func (euo *EnvironmentUpdateOne) AddFileDeleteIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddFileDeleteIDs(ids...)
	return euo
}

// AddFileDeletes adds the "FileDeletes" edges to the FileDelete entity.
func (euo *EnvironmentUpdateOne) AddFileDeletes(f ...*FileDelete) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFileDeleteIDs(ids...)
}

// AddFileExtractIDs adds the "FileExtracts" edge to the FileExtract entity by IDs.
func (euo *EnvironmentUpdateOne) AddFileExtractIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddFileExtractIDs(ids...)
	return euo
}

// AddFileExtracts adds the "FileExtracts" edges to the FileExtract entity.
func (euo *EnvironmentUpdateOne) AddFileExtracts(f ...*FileExtract) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFileExtractIDs(ids...)
}

// AddIncludedNetworkIDs adds the "IncludedNetworks" edge to the IncludedNetwork entity by IDs.
func (euo *EnvironmentUpdateOne) AddIncludedNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddIncludedNetworkIDs(ids...)
	return euo
}

// AddIncludedNetworks adds the "IncludedNetworks" edges to the IncludedNetwork entity.
func (euo *EnvironmentUpdateOne) AddIncludedNetworks(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddIncludedNetworkIDs(ids...)
}

// AddFindingIDs adds the "Findings" edge to the Finding entity by IDs.
func (euo *EnvironmentUpdateOne) AddFindingIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddFindingIDs(ids...)
	return euo
}

// AddFindings adds the "Findings" edges to the Finding entity.
func (euo *EnvironmentUpdateOne) AddFindings(f ...*Finding) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFindingIDs(ids...)
}

// AddDNSRecordIDs adds the "DNSRecords" edge to the DNSRecord entity by IDs.
func (euo *EnvironmentUpdateOne) AddDNSRecordIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddDNSRecordIDs(ids...)
	return euo
}

// AddDNSRecords adds the "DNSRecords" edges to the DNSRecord entity.
func (euo *EnvironmentUpdateOne) AddDNSRecords(d ...*DNSRecord) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDNSRecordIDs(ids...)
}

// AddDNSIDs adds the "DNS" edge to the DNS entity by IDs.
func (euo *EnvironmentUpdateOne) AddDNSIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddDNSIDs(ids...)
	return euo
}

// AddDNS adds the "DNS" edges to the DNS entity.
func (euo *EnvironmentUpdateOne) AddDNS(d ...*DNS) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDNSIDs(ids...)
}

// AddNetworkIDs adds the "Networks" edge to the Network entity by IDs.
func (euo *EnvironmentUpdateOne) AddNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddNetworkIDs(ids...)
	return euo
}

// AddNetworks adds the "Networks" edges to the Network entity.
func (euo *EnvironmentUpdateOne) AddNetworks(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddNetworkIDs(ids...)
}

// AddHostDependencyIDs adds the "HostDependencies" edge to the HostDependency entity by IDs.
func (euo *EnvironmentUpdateOne) AddHostDependencyIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddHostDependencyIDs(ids...)
	return euo
}

// AddHostDependencies adds the "HostDependencies" edges to the HostDependency entity.
func (euo *EnvironmentUpdateOne) AddHostDependencies(h ...*HostDependency) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddHostDependencyIDs(ids...)
}

// AddAnsibleIDs adds the "Ansibles" edge to the Ansible entity by IDs.
func (euo *EnvironmentUpdateOne) AddAnsibleIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddAnsibleIDs(ids...)
	return euo
}

// AddAnsibles adds the "Ansibles" edges to the Ansible entity.
func (euo *EnvironmentUpdateOne) AddAnsibles(a ...*Ansible) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAnsibleIDs(ids...)
}

// AddScheduledStepIDs adds the "ScheduledSteps" edge to the ScheduledStep entity by IDs.
func (euo *EnvironmentUpdateOne) AddScheduledStepIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddScheduledStepIDs(ids...)
	return euo
}

// AddScheduledSteps adds the "ScheduledSteps" edges to the ScheduledStep entity.
func (euo *EnvironmentUpdateOne) AddScheduledSteps(s ...*ScheduledStep) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddScheduledStepIDs(ids...)
}

// AddBuildIDs adds the "Builds" edge to the Build entity by IDs.
func (euo *EnvironmentUpdateOne) AddBuildIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddBuildIDs(ids...)
	return euo
}

// AddBuilds adds the "Builds" edges to the Build entity.
func (euo *EnvironmentUpdateOne) AddBuilds(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.AddBuildIDs(ids...)
}

// AddRepositoryIDs adds the "Repositories" edge to the Repository entity by IDs.
func (euo *EnvironmentUpdateOne) AddRepositoryIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddRepositoryIDs(ids...)
	return euo
}

// AddRepositories adds the "Repositories" edges to the Repository entity.
func (euo *EnvironmentUpdateOne) AddRepositories(r ...*Repository) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRepositoryIDs(ids...)
}

// AddServerTaskIDs adds the "ServerTasks" edge to the ServerTask entity by IDs.
func (euo *EnvironmentUpdateOne) AddServerTaskIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.AddServerTaskIDs(ids...)
	return euo
}

// AddServerTasks adds the "ServerTasks" edges to the ServerTask entity.
func (euo *EnvironmentUpdateOne) AddServerTasks(s ...*ServerTask) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddServerTaskIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (euo *EnvironmentUpdateOne) Mutation() *EnvironmentMutation {
	return euo.mutation
}

// ClearUsers clears all "Users" edges to the User entity.
func (euo *EnvironmentUpdateOne) ClearUsers() *EnvironmentUpdateOne {
	euo.mutation.ClearUsers()
	return euo
}

// RemoveUserIDs removes the "Users" edge to User entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveUserIDs(ids...)
	return euo
}

// RemoveUsers removes "Users" edges to User entities.
func (euo *EnvironmentUpdateOne) RemoveUsers(u ...*User) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserIDs(ids...)
}

// ClearHosts clears all "Hosts" edges to the Host entity.
func (euo *EnvironmentUpdateOne) ClearHosts() *EnvironmentUpdateOne {
	euo.mutation.ClearHosts()
	return euo
}

// RemoveHostIDs removes the "Hosts" edge to Host entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveHostIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveHostIDs(ids...)
	return euo
}

// RemoveHosts removes "Hosts" edges to Host entities.
func (euo *EnvironmentUpdateOne) RemoveHosts(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveHostIDs(ids...)
}

// ClearCompetitions clears all "Competitions" edges to the Competition entity.
func (euo *EnvironmentUpdateOne) ClearCompetitions() *EnvironmentUpdateOne {
	euo.mutation.ClearCompetitions()
	return euo
}

// RemoveCompetitionIDs removes the "Competitions" edge to Competition entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveCompetitionIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveCompetitionIDs(ids...)
	return euo
}

// RemoveCompetitions removes "Competitions" edges to Competition entities.
func (euo *EnvironmentUpdateOne) RemoveCompetitions(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCompetitionIDs(ids...)
}

// ClearIdentities clears all "Identities" edges to the Identity entity.
func (euo *EnvironmentUpdateOne) ClearIdentities() *EnvironmentUpdateOne {
	euo.mutation.ClearIdentities()
	return euo
}

// RemoveIdentityIDs removes the "Identities" edge to Identity entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveIdentityIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveIdentityIDs(ids...)
	return euo
}

// RemoveIdentities removes "Identities" edges to Identity entities.
func (euo *EnvironmentUpdateOne) RemoveIdentities(i ...*Identity) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveIdentityIDs(ids...)
}

// ClearCommands clears all "Commands" edges to the Command entity.
func (euo *EnvironmentUpdateOne) ClearCommands() *EnvironmentUpdateOne {
	euo.mutation.ClearCommands()
	return euo
}

// RemoveCommandIDs removes the "Commands" edge to Command entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveCommandIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveCommandIDs(ids...)
	return euo
}

// RemoveCommands removes "Commands" edges to Command entities.
func (euo *EnvironmentUpdateOne) RemoveCommands(c ...*Command) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCommandIDs(ids...)
}

// ClearScripts clears all "Scripts" edges to the Script entity.
func (euo *EnvironmentUpdateOne) ClearScripts() *EnvironmentUpdateOne {
	euo.mutation.ClearScripts()
	return euo
}

// RemoveScriptIDs removes the "Scripts" edge to Script entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveScriptIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveScriptIDs(ids...)
	return euo
}

// RemoveScripts removes "Scripts" edges to Script entities.
func (euo *EnvironmentUpdateOne) RemoveScripts(s ...*Script) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveScriptIDs(ids...)
}

// ClearFileDownloads clears all "FileDownloads" edges to the FileDownload entity.
func (euo *EnvironmentUpdateOne) ClearFileDownloads() *EnvironmentUpdateOne {
	euo.mutation.ClearFileDownloads()
	return euo
}

// RemoveFileDownloadIDs removes the "FileDownloads" edge to FileDownload entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveFileDownloadIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveFileDownloadIDs(ids...)
	return euo
}

// RemoveFileDownloads removes "FileDownloads" edges to FileDownload entities.
func (euo *EnvironmentUpdateOne) RemoveFileDownloads(f ...*FileDownload) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFileDownloadIDs(ids...)
}

// ClearFileDeletes clears all "FileDeletes" edges to the FileDelete entity.
func (euo *EnvironmentUpdateOne) ClearFileDeletes() *EnvironmentUpdateOne {
	euo.mutation.ClearFileDeletes()
	return euo
}

// RemoveFileDeleteIDs removes the "FileDeletes" edge to FileDelete entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveFileDeleteIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveFileDeleteIDs(ids...)
	return euo
}

// RemoveFileDeletes removes "FileDeletes" edges to FileDelete entities.
func (euo *EnvironmentUpdateOne) RemoveFileDeletes(f ...*FileDelete) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFileDeleteIDs(ids...)
}

// ClearFileExtracts clears all "FileExtracts" edges to the FileExtract entity.
func (euo *EnvironmentUpdateOne) ClearFileExtracts() *EnvironmentUpdateOne {
	euo.mutation.ClearFileExtracts()
	return euo
}

// RemoveFileExtractIDs removes the "FileExtracts" edge to FileExtract entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveFileExtractIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveFileExtractIDs(ids...)
	return euo
}

// RemoveFileExtracts removes "FileExtracts" edges to FileExtract entities.
func (euo *EnvironmentUpdateOne) RemoveFileExtracts(f ...*FileExtract) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFileExtractIDs(ids...)
}

// ClearIncludedNetworks clears all "IncludedNetworks" edges to the IncludedNetwork entity.
func (euo *EnvironmentUpdateOne) ClearIncludedNetworks() *EnvironmentUpdateOne {
	euo.mutation.ClearIncludedNetworks()
	return euo
}

// RemoveIncludedNetworkIDs removes the "IncludedNetworks" edge to IncludedNetwork entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveIncludedNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveIncludedNetworkIDs(ids...)
	return euo
}

// RemoveIncludedNetworks removes "IncludedNetworks" edges to IncludedNetwork entities.
func (euo *EnvironmentUpdateOne) RemoveIncludedNetworks(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveIncludedNetworkIDs(ids...)
}

// ClearFindings clears all "Findings" edges to the Finding entity.
func (euo *EnvironmentUpdateOne) ClearFindings() *EnvironmentUpdateOne {
	euo.mutation.ClearFindings()
	return euo
}

// RemoveFindingIDs removes the "Findings" edge to Finding entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveFindingIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveFindingIDs(ids...)
	return euo
}

// RemoveFindings removes "Findings" edges to Finding entities.
func (euo *EnvironmentUpdateOne) RemoveFindings(f ...*Finding) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFindingIDs(ids...)
}

// ClearDNSRecords clears all "DNSRecords" edges to the DNSRecord entity.
func (euo *EnvironmentUpdateOne) ClearDNSRecords() *EnvironmentUpdateOne {
	euo.mutation.ClearDNSRecords()
	return euo
}

// RemoveDNSRecordIDs removes the "DNSRecords" edge to DNSRecord entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveDNSRecordIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveDNSRecordIDs(ids...)
	return euo
}

// RemoveDNSRecords removes "DNSRecords" edges to DNSRecord entities.
func (euo *EnvironmentUpdateOne) RemoveDNSRecords(d ...*DNSRecord) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDNSRecordIDs(ids...)
}

// ClearDNS clears all "DNS" edges to the DNS entity.
func (euo *EnvironmentUpdateOne) ClearDNS() *EnvironmentUpdateOne {
	euo.mutation.ClearDNS()
	return euo
}

// RemoveDNSIDs removes the "DNS" edge to DNS entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveDNSIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveDNSIDs(ids...)
	return euo
}

// RemoveDNS removes "DNS" edges to DNS entities.
func (euo *EnvironmentUpdateOne) RemoveDNS(d ...*DNS) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDNSIDs(ids...)
}

// ClearNetworks clears all "Networks" edges to the Network entity.
func (euo *EnvironmentUpdateOne) ClearNetworks() *EnvironmentUpdateOne {
	euo.mutation.ClearNetworks()
	return euo
}

// RemoveNetworkIDs removes the "Networks" edge to Network entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveNetworkIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveNetworkIDs(ids...)
	return euo
}

// RemoveNetworks removes "Networks" edges to Network entities.
func (euo *EnvironmentUpdateOne) RemoveNetworks(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveNetworkIDs(ids...)
}

// ClearHostDependencies clears all "HostDependencies" edges to the HostDependency entity.
func (euo *EnvironmentUpdateOne) ClearHostDependencies() *EnvironmentUpdateOne {
	euo.mutation.ClearHostDependencies()
	return euo
}

// RemoveHostDependencyIDs removes the "HostDependencies" edge to HostDependency entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveHostDependencyIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveHostDependencyIDs(ids...)
	return euo
}

// RemoveHostDependencies removes "HostDependencies" edges to HostDependency entities.
func (euo *EnvironmentUpdateOne) RemoveHostDependencies(h ...*HostDependency) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveHostDependencyIDs(ids...)
}

// ClearAnsibles clears all "Ansibles" edges to the Ansible entity.
func (euo *EnvironmentUpdateOne) ClearAnsibles() *EnvironmentUpdateOne {
	euo.mutation.ClearAnsibles()
	return euo
}

// RemoveAnsibleIDs removes the "Ansibles" edge to Ansible entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveAnsibleIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveAnsibleIDs(ids...)
	return euo
}

// RemoveAnsibles removes "Ansibles" edges to Ansible entities.
func (euo *EnvironmentUpdateOne) RemoveAnsibles(a ...*Ansible) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAnsibleIDs(ids...)
}

// ClearScheduledSteps clears all "ScheduledSteps" edges to the ScheduledStep entity.
func (euo *EnvironmentUpdateOne) ClearScheduledSteps() *EnvironmentUpdateOne {
	euo.mutation.ClearScheduledSteps()
	return euo
}

// RemoveScheduledStepIDs removes the "ScheduledSteps" edge to ScheduledStep entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveScheduledStepIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveScheduledStepIDs(ids...)
	return euo
}

// RemoveScheduledSteps removes "ScheduledSteps" edges to ScheduledStep entities.
func (euo *EnvironmentUpdateOne) RemoveScheduledSteps(s ...*ScheduledStep) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveScheduledStepIDs(ids...)
}

// ClearBuilds clears all "Builds" edges to the Build entity.
func (euo *EnvironmentUpdateOne) ClearBuilds() *EnvironmentUpdateOne {
	euo.mutation.ClearBuilds()
	return euo
}

// RemoveBuildIDs removes the "Builds" edge to Build entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveBuildIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveBuildIDs(ids...)
	return euo
}

// RemoveBuilds removes "Builds" edges to Build entities.
func (euo *EnvironmentUpdateOne) RemoveBuilds(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.RemoveBuildIDs(ids...)
}

// ClearRepositories clears all "Repositories" edges to the Repository entity.
func (euo *EnvironmentUpdateOne) ClearRepositories() *EnvironmentUpdateOne {
	euo.mutation.ClearRepositories()
	return euo
}

// RemoveRepositoryIDs removes the "Repositories" edge to Repository entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveRepositoryIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveRepositoryIDs(ids...)
	return euo
}

// RemoveRepositories removes "Repositories" edges to Repository entities.
func (euo *EnvironmentUpdateOne) RemoveRepositories(r ...*Repository) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRepositoryIDs(ids...)
}

// ClearServerTasks clears all "ServerTasks" edges to the ServerTask entity.
func (euo *EnvironmentUpdateOne) ClearServerTasks() *EnvironmentUpdateOne {
	euo.mutation.ClearServerTasks()
	return euo
}

// RemoveServerTaskIDs removes the "ServerTasks" edge to ServerTask entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveServerTaskIDs(ids ...uuid.UUID) *EnvironmentUpdateOne {
	euo.mutation.RemoveServerTaskIDs(ids...)
	return euo
}

// RemoveServerTasks removes "ServerTasks" edges to ServerTask entities.
func (euo *EnvironmentUpdateOne) RemoveServerTasks(s ...*ServerTask) *EnvironmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveServerTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnvironmentUpdateOne) Select(field string, fields ...string) *EnvironmentUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Environment entity.
func (euo *EnvironmentUpdateOne) Save(ctx context.Context) (*Environment, error) {
	var (
		err  error
		node *Environment
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Environment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnvironmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) SaveX(ctx context.Context) *Environment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnvironmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EnvironmentUpdateOne) sqlSave(ctx context.Context) (_node *Environment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: environment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Environment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, environment.FieldID)
		for _, f := range fields {
			if !environment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != environment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldHclID,
		})
	}
	if value, ok := euo.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := euo.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := euo.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := euo.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := euo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldTags,
		})
	}
	if euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.UsersTable,
			Columns: environment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.UsersTable,
			Columns: environment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.UsersTable,
			Columns: environment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostsTable,
			Columns: []string{environment.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedHostsIDs(); len(nodes) > 0 && !euo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostsTable,
			Columns: []string{environment.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostsTable,
			Columns: []string{environment.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionsTable,
			Columns: []string{environment.CompetitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCompetitionsIDs(); len(nodes) > 0 && !euo.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionsTable,
			Columns: []string{environment.CompetitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CompetitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionsTable,
			Columns: []string{environment.CompetitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.IdentitiesTable,
			Columns: []string{environment.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: identity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !euo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.IdentitiesTable,
			Columns: []string{environment.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.IdentitiesTable,
			Columns: []string{environment.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CommandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CommandsTable,
			Columns: []string{environment.CommandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCommandsIDs(); len(nodes) > 0 && !euo.mutation.CommandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CommandsTable,
			Columns: []string{environment.CommandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CommandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CommandsTable,
			Columns: []string{environment.CommandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ScriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScriptsTable,
			Columns: []string{environment.ScriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedScriptsIDs(); len(nodes) > 0 && !euo.mutation.ScriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScriptsTable,
			Columns: []string{environment.ScriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ScriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScriptsTable,
			Columns: []string{environment.ScriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FileDownloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDownloadsTable,
			Columns: []string{environment.FileDownloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFileDownloadsIDs(); len(nodes) > 0 && !euo.mutation.FileDownloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDownloadsTable,
			Columns: []string{environment.FileDownloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FileDownloadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDownloadsTable,
			Columns: []string{environment.FileDownloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FileDeletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDeletesTable,
			Columns: []string{environment.FileDeletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFileDeletesIDs(); len(nodes) > 0 && !euo.mutation.FileDeletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDeletesTable,
			Columns: []string{environment.FileDeletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FileDeletesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileDeletesTable,
			Columns: []string{environment.FileDeletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FileExtractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileExtractsTable,
			Columns: []string{environment.FileExtractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFileExtractsIDs(); len(nodes) > 0 && !euo.mutation.FileExtractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileExtractsTable,
			Columns: []string{environment.FileExtractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FileExtractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FileExtractsTable,
			Columns: []string{environment.FileExtractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.IncludedNetworksTable,
			Columns: environment.IncludedNetworksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIncludedNetworksIDs(); len(nodes) > 0 && !euo.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.IncludedNetworksTable,
			Columns: environment.IncludedNetworksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IncludedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.IncludedNetworksTable,
			Columns: environment.IncludedNetworksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FindingsTable,
			Columns: []string{environment.FindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: finding.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFindingsIDs(); len(nodes) > 0 && !euo.mutation.FindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FindingsTable,
			Columns: []string{environment.FindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FindingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.FindingsTable,
			Columns: []string{environment.FindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DNSRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.DNSRecordsTable,
			Columns: []string{environment.DNSRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDNSRecordsIDs(); len(nodes) > 0 && !euo.mutation.DNSRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.DNSRecordsTable,
			Columns: []string{environment.DNSRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DNSRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.DNSRecordsTable,
			Columns: []string{environment.DNSRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.DNSTable,
			Columns: environment.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDNSIDs(); len(nodes) > 0 && !euo.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.DNSTable,
			Columns: environment.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.DNSTable,
			Columns: environment.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.NetworksTable,
			Columns: []string{environment.NetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNetworksIDs(); len(nodes) > 0 && !euo.mutation.NetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.NetworksTable,
			Columns: []string{environment.NetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.NetworksTable,
			Columns: []string{environment.NetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostDependenciesTable,
			Columns: []string{environment.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedHostDependenciesIDs(); len(nodes) > 0 && !euo.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostDependenciesTable,
			Columns: []string{environment.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.HostDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostDependenciesTable,
			Columns: []string{environment.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AnsiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.AnsiblesTable,
			Columns: []string{environment.AnsiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAnsiblesIDs(); len(nodes) > 0 && !euo.mutation.AnsiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.AnsiblesTable,
			Columns: []string{environment.AnsiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AnsiblesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.AnsiblesTable,
			Columns: []string{environment.AnsiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScheduledStepsTable,
			Columns: []string{environment.ScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedScheduledStepsIDs(); len(nodes) > 0 && !euo.mutation.ScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScheduledStepsTable,
			Columns: []string{environment.ScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ScheduledStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.ScheduledStepsTable,
			Columns: []string{environment.ScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.BuildsTable,
			Columns: []string{environment.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedBuildsIDs(); len(nodes) > 0 && !euo.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.BuildsTable,
			Columns: []string{environment.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.BuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.BuildsTable,
			Columns: []string{environment.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.RepositoriesTable,
			Columns: environment.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !euo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.RepositoriesTable,
			Columns: environment.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.RepositoriesTable,
			Columns: environment.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.ServerTasksTable,
			Columns: []string{environment.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedServerTasksIDs(); len(nodes) > 0 && !euo.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.ServerTasksTable,
			Columns: []string{environment.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.ServerTasksTable,
			Columns: []string{environment.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Environment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
