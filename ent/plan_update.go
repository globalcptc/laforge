// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/plandiff"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetStepNumber sets the "step_number" field.
func (pu *PlanUpdate) SetStepNumber(i int) *PlanUpdate {
	pu.mutation.ResetStepNumber()
	pu.mutation.SetStepNumber(i)
	return pu
}

// AddStepNumber adds i to the "step_number" field.
func (pu *PlanUpdate) AddStepNumber(i int) *PlanUpdate {
	pu.mutation.AddStepNumber(i)
	return pu
}

// SetType sets the "type" field.
func (pu *PlanUpdate) SetType(pl plan.Type) *PlanUpdate {
	pu.mutation.SetType(pl)
	return pu
}

// AddPrevPlanIDs adds the "PrevPlans" edge to the Plan entity by IDs.
func (pu *PlanUpdate) AddPrevPlanIDs(ids ...uuid.UUID) *PlanUpdate {
	pu.mutation.AddPrevPlanIDs(ids...)
	return pu
}

// AddPrevPlans adds the "PrevPlans" edges to the Plan entity.
func (pu *PlanUpdate) AddPrevPlans(p ...*Plan) *PlanUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPrevPlanIDs(ids...)
}

// AddNextPlanIDs adds the "NextPlans" edge to the Plan entity by IDs.
func (pu *PlanUpdate) AddNextPlanIDs(ids ...uuid.UUID) *PlanUpdate {
	pu.mutation.AddNextPlanIDs(ids...)
	return pu
}

// AddNextPlans adds the "NextPlans" edges to the Plan entity.
func (pu *PlanUpdate) AddNextPlans(p ...*Plan) *PlanUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddNextPlanIDs(ids...)
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (pu *PlanUpdate) SetBuildID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetBuildID(id)
	return pu
}

// SetNillableBuildID sets the "Build" edge to the Build entity by ID if the given value is not nil.
func (pu *PlanUpdate) SetNillableBuildID(id *uuid.UUID) *PlanUpdate {
	if id != nil {
		pu = pu.SetBuildID(*id)
	}
	return pu
}

// SetBuild sets the "Build" edge to the Build entity.
func (pu *PlanUpdate) SetBuild(b *Build) *PlanUpdate {
	return pu.SetBuildID(b.ID)
}

// SetTeamID sets the "Team" edge to the Team entity by ID.
func (pu *PlanUpdate) SetTeamID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetTeamID(id)
	return pu
}

// SetNillableTeamID sets the "Team" edge to the Team entity by ID if the given value is not nil.
func (pu *PlanUpdate) SetNillableTeamID(id *uuid.UUID) *PlanUpdate {
	if id != nil {
		pu = pu.SetTeamID(*id)
	}
	return pu
}

// SetTeam sets the "Team" edge to the Team entity.
func (pu *PlanUpdate) SetTeam(t *Team) *PlanUpdate {
	return pu.SetTeamID(t.ID)
}

// SetProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (pu *PlanUpdate) SetProvisionedNetworkID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetProvisionedNetworkID(id)
	return pu
}

// SetNillableProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID if the given value is not nil.
func (pu *PlanUpdate) SetNillableProvisionedNetworkID(id *uuid.UUID) *PlanUpdate {
	if id != nil {
		pu = pu.SetProvisionedNetworkID(*id)
	}
	return pu
}

// SetProvisionedNetwork sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (pu *PlanUpdate) SetProvisionedNetwork(p *ProvisionedNetwork) *PlanUpdate {
	return pu.SetProvisionedNetworkID(p.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (pu *PlanUpdate) SetProvisionedHostID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetProvisionedHostID(id)
	return pu
}

// SetNillableProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (pu *PlanUpdate) SetNillableProvisionedHostID(id *uuid.UUID) *PlanUpdate {
	if id != nil {
		pu = pu.SetProvisionedHostID(*id)
	}
	return pu
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (pu *PlanUpdate) SetProvisionedHost(p *ProvisionedHost) *PlanUpdate {
	return pu.SetProvisionedHostID(p.ID)
}

// SetProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID.
func (pu *PlanUpdate) SetProvisioningStepID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetProvisioningStepID(id)
	return pu
}

// SetNillableProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID if the given value is not nil.
func (pu *PlanUpdate) SetNillableProvisioningStepID(id *uuid.UUID) *PlanUpdate {
	if id != nil {
		pu = pu.SetProvisioningStepID(*id)
	}
	return pu
}

// SetProvisioningStep sets the "ProvisioningStep" edge to the ProvisioningStep entity.
func (pu *PlanUpdate) SetProvisioningStep(p *ProvisioningStep) *PlanUpdate {
	return pu.SetProvisioningStepID(p.ID)
}

// SetProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID.
func (pu *PlanUpdate) SetProvisioningScheduledStepID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetProvisioningScheduledStepID(id)
	return pu
}

// SetNillableProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID if the given value is not nil.
func (pu *PlanUpdate) SetNillableProvisioningScheduledStepID(id *uuid.UUID) *PlanUpdate {
	if id != nil {
		pu = pu.SetProvisioningScheduledStepID(*id)
	}
	return pu
}

// SetProvisioningScheduledStep sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (pu *PlanUpdate) SetProvisioningScheduledStep(p *ProvisioningScheduledStep) *PlanUpdate {
	return pu.SetProvisioningScheduledStepID(p.ID)
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (pu *PlanUpdate) SetStatusID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetStatusID(id)
	return pu
}

// SetStatus sets the "Status" edge to the Status entity.
func (pu *PlanUpdate) SetStatus(s *Status) *PlanUpdate {
	return pu.SetStatusID(s.ID)
}

// AddPlanDiffIDs adds the "PlanDiffs" edge to the PlanDiff entity by IDs.
func (pu *PlanUpdate) AddPlanDiffIDs(ids ...uuid.UUID) *PlanUpdate {
	pu.mutation.AddPlanDiffIDs(ids...)
	return pu
}

// AddPlanDiffs adds the "PlanDiffs" edges to the PlanDiff entity.
func (pu *PlanUpdate) AddPlanDiffs(p ...*PlanDiff) *PlanUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlanDiffIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// ClearPrevPlans clears all "PrevPlans" edges to the Plan entity.
func (pu *PlanUpdate) ClearPrevPlans() *PlanUpdate {
	pu.mutation.ClearPrevPlans()
	return pu
}

// RemovePrevPlanIDs removes the "PrevPlans" edge to Plan entities by IDs.
func (pu *PlanUpdate) RemovePrevPlanIDs(ids ...uuid.UUID) *PlanUpdate {
	pu.mutation.RemovePrevPlanIDs(ids...)
	return pu
}

// RemovePrevPlans removes "PrevPlans" edges to Plan entities.
func (pu *PlanUpdate) RemovePrevPlans(p ...*Plan) *PlanUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePrevPlanIDs(ids...)
}

// ClearNextPlans clears all "NextPlans" edges to the Plan entity.
func (pu *PlanUpdate) ClearNextPlans() *PlanUpdate {
	pu.mutation.ClearNextPlans()
	return pu
}

// RemoveNextPlanIDs removes the "NextPlans" edge to Plan entities by IDs.
func (pu *PlanUpdate) RemoveNextPlanIDs(ids ...uuid.UUID) *PlanUpdate {
	pu.mutation.RemoveNextPlanIDs(ids...)
	return pu
}

// RemoveNextPlans removes "NextPlans" edges to Plan entities.
func (pu *PlanUpdate) RemoveNextPlans(p ...*Plan) *PlanUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveNextPlanIDs(ids...)
}

// ClearBuild clears the "Build" edge to the Build entity.
func (pu *PlanUpdate) ClearBuild() *PlanUpdate {
	pu.mutation.ClearBuild()
	return pu
}

// ClearTeam clears the "Team" edge to the Team entity.
func (pu *PlanUpdate) ClearTeam() *PlanUpdate {
	pu.mutation.ClearTeam()
	return pu
}

// ClearProvisionedNetwork clears the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (pu *PlanUpdate) ClearProvisionedNetwork() *PlanUpdate {
	pu.mutation.ClearProvisionedNetwork()
	return pu
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (pu *PlanUpdate) ClearProvisionedHost() *PlanUpdate {
	pu.mutation.ClearProvisionedHost()
	return pu
}

// ClearProvisioningStep clears the "ProvisioningStep" edge to the ProvisioningStep entity.
func (pu *PlanUpdate) ClearProvisioningStep() *PlanUpdate {
	pu.mutation.ClearProvisioningStep()
	return pu
}

// ClearProvisioningScheduledStep clears the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (pu *PlanUpdate) ClearProvisioningScheduledStep() *PlanUpdate {
	pu.mutation.ClearProvisioningScheduledStep()
	return pu
}

// ClearStatus clears the "Status" edge to the Status entity.
func (pu *PlanUpdate) ClearStatus() *PlanUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// ClearPlanDiffs clears all "PlanDiffs" edges to the PlanDiff entity.
func (pu *PlanUpdate) ClearPlanDiffs() *PlanUpdate {
	pu.mutation.ClearPlanDiffs()
	return pu
}

// RemovePlanDiffIDs removes the "PlanDiffs" edge to PlanDiff entities by IDs.
func (pu *PlanUpdate) RemovePlanDiffIDs(ids ...uuid.UUID) *PlanUpdate {
	pu.mutation.RemovePlanDiffIDs(ids...)
	return pu
}

// RemovePlanDiffs removes "PlanDiffs" edges to PlanDiff entities.
func (pu *PlanUpdate) RemovePlanDiffs(p ...*PlanDiff) *PlanUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlanDiffIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlanUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := plan.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Plan.type": %w`, err)}
		}
	}
	if _, ok := pu.mutation.StatusID(); pu.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plan.Status"`)
	}
	return nil
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: plan.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := pu.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: plan.FieldType,
		})
	}
	if pu.mutation.PrevPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.PrevPlansTable,
			Columns: plan.PrevPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPrevPlansIDs(); len(nodes) > 0 && !pu.mutation.PrevPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.PrevPlansTable,
			Columns: plan.PrevPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PrevPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.PrevPlansTable,
			Columns: plan.PrevPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NextPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.NextPlansTable,
			Columns: plan.NextPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNextPlansIDs(); len(nodes) > 0 && !pu.mutation.NextPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.NextPlansTable,
			Columns: plan.NextPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NextPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.NextPlansTable,
			Columns: plan.NextPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BuildTable,
			Columns: []string{plan.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BuildTable,
			Columns: []string{plan.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.TeamTable,
			Columns: []string{plan.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.TeamTable,
			Columns: []string{plan.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedNetworkTable,
			Columns: []string{plan.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedNetworkTable,
			Columns: []string{plan.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedHostTable,
			Columns: []string{plan.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedHostTable,
			Columns: []string{plan.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningStepTable,
			Columns: []string{plan.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningStepTable,
			Columns: []string{plan.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProvisioningScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningScheduledStepTable,
			Columns: []string{plan.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProvisioningScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningScheduledStepTable,
			Columns: []string{plan.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.StatusTable,
			Columns: []string{plan.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.StatusTable,
			Columns: []string{plan.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   plan.PlanDiffsTable,
			Columns: []string{plan.PlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlanDiffsIDs(); len(nodes) > 0 && !pu.mutation.PlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   plan.PlanDiffsTable,
			Columns: []string{plan.PlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanDiffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   plan.PlanDiffsTable,
			Columns: []string{plan.PlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanMutation
}

// SetStepNumber sets the "step_number" field.
func (puo *PlanUpdateOne) SetStepNumber(i int) *PlanUpdateOne {
	puo.mutation.ResetStepNumber()
	puo.mutation.SetStepNumber(i)
	return puo
}

// AddStepNumber adds i to the "step_number" field.
func (puo *PlanUpdateOne) AddStepNumber(i int) *PlanUpdateOne {
	puo.mutation.AddStepNumber(i)
	return puo
}

// SetType sets the "type" field.
func (puo *PlanUpdateOne) SetType(pl plan.Type) *PlanUpdateOne {
	puo.mutation.SetType(pl)
	return puo
}

// AddPrevPlanIDs adds the "PrevPlans" edge to the Plan entity by IDs.
func (puo *PlanUpdateOne) AddPrevPlanIDs(ids ...uuid.UUID) *PlanUpdateOne {
	puo.mutation.AddPrevPlanIDs(ids...)
	return puo
}

// AddPrevPlans adds the "PrevPlans" edges to the Plan entity.
func (puo *PlanUpdateOne) AddPrevPlans(p ...*Plan) *PlanUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPrevPlanIDs(ids...)
}

// AddNextPlanIDs adds the "NextPlans" edge to the Plan entity by IDs.
func (puo *PlanUpdateOne) AddNextPlanIDs(ids ...uuid.UUID) *PlanUpdateOne {
	puo.mutation.AddNextPlanIDs(ids...)
	return puo
}

// AddNextPlans adds the "NextPlans" edges to the Plan entity.
func (puo *PlanUpdateOne) AddNextPlans(p ...*Plan) *PlanUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddNextPlanIDs(ids...)
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (puo *PlanUpdateOne) SetBuildID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetBuildID(id)
	return puo
}

// SetNillableBuildID sets the "Build" edge to the Build entity by ID if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableBuildID(id *uuid.UUID) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetBuildID(*id)
	}
	return puo
}

// SetBuild sets the "Build" edge to the Build entity.
func (puo *PlanUpdateOne) SetBuild(b *Build) *PlanUpdateOne {
	return puo.SetBuildID(b.ID)
}

// SetTeamID sets the "Team" edge to the Team entity by ID.
func (puo *PlanUpdateOne) SetTeamID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetTeamID(id)
	return puo
}

// SetNillableTeamID sets the "Team" edge to the Team entity by ID if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableTeamID(id *uuid.UUID) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetTeamID(*id)
	}
	return puo
}

// SetTeam sets the "Team" edge to the Team entity.
func (puo *PlanUpdateOne) SetTeam(t *Team) *PlanUpdateOne {
	return puo.SetTeamID(t.ID)
}

// SetProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (puo *PlanUpdateOne) SetProvisionedNetworkID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetProvisionedNetworkID(id)
	return puo
}

// SetNillableProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableProvisionedNetworkID(id *uuid.UUID) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetProvisionedNetworkID(*id)
	}
	return puo
}

// SetProvisionedNetwork sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (puo *PlanUpdateOne) SetProvisionedNetwork(p *ProvisionedNetwork) *PlanUpdateOne {
	return puo.SetProvisionedNetworkID(p.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (puo *PlanUpdateOne) SetProvisionedHostID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetProvisionedHostID(id)
	return puo
}

// SetNillableProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableProvisionedHostID(id *uuid.UUID) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetProvisionedHostID(*id)
	}
	return puo
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (puo *PlanUpdateOne) SetProvisionedHost(p *ProvisionedHost) *PlanUpdateOne {
	return puo.SetProvisionedHostID(p.ID)
}

// SetProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID.
func (puo *PlanUpdateOne) SetProvisioningStepID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetProvisioningStepID(id)
	return puo
}

// SetNillableProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableProvisioningStepID(id *uuid.UUID) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetProvisioningStepID(*id)
	}
	return puo
}

// SetProvisioningStep sets the "ProvisioningStep" edge to the ProvisioningStep entity.
func (puo *PlanUpdateOne) SetProvisioningStep(p *ProvisioningStep) *PlanUpdateOne {
	return puo.SetProvisioningStepID(p.ID)
}

// SetProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID.
func (puo *PlanUpdateOne) SetProvisioningScheduledStepID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetProvisioningScheduledStepID(id)
	return puo
}

// SetNillableProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableProvisioningScheduledStepID(id *uuid.UUID) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetProvisioningScheduledStepID(*id)
	}
	return puo
}

// SetProvisioningScheduledStep sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (puo *PlanUpdateOne) SetProvisioningScheduledStep(p *ProvisioningScheduledStep) *PlanUpdateOne {
	return puo.SetProvisioningScheduledStepID(p.ID)
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (puo *PlanUpdateOne) SetStatusID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetStatusID(id)
	return puo
}

// SetStatus sets the "Status" edge to the Status entity.
func (puo *PlanUpdateOne) SetStatus(s *Status) *PlanUpdateOne {
	return puo.SetStatusID(s.ID)
}

// AddPlanDiffIDs adds the "PlanDiffs" edge to the PlanDiff entity by IDs.
func (puo *PlanUpdateOne) AddPlanDiffIDs(ids ...uuid.UUID) *PlanUpdateOne {
	puo.mutation.AddPlanDiffIDs(ids...)
	return puo
}

// AddPlanDiffs adds the "PlanDiffs" edges to the PlanDiff entity.
func (puo *PlanUpdateOne) AddPlanDiffs(p ...*PlanDiff) *PlanUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlanDiffIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// ClearPrevPlans clears all "PrevPlans" edges to the Plan entity.
func (puo *PlanUpdateOne) ClearPrevPlans() *PlanUpdateOne {
	puo.mutation.ClearPrevPlans()
	return puo
}

// RemovePrevPlanIDs removes the "PrevPlans" edge to Plan entities by IDs.
func (puo *PlanUpdateOne) RemovePrevPlanIDs(ids ...uuid.UUID) *PlanUpdateOne {
	puo.mutation.RemovePrevPlanIDs(ids...)
	return puo
}

// RemovePrevPlans removes "PrevPlans" edges to Plan entities.
func (puo *PlanUpdateOne) RemovePrevPlans(p ...*Plan) *PlanUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePrevPlanIDs(ids...)
}

// ClearNextPlans clears all "NextPlans" edges to the Plan entity.
func (puo *PlanUpdateOne) ClearNextPlans() *PlanUpdateOne {
	puo.mutation.ClearNextPlans()
	return puo
}

// RemoveNextPlanIDs removes the "NextPlans" edge to Plan entities by IDs.
func (puo *PlanUpdateOne) RemoveNextPlanIDs(ids ...uuid.UUID) *PlanUpdateOne {
	puo.mutation.RemoveNextPlanIDs(ids...)
	return puo
}

// RemoveNextPlans removes "NextPlans" edges to Plan entities.
func (puo *PlanUpdateOne) RemoveNextPlans(p ...*Plan) *PlanUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveNextPlanIDs(ids...)
}

// ClearBuild clears the "Build" edge to the Build entity.
func (puo *PlanUpdateOne) ClearBuild() *PlanUpdateOne {
	puo.mutation.ClearBuild()
	return puo
}

// ClearTeam clears the "Team" edge to the Team entity.
func (puo *PlanUpdateOne) ClearTeam() *PlanUpdateOne {
	puo.mutation.ClearTeam()
	return puo
}

// ClearProvisionedNetwork clears the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (puo *PlanUpdateOne) ClearProvisionedNetwork() *PlanUpdateOne {
	puo.mutation.ClearProvisionedNetwork()
	return puo
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (puo *PlanUpdateOne) ClearProvisionedHost() *PlanUpdateOne {
	puo.mutation.ClearProvisionedHost()
	return puo
}

// ClearProvisioningStep clears the "ProvisioningStep" edge to the ProvisioningStep entity.
func (puo *PlanUpdateOne) ClearProvisioningStep() *PlanUpdateOne {
	puo.mutation.ClearProvisioningStep()
	return puo
}

// ClearProvisioningScheduledStep clears the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (puo *PlanUpdateOne) ClearProvisioningScheduledStep() *PlanUpdateOne {
	puo.mutation.ClearProvisioningScheduledStep()
	return puo
}

// ClearStatus clears the "Status" edge to the Status entity.
func (puo *PlanUpdateOne) ClearStatus() *PlanUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// ClearPlanDiffs clears all "PlanDiffs" edges to the PlanDiff entity.
func (puo *PlanUpdateOne) ClearPlanDiffs() *PlanUpdateOne {
	puo.mutation.ClearPlanDiffs()
	return puo
}

// RemovePlanDiffIDs removes the "PlanDiffs" edge to PlanDiff entities by IDs.
func (puo *PlanUpdateOne) RemovePlanDiffIDs(ids ...uuid.UUID) *PlanUpdateOne {
	puo.mutation.RemovePlanDiffIDs(ids...)
	return puo
}

// RemovePlanDiffs removes "PlanDiffs" edges to PlanDiff entities.
func (puo *PlanUpdateOne) RemovePlanDiffs(p ...*PlanDiff) *PlanUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlanDiffIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	var (
		err  error
		node *Plan
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Plan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlanUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := plan.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Plan.type": %w`, err)}
		}
	}
	if _, ok := puo.mutation.StatusID(); puo.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plan.Status"`)
	}
	return nil
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: plan.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := puo.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: plan.FieldType,
		})
	}
	if puo.mutation.PrevPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.PrevPlansTable,
			Columns: plan.PrevPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPrevPlansIDs(); len(nodes) > 0 && !puo.mutation.PrevPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.PrevPlansTable,
			Columns: plan.PrevPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PrevPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.PrevPlansTable,
			Columns: plan.PrevPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NextPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.NextPlansTable,
			Columns: plan.NextPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNextPlansIDs(); len(nodes) > 0 && !puo.mutation.NextPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.NextPlansTable,
			Columns: plan.NextPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NextPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.NextPlansTable,
			Columns: plan.NextPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BuildTable,
			Columns: []string{plan.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BuildTable,
			Columns: []string{plan.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.TeamTable,
			Columns: []string{plan.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.TeamTable,
			Columns: []string{plan.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedNetworkTable,
			Columns: []string{plan.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedNetworkTable,
			Columns: []string{plan.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedHostTable,
			Columns: []string{plan.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisionedHostTable,
			Columns: []string{plan.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningStepTable,
			Columns: []string{plan.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningStepTable,
			Columns: []string{plan.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProvisioningScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningScheduledStepTable,
			Columns: []string{plan.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProvisioningScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.ProvisioningScheduledStepTable,
			Columns: []string{plan.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.StatusTable,
			Columns: []string{plan.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.StatusTable,
			Columns: []string{plan.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   plan.PlanDiffsTable,
			Columns: []string{plan.PlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlanDiffsIDs(); len(nodes) > 0 && !puo.mutation.PlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   plan.PlanDiffsTable,
			Columns: []string{plan.PlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanDiffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   plan.PlanDiffsTable,
			Columns: []string{plan.PlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
