// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ap *AdhocPlan) PrevAdhocPlan(ctx context.Context) (result []*AdhocPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedPrevAdhocPlan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.PrevAdhocPlanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryPrevAdhocPlan().All(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) NextAdhocPlan(ctx context.Context) (result []*AdhocPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedNextAdhocPlan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.NextAdhocPlanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryNextAdhocPlan().All(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) AdhocPlanToBuild(ctx context.Context) (*Build, error) {
	result, err := ap.Edges.AdhocPlanToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryAdhocPlanToBuild().Only(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) AdhocPlanToStatus(ctx context.Context) (*Status, error) {
	result, err := ap.Edges.AdhocPlanToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryAdhocPlanToStatus().Only(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) AdhocPlanToAgentTask(ctx context.Context) (*AgentTask, error) {
	result, err := ap.Edges.AdhocPlanToAgentTaskOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryAdhocPlanToAgentTask().Only(ctx)
	}
	return result, err
}

func (as *AgentStatus) AgentStatusToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := as.Edges.AgentStatusToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = as.QueryAgentStatusToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (as *AgentStatus) AgentStatusToProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := as.Edges.AgentStatusToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = as.QueryAgentStatusToProvisionedNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (as *AgentStatus) AgentStatusToBuild(ctx context.Context) (*Build, error) {
	result, err := as.Edges.AgentStatusToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = as.QueryAgentStatusToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (at *AgentTask) AgentTaskToProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := at.Edges.AgentTaskToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryAgentTaskToProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (at *AgentTask) AgentTaskToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := at.Edges.AgentTaskToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryAgentTaskToProvisionedHost().Only(ctx)
	}
	return result, err
}

func (at *AgentTask) AgentTaskToAdhocPlan(ctx context.Context) (result []*AdhocPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = at.NamedAgentTaskToAdhocPlan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = at.Edges.AgentTaskToAdhocPlanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = at.QueryAgentTaskToAdhocPlan().All(ctx)
	}
	return result, err
}

func (a *Ansible) AnsibleToUser(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedAnsibleToUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.AnsibleToUserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryAnsibleToUser().All(ctx)
	}
	return result, err
}

func (a *Ansible) AnsibleFromEnvironment(ctx context.Context) (*Environment, error) {
	result, err := a.Edges.AnsibleFromEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAnsibleFromEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (au *AuthUser) AuthUserToToken(ctx context.Context) (result []*Token, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedAuthUserToToken(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.AuthUserToTokenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryAuthUserToToken().All(ctx)
	}
	return result, err
}

func (au *AuthUser) AuthUserToServerTasks(ctx context.Context) (result []*ServerTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = au.NamedAuthUserToServerTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = au.Edges.AuthUserToServerTasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = au.QueryAuthUserToServerTasks().All(ctx)
	}
	return result, err
}

func (b *Build) BuildToStatus(ctx context.Context) (*Status, error) {
	result, err := b.Edges.BuildToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Build) BuildToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := b.Edges.BuildToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToEnvironment().Only(ctx)
	}
	return result, err
}

func (b *Build) BuildToCompetition(ctx context.Context) (*Competition, error) {
	result, err := b.Edges.BuildToCompetitionOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToCompetition().Only(ctx)
	}
	return result, err
}

func (b *Build) BuildToLatestBuildCommit(ctx context.Context) (*BuildCommit, error) {
	result, err := b.Edges.BuildToLatestBuildCommitOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToLatestBuildCommit().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Build) BuildToRepoCommit(ctx context.Context) (*RepoCommit, error) {
	result, err := b.Edges.BuildToRepoCommitOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToRepoCommit().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Build) BuildToProvisionedNetwork(ctx context.Context) (result []*ProvisionedNetwork, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBuildToProvisionedNetwork(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BuildToProvisionedNetworkOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToProvisionedNetwork().All(ctx)
	}
	return result, err
}

func (b *Build) BuildToTeam(ctx context.Context) (result []*Team, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBuildToTeam(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BuildToTeamOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToTeam().All(ctx)
	}
	return result, err
}

func (b *Build) BuildToPlan(ctx context.Context) (result []*Plan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBuildToPlan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BuildToPlanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToPlan().All(ctx)
	}
	return result, err
}

func (b *Build) BuildToBuildCommits(ctx context.Context) (result []*BuildCommit, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBuildToBuildCommits(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BuildToBuildCommitsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToBuildCommits().All(ctx)
	}
	return result, err
}

func (b *Build) BuildToAdhocPlans(ctx context.Context) (result []*AdhocPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBuildToAdhocPlans(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BuildToAdhocPlansOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToAdhocPlans().All(ctx)
	}
	return result, err
}

func (b *Build) BuildToAgentStatuses(ctx context.Context) (result []*AgentStatus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBuildToAgentStatuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BuildToAgentStatusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToAgentStatuses().All(ctx)
	}
	return result, err
}

func (b *Build) BuildToServerTasks(ctx context.Context) (result []*ServerTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBuildToServerTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BuildToServerTasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBuildToServerTasks().All(ctx)
	}
	return result, err
}

func (bc *BuildCommit) BuildCommitToBuild(ctx context.Context) (*Build, error) {
	result, err := bc.Edges.BuildCommitToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = bc.QueryBuildCommitToBuild().Only(ctx)
	}
	return result, err
}

func (bc *BuildCommit) BuildCommitToServerTask(ctx context.Context) (result []*ServerTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = bc.NamedBuildCommitToServerTask(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = bc.Edges.BuildCommitToServerTaskOrErr()
	}
	if IsNotLoaded(err) {
		result, err = bc.QueryBuildCommitToServerTask().All(ctx)
	}
	return result, err
}

func (bc *BuildCommit) BuildCommitToPlanDiffs(ctx context.Context) (result []*PlanDiff, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = bc.NamedBuildCommitToPlanDiffs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = bc.Edges.BuildCommitToPlanDiffsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = bc.QueryBuildCommitToPlanDiffs().All(ctx)
	}
	return result, err
}

func (c *Command) CommandToUser(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCommandToUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CommandToUserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCommandToUser().All(ctx)
	}
	return result, err
}

func (c *Command) CommandToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := c.Edges.CommandToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCommandToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Competition) CompetitionToDNS(ctx context.Context) (result []*DNS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCompetitionToDNS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CompetitionToDNSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCompetitionToDNS().All(ctx)
	}
	return result, err
}

func (c *Competition) CompetitionToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := c.Edges.CompetitionToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCompetitionToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Competition) CompetitionToBuild(ctx context.Context) (result []*Build, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCompetitionToBuild(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CompetitionToBuildOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCompetitionToBuild().All(ctx)
	}
	return result, err
}

func (d *DNS) DNSToEnvironment(ctx context.Context) (result []*Environment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedDNSToEnvironment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.DNSToEnvironmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryDNSToEnvironment().All(ctx)
	}
	return result, err
}

func (d *DNS) DNSToCompetition(ctx context.Context) (result []*Competition, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedDNSToCompetition(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.DNSToCompetitionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryDNSToCompetition().All(ctx)
	}
	return result, err
}

func (dr *DNSRecord) DNSRecordToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := dr.Edges.DNSRecordToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QueryDNSRecordToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Disk) DiskToHost(ctx context.Context) (*Host, error) {
	result, err := d.Edges.DiskToHostOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryDiskToHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Environment) EnvironmentToUser(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToUserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToUser().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToHost(ctx context.Context) (result []*Host, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToHost(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToHostOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToHost().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToCompetition(ctx context.Context) (result []*Competition, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToCompetition(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToCompetitionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToCompetition().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToIdentity(ctx context.Context) (result []*Identity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToIdentity(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToIdentityOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToIdentity().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToCommand(ctx context.Context) (result []*Command, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToCommand(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToCommandOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToCommand().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToScript(ctx context.Context) (result []*Script, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToScript(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToScriptOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToScript().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToFileDownload(ctx context.Context) (result []*FileDownload, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToFileDownload(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToFileDownloadOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToFileDownload().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToFileDelete(ctx context.Context) (result []*FileDelete, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToFileDelete(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToFileDeleteOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToFileDelete().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToFileExtract(ctx context.Context) (result []*FileExtract, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToFileExtract(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToFileExtractOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToFileExtract().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToIncludedNetwork(ctx context.Context) (result []*IncludedNetwork, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToIncludedNetwork(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToIncludedNetworkOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToIncludedNetwork().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToFinding(ctx context.Context) (result []*Finding, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToFinding(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToFindingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToFinding().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToDNSRecord(ctx context.Context) (result []*DNSRecord, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToDNSRecord(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToDNSRecordOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToDNSRecord().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToDNS(ctx context.Context) (result []*DNS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToDNS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToDNSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToDNS().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToNetwork(ctx context.Context) (result []*Network, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToNetwork(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToNetworkOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToNetwork().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToHostDependency(ctx context.Context) (result []*HostDependency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToHostDependency(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToHostDependencyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToHostDependency().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToAnsible(ctx context.Context) (result []*Ansible, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToAnsible(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToAnsibleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToAnsible().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToBuild(ctx context.Context) (result []*Build, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToBuild(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToBuildOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToBuild().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToRepository(ctx context.Context) (result []*Repository, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToRepository(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToRepositoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToRepository().All(ctx)
	}
	return result, err
}

func (e *Environment) EnvironmentToServerTask(ctx context.Context) (result []*ServerTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEnvironmentToServerTask(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EnvironmentToServerTaskOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEnvironmentToServerTask().All(ctx)
	}
	return result, err
}

func (fd *FileDelete) FileDeleteToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := fd.Edges.FileDeleteToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = fd.QueryFileDeleteToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fd *FileDownload) FileDownloadToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := fd.Edges.FileDownloadToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = fd.QueryFileDownloadToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fe *FileExtract) FileExtractToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := fe.Edges.FileExtractToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = fe.QueryFileExtractToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Finding) FindingToUser(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedFindingToUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.FindingToUserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToUser().All(ctx)
	}
	return result, err
}

func (f *Finding) FindingToHost(ctx context.Context) (*Host, error) {
	result, err := f.Edges.FindingToHostOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Finding) FindingToScript(ctx context.Context) (*Script, error) {
	result, err := f.Edges.FindingToScriptOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToScript().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Finding) FindingToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := f.Edges.FindingToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gfm *GinFileMiddleware) GinFileMiddlewareToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := gfm.Edges.GinFileMiddlewareToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = gfm.QueryGinFileMiddlewareToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gfm *GinFileMiddleware) GinFileMiddlewareToProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := gfm.Edges.GinFileMiddlewareToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = gfm.QueryGinFileMiddlewareToProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Host) HostToDisk(ctx context.Context) (*Disk, error) {
	result, err := h.Edges.HostToDiskOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryHostToDisk().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Host) HostToUser(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedHostToUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.HostToUserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryHostToUser().All(ctx)
	}
	return result, err
}

func (h *Host) HostToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := h.Edges.HostToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryHostToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Host) HostToIncludedNetwork(ctx context.Context) (result []*IncludedNetwork, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedHostToIncludedNetwork(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.HostToIncludedNetworkOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryHostToIncludedNetwork().All(ctx)
	}
	return result, err
}

func (h *Host) DependOnHostToHostDependency(ctx context.Context) (result []*HostDependency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedDependOnHostToHostDependency(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.DependOnHostToHostDependencyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryDependOnHostToHostDependency().All(ctx)
	}
	return result, err
}

func (h *Host) DependByHostToHostDependency(ctx context.Context) (result []*HostDependency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedDependByHostToHostDependency(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.DependByHostToHostDependencyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryDependByHostToHostDependency().All(ctx)
	}
	return result, err
}

func (hd *HostDependency) HostDependencyToDependOnHost(ctx context.Context) (*Host, error) {
	result, err := hd.Edges.HostDependencyToDependOnHostOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToDependOnHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hd *HostDependency) HostDependencyToDependByHost(ctx context.Context) (*Host, error) {
	result, err := hd.Edges.HostDependencyToDependByHostOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToDependByHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hd *HostDependency) HostDependencyToNetwork(ctx context.Context) (*Network, error) {
	result, err := hd.Edges.HostDependencyToNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hd *HostDependency) HostDependencyToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := hd.Edges.HostDependencyToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Identity) IdentityToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := i.Edges.IdentityToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryIdentityToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (in *IncludedNetwork) IncludedNetworkToTag(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = in.NamedIncludedNetworkToTag(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = in.Edges.IncludedNetworkToTagOrErr()
	}
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToTag().All(ctx)
	}
	return result, err
}

func (in *IncludedNetwork) IncludedNetworkToHost(ctx context.Context) (result []*Host, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = in.NamedIncludedNetworkToHost(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = in.Edges.IncludedNetworkToHostOrErr()
	}
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToHost().All(ctx)
	}
	return result, err
}

func (in *IncludedNetwork) IncludedNetworkToNetwork(ctx context.Context) (*Network, error) {
	result, err := in.Edges.IncludedNetworkToNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (in *IncludedNetwork) IncludedNetworkToEnvironment(ctx context.Context) (result []*Environment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = in.NamedIncludedNetworkToEnvironment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = in.Edges.IncludedNetworkToEnvironmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToEnvironment().All(ctx)
	}
	return result, err
}

func (n *Network) NetworkToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := n.Edges.NetworkToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNetworkToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Network) NetworkToHostDependency(ctx context.Context) (result []*HostDependency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedNetworkToHostDependency(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.NetworkToHostDependencyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryNetworkToHostDependency().All(ctx)
	}
	return result, err
}

func (n *Network) NetworkToIncludedNetwork(ctx context.Context) (result []*IncludedNetwork, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedNetworkToIncludedNetwork(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.NetworkToIncludedNetworkOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryNetworkToIncludedNetwork().All(ctx)
	}
	return result, err
}

func (pl *Plan) PrevPlan(ctx context.Context) (result []*Plan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedPrevPlan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.PrevPlanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QueryPrevPlan().All(ctx)
	}
	return result, err
}

func (pl *Plan) NextPlan(ctx context.Context) (result []*Plan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedNextPlan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.NextPlanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QueryNextPlan().All(ctx)
	}
	return result, err
}

func (pl *Plan) PlanToBuild(ctx context.Context) (*Build, error) {
	result, err := pl.Edges.PlanToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToTeam(ctx context.Context) (*Team, error) {
	result, err := pl.Edges.PlanToTeamOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToTeam().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := pl.Edges.PlanToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToProvisionedNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := pl.Edges.PlanToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := pl.Edges.PlanToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToStatus(ctx context.Context) (*Status, error) {
	result, err := pl.Edges.PlanToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToStatus().Only(ctx)
	}
	return result, err
}

func (pl *Plan) PlanToPlanDiffs(ctx context.Context) (result []*PlanDiff, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedPlanToPlanDiffs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.PlanToPlanDiffsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToPlanDiffs().All(ctx)
	}
	return result, err
}

func (pd *PlanDiff) PlanDiffToBuildCommit(ctx context.Context) (*BuildCommit, error) {
	result, err := pd.Edges.PlanDiffToBuildCommitOrErr()
	if IsNotLoaded(err) {
		result, err = pd.QueryPlanDiffToBuildCommit().Only(ctx)
	}
	return result, err
}

func (pd *PlanDiff) PlanDiffToPlan(ctx context.Context) (*Plan, error) {
	result, err := pd.Edges.PlanDiffToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = pd.QueryPlanDiffToPlan().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToStatus(ctx context.Context) (*Status, error) {
	result, err := ph.Edges.ProvisionedHostToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToStatus().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := ph.Edges.ProvisionedHostToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToProvisionedNetwork().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToHost(ctx context.Context) (*Host, error) {
	result, err := ph.Edges.ProvisionedHostToHostOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToHost().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToEndStepPlan(ctx context.Context) (*Plan, error) {
	result, err := ph.Edges.ProvisionedHostToEndStepPlanOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToEndStepPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ph *ProvisionedHost) ProvisionedHostToBuild(ctx context.Context) (*Build, error) {
	result, err := ph.Edges.ProvisionedHostToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToBuild().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToProvisioningStep(ctx context.Context) (result []*ProvisioningStep, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ph.NamedProvisionedHostToProvisioningStep(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ph.Edges.ProvisionedHostToProvisioningStepOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToProvisioningStep().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToAgentStatus(ctx context.Context) (result []*AgentStatus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ph.NamedProvisionedHostToAgentStatus(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ph.Edges.ProvisionedHostToAgentStatusOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToAgentStatus().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToAgentTask(ctx context.Context) (result []*AgentTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ph.NamedProvisionedHostToAgentTask(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ph.Edges.ProvisionedHostToAgentTaskOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToAgentTask().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToPlan(ctx context.Context) (*Plan, error) {
	result, err := ph.Edges.ProvisionedHostToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ph *ProvisionedHost) ProvisionedHostToGinFileMiddleware(ctx context.Context) (*GinFileMiddleware, error) {
	result, err := ph.Edges.ProvisionedHostToGinFileMiddlewareOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToGinFileMiddleware().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToStatus(ctx context.Context) (*Status, error) {
	result, err := pn.Edges.ProvisionedNetworkToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToNetwork(ctx context.Context) (*Network, error) {
	result, err := pn.Edges.ProvisionedNetworkToNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToBuild(ctx context.Context) (*Build, error) {
	result, err := pn.Edges.ProvisionedNetworkToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToTeam(ctx context.Context) (*Team, error) {
	result, err := pn.Edges.ProvisionedNetworkToTeamOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToTeam().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToProvisionedHost(ctx context.Context) (result []*ProvisionedHost, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pn.NamedProvisionedNetworkToProvisionedHost(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pn.Edges.ProvisionedNetworkToProvisionedHostOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToProvisionedHost().All(ctx)
	}
	return result, err
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToPlan(ctx context.Context) (*Plan, error) {
	result, err := pn.Edges.ProvisionedNetworkToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToStatus(ctx context.Context) (*Status, error) {
	result, err := ps.Edges.ProvisioningStepToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := ps.Edges.ProvisioningStepToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToScript(ctx context.Context) (*Script, error) {
	result, err := ps.Edges.ProvisioningStepToScriptOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToScript().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToCommand(ctx context.Context) (*Command, error) {
	result, err := ps.Edges.ProvisioningStepToCommandOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToCommand().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToDNSRecord(ctx context.Context) (*DNSRecord, error) {
	result, err := ps.Edges.ProvisioningStepToDNSRecordOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToDNSRecord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToFileDelete(ctx context.Context) (*FileDelete, error) {
	result, err := ps.Edges.ProvisioningStepToFileDeleteOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToFileDelete().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToFileDownload(ctx context.Context) (*FileDownload, error) {
	result, err := ps.Edges.ProvisioningStepToFileDownloadOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToFileDownload().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToFileExtract(ctx context.Context) (*FileExtract, error) {
	result, err := ps.Edges.ProvisioningStepToFileExtractOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToFileExtract().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToAnsible(ctx context.Context) (*Ansible, error) {
	result, err := ps.Edges.ProvisioningStepToAnsibleOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToAnsible().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToPlan(ctx context.Context) (*Plan, error) {
	result, err := ps.Edges.ProvisioningStepToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToAgentTask(ctx context.Context) (result []*AgentTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ps.NamedProvisioningStepToAgentTask(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ps.Edges.ProvisioningStepToAgentTaskOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToAgentTask().All(ctx)
	}
	return result, err
}

func (ps *ProvisioningStep) ProvisioningStepToGinFileMiddleware(ctx context.Context) (*GinFileMiddleware, error) {
	result, err := ps.Edges.ProvisioningStepToGinFileMiddlewareOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToGinFileMiddleware().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rc *RepoCommit) RepoCommitToRepository(ctx context.Context) (*Repository, error) {
	result, err := rc.Edges.RepoCommitToRepositoryOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryRepoCommitToRepository().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Repository) RepositoryToEnvironment(ctx context.Context) (result []*Environment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedRepositoryToEnvironment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.RepositoryToEnvironmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryRepositoryToEnvironment().All(ctx)
	}
	return result, err
}

func (r *Repository) RepositoryToRepoCommit(ctx context.Context) (result []*RepoCommit, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedRepositoryToRepoCommit(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.RepositoryToRepoCommitOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryRepositoryToRepoCommit().All(ctx)
	}
	return result, err
}

func (s *Script) ScriptToUser(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedScriptToUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ScriptToUserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryScriptToUser().All(ctx)
	}
	return result, err
}

func (s *Script) ScriptToFinding(ctx context.Context) (result []*Finding, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedScriptToFinding(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ScriptToFindingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryScriptToFinding().All(ctx)
	}
	return result, err
}

func (s *Script) ScriptToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := s.Edges.ScriptToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryScriptToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToAuthUser(ctx context.Context) (*AuthUser, error) {
	result, err := st.Edges.ServerTaskToAuthUserOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToAuthUser().Only(ctx)
	}
	return result, err
}

func (st *ServerTask) ServerTaskToStatus(ctx context.Context) (*Status, error) {
	result, err := st.Edges.ServerTaskToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToStatus().Only(ctx)
	}
	return result, err
}

func (st *ServerTask) ServerTaskToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := st.Edges.ServerTaskToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToBuild(ctx context.Context) (*Build, error) {
	result, err := st.Edges.ServerTaskToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToBuildCommit(ctx context.Context) (*BuildCommit, error) {
	result, err := st.Edges.ServerTaskToBuildCommitOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToBuildCommit().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToGinFileMiddleware(ctx context.Context) (result []*GinFileMiddleware, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = st.NamedServerTaskToGinFileMiddleware(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = st.Edges.ServerTaskToGinFileMiddlewareOrErr()
	}
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToGinFileMiddleware().All(ctx)
	}
	return result, err
}

func (s *Status) StatusToBuild(ctx context.Context) (*Build, error) {
	result, err := s.Edges.StatusToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := s.Edges.StatusToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToProvisionedNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := s.Edges.StatusToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := s.Edges.StatusToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToTeam(ctx context.Context) (*Team, error) {
	result, err := s.Edges.StatusToTeamOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToTeam().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToPlan(ctx context.Context) (*Plan, error) {
	result, err := s.Edges.StatusToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToServerTask(ctx context.Context) (*ServerTask, error) {
	result, err := s.Edges.StatusToServerTaskOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToServerTask().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToAdhocPlan(ctx context.Context) (*AdhocPlan, error) {
	result, err := s.Edges.StatusToAdhocPlanOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToAdhocPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Team) TeamToBuild(ctx context.Context) (*Build, error) {
	result, err := t.Edges.TeamToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToBuild().Only(ctx)
	}
	return result, err
}

func (t *Team) TeamToStatus(ctx context.Context) (*Status, error) {
	result, err := t.Edges.TeamToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Team) TeamToProvisionedNetwork(ctx context.Context) (result []*ProvisionedNetwork, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedTeamToProvisionedNetwork(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.TeamToProvisionedNetworkOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToProvisionedNetwork().All(ctx)
	}
	return result, err
}

func (t *Team) TeamToPlan(ctx context.Context) (*Plan, error) {
	result, err := t.Edges.TeamToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Token) TokenToAuthUser(ctx context.Context) (*AuthUser, error) {
	result, err := t.Edges.TokenToAuthUserOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTokenToAuthUser().Only(ctx)
	}
	return result, err
}

func (u *User) UserToTag(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserToTag(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserToTagOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserToTag().All(ctx)
	}
	return result, err
}

func (u *User) UserToEnvironment(ctx context.Context) (result []*Environment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserToEnvironment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserToEnvironmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserToEnvironment().All(ctx)
	}
	return result, err
}
