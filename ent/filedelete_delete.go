// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/predicate"
)

// FileDeleteDelete is the builder for deleting a FileDelete entity.
type FileDeleteDelete struct {
	config
	hooks    []Hook
	mutation *FileDeleteMutation
}

// Where appends a list predicates to the FileDeleteDelete builder.
func (fdd *FileDeleteDelete) Where(ps ...predicate.FileDelete) *FileDeleteDelete {
	fdd.mutation.Where(ps...)
	return fdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fdd *FileDeleteDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fdd.sqlExec, fdd.mutation, fdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fdd *FileDeleteDelete) ExecX(ctx context.Context) int {
	n, err := fdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fdd *FileDeleteDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(filedelete.Table, sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID))
	if ps := fdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fdd.mutation.done = true
	return affected, err
}

// FileDeleteDeleteOne is the builder for deleting a single FileDelete entity.
type FileDeleteDeleteOne struct {
	fdd *FileDeleteDelete
}

// Where appends a list predicates to the FileDeleteDelete builder.
func (fddo *FileDeleteDeleteOne) Where(ps ...predicate.FileDelete) *FileDeleteDeleteOne {
	fddo.fdd.mutation.Where(ps...)
	return fddo
}

// Exec executes the deletion query.
func (fddo *FileDeleteDeleteOne) Exec(ctx context.Context) error {
	n, err := fddo.fdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{filedelete.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fddo *FileDeleteDeleteOne) ExecX(ctx context.Context) {
	if err := fddo.Exec(ctx); err != nil {
		panic(err)
	}
}
