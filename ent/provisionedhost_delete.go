// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
)

// ProvisionedHostDelete is the builder for deleting a ProvisionedHost entity.
type ProvisionedHostDelete struct {
	config
	hooks    []Hook
	mutation *ProvisionedHostMutation
}

// Where appends a list predicates to the ProvisionedHostDelete builder.
func (phd *ProvisionedHostDelete) Where(ps ...predicate.ProvisionedHost) *ProvisionedHostDelete {
	phd.mutation.Where(ps...)
	return phd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (phd *ProvisionedHostDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, phd.sqlExec, phd.mutation, phd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (phd *ProvisionedHostDelete) ExecX(ctx context.Context) int {
	n, err := phd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (phd *ProvisionedHostDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(provisionedhost.Table, sqlgraph.NewFieldSpec(provisionedhost.FieldID, field.TypeUUID))
	if ps := phd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, phd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	phd.mutation.done = true
	return affected, err
}

// ProvisionedHostDeleteOne is the builder for deleting a single ProvisionedHost entity.
type ProvisionedHostDeleteOne struct {
	phd *ProvisionedHostDelete
}

// Where appends a list predicates to the ProvisionedHostDelete builder.
func (phdo *ProvisionedHostDeleteOne) Where(ps ...predicate.ProvisionedHost) *ProvisionedHostDeleteOne {
	phdo.phd.mutation.Where(ps...)
	return phdo
}

// Exec executes the deletion query.
func (phdo *ProvisionedHostDeleteOne) Exec(ctx context.Context) error {
	n, err := phdo.phd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{provisionedhost.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (phdo *ProvisionedHostDeleteOne) ExecX(ctx context.Context) {
	if err := phdo.Exec(ctx); err != nil {
		panic(err)
	}
}
