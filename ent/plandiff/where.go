// Code generated by ent, DO NOT EDIT.

package plandiff

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v int) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevision), v))
	})
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v int) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevision), v))
	})
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v int) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRevision), v))
	})
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...int) predicate.PlanDiff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRevision), v...))
	})
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...int) predicate.PlanDiff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRevision), v...))
	})
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v int) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRevision), v))
	})
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v int) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRevision), v))
	})
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v int) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRevision), v))
	})
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v int) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRevision), v))
	})
}

// NewStateEQ applies the EQ predicate on the "new_state" field.
func NewStateEQ(v NewState) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNewState), v))
	})
}

// NewStateNEQ applies the NEQ predicate on the "new_state" field.
func NewStateNEQ(v NewState) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNewState), v))
	})
}

// NewStateIn applies the In predicate on the "new_state" field.
func NewStateIn(vs ...NewState) predicate.PlanDiff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNewState), v...))
	})
}

// NewStateNotIn applies the NotIn predicate on the "new_state" field.
func NewStateNotIn(vs ...NewState) predicate.PlanDiff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNewState), v...))
	})
}

// HasBuildCommit applies the HasEdge predicate on the "BuildCommit" edge.
func HasBuildCommit() predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildCommitTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildCommitTable, BuildCommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildCommitWith applies the HasEdge predicate on the "BuildCommit" edge with a given conditions (other predicates).
func HasBuildCommitWith(preds ...predicate.BuildCommit) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildCommitInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildCommitTable, BuildCommitColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlan applies the HasEdge predicate on the "Plan" edge.
func HasPlan() predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlanTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanWith applies the HasEdge predicate on the "Plan" edge with a given conditions (other predicates).
func HasPlanWith(preds ...predicate.Plan) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlanDiff) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlanDiff) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlanDiff) predicate.PlanDiff {
	return predicate.PlanDiff(func(s *sql.Selector) {
		p(s.Not())
	})
}
