// Code generated by ent, DO NOT EDIT.

package plandiff

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the plandiff type in the database.
	Label = "plan_diff"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldNewState holds the string denoting the new_state field in the database.
	FieldNewState = "new_state"
	// EdgeBuildCommit holds the string denoting the buildcommit edge name in mutations.
	EdgeBuildCommit = "BuildCommit"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "Plan"
	// Table holds the table name of the plandiff in the database.
	Table = "plan_diffs"
	// BuildCommitTable is the table that holds the BuildCommit relation/edge.
	BuildCommitTable = "plan_diffs"
	// BuildCommitInverseTable is the table name for the BuildCommit entity.
	// It exists in this package in order to avoid circular dependency with the "buildcommit" package.
	BuildCommitInverseTable = "build_commits"
	// BuildCommitColumn is the table column denoting the BuildCommit relation/edge.
	BuildCommitColumn = "plan_diff_build_commit"
	// PlanTable is the table that holds the Plan relation/edge.
	PlanTable = "plan_diffs"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plans"
	// PlanColumn is the table column denoting the Plan relation/edge.
	PlanColumn = "plan_diff_plan"
)

// Columns holds all SQL columns for plandiff fields.
var Columns = []string{
	FieldID,
	FieldRevision,
	FieldNewState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "plan_diffs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_diff_build_commit",
	"plan_diff_plan",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// NewState defines the type for the "new_state" enum field.
type NewState string

// NewState values.
const (
	NewStatePLANNING         NewState = "PLANNING"
	NewStateAWAITING         NewState = "AWAITING"
	NewStateINPROGRESS       NewState = "INPROGRESS"
	NewStateFAILED           NewState = "FAILED"
	NewStateCOMPLETE         NewState = "COMPLETE"
	NewStateTAINTED          NewState = "TAINTED"
	NewStateTODELETE         NewState = "TODELETE"
	NewStateDELETEINPROGRESS NewState = "DELETEINPROGRESS"
	NewStateDELETED          NewState = "DELETED"
	NewStateTOREBUILD        NewState = "TOREBUILD"
)

func (ns NewState) String() string {
	return string(ns)
}

// NewStateValidator is a validator for the "new_state" field enum values. It is called by the builders before save.
func NewStateValidator(ns NewState) error {
	switch ns {
	case NewStatePLANNING, NewStateAWAITING, NewStateINPROGRESS, NewStateFAILED, NewStateCOMPLETE, NewStateTAINTED, NewStateTODELETE, NewStateDELETEINPROGRESS, NewStateDELETED, NewStateTOREBUILD:
		return nil
	default:
		return fmt.Errorf("plandiff: invalid enum value for new_state field: %q", ns)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (ns NewState) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(ns.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (ns *NewState) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*ns = NewState(str)
	if err := NewStateValidator(*ns); err != nil {
		return fmt.Errorf("%s is not a valid NewState", str)
	}
	return nil
}
