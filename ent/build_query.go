// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// BuildQuery is the builder for querying Build entities.
type BuildQuery struct {
	config
	ctx                                *QueryContext
	order                              []build.OrderOption
	inters                             []Interceptor
	predicates                         []predicate.Build
	withBuildToStatus                  *StatusQuery
	withBuildToEnvironment             *EnvironmentQuery
	withBuildToCompetition             *CompetitionQuery
	withBuildToLatestBuildCommit       *BuildCommitQuery
	withBuildToRepoCommit              *RepoCommitQuery
	withBuildToProvisionedNetwork      *ProvisionedNetworkQuery
	withBuildToTeam                    *TeamQuery
	withBuildToPlan                    *PlanQuery
	withBuildToBuildCommits            *BuildCommitQuery
	withBuildToAdhocPlans              *AdhocPlanQuery
	withBuildToAgentStatuses           *AgentStatusQuery
	withBuildToServerTasks             *ServerTaskQuery
	withFKs                            bool
	modifiers                          []func(*sql.Selector)
	loadTotal                          []func(context.Context, []*Build) error
	withNamedBuildToProvisionedNetwork map[string]*ProvisionedNetworkQuery
	withNamedBuildToTeam               map[string]*TeamQuery
	withNamedBuildToPlan               map[string]*PlanQuery
	withNamedBuildToBuildCommits       map[string]*BuildCommitQuery
	withNamedBuildToAdhocPlans         map[string]*AdhocPlanQuery
	withNamedBuildToAgentStatuses      map[string]*AgentStatusQuery
	withNamedBuildToServerTasks        map[string]*ServerTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BuildQuery builder.
func (bq *BuildQuery) Where(ps ...predicate.Build) *BuildQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit the number of records to be returned by this query.
func (bq *BuildQuery) Limit(limit int) *BuildQuery {
	bq.ctx.Limit = &limit
	return bq
}

// Offset to start from.
func (bq *BuildQuery) Offset(offset int) *BuildQuery {
	bq.ctx.Offset = &offset
	return bq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bq *BuildQuery) Unique(unique bool) *BuildQuery {
	bq.ctx.Unique = &unique
	return bq
}

// Order specifies how the records should be ordered.
func (bq *BuildQuery) Order(o ...build.OrderOption) *BuildQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QueryBuildToStatus chains the current query on the "BuildToStatus" edge.
func (bq *BuildQuery) QueryBuildToStatus() *StatusQuery {
	query := (&StatusClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, build.BuildToStatusTable, build.BuildToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToEnvironment chains the current query on the "BuildToEnvironment" edge.
func (bq *BuildQuery) QueryBuildToEnvironment() *EnvironmentQuery {
	query := (&EnvironmentClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToEnvironmentTable, build.BuildToEnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToCompetition chains the current query on the "BuildToCompetition" edge.
func (bq *BuildQuery) QueryBuildToCompetition() *CompetitionQuery {
	query := (&CompetitionClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToCompetitionTable, build.BuildToCompetitionColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToLatestBuildCommit chains the current query on the "BuildToLatestBuildCommit" edge.
func (bq *BuildQuery) QueryBuildToLatestBuildCommit() *BuildCommitQuery {
	query := (&BuildCommitClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToLatestBuildCommitTable, build.BuildToLatestBuildCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToRepoCommit chains the current query on the "BuildToRepoCommit" edge.
func (bq *BuildQuery) QueryBuildToRepoCommit() *RepoCommitQuery {
	query := (&RepoCommitClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(repocommit.Table, repocommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToRepoCommitTable, build.BuildToRepoCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToProvisionedNetwork chains the current query on the "BuildToProvisionedNetwork" edge.
func (bq *BuildQuery) QueryBuildToProvisionedNetwork() *ProvisionedNetworkQuery {
	query := (&ProvisionedNetworkClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToProvisionedNetworkTable, build.BuildToProvisionedNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToTeam chains the current query on the "BuildToTeam" edge.
func (bq *BuildQuery) QueryBuildToTeam() *TeamQuery {
	query := (&TeamClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToTeamTable, build.BuildToTeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToPlan chains the current query on the "BuildToPlan" edge.
func (bq *BuildQuery) QueryBuildToPlan() *PlanQuery {
	query := (&PlanClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToPlanTable, build.BuildToPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToBuildCommits chains the current query on the "BuildToBuildCommits" edge.
func (bq *BuildQuery) QueryBuildToBuildCommits() *BuildCommitQuery {
	query := (&BuildCommitClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToBuildCommitsTable, build.BuildToBuildCommitsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToAdhocPlans chains the current query on the "BuildToAdhocPlans" edge.
func (bq *BuildQuery) QueryBuildToAdhocPlans() *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToAdhocPlansTable, build.BuildToAdhocPlansColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToAgentStatuses chains the current query on the "BuildToAgentStatuses" edge.
func (bq *BuildQuery) QueryBuildToAgentStatuses() *AgentStatusQuery {
	query := (&AgentStatusClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(agentstatus.Table, agentstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToAgentStatusesTable, build.BuildToAgentStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToServerTasks chains the current query on the "BuildToServerTasks" edge.
func (bq *BuildQuery) QueryBuildToServerTasks() *ServerTaskQuery {
	query := (&ServerTaskClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(servertask.Table, servertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToServerTasksTable, build.BuildToServerTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Build entity from the query.
// Returns a *NotFoundError when no Build was found.
func (bq *BuildQuery) First(ctx context.Context) (*Build, error) {
	nodes, err := bq.Limit(1).All(setContextOp(ctx, bq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{build.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BuildQuery) FirstX(ctx context.Context) *Build {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Build ID from the query.
// Returns a *NotFoundError when no Build ID was found.
func (bq *BuildQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bq.Limit(1).IDs(setContextOp(ctx, bq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{build.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BuildQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Build entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Build entity is found.
// Returns a *NotFoundError when no Build entities are found.
func (bq *BuildQuery) Only(ctx context.Context) (*Build, error) {
	nodes, err := bq.Limit(2).All(setContextOp(ctx, bq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{build.Label}
	default:
		return nil, &NotSingularError{build.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BuildQuery) OnlyX(ctx context.Context) *Build {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Build ID in the query.
// Returns a *NotSingularError when more than one Build ID is found.
// Returns a *NotFoundError when no entities are found.
func (bq *BuildQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bq.Limit(2).IDs(setContextOp(ctx, bq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = &NotSingularError{build.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BuildQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Builds.
func (bq *BuildQuery) All(ctx context.Context) ([]*Build, error) {
	ctx = setContextOp(ctx, bq.ctx, "All")
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Build, *BuildQuery]()
	return withInterceptors[[]*Build](ctx, bq, qr, bq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bq *BuildQuery) AllX(ctx context.Context) []*Build {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Build IDs.
func (bq *BuildQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if bq.ctx.Unique == nil && bq.path != nil {
		bq.Unique(true)
	}
	ctx = setContextOp(ctx, bq.ctx, "IDs")
	if err = bq.Select(build.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BuildQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BuildQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bq.ctx, "Count")
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bq, querierCount[*BuildQuery](), bq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BuildQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BuildQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bq.ctx, "Exist")
	switch _, err := bq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BuildQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BuildQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BuildQuery) Clone() *BuildQuery {
	if bq == nil {
		return nil
	}
	return &BuildQuery{
		config:                        bq.config,
		ctx:                           bq.ctx.Clone(),
		order:                         append([]build.OrderOption{}, bq.order...),
		inters:                        append([]Interceptor{}, bq.inters...),
		predicates:                    append([]predicate.Build{}, bq.predicates...),
		withBuildToStatus:             bq.withBuildToStatus.Clone(),
		withBuildToEnvironment:        bq.withBuildToEnvironment.Clone(),
		withBuildToCompetition:        bq.withBuildToCompetition.Clone(),
		withBuildToLatestBuildCommit:  bq.withBuildToLatestBuildCommit.Clone(),
		withBuildToRepoCommit:         bq.withBuildToRepoCommit.Clone(),
		withBuildToProvisionedNetwork: bq.withBuildToProvisionedNetwork.Clone(),
		withBuildToTeam:               bq.withBuildToTeam.Clone(),
		withBuildToPlan:               bq.withBuildToPlan.Clone(),
		withBuildToBuildCommits:       bq.withBuildToBuildCommits.Clone(),
		withBuildToAdhocPlans:         bq.withBuildToAdhocPlans.Clone(),
		withBuildToAgentStatuses:      bq.withBuildToAgentStatuses.Clone(),
		withBuildToServerTasks:        bq.withBuildToServerTasks.Clone(),
		// clone intermediate query.
		sql:  bq.sql.Clone(),
		path: bq.path,
	}
}

// WithBuildToStatus tells the query-builder to eager-load the nodes that are connected to
// the "BuildToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToStatus(opts ...func(*StatusQuery)) *BuildQuery {
	query := (&StatusClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToStatus = query
	return bq
}

// WithBuildToEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "BuildToEnvironment" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToEnvironment(opts ...func(*EnvironmentQuery)) *BuildQuery {
	query := (&EnvironmentClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToEnvironment = query
	return bq
}

// WithBuildToCompetition tells the query-builder to eager-load the nodes that are connected to
// the "BuildToCompetition" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToCompetition(opts ...func(*CompetitionQuery)) *BuildQuery {
	query := (&CompetitionClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToCompetition = query
	return bq
}

// WithBuildToLatestBuildCommit tells the query-builder to eager-load the nodes that are connected to
// the "BuildToLatestBuildCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToLatestBuildCommit(opts ...func(*BuildCommitQuery)) *BuildQuery {
	query := (&BuildCommitClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToLatestBuildCommit = query
	return bq
}

// WithBuildToRepoCommit tells the query-builder to eager-load the nodes that are connected to
// the "BuildToRepoCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToRepoCommit(opts ...func(*RepoCommitQuery)) *BuildQuery {
	query := (&RepoCommitClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToRepoCommit = query
	return bq
}

// WithBuildToProvisionedNetwork tells the query-builder to eager-load the nodes that are connected to
// the "BuildToProvisionedNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToProvisionedNetwork(opts ...func(*ProvisionedNetworkQuery)) *BuildQuery {
	query := (&ProvisionedNetworkClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToProvisionedNetwork = query
	return bq
}

// WithBuildToTeam tells the query-builder to eager-load the nodes that are connected to
// the "BuildToTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToTeam(opts ...func(*TeamQuery)) *BuildQuery {
	query := (&TeamClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToTeam = query
	return bq
}

// WithBuildToPlan tells the query-builder to eager-load the nodes that are connected to
// the "BuildToPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToPlan(opts ...func(*PlanQuery)) *BuildQuery {
	query := (&PlanClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToPlan = query
	return bq
}

// WithBuildToBuildCommits tells the query-builder to eager-load the nodes that are connected to
// the "BuildToBuildCommits" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToBuildCommits(opts ...func(*BuildCommitQuery)) *BuildQuery {
	query := (&BuildCommitClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToBuildCommits = query
	return bq
}

// WithBuildToAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "BuildToAdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToAdhocPlans(opts ...func(*AdhocPlanQuery)) *BuildQuery {
	query := (&AdhocPlanClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToAdhocPlans = query
	return bq
}

// WithBuildToAgentStatuses tells the query-builder to eager-load the nodes that are connected to
// the "BuildToAgentStatuses" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToAgentStatuses(opts ...func(*AgentStatusQuery)) *BuildQuery {
	query := (&AgentStatusClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToAgentStatuses = query
	return bq
}

// WithBuildToServerTasks tells the query-builder to eager-load the nodes that are connected to
// the "BuildToServerTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToServerTasks(opts ...func(*ServerTaskQuery)) *BuildQuery {
	query := (&ServerTaskClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToServerTasks = query
	return bq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Revision int `json:"revision,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Build.Query().
//		GroupBy(build.FieldRevision).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bq *BuildQuery) GroupBy(field string, fields ...string) *BuildGroupBy {
	bq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BuildGroupBy{build: bq}
	grbuild.flds = &bq.ctx.Fields
	grbuild.label = build.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Revision int `json:"revision,omitempty"`
//	}
//
//	client.Build.Query().
//		Select(build.FieldRevision).
//		Scan(ctx, &v)
func (bq *BuildQuery) Select(fields ...string) *BuildSelect {
	bq.ctx.Fields = append(bq.ctx.Fields, fields...)
	sbuild := &BuildSelect{BuildQuery: bq}
	sbuild.label = build.Label
	sbuild.flds, sbuild.scan = &bq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BuildSelect configured with the given aggregations.
func (bq *BuildQuery) Aggregate(fns ...AggregateFunc) *BuildSelect {
	return bq.Select().Aggregate(fns...)
}

func (bq *BuildQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bq); err != nil {
				return err
			}
		}
	}
	for _, f := range bq.ctx.Fields {
		if !build.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	return nil
}

func (bq *BuildQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Build, error) {
	var (
		nodes       = []*Build{}
		withFKs     = bq.withFKs
		_spec       = bq.querySpec()
		loadedTypes = [12]bool{
			bq.withBuildToStatus != nil,
			bq.withBuildToEnvironment != nil,
			bq.withBuildToCompetition != nil,
			bq.withBuildToLatestBuildCommit != nil,
			bq.withBuildToRepoCommit != nil,
			bq.withBuildToProvisionedNetwork != nil,
			bq.withBuildToTeam != nil,
			bq.withBuildToPlan != nil,
			bq.withBuildToBuildCommits != nil,
			bq.withBuildToAdhocPlans != nil,
			bq.withBuildToAgentStatuses != nil,
			bq.withBuildToServerTasks != nil,
		}
	)
	if bq.withBuildToEnvironment != nil || bq.withBuildToCompetition != nil || bq.withBuildToLatestBuildCommit != nil || bq.withBuildToRepoCommit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, build.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Build).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Build{config: bq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bq.withBuildToStatus; query != nil {
		if err := bq.loadBuildToStatus(ctx, query, nodes, nil,
			func(n *Build, e *Status) { n.Edges.BuildToStatus = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToEnvironment; query != nil {
		if err := bq.loadBuildToEnvironment(ctx, query, nodes, nil,
			func(n *Build, e *Environment) { n.Edges.BuildToEnvironment = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToCompetition; query != nil {
		if err := bq.loadBuildToCompetition(ctx, query, nodes, nil,
			func(n *Build, e *Competition) { n.Edges.BuildToCompetition = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToLatestBuildCommit; query != nil {
		if err := bq.loadBuildToLatestBuildCommit(ctx, query, nodes, nil,
			func(n *Build, e *BuildCommit) { n.Edges.BuildToLatestBuildCommit = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToRepoCommit; query != nil {
		if err := bq.loadBuildToRepoCommit(ctx, query, nodes, nil,
			func(n *Build, e *RepoCommit) { n.Edges.BuildToRepoCommit = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToProvisionedNetwork; query != nil {
		if err := bq.loadBuildToProvisionedNetwork(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildToProvisionedNetwork = []*ProvisionedNetwork{} },
			func(n *Build, e *ProvisionedNetwork) {
				n.Edges.BuildToProvisionedNetwork = append(n.Edges.BuildToProvisionedNetwork, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToTeam; query != nil {
		if err := bq.loadBuildToTeam(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildToTeam = []*Team{} },
			func(n *Build, e *Team) { n.Edges.BuildToTeam = append(n.Edges.BuildToTeam, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToPlan; query != nil {
		if err := bq.loadBuildToPlan(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildToPlan = []*Plan{} },
			func(n *Build, e *Plan) { n.Edges.BuildToPlan = append(n.Edges.BuildToPlan, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToBuildCommits; query != nil {
		if err := bq.loadBuildToBuildCommits(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildToBuildCommits = []*BuildCommit{} },
			func(n *Build, e *BuildCommit) { n.Edges.BuildToBuildCommits = append(n.Edges.BuildToBuildCommits, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToAdhocPlans; query != nil {
		if err := bq.loadBuildToAdhocPlans(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildToAdhocPlans = []*AdhocPlan{} },
			func(n *Build, e *AdhocPlan) { n.Edges.BuildToAdhocPlans = append(n.Edges.BuildToAdhocPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToAgentStatuses; query != nil {
		if err := bq.loadBuildToAgentStatuses(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildToAgentStatuses = []*AgentStatus{} },
			func(n *Build, e *AgentStatus) { n.Edges.BuildToAgentStatuses = append(n.Edges.BuildToAgentStatuses, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildToServerTasks; query != nil {
		if err := bq.loadBuildToServerTasks(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildToServerTasks = []*ServerTask{} },
			func(n *Build, e *ServerTask) { n.Edges.BuildToServerTasks = append(n.Edges.BuildToServerTasks, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range bq.withNamedBuildToProvisionedNetwork {
		if err := bq.loadBuildToProvisionedNetwork(ctx, query, nodes,
			func(n *Build) { n.appendNamedBuildToProvisionedNetwork(name) },
			func(n *Build, e *ProvisionedNetwork) { n.appendNamedBuildToProvisionedNetwork(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range bq.withNamedBuildToTeam {
		if err := bq.loadBuildToTeam(ctx, query, nodes,
			func(n *Build) { n.appendNamedBuildToTeam(name) },
			func(n *Build, e *Team) { n.appendNamedBuildToTeam(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range bq.withNamedBuildToPlan {
		if err := bq.loadBuildToPlan(ctx, query, nodes,
			func(n *Build) { n.appendNamedBuildToPlan(name) },
			func(n *Build, e *Plan) { n.appendNamedBuildToPlan(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range bq.withNamedBuildToBuildCommits {
		if err := bq.loadBuildToBuildCommits(ctx, query, nodes,
			func(n *Build) { n.appendNamedBuildToBuildCommits(name) },
			func(n *Build, e *BuildCommit) { n.appendNamedBuildToBuildCommits(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range bq.withNamedBuildToAdhocPlans {
		if err := bq.loadBuildToAdhocPlans(ctx, query, nodes,
			func(n *Build) { n.appendNamedBuildToAdhocPlans(name) },
			func(n *Build, e *AdhocPlan) { n.appendNamedBuildToAdhocPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range bq.withNamedBuildToAgentStatuses {
		if err := bq.loadBuildToAgentStatuses(ctx, query, nodes,
			func(n *Build) { n.appendNamedBuildToAgentStatuses(name) },
			func(n *Build, e *AgentStatus) { n.appendNamedBuildToAgentStatuses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range bq.withNamedBuildToServerTasks {
		if err := bq.loadBuildToServerTasks(ctx, query, nodes,
			func(n *Build) { n.appendNamedBuildToServerTasks(name) },
			func(n *Build, e *ServerTask) { n.appendNamedBuildToServerTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range bq.loadTotal {
		if err := bq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bq *BuildQuery) loadBuildToStatus(ctx context.Context, query *StatusQuery, nodes []*Build, init func(*Build), assign func(*Build, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToStatusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.build_build_to_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "build_build_to_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "build_build_to_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildToEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*Build, init func(*Build), assign func(*Build, *Environment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_build_to_environment == nil {
			continue
		}
		fk := *nodes[i].build_build_to_environment
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_build_to_environment" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadBuildToCompetition(ctx context.Context, query *CompetitionQuery, nodes []*Build, init func(*Build), assign func(*Build, *Competition)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_build_to_competition == nil {
			continue
		}
		fk := *nodes[i].build_build_to_competition
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(competition.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_build_to_competition" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadBuildToLatestBuildCommit(ctx context.Context, query *BuildCommitQuery, nodes []*Build, init func(*Build), assign func(*Build, *BuildCommit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_build_to_latest_build_commit == nil {
			continue
		}
		fk := *nodes[i].build_build_to_latest_build_commit
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(buildcommit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_build_to_latest_build_commit" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadBuildToRepoCommit(ctx context.Context, query *RepoCommitQuery, nodes []*Build, init func(*Build), assign func(*Build, *RepoCommit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_build_to_repo_commit == nil {
			continue
		}
		fk := *nodes[i].build_build_to_repo_commit
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(repocommit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_build_to_repo_commit" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadBuildToProvisionedNetwork(ctx context.Context, query *ProvisionedNetworkQuery, nodes []*Build, init func(*Build), assign func(*Build, *ProvisionedNetwork)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToProvisionedNetworkColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provisioned_network_provisioned_network_to_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "provisioned_network_provisioned_network_to_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "provisioned_network_provisioned_network_to_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildToTeam(ctx context.Context, query *TeamQuery, nodes []*Build, init func(*Build), assign func(*Build, *Team)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Team(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToTeamColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.team_team_to_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "team_team_to_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "team_team_to_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildToPlan(ctx context.Context, query *PlanQuery, nodes []*Build, init func(*Build), assign func(*Build, *Plan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Plan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToPlanColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_plan_to_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_plan_to_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_plan_to_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildToBuildCommits(ctx context.Context, query *BuildCommitQuery, nodes []*Build, init func(*Build), assign func(*Build, *BuildCommit)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BuildCommit(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToBuildCommitsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.build_commit_build_commit_to_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "build_commit_build_commit_to_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "build_commit_build_commit_to_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildToAdhocPlans(ctx context.Context, query *AdhocPlanQuery, nodes []*Build, init func(*Build), assign func(*Build, *AdhocPlan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AdhocPlan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToAdhocPlansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.adhoc_plan_adhoc_plan_to_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "adhoc_plan_adhoc_plan_to_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "adhoc_plan_adhoc_plan_to_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildToAgentStatuses(ctx context.Context, query *AgentStatusQuery, nodes []*Build, init func(*Build), assign func(*Build, *AgentStatus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToAgentStatusesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_status_agent_status_to_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_status_agent_status_to_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_status_agent_status_to_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildToServerTasks(ctx context.Context, query *ServerTaskQuery, nodes []*Build, init func(*Build), assign func(*Build, *ServerTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(build.BuildToServerTasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_server_task_to_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_server_task_to_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "server_task_server_task_to_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bq *BuildQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	_spec.Node.Columns = bq.ctx.Fields
	if len(bq.ctx.Fields) > 0 {
		_spec.Unique = bq.ctx.Unique != nil && *bq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BuildQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(build.Table, build.Columns, sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID))
	_spec.From = bq.sql
	if unique := bq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bq.path != nil {
		_spec.Unique = true
	}
	if fields := bq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, build.FieldID)
		for i := range fields {
			if fields[i] != build.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bq *BuildQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(build.Table)
	columns := bq.ctx.Fields
	if len(columns) == 0 {
		columns = build.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bq.ctx.Unique != nil && *bq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector)
	}
	if offset := bq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedBuildToProvisionedNetwork tells the query-builder to eager-load the nodes that are connected to the "BuildToProvisionedNetwork"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithNamedBuildToProvisionedNetwork(name string, opts ...func(*ProvisionedNetworkQuery)) *BuildQuery {
	query := (&ProvisionedNetworkClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if bq.withNamedBuildToProvisionedNetwork == nil {
		bq.withNamedBuildToProvisionedNetwork = make(map[string]*ProvisionedNetworkQuery)
	}
	bq.withNamedBuildToProvisionedNetwork[name] = query
	return bq
}

// WithNamedBuildToTeam tells the query-builder to eager-load the nodes that are connected to the "BuildToTeam"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithNamedBuildToTeam(name string, opts ...func(*TeamQuery)) *BuildQuery {
	query := (&TeamClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if bq.withNamedBuildToTeam == nil {
		bq.withNamedBuildToTeam = make(map[string]*TeamQuery)
	}
	bq.withNamedBuildToTeam[name] = query
	return bq
}

// WithNamedBuildToPlan tells the query-builder to eager-load the nodes that are connected to the "BuildToPlan"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithNamedBuildToPlan(name string, opts ...func(*PlanQuery)) *BuildQuery {
	query := (&PlanClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if bq.withNamedBuildToPlan == nil {
		bq.withNamedBuildToPlan = make(map[string]*PlanQuery)
	}
	bq.withNamedBuildToPlan[name] = query
	return bq
}

// WithNamedBuildToBuildCommits tells the query-builder to eager-load the nodes that are connected to the "BuildToBuildCommits"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithNamedBuildToBuildCommits(name string, opts ...func(*BuildCommitQuery)) *BuildQuery {
	query := (&BuildCommitClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if bq.withNamedBuildToBuildCommits == nil {
		bq.withNamedBuildToBuildCommits = make(map[string]*BuildCommitQuery)
	}
	bq.withNamedBuildToBuildCommits[name] = query
	return bq
}

// WithNamedBuildToAdhocPlans tells the query-builder to eager-load the nodes that are connected to the "BuildToAdhocPlans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithNamedBuildToAdhocPlans(name string, opts ...func(*AdhocPlanQuery)) *BuildQuery {
	query := (&AdhocPlanClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if bq.withNamedBuildToAdhocPlans == nil {
		bq.withNamedBuildToAdhocPlans = make(map[string]*AdhocPlanQuery)
	}
	bq.withNamedBuildToAdhocPlans[name] = query
	return bq
}

// WithNamedBuildToAgentStatuses tells the query-builder to eager-load the nodes that are connected to the "BuildToAgentStatuses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithNamedBuildToAgentStatuses(name string, opts ...func(*AgentStatusQuery)) *BuildQuery {
	query := (&AgentStatusClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if bq.withNamedBuildToAgentStatuses == nil {
		bq.withNamedBuildToAgentStatuses = make(map[string]*AgentStatusQuery)
	}
	bq.withNamedBuildToAgentStatuses[name] = query
	return bq
}

// WithNamedBuildToServerTasks tells the query-builder to eager-load the nodes that are connected to the "BuildToServerTasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithNamedBuildToServerTasks(name string, opts ...func(*ServerTaskQuery)) *BuildQuery {
	query := (&ServerTaskClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if bq.withNamedBuildToServerTasks == nil {
		bq.withNamedBuildToServerTasks = make(map[string]*ServerTaskQuery)
	}
	bq.withNamedBuildToServerTasks[name] = query
	return bq
}

// BuildGroupBy is the group-by builder for Build entities.
type BuildGroupBy struct {
	selector
	build *BuildQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BuildGroupBy) Aggregate(fns ...AggregateFunc) *BuildGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the selector query and scans the result into the given value.
func (bgb *BuildGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bgb.build.ctx, "GroupBy")
	if err := bgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BuildQuery, *BuildGroupBy](ctx, bgb.build, bgb, bgb.build.inters, v)
}

func (bgb *BuildGroupBy) sqlScan(ctx context.Context, root *BuildQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bgb.fns))
	for _, fn := range bgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bgb.flds)+len(bgb.fns))
		for _, f := range *bgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BuildSelect is the builder for selecting fields of Build entities.
type BuildSelect struct {
	*BuildQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bs *BuildSelect) Aggregate(fns ...AggregateFunc) *BuildSelect {
	bs.fns = append(bs.fns, fns...)
	return bs
}

// Scan applies the selector query and scans the result into the given value.
func (bs *BuildSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bs.ctx, "Select")
	if err := bs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BuildQuery, *BuildSelect](ctx, bs.BuildQuery, bs, bs.inters, v)
}

func (bs *BuildSelect) sqlScan(ctx context.Context, root *BuildQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bs.fns))
	for _, fn := range bs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
