// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// BuildQuery is the builder for querying Build entities.
type BuildQuery struct {
	config
	limit                   *int
	offset                  *int
	unique                  *bool
	order                   []OrderFunc
	fields                  []string
	predicates              []predicate.Build
	withStatus              *StatusQuery
	withEnvironment         *EnvironmentQuery
	withCompetition         *CompetitionQuery
	withLatestBuildCommit   *BuildCommitQuery
	withRepoCommit          *RepoCommitQuery
	withProvisionedNetworks *ProvisionedNetworkQuery
	withTeams               *TeamQuery
	withPlans               *PlanQuery
	withBuildCommits        *BuildCommitQuery
	withAdhocPlans          *AdhocPlanQuery
	withAgentStatuses       *AgentStatusQuery
	withServerTasks         *ServerTaskQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BuildQuery builder.
func (bq *BuildQuery) Where(ps ...predicate.Build) *BuildQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit adds a limit step to the query.
func (bq *BuildQuery) Limit(limit int) *BuildQuery {
	bq.limit = &limit
	return bq
}

// Offset adds an offset step to the query.
func (bq *BuildQuery) Offset(offset int) *BuildQuery {
	bq.offset = &offset
	return bq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bq *BuildQuery) Unique(unique bool) *BuildQuery {
	bq.unique = &unique
	return bq
}

// Order adds an order step to the query.
func (bq *BuildQuery) Order(o ...OrderFunc) *BuildQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QueryStatus chains the current query on the "Status" edge.
func (bq *BuildQuery) QueryStatus() *StatusQuery {
	query := &StatusQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, build.StatusTable, build.StatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironment chains the current query on the "Environment" edge.
func (bq *BuildQuery) QueryEnvironment() *EnvironmentQuery {
	query := &EnvironmentQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.EnvironmentTable, build.EnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompetition chains the current query on the "Competition" edge.
func (bq *BuildQuery) QueryCompetition() *CompetitionQuery {
	query := &CompetitionQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.CompetitionTable, build.CompetitionColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLatestBuildCommit chains the current query on the "LatestBuildCommit" edge.
func (bq *BuildQuery) QueryLatestBuildCommit() *BuildCommitQuery {
	query := &BuildCommitQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.LatestBuildCommitTable, build.LatestBuildCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRepoCommit chains the current query on the "RepoCommit" edge.
func (bq *BuildQuery) QueryRepoCommit() *RepoCommitQuery {
	query := &RepoCommitQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(repocommit.Table, repocommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.RepoCommitTable, build.RepoCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetworks chains the current query on the "ProvisionedNetworks" edge.
func (bq *BuildQuery) QueryProvisionedNetworks() *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.ProvisionedNetworksTable, build.ProvisionedNetworksColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeams chains the current query on the "Teams" edge.
func (bq *BuildQuery) QueryTeams() *TeamQuery {
	query := &TeamQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.TeamsTable, build.TeamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlans chains the current query on the "Plans" edge.
func (bq *BuildQuery) QueryPlans() *PlanQuery {
	query := &PlanQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.PlansTable, build.PlansColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildCommits chains the current query on the "BuildCommits" edge.
func (bq *BuildQuery) QueryBuildCommits() *BuildCommitQuery {
	query := &BuildCommitQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildCommitsTable, build.BuildCommitsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdhocPlans chains the current query on the "AdhocPlans" edge.
func (bq *BuildQuery) QueryAdhocPlans() *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.AdhocPlansTable, build.AdhocPlansColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAgentStatuses chains the current query on the "AgentStatuses" edge.
func (bq *BuildQuery) QueryAgentStatuses() *AgentStatusQuery {
	query := &AgentStatusQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(agentstatus.Table, agentstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.AgentStatusesTable, build.AgentStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTasks chains the current query on the "ServerTasks" edge.
func (bq *BuildQuery) QueryServerTasks() *ServerTaskQuery {
	query := &ServerTaskQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(servertask.Table, servertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.ServerTasksTable, build.ServerTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Build entity from the query.
// Returns a *NotFoundError when no Build was found.
func (bq *BuildQuery) First(ctx context.Context) (*Build, error) {
	nodes, err := bq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{build.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BuildQuery) FirstX(ctx context.Context) *Build {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Build ID from the query.
// Returns a *NotFoundError when no Build ID was found.
func (bq *BuildQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{build.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BuildQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Build entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Build entity is found.
// Returns a *NotFoundError when no Build entities are found.
func (bq *BuildQuery) Only(ctx context.Context) (*Build, error) {
	nodes, err := bq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{build.Label}
	default:
		return nil, &NotSingularError{build.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BuildQuery) OnlyX(ctx context.Context) *Build {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Build ID in the query.
// Returns a *NotSingularError when more than one Build ID is found.
// Returns a *NotFoundError when no entities are found.
func (bq *BuildQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = &NotSingularError{build.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BuildQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Builds.
func (bq *BuildQuery) All(ctx context.Context) ([]*Build, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bq *BuildQuery) AllX(ctx context.Context) []*Build {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Build IDs.
func (bq *BuildQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := bq.Select(build.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BuildQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BuildQuery) Count(ctx context.Context) (int, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BuildQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BuildQuery) Exist(ctx context.Context) (bool, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BuildQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BuildQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BuildQuery) Clone() *BuildQuery {
	if bq == nil {
		return nil
	}
	return &BuildQuery{
		config:                  bq.config,
		limit:                   bq.limit,
		offset:                  bq.offset,
		order:                   append([]OrderFunc{}, bq.order...),
		predicates:              append([]predicate.Build{}, bq.predicates...),
		withStatus:              bq.withStatus.Clone(),
		withEnvironment:         bq.withEnvironment.Clone(),
		withCompetition:         bq.withCompetition.Clone(),
		withLatestBuildCommit:   bq.withLatestBuildCommit.Clone(),
		withRepoCommit:          bq.withRepoCommit.Clone(),
		withProvisionedNetworks: bq.withProvisionedNetworks.Clone(),
		withTeams:               bq.withTeams.Clone(),
		withPlans:               bq.withPlans.Clone(),
		withBuildCommits:        bq.withBuildCommits.Clone(),
		withAdhocPlans:          bq.withAdhocPlans.Clone(),
		withAgentStatuses:       bq.withAgentStatuses.Clone(),
		withServerTasks:         bq.withServerTasks.Clone(),
		// clone intermediate query.
		sql:    bq.sql.Clone(),
		path:   bq.path,
		unique: bq.unique,
	}
}

// WithStatus tells the query-builder to eager-load the nodes that are connected to
// the "Status" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithStatus(opts ...func(*StatusQuery)) *BuildQuery {
	query := &StatusQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withStatus = query
	return bq
}

// WithEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "Environment" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithEnvironment(opts ...func(*EnvironmentQuery)) *BuildQuery {
	query := &EnvironmentQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withEnvironment = query
	return bq
}

// WithCompetition tells the query-builder to eager-load the nodes that are connected to
// the "Competition" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithCompetition(opts ...func(*CompetitionQuery)) *BuildQuery {
	query := &CompetitionQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withCompetition = query
	return bq
}

// WithLatestBuildCommit tells the query-builder to eager-load the nodes that are connected to
// the "LatestBuildCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithLatestBuildCommit(opts ...func(*BuildCommitQuery)) *BuildQuery {
	query := &BuildCommitQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withLatestBuildCommit = query
	return bq
}

// WithRepoCommit tells the query-builder to eager-load the nodes that are connected to
// the "RepoCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithRepoCommit(opts ...func(*RepoCommitQuery)) *BuildQuery {
	query := &RepoCommitQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withRepoCommit = query
	return bq
}

// WithProvisionedNetworks tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworks" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithProvisionedNetworks(opts ...func(*ProvisionedNetworkQuery)) *BuildQuery {
	query := &ProvisionedNetworkQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withProvisionedNetworks = query
	return bq
}

// WithTeams tells the query-builder to eager-load the nodes that are connected to
// the "Teams" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithTeams(opts ...func(*TeamQuery)) *BuildQuery {
	query := &TeamQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withTeams = query
	return bq
}

// WithPlans tells the query-builder to eager-load the nodes that are connected to
// the "Plans" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithPlans(opts ...func(*PlanQuery)) *BuildQuery {
	query := &PlanQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withPlans = query
	return bq
}

// WithBuildCommits tells the query-builder to eager-load the nodes that are connected to
// the "BuildCommits" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildCommits(opts ...func(*BuildCommitQuery)) *BuildQuery {
	query := &BuildCommitQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildCommits = query
	return bq
}

// WithAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "AdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithAdhocPlans(opts ...func(*AdhocPlanQuery)) *BuildQuery {
	query := &AdhocPlanQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withAdhocPlans = query
	return bq
}

// WithAgentStatuses tells the query-builder to eager-load the nodes that are connected to
// the "AgentStatuses" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithAgentStatuses(opts ...func(*AgentStatusQuery)) *BuildQuery {
	query := &AgentStatusQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withAgentStatuses = query
	return bq
}

// WithServerTasks tells the query-builder to eager-load the nodes that are connected to
// the "ServerTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithServerTasks(opts ...func(*ServerTaskQuery)) *BuildQuery {
	query := &ServerTaskQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withServerTasks = query
	return bq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Revision int `json:"revision,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Build.Query().
//		GroupBy(build.FieldRevision).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bq *BuildQuery) GroupBy(field string, fields ...string) *BuildGroupBy {
	grbuild := &BuildGroupBy{config: bq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bq.sqlQuery(ctx), nil
	}
	grbuild.label = build.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Revision int `json:"revision,omitempty"`
//	}
//
//	client.Build.Query().
//		Select(build.FieldRevision).
//		Scan(ctx, &v)
func (bq *BuildQuery) Select(fields ...string) *BuildSelect {
	bq.fields = append(bq.fields, fields...)
	selbuild := &BuildSelect{BuildQuery: bq}
	selbuild.label = build.Label
	selbuild.flds, selbuild.scan = &bq.fields, selbuild.Scan
	return selbuild
}

func (bq *BuildQuery) prepareQuery(ctx context.Context) error {
	for _, f := range bq.fields {
		if !build.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	return nil
}

func (bq *BuildQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Build, error) {
	var (
		nodes       = []*Build{}
		withFKs     = bq.withFKs
		_spec       = bq.querySpec()
		loadedTypes = [12]bool{
			bq.withStatus != nil,
			bq.withEnvironment != nil,
			bq.withCompetition != nil,
			bq.withLatestBuildCommit != nil,
			bq.withRepoCommit != nil,
			bq.withProvisionedNetworks != nil,
			bq.withTeams != nil,
			bq.withPlans != nil,
			bq.withBuildCommits != nil,
			bq.withAdhocPlans != nil,
			bq.withAgentStatuses != nil,
			bq.withServerTasks != nil,
		}
	)
	if bq.withEnvironment != nil || bq.withCompetition != nil || bq.withLatestBuildCommit != nil || bq.withRepoCommit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, build.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Build).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Build{config: bq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bq.withStatus; query != nil {
		if err := bq.loadStatus(ctx, query, nodes, nil,
			func(n *Build, e *Status) { n.Edges.Status = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withEnvironment; query != nil {
		if err := bq.loadEnvironment(ctx, query, nodes, nil,
			func(n *Build, e *Environment) { n.Edges.Environment = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withCompetition; query != nil {
		if err := bq.loadCompetition(ctx, query, nodes, nil,
			func(n *Build, e *Competition) { n.Edges.Competition = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withLatestBuildCommit; query != nil {
		if err := bq.loadLatestBuildCommit(ctx, query, nodes, nil,
			func(n *Build, e *BuildCommit) { n.Edges.LatestBuildCommit = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withRepoCommit; query != nil {
		if err := bq.loadRepoCommit(ctx, query, nodes, nil,
			func(n *Build, e *RepoCommit) { n.Edges.RepoCommit = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withProvisionedNetworks; query != nil {
		if err := bq.loadProvisionedNetworks(ctx, query, nodes,
			func(n *Build) { n.Edges.ProvisionedNetworks = []*ProvisionedNetwork{} },
			func(n *Build, e *ProvisionedNetwork) {
				n.Edges.ProvisionedNetworks = append(n.Edges.ProvisionedNetworks, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := bq.withTeams; query != nil {
		if err := bq.loadTeams(ctx, query, nodes,
			func(n *Build) { n.Edges.Teams = []*Team{} },
			func(n *Build, e *Team) { n.Edges.Teams = append(n.Edges.Teams, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withPlans; query != nil {
		if err := bq.loadPlans(ctx, query, nodes,
			func(n *Build) { n.Edges.Plans = []*Plan{} },
			func(n *Build, e *Plan) { n.Edges.Plans = append(n.Edges.Plans, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBuildCommits; query != nil {
		if err := bq.loadBuildCommits(ctx, query, nodes,
			func(n *Build) { n.Edges.BuildCommits = []*BuildCommit{} },
			func(n *Build, e *BuildCommit) { n.Edges.BuildCommits = append(n.Edges.BuildCommits, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withAdhocPlans; query != nil {
		if err := bq.loadAdhocPlans(ctx, query, nodes,
			func(n *Build) { n.Edges.AdhocPlans = []*AdhocPlan{} },
			func(n *Build, e *AdhocPlan) { n.Edges.AdhocPlans = append(n.Edges.AdhocPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withAgentStatuses; query != nil {
		if err := bq.loadAgentStatuses(ctx, query, nodes,
			func(n *Build) { n.Edges.AgentStatuses = []*AgentStatus{} },
			func(n *Build, e *AgentStatus) { n.Edges.AgentStatuses = append(n.Edges.AgentStatuses, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withServerTasks; query != nil {
		if err := bq.loadServerTasks(ctx, query, nodes,
			func(n *Build) { n.Edges.ServerTasks = []*ServerTask{} },
			func(n *Build, e *ServerTask) { n.Edges.ServerTasks = append(n.Edges.ServerTasks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bq *BuildQuery) loadStatus(ctx context.Context, query *StatusQuery, nodes []*Build, init func(*Build), assign func(*Build, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(build.StatusColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.build_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "build_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*Build, init func(*Build), assign func(*Build, *Environment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_environment == nil {
			continue
		}
		fk := *nodes[i].build_environment
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_environment" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadCompetition(ctx context.Context, query *CompetitionQuery, nodes []*Build, init func(*Build), assign func(*Build, *Competition)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_competition == nil {
			continue
		}
		fk := *nodes[i].build_competition
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(competition.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_competition" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadLatestBuildCommit(ctx context.Context, query *BuildCommitQuery, nodes []*Build, init func(*Build), assign func(*Build, *BuildCommit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_latest_build_commit == nil {
			continue
		}
		fk := *nodes[i].build_latest_build_commit
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(buildcommit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_latest_build_commit" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadRepoCommit(ctx context.Context, query *RepoCommitQuery, nodes []*Build, init func(*Build), assign func(*Build, *RepoCommit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Build)
	for i := range nodes {
		if nodes[i].build_repo_commit == nil {
			continue
		}
		fk := *nodes[i].build_repo_commit
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(repocommit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_repo_commit" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BuildQuery) loadProvisionedNetworks(ctx context.Context, query *ProvisionedNetworkQuery, nodes []*Build, init func(*Build), assign func(*Build, *ProvisionedNetwork)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.InValues(build.ProvisionedNetworksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provisioned_network_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "provisioned_network_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioned_network_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadTeams(ctx context.Context, query *TeamQuery, nodes []*Build, init func(*Build), assign func(*Build, *Team)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Team(func(s *sql.Selector) {
		s.Where(sql.InValues(build.TeamsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.team_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "team_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadPlans(ctx context.Context, query *PlanQuery, nodes []*Build, init func(*Build), assign func(*Build, *Plan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Plan(func(s *sql.Selector) {
		s.Where(sql.InValues(build.PlansColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadBuildCommits(ctx context.Context, query *BuildCommitQuery, nodes []*Build, init func(*Build), assign func(*Build, *BuildCommit)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BuildCommit(func(s *sql.Selector) {
		s.Where(sql.InValues(build.BuildCommitsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.build_commit_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "build_commit_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_commit_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadAdhocPlans(ctx context.Context, query *AdhocPlanQuery, nodes []*Build, init func(*Build), assign func(*Build, *AdhocPlan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AdhocPlan(func(s *sql.Selector) {
		s.Where(sql.InValues(build.AdhocPlansColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.adhoc_plan_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "adhoc_plan_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "adhoc_plan_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadAgentStatuses(ctx context.Context, query *AgentStatusQuery, nodes []*Build, init func(*Build), assign func(*Build, *AgentStatus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.InValues(build.AgentStatusesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_status_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_status_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_status_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BuildQuery) loadServerTasks(ctx context.Context, query *ServerTaskQuery, nodes []*Build, init func(*Build), assign func(*Build, *ServerTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Build)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.InValues(build.ServerTasksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_build
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_build" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_build" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bq *BuildQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	_spec.Node.Columns = bq.fields
	if len(bq.fields) > 0 {
		_spec.Unique = bq.unique != nil && *bq.unique
	}
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BuildQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (bq *BuildQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   build.Table,
			Columns: build.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: build.FieldID,
			},
		},
		From:   bq.sql,
		Unique: true,
	}
	if unique := bq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := bq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, build.FieldID)
		for i := range fields {
			if fields[i] != build.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bq *BuildQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(build.Table)
	columns := bq.fields
	if len(columns) == 0 {
		columns = build.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bq.unique != nil && *bq.unique {
		selector.Distinct()
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector)
	}
	if offset := bq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BuildGroupBy is the group-by builder for Build entities.
type BuildGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BuildGroupBy) Aggregate(fns ...AggregateFunc) *BuildGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the group-by query and scans the result into the given value.
func (bgb *BuildGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bgb.path(ctx)
	if err != nil {
		return err
	}
	bgb.sql = query
	return bgb.sqlScan(ctx, v)
}

func (bgb *BuildGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bgb.fields {
		if !build.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bgb *BuildGroupBy) sqlQuery() *sql.Selector {
	selector := bgb.sql.Select()
	aggregation := make([]string, 0, len(bgb.fns))
	for _, fn := range bgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(bgb.fields)+len(bgb.fns))
		for _, f := range bgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(bgb.fields...)...)
}

// BuildSelect is the builder for selecting fields of Build entities.
type BuildSelect struct {
	*BuildQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bs *BuildSelect) Scan(ctx context.Context, v interface{}) error {
	if err := bs.prepareQuery(ctx); err != nil {
		return err
	}
	bs.sql = bs.BuildQuery.sqlQuery(ctx)
	return bs.sqlScan(ctx, v)
}

func (bs *BuildSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bs.sql.Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
