// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/go-git/go-git/v5/plumbing/object"
	"github.com/google/uuid"
)

// RepoCommit is the model entity for the RepoCommit schema.
type RepoCommit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Author holds the value of the "author" field.
	Author object.Signature `json:"author,omitempty"`
	// Committer holds the value of the "committer" field.
	Committer object.Signature `json:"committer,omitempty"`
	// PgpSignature holds the value of the "pgp_signature" field.
	PgpSignature string `json:"pgp_signature,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// TreeHash holds the value of the "tree_hash" field.
	TreeHash string `json:"tree_hash,omitempty"`
	// ParentHashes holds the value of the "parent_hashes" field.
	ParentHashes []string `json:"parent_hashes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepoCommitQuery when eager-loading is set.
	Edges RepoCommitEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Repository holds the value of the Repository edge.
	HCLRepository *Repository `json:"Repository,omitempty"`
	//
	repository_repo_commits *uuid.UUID
}

// RepoCommitEdges holds the relations/edges for other nodes in the graph.
type RepoCommitEdges struct {
	// Repository holds the value of the Repository edge.
	Repository *Repository `json:"Repository,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepoCommitEdges) RepositoryOrErr() (*Repository, error) {
	if e.loadedTypes[0] {
		if e.Repository == nil {
			// The edge Repository was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repository.Label}
		}
		return e.Repository, nil
	}
	return nil, &NotLoadedError{edge: "Repository"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RepoCommit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case repocommit.FieldAuthor, repocommit.FieldCommitter, repocommit.FieldParentHashes:
			values[i] = new([]byte)
		case repocommit.FieldRevision:
			values[i] = new(sql.NullInt64)
		case repocommit.FieldHash, repocommit.FieldPgpSignature, repocommit.FieldMessage, repocommit.FieldTreeHash:
			values[i] = new(sql.NullString)
		case repocommit.FieldID:
			values[i] = new(uuid.UUID)
		case repocommit.ForeignKeys[0]: // repository_repo_commits
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type RepoCommit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RepoCommit fields.
func (rc *RepoCommit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repocommit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rc.ID = *value
			}
		case repocommit.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				rc.Revision = int(value.Int64)
			}
		case repocommit.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				rc.Hash = value.String
			}
		case repocommit.FieldAuthor:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rc.Author); err != nil {
					return fmt.Errorf("unmarshal field author: %w", err)
				}
			}
		case repocommit.FieldCommitter:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field committer", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rc.Committer); err != nil {
					return fmt.Errorf("unmarshal field committer: %w", err)
				}
			}
		case repocommit.FieldPgpSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pgp_signature", values[i])
			} else if value.Valid {
				rc.PgpSignature = value.String
			}
		case repocommit.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				rc.Message = value.String
			}
		case repocommit.FieldTreeHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tree_hash", values[i])
			} else if value.Valid {
				rc.TreeHash = value.String
			}
		case repocommit.FieldParentHashes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field parent_hashes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rc.ParentHashes); err != nil {
					return fmt.Errorf("unmarshal field parent_hashes: %w", err)
				}
			}
		case repocommit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field repository_repo_commits", values[i])
			} else if value.Valid {
				rc.repository_repo_commits = new(uuid.UUID)
				*rc.repository_repo_commits = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryRepository queries the "Repository" edge of the RepoCommit entity.
func (rc *RepoCommit) QueryRepository() *RepositoryQuery {
	return (&RepoCommitClient{config: rc.config}).QueryRepository(rc)
}

// Update returns a builder for updating this RepoCommit.
// Note that you need to call RepoCommit.Unwrap() before calling this method if this RepoCommit
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RepoCommit) Update() *RepoCommitUpdateOne {
	return (&RepoCommitClient{config: rc.config}).UpdateOne(rc)
}

// Unwrap unwraps the RepoCommit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RepoCommit) Unwrap() *RepoCommit {
	tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RepoCommit is not a transactional entity")
	}
	rc.config.driver = tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RepoCommit) String() string {
	var builder strings.Builder
	builder.WriteString("RepoCommit(")
	builder.WriteString(fmt.Sprintf("id=%v", rc.ID))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", rc.Revision))
	builder.WriteString(", hash=")
	builder.WriteString(rc.Hash)
	builder.WriteString(", author=")
	builder.WriteString(fmt.Sprintf("%v", rc.Author))
	builder.WriteString(", committer=")
	builder.WriteString(fmt.Sprintf("%v", rc.Committer))
	builder.WriteString(", pgp_signature=")
	builder.WriteString(rc.PgpSignature)
	builder.WriteString(", message=")
	builder.WriteString(rc.Message)
	builder.WriteString(", tree_hash=")
	builder.WriteString(rc.TreeHash)
	builder.WriteString(", parent_hashes=")
	builder.WriteString(fmt.Sprintf("%v", rc.ParentHashes))
	builder.WriteByte(')')
	return builder.String()
}

// RepoCommits is a parsable slice of RepoCommit.
type RepoCommits []*RepoCommit

func (rc RepoCommits) config(cfg config) {
	for _i := range rc {
		rc[_i].config = cfg
	}
}
