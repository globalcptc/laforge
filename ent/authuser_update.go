// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/token"
	"github.com/google/uuid"
)

// AuthUserUpdate is the builder for updating AuthUser entities.
type AuthUserUpdate struct {
	config
	hooks    []Hook
	mutation *AuthUserMutation
}

// Where appends a list predicates to the AuthUserUpdate builder.
func (auu *AuthUserUpdate) Where(ps ...predicate.AuthUser) *AuthUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUsername sets the "username" field.
func (auu *AuthUserUpdate) SetUsername(s string) *AuthUserUpdate {
	auu.mutation.SetUsername(s)
	return auu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableUsername(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetUsername(*s)
	}
	return auu
}

// SetPassword sets the "password" field.
func (auu *AuthUserUpdate) SetPassword(s string) *AuthUserUpdate {
	auu.mutation.SetPassword(s)
	return auu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillablePassword(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetPassword(*s)
	}
	return auu
}

// SetFirstName sets the "first_name" field.
func (auu *AuthUserUpdate) SetFirstName(s string) *AuthUserUpdate {
	auu.mutation.SetFirstName(s)
	return auu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableFirstName(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetFirstName(*s)
	}
	return auu
}

// SetLastName sets the "last_name" field.
func (auu *AuthUserUpdate) SetLastName(s string) *AuthUserUpdate {
	auu.mutation.SetLastName(s)
	return auu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableLastName(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetLastName(*s)
	}
	return auu
}

// SetEmail sets the "email" field.
func (auu *AuthUserUpdate) SetEmail(s string) *AuthUserUpdate {
	auu.mutation.SetEmail(s)
	return auu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableEmail(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetEmail(*s)
	}
	return auu
}

// SetPhone sets the "phone" field.
func (auu *AuthUserUpdate) SetPhone(s string) *AuthUserUpdate {
	auu.mutation.SetPhone(s)
	return auu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillablePhone(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetPhone(*s)
	}
	return auu
}

// SetCompany sets the "company" field.
func (auu *AuthUserUpdate) SetCompany(s string) *AuthUserUpdate {
	auu.mutation.SetCompany(s)
	return auu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableCompany(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetCompany(*s)
	}
	return auu
}

// SetOccupation sets the "occupation" field.
func (auu *AuthUserUpdate) SetOccupation(s string) *AuthUserUpdate {
	auu.mutation.SetOccupation(s)
	return auu
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableOccupation(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetOccupation(*s)
	}
	return auu
}

// SetPrivateKeyPath sets the "private_key_path" field.
func (auu *AuthUserUpdate) SetPrivateKeyPath(s string) *AuthUserUpdate {
	auu.mutation.SetPrivateKeyPath(s)
	return auu
}

// SetNillablePrivateKeyPath sets the "private_key_path" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillablePrivateKeyPath(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetPrivateKeyPath(*s)
	}
	return auu
}

// SetRole sets the "role" field.
func (auu *AuthUserUpdate) SetRole(a authuser.Role) *AuthUserUpdate {
	auu.mutation.SetRole(a)
	return auu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableRole(a *authuser.Role) *AuthUserUpdate {
	if a != nil {
		auu.SetRole(*a)
	}
	return auu
}

// SetProvider sets the "provider" field.
func (auu *AuthUserUpdate) SetProvider(a authuser.Provider) *AuthUserUpdate {
	auu.mutation.SetProvider(a)
	return auu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableProvider(a *authuser.Provider) *AuthUserUpdate {
	if a != nil {
		auu.SetProvider(*a)
	}
	return auu
}

// AddAuthUserToTokenIDs adds the "AuthUserToToken" edge to the Token entity by IDs.
func (auu *AuthUserUpdate) AddAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdate {
	auu.mutation.AddAuthUserToTokenIDs(ids...)
	return auu
}

// AddAuthUserToToken adds the "AuthUserToToken" edges to the Token entity.
func (auu *AuthUserUpdate) AddAuthUserToToken(t ...*Token) *AuthUserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auu.AddAuthUserToTokenIDs(ids...)
}

// AddAuthUserToServerTaskIDs adds the "AuthUserToServerTasks" edge to the ServerTask entity by IDs.
func (auu *AuthUserUpdate) AddAuthUserToServerTaskIDs(ids ...uuid.UUID) *AuthUserUpdate {
	auu.mutation.AddAuthUserToServerTaskIDs(ids...)
	return auu
}

// AddAuthUserToServerTasks adds the "AuthUserToServerTasks" edges to the ServerTask entity.
func (auu *AuthUserUpdate) AddAuthUserToServerTasks(s ...*ServerTask) *AuthUserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auu.AddAuthUserToServerTaskIDs(ids...)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auu *AuthUserUpdate) Mutation() *AuthUserMutation {
	return auu.mutation
}

// ClearAuthUserToToken clears all "AuthUserToToken" edges to the Token entity.
func (auu *AuthUserUpdate) ClearAuthUserToToken() *AuthUserUpdate {
	auu.mutation.ClearAuthUserToToken()
	return auu
}

// RemoveAuthUserToTokenIDs removes the "AuthUserToToken" edge to Token entities by IDs.
func (auu *AuthUserUpdate) RemoveAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdate {
	auu.mutation.RemoveAuthUserToTokenIDs(ids...)
	return auu
}

// RemoveAuthUserToToken removes "AuthUserToToken" edges to Token entities.
func (auu *AuthUserUpdate) RemoveAuthUserToToken(t ...*Token) *AuthUserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auu.RemoveAuthUserToTokenIDs(ids...)
}

// ClearAuthUserToServerTasks clears all "AuthUserToServerTasks" edges to the ServerTask entity.
func (auu *AuthUserUpdate) ClearAuthUserToServerTasks() *AuthUserUpdate {
	auu.mutation.ClearAuthUserToServerTasks()
	return auu
}

// RemoveAuthUserToServerTaskIDs removes the "AuthUserToServerTasks" edge to ServerTask entities by IDs.
func (auu *AuthUserUpdate) RemoveAuthUserToServerTaskIDs(ids ...uuid.UUID) *AuthUserUpdate {
	auu.mutation.RemoveAuthUserToServerTaskIDs(ids...)
	return auu
}

// RemoveAuthUserToServerTasks removes "AuthUserToServerTasks" edges to ServerTask entities.
func (auu *AuthUserUpdate) RemoveAuthUserToServerTasks(s ...*ServerTask) *AuthUserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auu.RemoveAuthUserToServerTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AuthUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AuthUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AuthUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AuthUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AuthUserUpdate) check() error {
	if v, ok := auu.mutation.Role(); ok {
		if err := authuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "AuthUser.role": %w`, err)}
		}
	}
	if v, ok := auu.mutation.Provider(); ok {
		if err := authuser.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "AuthUser.provider": %w`, err)}
		}
	}
	return nil
}

func (auu *AuthUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := auu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authuser.Table, authuser.Columns, sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeUUID))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.Username(); ok {
		_spec.SetField(authuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auu.mutation.Password(); ok {
		_spec.SetField(authuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := auu.mutation.FirstName(); ok {
		_spec.SetField(authuser.FieldFirstName, field.TypeString, value)
	}
	if value, ok := auu.mutation.LastName(); ok {
		_spec.SetField(authuser.FieldLastName, field.TypeString, value)
	}
	if value, ok := auu.mutation.Email(); ok {
		_spec.SetField(authuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := auu.mutation.Phone(); ok {
		_spec.SetField(authuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := auu.mutation.Company(); ok {
		_spec.SetField(authuser.FieldCompany, field.TypeString, value)
	}
	if value, ok := auu.mutation.Occupation(); ok {
		_spec.SetField(authuser.FieldOccupation, field.TypeString, value)
	}
	if value, ok := auu.mutation.PrivateKeyPath(); ok {
		_spec.SetField(authuser.FieldPrivateKeyPath, field.TypeString, value)
	}
	if value, ok := auu.mutation.Role(); ok {
		_spec.SetField(authuser.FieldRole, field.TypeEnum, value)
	}
	if value, ok := auu.mutation.Provider(); ok {
		_spec.SetField(authuser.FieldProvider, field.TypeEnum, value)
	}
	if auu.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedAuthUserToTokenIDs(); len(nodes) > 0 && !auu.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AuthUserToTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.AuthUserToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   authuser.AuthUserToServerTasksTable,
			Columns: []string{authuser.AuthUserToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedAuthUserToServerTasksIDs(); len(nodes) > 0 && !auu.mutation.AuthUserToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   authuser.AuthUserToServerTasksTable,
			Columns: []string{authuser.AuthUserToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AuthUserToServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   authuser.AuthUserToServerTasksTable,
			Columns: []string{authuser.AuthUserToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AuthUserUpdateOne is the builder for updating a single AuthUser entity.
type AuthUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthUserMutation
}

// SetUsername sets the "username" field.
func (auuo *AuthUserUpdateOne) SetUsername(s string) *AuthUserUpdateOne {
	auuo.mutation.SetUsername(s)
	return auuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableUsername(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetUsername(*s)
	}
	return auuo
}

// SetPassword sets the "password" field.
func (auuo *AuthUserUpdateOne) SetPassword(s string) *AuthUserUpdateOne {
	auuo.mutation.SetPassword(s)
	return auuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillablePassword(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetPassword(*s)
	}
	return auuo
}

// SetFirstName sets the "first_name" field.
func (auuo *AuthUserUpdateOne) SetFirstName(s string) *AuthUserUpdateOne {
	auuo.mutation.SetFirstName(s)
	return auuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableFirstName(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetFirstName(*s)
	}
	return auuo
}

// SetLastName sets the "last_name" field.
func (auuo *AuthUserUpdateOne) SetLastName(s string) *AuthUserUpdateOne {
	auuo.mutation.SetLastName(s)
	return auuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableLastName(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetLastName(*s)
	}
	return auuo
}

// SetEmail sets the "email" field.
func (auuo *AuthUserUpdateOne) SetEmail(s string) *AuthUserUpdateOne {
	auuo.mutation.SetEmail(s)
	return auuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableEmail(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetEmail(*s)
	}
	return auuo
}

// SetPhone sets the "phone" field.
func (auuo *AuthUserUpdateOne) SetPhone(s string) *AuthUserUpdateOne {
	auuo.mutation.SetPhone(s)
	return auuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillablePhone(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetPhone(*s)
	}
	return auuo
}

// SetCompany sets the "company" field.
func (auuo *AuthUserUpdateOne) SetCompany(s string) *AuthUserUpdateOne {
	auuo.mutation.SetCompany(s)
	return auuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableCompany(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetCompany(*s)
	}
	return auuo
}

// SetOccupation sets the "occupation" field.
func (auuo *AuthUserUpdateOne) SetOccupation(s string) *AuthUserUpdateOne {
	auuo.mutation.SetOccupation(s)
	return auuo
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableOccupation(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetOccupation(*s)
	}
	return auuo
}

// SetPrivateKeyPath sets the "private_key_path" field.
func (auuo *AuthUserUpdateOne) SetPrivateKeyPath(s string) *AuthUserUpdateOne {
	auuo.mutation.SetPrivateKeyPath(s)
	return auuo
}

// SetNillablePrivateKeyPath sets the "private_key_path" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillablePrivateKeyPath(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetPrivateKeyPath(*s)
	}
	return auuo
}

// SetRole sets the "role" field.
func (auuo *AuthUserUpdateOne) SetRole(a authuser.Role) *AuthUserUpdateOne {
	auuo.mutation.SetRole(a)
	return auuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableRole(a *authuser.Role) *AuthUserUpdateOne {
	if a != nil {
		auuo.SetRole(*a)
	}
	return auuo
}

// SetProvider sets the "provider" field.
func (auuo *AuthUserUpdateOne) SetProvider(a authuser.Provider) *AuthUserUpdateOne {
	auuo.mutation.SetProvider(a)
	return auuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableProvider(a *authuser.Provider) *AuthUserUpdateOne {
	if a != nil {
		auuo.SetProvider(*a)
	}
	return auuo
}

// AddAuthUserToTokenIDs adds the "AuthUserToToken" edge to the Token entity by IDs.
func (auuo *AuthUserUpdateOne) AddAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdateOne {
	auuo.mutation.AddAuthUserToTokenIDs(ids...)
	return auuo
}

// AddAuthUserToToken adds the "AuthUserToToken" edges to the Token entity.
func (auuo *AuthUserUpdateOne) AddAuthUserToToken(t ...*Token) *AuthUserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auuo.AddAuthUserToTokenIDs(ids...)
}

// AddAuthUserToServerTaskIDs adds the "AuthUserToServerTasks" edge to the ServerTask entity by IDs.
func (auuo *AuthUserUpdateOne) AddAuthUserToServerTaskIDs(ids ...uuid.UUID) *AuthUserUpdateOne {
	auuo.mutation.AddAuthUserToServerTaskIDs(ids...)
	return auuo
}

// AddAuthUserToServerTasks adds the "AuthUserToServerTasks" edges to the ServerTask entity.
func (auuo *AuthUserUpdateOne) AddAuthUserToServerTasks(s ...*ServerTask) *AuthUserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auuo.AddAuthUserToServerTaskIDs(ids...)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auuo *AuthUserUpdateOne) Mutation() *AuthUserMutation {
	return auuo.mutation
}

// ClearAuthUserToToken clears all "AuthUserToToken" edges to the Token entity.
func (auuo *AuthUserUpdateOne) ClearAuthUserToToken() *AuthUserUpdateOne {
	auuo.mutation.ClearAuthUserToToken()
	return auuo
}

// RemoveAuthUserToTokenIDs removes the "AuthUserToToken" edge to Token entities by IDs.
func (auuo *AuthUserUpdateOne) RemoveAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdateOne {
	auuo.mutation.RemoveAuthUserToTokenIDs(ids...)
	return auuo
}

// RemoveAuthUserToToken removes "AuthUserToToken" edges to Token entities.
func (auuo *AuthUserUpdateOne) RemoveAuthUserToToken(t ...*Token) *AuthUserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auuo.RemoveAuthUserToTokenIDs(ids...)
}

// ClearAuthUserToServerTasks clears all "AuthUserToServerTasks" edges to the ServerTask entity.
func (auuo *AuthUserUpdateOne) ClearAuthUserToServerTasks() *AuthUserUpdateOne {
	auuo.mutation.ClearAuthUserToServerTasks()
	return auuo
}

// RemoveAuthUserToServerTaskIDs removes the "AuthUserToServerTasks" edge to ServerTask entities by IDs.
func (auuo *AuthUserUpdateOne) RemoveAuthUserToServerTaskIDs(ids ...uuid.UUID) *AuthUserUpdateOne {
	auuo.mutation.RemoveAuthUserToServerTaskIDs(ids...)
	return auuo
}

// RemoveAuthUserToServerTasks removes "AuthUserToServerTasks" edges to ServerTask entities.
func (auuo *AuthUserUpdateOne) RemoveAuthUserToServerTasks(s ...*ServerTask) *AuthUserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auuo.RemoveAuthUserToServerTaskIDs(ids...)
}

// Where appends a list predicates to the AuthUserUpdate builder.
func (auuo *AuthUserUpdateOne) Where(ps ...predicate.AuthUser) *AuthUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AuthUserUpdateOne) Select(field string, fields ...string) *AuthUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AuthUser entity.
func (auuo *AuthUserUpdateOne) Save(ctx context.Context) (*AuthUser, error) {
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AuthUserUpdateOne) SaveX(ctx context.Context) *AuthUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AuthUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AuthUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AuthUserUpdateOne) check() error {
	if v, ok := auuo.mutation.Role(); ok {
		if err := authuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "AuthUser.role": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.Provider(); ok {
		if err := authuser.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "AuthUser.provider": %w`, err)}
		}
	}
	return nil
}

func (auuo *AuthUserUpdateOne) sqlSave(ctx context.Context) (_node *AuthUser, err error) {
	if err := auuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authuser.Table, authuser.Columns, sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeUUID))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authuser.FieldID)
		for _, f := range fields {
			if !authuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.Username(); ok {
		_spec.SetField(authuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Password(); ok {
		_spec.SetField(authuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := auuo.mutation.FirstName(); ok {
		_spec.SetField(authuser.FieldFirstName, field.TypeString, value)
	}
	if value, ok := auuo.mutation.LastName(); ok {
		_spec.SetField(authuser.FieldLastName, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Email(); ok {
		_spec.SetField(authuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Phone(); ok {
		_spec.SetField(authuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Company(); ok {
		_spec.SetField(authuser.FieldCompany, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Occupation(); ok {
		_spec.SetField(authuser.FieldOccupation, field.TypeString, value)
	}
	if value, ok := auuo.mutation.PrivateKeyPath(); ok {
		_spec.SetField(authuser.FieldPrivateKeyPath, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Role(); ok {
		_spec.SetField(authuser.FieldRole, field.TypeEnum, value)
	}
	if value, ok := auuo.mutation.Provider(); ok {
		_spec.SetField(authuser.FieldProvider, field.TypeEnum, value)
	}
	if auuo.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedAuthUserToTokenIDs(); len(nodes) > 0 && !auuo.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AuthUserToTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.AuthUserToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   authuser.AuthUserToServerTasksTable,
			Columns: []string{authuser.AuthUserToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedAuthUserToServerTasksIDs(); len(nodes) > 0 && !auuo.mutation.AuthUserToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   authuser.AuthUserToServerTasksTable,
			Columns: []string{authuser.AuthUserToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AuthUserToServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   authuser.AuthUserToServerTasksTable,
			Columns: []string{authuser.AuthUserToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}
