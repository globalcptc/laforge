// Code generated by ent, DO NOT EDIT.

package token

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the token type in the database.
	Label = "token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldExpireAt holds the string denoting the expire_at field in the database.
	FieldExpireAt = "expire_at"
	// EdgeAuthUser holds the string denoting the authuser edge name in mutations.
	EdgeAuthUser = "AuthUser"
	// Table holds the table name of the token in the database.
	Table = "tokens"
	// AuthUserTable is the table that holds the AuthUser relation/edge.
	AuthUserTable = "tokens"
	// AuthUserInverseTable is the table name for the AuthUser entity.
	// It exists in this package in order to avoid circular dependency with the "authuser" package.
	AuthUserInverseTable = "auth_users"
	// AuthUserColumn is the table column denoting the AuthUser relation/edge.
	AuthUserColumn = "auth_user_tokens"
)

// Columns holds all SQL columns for token fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldExpireAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"auth_user_tokens",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
