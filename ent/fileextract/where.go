// Code generated by ent, DO NOT EDIT.

package fileextract

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLTE(FieldID, id))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldHCLID, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldSource, v))
}

// Destination applies equality check predicate on the "destination" field. It's identical to DestinationEQ.
func Destination(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldDestination, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldType, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContainsFold(FieldHCLID, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContainsFold(FieldSource, v))
}

// DestinationEQ applies the EQ predicate on the "destination" field.
func DestinationEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldDestination, v))
}

// DestinationNEQ applies the NEQ predicate on the "destination" field.
func DestinationNEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNEQ(FieldDestination, v))
}

// DestinationIn applies the In predicate on the "destination" field.
func DestinationIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldIn(FieldDestination, vs...))
}

// DestinationNotIn applies the NotIn predicate on the "destination" field.
func DestinationNotIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNotIn(FieldDestination, vs...))
}

// DestinationGT applies the GT predicate on the "destination" field.
func DestinationGT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGT(FieldDestination, v))
}

// DestinationGTE applies the GTE predicate on the "destination" field.
func DestinationGTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGTE(FieldDestination, v))
}

// DestinationLT applies the LT predicate on the "destination" field.
func DestinationLT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLT(FieldDestination, v))
}

// DestinationLTE applies the LTE predicate on the "destination" field.
func DestinationLTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLTE(FieldDestination, v))
}

// DestinationContains applies the Contains predicate on the "destination" field.
func DestinationContains(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContains(FieldDestination, v))
}

// DestinationHasPrefix applies the HasPrefix predicate on the "destination" field.
func DestinationHasPrefix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasPrefix(FieldDestination, v))
}

// DestinationHasSuffix applies the HasSuffix predicate on the "destination" field.
func DestinationHasSuffix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasSuffix(FieldDestination, v))
}

// DestinationEqualFold applies the EqualFold predicate on the "destination" field.
func DestinationEqualFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEqualFold(FieldDestination, v))
}

// DestinationContainsFold applies the ContainsFold predicate on the "destination" field.
func DestinationContainsFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContainsFold(FieldDestination, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.FileExtract {
	return predicate.FileExtract(sql.FieldContainsFold(FieldType, v))
}

// HasEnvironment applies the HasEdge predicate on the "Environment" edge.
func HasEnvironment() predicate.FileExtract {
	return predicate.FileExtract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "Environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.FileExtract {
	return predicate.FileExtract(func(s *sql.Selector) {
		step := newEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileExtract) predicate.FileExtract {
	return predicate.FileExtract(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileExtract) predicate.FileExtract {
	return predicate.FileExtract(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileExtract) predicate.FileExtract {
	return predicate.FileExtract(sql.NotPredicates(p))
}
