// Code generated by ent, DO NOT EDIT.

package filedownload

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the filedownload type in the database.
	Label = "file_download"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldDestination holds the string denoting the destination field in the database.
	FieldDestination = "destination"
	// FieldTemplate holds the string denoting the template field in the database.
	FieldTemplate = "template"
	// FieldPerms holds the string denoting the perms field in the database.
	FieldPerms = "perms"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldMd5 holds the string denoting the md5 field in the database.
	FieldMd5 = "md5"
	// FieldAbsPath holds the string denoting the abs_path field in the database.
	FieldAbsPath = "abs_path"
	// FieldIsTxt holds the string denoting the is_txt field in the database.
	FieldIsTxt = "is_txt"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// Table holds the table name of the filedownload in the database.
	Table = "file_downloads"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "file_downloads"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "environment_file_downloads"
)

// Columns holds all SQL columns for filedownload fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldSourceType,
	FieldSource,
	FieldDestination,
	FieldTemplate,
	FieldPerms,
	FieldDisabled,
	FieldMd5,
	FieldAbsPath,
	FieldIsTxt,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "file_downloads"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_file_downloads",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsTxt holds the default value on creation for the "is_txt" field.
	DefaultIsTxt bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the FileDownload queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// BySourceType orders the results by the source_type field.
func BySourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceType, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByDestination orders the results by the destination field.
func ByDestination(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestination, opts...).ToFunc()
}

// ByTemplate orders the results by the template field.
func ByTemplate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplate, opts...).ToFunc()
}

// ByPerms orders the results by the perms field.
func ByPerms(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPerms, opts...).ToFunc()
}

// ByDisabled orders the results by the disabled field.
func ByDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabled, opts...).ToFunc()
}

// ByMd5 orders the results by the md5 field.
func ByMd5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMd5, opts...).ToFunc()
}

// ByAbsPath orders the results by the abs_path field.
func ByAbsPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbsPath, opts...).ToFunc()
}

// ByIsTxt orders the results by the is_txt field.
func ByIsTxt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTxt, opts...).ToFunc()
}

// ByEnvironmentField orders the results by Environment field.
func ByEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}
func newEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
	)
}
