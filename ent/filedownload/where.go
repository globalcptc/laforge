// Code generated by ent, DO NOT EDIT.

package filedownload

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// HclID applies equality check predicate on the "hcl_id" field. It's identical to HclIDEQ.
func HclID(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// SourceType applies equality check predicate on the "source_type" field. It's identical to SourceTypeEQ.
func SourceType(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceType), v))
	})
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// Destination applies equality check predicate on the "destination" field. It's identical to DestinationEQ.
func Destination(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestination), v))
	})
}

// Template applies equality check predicate on the "template" field. It's identical to TemplateEQ.
func Template(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplate), v))
	})
}

// Perms applies equality check predicate on the "perms" field. It's identical to PermsEQ.
func Perms(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPerms), v))
	})
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// Md5 applies equality check predicate on the "md5" field. It's identical to Md5EQ.
func Md5(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMd5), v))
	})
}

// AbsPath applies equality check predicate on the "abs_path" field. It's identical to AbsPathEQ.
func AbsPath(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbsPath), v))
	})
}

// IsTxt applies equality check predicate on the "is_txt" field. It's identical to IsTxtEQ.
func IsTxt(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTxt), v))
	})
}

// HclIDEQ applies the EQ predicate on the "hcl_id" field.
func HclIDEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// HclIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HclIDNEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHclID), v))
	})
}

// HclIDIn applies the In predicate on the "hcl_id" field.
func HclIDIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHclID), v...))
	})
}

// HclIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HclIDNotIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHclID), v...))
	})
}

// HclIDGT applies the GT predicate on the "hcl_id" field.
func HclIDGT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHclID), v))
	})
}

// HclIDGTE applies the GTE predicate on the "hcl_id" field.
func HclIDGTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHclID), v))
	})
}

// HclIDLT applies the LT predicate on the "hcl_id" field.
func HclIDLT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHclID), v))
	})
}

// HclIDLTE applies the LTE predicate on the "hcl_id" field.
func HclIDLTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHclID), v))
	})
}

// HclIDContains applies the Contains predicate on the "hcl_id" field.
func HclIDContains(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHclID), v))
	})
}

// HclIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HclIDHasPrefix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHclID), v))
	})
}

// HclIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HclIDHasSuffix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHclID), v))
	})
}

// HclIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HclIDEqualFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHclID), v))
	})
}

// HclIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HclIDContainsFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHclID), v))
	})
}

// SourceTypeEQ applies the EQ predicate on the "source_type" field.
func SourceTypeEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceType), v))
	})
}

// SourceTypeNEQ applies the NEQ predicate on the "source_type" field.
func SourceTypeNEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceType), v))
	})
}

// SourceTypeIn applies the In predicate on the "source_type" field.
func SourceTypeIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSourceType), v...))
	})
}

// SourceTypeNotIn applies the NotIn predicate on the "source_type" field.
func SourceTypeNotIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSourceType), v...))
	})
}

// SourceTypeGT applies the GT predicate on the "source_type" field.
func SourceTypeGT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceType), v))
	})
}

// SourceTypeGTE applies the GTE predicate on the "source_type" field.
func SourceTypeGTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceType), v))
	})
}

// SourceTypeLT applies the LT predicate on the "source_type" field.
func SourceTypeLT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceType), v))
	})
}

// SourceTypeLTE applies the LTE predicate on the "source_type" field.
func SourceTypeLTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceType), v))
	})
}

// SourceTypeContains applies the Contains predicate on the "source_type" field.
func SourceTypeContains(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceType), v))
	})
}

// SourceTypeHasPrefix applies the HasPrefix predicate on the "source_type" field.
func SourceTypeHasPrefix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceType), v))
	})
}

// SourceTypeHasSuffix applies the HasSuffix predicate on the "source_type" field.
func SourceTypeHasSuffix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceType), v))
	})
}

// SourceTypeEqualFold applies the EqualFold predicate on the "source_type" field.
func SourceTypeEqualFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceType), v))
	})
}

// SourceTypeContainsFold applies the ContainsFold predicate on the "source_type" field.
func SourceTypeContainsFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceType), v))
	})
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSource), v))
	})
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSource), v))
	})
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSource), v))
	})
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSource), v))
	})
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSource), v))
	})
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSource), v))
	})
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSource), v))
	})
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSource), v))
	})
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSource), v))
	})
}

// DestinationEQ applies the EQ predicate on the "destination" field.
func DestinationEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestination), v))
	})
}

// DestinationNEQ applies the NEQ predicate on the "destination" field.
func DestinationNEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDestination), v))
	})
}

// DestinationIn applies the In predicate on the "destination" field.
func DestinationIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDestination), v...))
	})
}

// DestinationNotIn applies the NotIn predicate on the "destination" field.
func DestinationNotIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDestination), v...))
	})
}

// DestinationGT applies the GT predicate on the "destination" field.
func DestinationGT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDestination), v))
	})
}

// DestinationGTE applies the GTE predicate on the "destination" field.
func DestinationGTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDestination), v))
	})
}

// DestinationLT applies the LT predicate on the "destination" field.
func DestinationLT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDestination), v))
	})
}

// DestinationLTE applies the LTE predicate on the "destination" field.
func DestinationLTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDestination), v))
	})
}

// DestinationContains applies the Contains predicate on the "destination" field.
func DestinationContains(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDestination), v))
	})
}

// DestinationHasPrefix applies the HasPrefix predicate on the "destination" field.
func DestinationHasPrefix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDestination), v))
	})
}

// DestinationHasSuffix applies the HasSuffix predicate on the "destination" field.
func DestinationHasSuffix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDestination), v))
	})
}

// DestinationEqualFold applies the EqualFold predicate on the "destination" field.
func DestinationEqualFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDestination), v))
	})
}

// DestinationContainsFold applies the ContainsFold predicate on the "destination" field.
func DestinationContainsFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDestination), v))
	})
}

// TemplateEQ applies the EQ predicate on the "template" field.
func TemplateEQ(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplate), v))
	})
}

// TemplateNEQ applies the NEQ predicate on the "template" field.
func TemplateNEQ(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplate), v))
	})
}

// PermsEQ applies the EQ predicate on the "perms" field.
func PermsEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPerms), v))
	})
}

// PermsNEQ applies the NEQ predicate on the "perms" field.
func PermsNEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPerms), v))
	})
}

// PermsIn applies the In predicate on the "perms" field.
func PermsIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPerms), v...))
	})
}

// PermsNotIn applies the NotIn predicate on the "perms" field.
func PermsNotIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPerms), v...))
	})
}

// PermsGT applies the GT predicate on the "perms" field.
func PermsGT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPerms), v))
	})
}

// PermsGTE applies the GTE predicate on the "perms" field.
func PermsGTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPerms), v))
	})
}

// PermsLT applies the LT predicate on the "perms" field.
func PermsLT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPerms), v))
	})
}

// PermsLTE applies the LTE predicate on the "perms" field.
func PermsLTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPerms), v))
	})
}

// PermsContains applies the Contains predicate on the "perms" field.
func PermsContains(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPerms), v))
	})
}

// PermsHasPrefix applies the HasPrefix predicate on the "perms" field.
func PermsHasPrefix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPerms), v))
	})
}

// PermsHasSuffix applies the HasSuffix predicate on the "perms" field.
func PermsHasSuffix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPerms), v))
	})
}

// PermsEqualFold applies the EqualFold predicate on the "perms" field.
func PermsEqualFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPerms), v))
	})
}

// PermsContainsFold applies the ContainsFold predicate on the "perms" field.
func PermsContainsFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPerms), v))
	})
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisabled), v))
	})
}

// Md5EQ applies the EQ predicate on the "md5" field.
func Md5EQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMd5), v))
	})
}

// Md5NEQ applies the NEQ predicate on the "md5" field.
func Md5NEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMd5), v))
	})
}

// Md5In applies the In predicate on the "md5" field.
func Md5In(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMd5), v...))
	})
}

// Md5NotIn applies the NotIn predicate on the "md5" field.
func Md5NotIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMd5), v...))
	})
}

// Md5GT applies the GT predicate on the "md5" field.
func Md5GT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMd5), v))
	})
}

// Md5GTE applies the GTE predicate on the "md5" field.
func Md5GTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMd5), v))
	})
}

// Md5LT applies the LT predicate on the "md5" field.
func Md5LT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMd5), v))
	})
}

// Md5LTE applies the LTE predicate on the "md5" field.
func Md5LTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMd5), v))
	})
}

// Md5Contains applies the Contains predicate on the "md5" field.
func Md5Contains(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMd5), v))
	})
}

// Md5HasPrefix applies the HasPrefix predicate on the "md5" field.
func Md5HasPrefix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMd5), v))
	})
}

// Md5HasSuffix applies the HasSuffix predicate on the "md5" field.
func Md5HasSuffix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMd5), v))
	})
}

// Md5EqualFold applies the EqualFold predicate on the "md5" field.
func Md5EqualFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMd5), v))
	})
}

// Md5ContainsFold applies the ContainsFold predicate on the "md5" field.
func Md5ContainsFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMd5), v))
	})
}

// AbsPathEQ applies the EQ predicate on the "abs_path" field.
func AbsPathEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbsPath), v))
	})
}

// AbsPathNEQ applies the NEQ predicate on the "abs_path" field.
func AbsPathNEQ(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbsPath), v))
	})
}

// AbsPathIn applies the In predicate on the "abs_path" field.
func AbsPathIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAbsPath), v...))
	})
}

// AbsPathNotIn applies the NotIn predicate on the "abs_path" field.
func AbsPathNotIn(vs ...string) predicate.FileDownload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAbsPath), v...))
	})
}

// AbsPathGT applies the GT predicate on the "abs_path" field.
func AbsPathGT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAbsPath), v))
	})
}

// AbsPathGTE applies the GTE predicate on the "abs_path" field.
func AbsPathGTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAbsPath), v))
	})
}

// AbsPathLT applies the LT predicate on the "abs_path" field.
func AbsPathLT(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAbsPath), v))
	})
}

// AbsPathLTE applies the LTE predicate on the "abs_path" field.
func AbsPathLTE(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAbsPath), v))
	})
}

// AbsPathContains applies the Contains predicate on the "abs_path" field.
func AbsPathContains(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAbsPath), v))
	})
}

// AbsPathHasPrefix applies the HasPrefix predicate on the "abs_path" field.
func AbsPathHasPrefix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAbsPath), v))
	})
}

// AbsPathHasSuffix applies the HasSuffix predicate on the "abs_path" field.
func AbsPathHasSuffix(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAbsPath), v))
	})
}

// AbsPathEqualFold applies the EqualFold predicate on the "abs_path" field.
func AbsPathEqualFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAbsPath), v))
	})
}

// AbsPathContainsFold applies the ContainsFold predicate on the "abs_path" field.
func AbsPathContainsFold(v string) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAbsPath), v))
	})
}

// IsTxtEQ applies the EQ predicate on the "is_txt" field.
func IsTxtEQ(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTxt), v))
	})
}

// IsTxtNEQ applies the NEQ predicate on the "is_txt" field.
func IsTxtNEQ(v bool) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsTxt), v))
	})
}

// HasEnvironment applies the HasEdge predicate on the "Environment" edge.
func HasEnvironment() predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "Environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileDownload) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileDownload) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileDownload) predicate.FileDownload {
	return predicate.FileDownload(func(s *sql.Selector) {
		p(s.Not())
	})
}
