// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningStepUpdate is the builder for updating ProvisioningStep entities.
type ProvisioningStepUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// Where appends a list predicates to the ProvisioningStepUpdate builder.
func (psu *ProvisioningStepUpdate) Where(ps ...predicate.ProvisioningStep) *ProvisioningStepUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetType sets the "type" field.
func (psu *ProvisioningStepUpdate) SetType(pr provisioningstep.Type) *ProvisioningStepUpdate {
	psu.mutation.SetType(pr)
	return psu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableType(pr *provisioningstep.Type) *ProvisioningStepUpdate {
	if pr != nil {
		psu.SetType(*pr)
	}
	return psu
}

// SetStepNumber sets the "step_number" field.
func (psu *ProvisioningStepUpdate) SetStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.ResetStepNumber()
	psu.mutation.SetStepNumber(i)
	return psu
}

// SetNillableStepNumber sets the "step_number" field if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableStepNumber(i *int) *ProvisioningStepUpdate {
	if i != nil {
		psu.SetStepNumber(*i)
	}
	return psu
}

// AddStepNumber adds i to the "step_number" field.
func (psu *ProvisioningStepUpdate) AddStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.AddStepNumber(i)
	return psu
}

// SetProvisioningStepToStatusID sets the "ProvisioningStepToStatus" edge to the Status entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToStatusID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToStatusID(id)
	return psu
}

// SetNillableProvisioningStepToStatusID sets the "ProvisioningStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToStatusID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToStatusID(*id)
	}
	return psu
}

// SetProvisioningStepToStatus sets the "ProvisioningStepToStatus" edge to the Status entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToStatus(s *Status) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToStatusID(s.ID)
}

// SetProvisioningStepToProvisionedHostID sets the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToProvisionedHostID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToProvisionedHostID(id)
	return psu
}

// SetNillableProvisioningStepToProvisionedHostID sets the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToProvisionedHostID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToProvisionedHostID(*id)
	}
	return psu
}

// SetProvisioningStepToProvisionedHost sets the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToProvisionedHost(p *ProvisionedHost) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToProvisionedHostID(p.ID)
}

// SetProvisioningStepToScriptID sets the "ProvisioningStepToScript" edge to the Script entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToScriptID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToScriptID(id)
	return psu
}

// SetNillableProvisioningStepToScriptID sets the "ProvisioningStepToScript" edge to the Script entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToScriptID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToScriptID(*id)
	}
	return psu
}

// SetProvisioningStepToScript sets the "ProvisioningStepToScript" edge to the Script entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToScript(s *Script) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToScriptID(s.ID)
}

// SetProvisioningStepToCommandID sets the "ProvisioningStepToCommand" edge to the Command entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToCommandID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToCommandID(id)
	return psu
}

// SetNillableProvisioningStepToCommandID sets the "ProvisioningStepToCommand" edge to the Command entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToCommandID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToCommandID(*id)
	}
	return psu
}

// SetProvisioningStepToCommand sets the "ProvisioningStepToCommand" edge to the Command entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToCommand(c *Command) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToCommandID(c.ID)
}

// SetProvisioningStepToDNSRecordID sets the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToDNSRecordID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToDNSRecordID(id)
	return psu
}

// SetNillableProvisioningStepToDNSRecordID sets the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToDNSRecordID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToDNSRecordID(*id)
	}
	return psu
}

// SetProvisioningStepToDNSRecord sets the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToDNSRecord(d *DNSRecord) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToDNSRecordID(d.ID)
}

// SetProvisioningStepToFileDeleteID sets the "ProvisioningStepToFileDelete" edge to the FileDelete entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToFileDeleteID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToFileDeleteID(id)
	return psu
}

// SetNillableProvisioningStepToFileDeleteID sets the "ProvisioningStepToFileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToFileDeleteID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToFileDeleteID(*id)
	}
	return psu
}

// SetProvisioningStepToFileDelete sets the "ProvisioningStepToFileDelete" edge to the FileDelete entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToFileDelete(f *FileDelete) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToFileDeleteID(f.ID)
}

// SetProvisioningStepToFileDownloadID sets the "ProvisioningStepToFileDownload" edge to the FileDownload entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToFileDownloadID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToFileDownloadID(id)
	return psu
}

// SetNillableProvisioningStepToFileDownloadID sets the "ProvisioningStepToFileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToFileDownloadID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToFileDownloadID(*id)
	}
	return psu
}

// SetProvisioningStepToFileDownload sets the "ProvisioningStepToFileDownload" edge to the FileDownload entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToFileDownload(f *FileDownload) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToFileDownloadID(f.ID)
}

// SetProvisioningStepToFileExtractID sets the "ProvisioningStepToFileExtract" edge to the FileExtract entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToFileExtractID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToFileExtractID(id)
	return psu
}

// SetNillableProvisioningStepToFileExtractID sets the "ProvisioningStepToFileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToFileExtractID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToFileExtractID(*id)
	}
	return psu
}

// SetProvisioningStepToFileExtract sets the "ProvisioningStepToFileExtract" edge to the FileExtract entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToFileExtract(f *FileExtract) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToFileExtractID(f.ID)
}

// SetProvisioningStepToAnsibleID sets the "ProvisioningStepToAnsible" edge to the Ansible entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToAnsibleID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToAnsibleID(id)
	return psu
}

// SetNillableProvisioningStepToAnsibleID sets the "ProvisioningStepToAnsible" edge to the Ansible entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToAnsibleID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToAnsibleID(*id)
	}
	return psu
}

// SetProvisioningStepToAnsible sets the "ProvisioningStepToAnsible" edge to the Ansible entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToAnsible(a *Ansible) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToAnsibleID(a.ID)
}

// SetProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToPlanID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToPlanID(id)
	return psu
}

// SetNillableProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToPlanID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToPlanID(*id)
	}
	return psu
}

// SetProvisioningStepToPlan sets the "ProvisioningStepToPlan" edge to the Plan entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToPlan(p *Plan) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToPlanID(p.ID)
}

// AddProvisioningStepToAgentTaskIDs adds the "ProvisioningStepToAgentTask" edge to the AgentTask entity by IDs.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToAgentTaskIDs(ids...)
	return psu
}

// AddProvisioningStepToAgentTask adds the "ProvisioningStepToAgentTask" edges to the AgentTask entity.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToAgentTask(a ...*AgentTask) *ProvisioningStepUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psu.AddProvisioningStepToAgentTaskIDs(ids...)
}

// SetProvisioningStepToGinFileMiddlewareID sets the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToGinFileMiddlewareID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisioningStepToGinFileMiddlewareID(id)
	return psu
}

// SetNillableProvisioningStepToGinFileMiddlewareID sets the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisioningStepToGinFileMiddlewareID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisioningStepToGinFileMiddlewareID(*id)
	}
	return psu
}

// SetProvisioningStepToGinFileMiddleware sets the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (psu *ProvisioningStepUpdate) SetProvisioningStepToGinFileMiddleware(g *GinFileMiddleware) *ProvisioningStepUpdate {
	return psu.SetProvisioningStepToGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psu *ProvisioningStepUpdate) Mutation() *ProvisioningStepMutation {
	return psu.mutation
}

// ClearProvisioningStepToStatus clears the "ProvisioningStepToStatus" edge to the Status entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToStatus() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToStatus()
	return psu
}

// ClearProvisioningStepToProvisionedHost clears the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToProvisionedHost() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToProvisionedHost()
	return psu
}

// ClearProvisioningStepToScript clears the "ProvisioningStepToScript" edge to the Script entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToScript() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToScript()
	return psu
}

// ClearProvisioningStepToCommand clears the "ProvisioningStepToCommand" edge to the Command entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToCommand() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToCommand()
	return psu
}

// ClearProvisioningStepToDNSRecord clears the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToDNSRecord() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToDNSRecord()
	return psu
}

// ClearProvisioningStepToFileDelete clears the "ProvisioningStepToFileDelete" edge to the FileDelete entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToFileDelete() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToFileDelete()
	return psu
}

// ClearProvisioningStepToFileDownload clears the "ProvisioningStepToFileDownload" edge to the FileDownload entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToFileDownload() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToFileDownload()
	return psu
}

// ClearProvisioningStepToFileExtract clears the "ProvisioningStepToFileExtract" edge to the FileExtract entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToFileExtract() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToFileExtract()
	return psu
}

// ClearProvisioningStepToAnsible clears the "ProvisioningStepToAnsible" edge to the Ansible entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToAnsible() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToAnsible()
	return psu
}

// ClearProvisioningStepToPlan clears the "ProvisioningStepToPlan" edge to the Plan entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToPlan() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToPlan()
	return psu
}

// ClearProvisioningStepToAgentTask clears all "ProvisioningStepToAgentTask" edges to the AgentTask entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToAgentTask() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToAgentTask()
	return psu
}

// RemoveProvisioningStepToAgentTaskIDs removes the "ProvisioningStepToAgentTask" edge to AgentTask entities by IDs.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToAgentTaskIDs(ids...)
	return psu
}

// RemoveProvisioningStepToAgentTask removes "ProvisioningStepToAgentTask" edges to AgentTask entities.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToAgentTask(a ...*AgentTask) *ProvisioningStepUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psu.RemoveProvisioningStepToAgentTaskIDs(ids...)
}

// ClearProvisioningStepToGinFileMiddleware clears the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToGinFileMiddleware() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToGinFileMiddleware()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProvisioningStepUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProvisioningStepUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProvisioningStepUpdate) check() error {
	if v, ok := psu.mutation.GetType(); ok {
		if err := provisioningstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningStep.type": %w`, err)}
		}
	}
	return nil
}

func (psu *ProvisioningStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(provisioningstep.Table, provisioningstep.Columns, sqlgraph.NewFieldSpec(provisioningstep.FieldID, field.TypeUUID))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.GetType(); ok {
		_spec.SetField(provisioningstep.FieldType, field.TypeEnum, value)
	}
	if value, ok := psu.mutation.StepNumber(); ok {
		_spec.SetField(provisioningstep.FieldStepNumber, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedStepNumber(); ok {
		_spec.AddField(provisioningstep.FieldStepNumber, field.TypeInt, value)
	}
	if psu.mutation.ProvisioningStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisioningStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionedhost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisioningStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionedhost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileextract.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileextract.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToAnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToAnsibleTable,
			Columns: []string{provisioningstep.ProvisioningStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansible.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToAnsibleTable,
			Columns: []string{provisioningstep.ProvisioningStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansible.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToAgentTaskTable,
			Columns: []string{provisioningstep.ProvisioningStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToAgentTaskIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToAgentTaskTable,
			Columns: []string{provisioningstep.ProvisioningStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToAgentTaskTable,
			Columns: []string{provisioningstep.ProvisioningStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToGinFileMiddlewareTable,
			Columns: []string{provisioningstep.ProvisioningStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ginfilemiddleware.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToGinFileMiddlewareTable,
			Columns: []string{provisioningstep.ProvisioningStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ginfilemiddleware.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ProvisioningStepUpdateOne is the builder for updating a single ProvisioningStep entity.
type ProvisioningStepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// SetType sets the "type" field.
func (psuo *ProvisioningStepUpdateOne) SetType(pr provisioningstep.Type) *ProvisioningStepUpdateOne {
	psuo.mutation.SetType(pr)
	return psuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableType(pr *provisioningstep.Type) *ProvisioningStepUpdateOne {
	if pr != nil {
		psuo.SetType(*pr)
	}
	return psuo
}

// SetStepNumber sets the "step_number" field.
func (psuo *ProvisioningStepUpdateOne) SetStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.ResetStepNumber()
	psuo.mutation.SetStepNumber(i)
	return psuo
}

// SetNillableStepNumber sets the "step_number" field if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableStepNumber(i *int) *ProvisioningStepUpdateOne {
	if i != nil {
		psuo.SetStepNumber(*i)
	}
	return psuo
}

// AddStepNumber adds i to the "step_number" field.
func (psuo *ProvisioningStepUpdateOne) AddStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddStepNumber(i)
	return psuo
}

// SetProvisioningStepToStatusID sets the "ProvisioningStepToStatus" edge to the Status entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToStatusID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToStatusID(id)
	return psuo
}

// SetNillableProvisioningStepToStatusID sets the "ProvisioningStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToStatusID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToStatusID(*id)
	}
	return psuo
}

// SetProvisioningStepToStatus sets the "ProvisioningStepToStatus" edge to the Status entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToStatus(s *Status) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToStatusID(s.ID)
}

// SetProvisioningStepToProvisionedHostID sets the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToProvisionedHostID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToProvisionedHostID(id)
	return psuo
}

// SetNillableProvisioningStepToProvisionedHostID sets the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToProvisionedHostID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToProvisionedHostID(*id)
	}
	return psuo
}

// SetProvisioningStepToProvisionedHost sets the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToProvisionedHost(p *ProvisionedHost) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToProvisionedHostID(p.ID)
}

// SetProvisioningStepToScriptID sets the "ProvisioningStepToScript" edge to the Script entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToScriptID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToScriptID(id)
	return psuo
}

// SetNillableProvisioningStepToScriptID sets the "ProvisioningStepToScript" edge to the Script entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToScriptID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToScriptID(*id)
	}
	return psuo
}

// SetProvisioningStepToScript sets the "ProvisioningStepToScript" edge to the Script entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToScript(s *Script) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToScriptID(s.ID)
}

// SetProvisioningStepToCommandID sets the "ProvisioningStepToCommand" edge to the Command entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToCommandID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToCommandID(id)
	return psuo
}

// SetNillableProvisioningStepToCommandID sets the "ProvisioningStepToCommand" edge to the Command entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToCommandID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToCommandID(*id)
	}
	return psuo
}

// SetProvisioningStepToCommand sets the "ProvisioningStepToCommand" edge to the Command entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToCommand(c *Command) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToCommandID(c.ID)
}

// SetProvisioningStepToDNSRecordID sets the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToDNSRecordID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToDNSRecordID(id)
	return psuo
}

// SetNillableProvisioningStepToDNSRecordID sets the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToDNSRecordID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToDNSRecordID(*id)
	}
	return psuo
}

// SetProvisioningStepToDNSRecord sets the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToDNSRecord(d *DNSRecord) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToDNSRecordID(d.ID)
}

// SetProvisioningStepToFileDeleteID sets the "ProvisioningStepToFileDelete" edge to the FileDelete entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToFileDeleteID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToFileDeleteID(id)
	return psuo
}

// SetNillableProvisioningStepToFileDeleteID sets the "ProvisioningStepToFileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToFileDeleteID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToFileDeleteID(*id)
	}
	return psuo
}

// SetProvisioningStepToFileDelete sets the "ProvisioningStepToFileDelete" edge to the FileDelete entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToFileDelete(f *FileDelete) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToFileDeleteID(f.ID)
}

// SetProvisioningStepToFileDownloadID sets the "ProvisioningStepToFileDownload" edge to the FileDownload entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToFileDownloadID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToFileDownloadID(id)
	return psuo
}

// SetNillableProvisioningStepToFileDownloadID sets the "ProvisioningStepToFileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToFileDownloadID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToFileDownloadID(*id)
	}
	return psuo
}

// SetProvisioningStepToFileDownload sets the "ProvisioningStepToFileDownload" edge to the FileDownload entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToFileDownload(f *FileDownload) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToFileDownloadID(f.ID)
}

// SetProvisioningStepToFileExtractID sets the "ProvisioningStepToFileExtract" edge to the FileExtract entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToFileExtractID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToFileExtractID(id)
	return psuo
}

// SetNillableProvisioningStepToFileExtractID sets the "ProvisioningStepToFileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToFileExtractID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToFileExtractID(*id)
	}
	return psuo
}

// SetProvisioningStepToFileExtract sets the "ProvisioningStepToFileExtract" edge to the FileExtract entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToFileExtract(f *FileExtract) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToFileExtractID(f.ID)
}

// SetProvisioningStepToAnsibleID sets the "ProvisioningStepToAnsible" edge to the Ansible entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToAnsibleID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToAnsibleID(id)
	return psuo
}

// SetNillableProvisioningStepToAnsibleID sets the "ProvisioningStepToAnsible" edge to the Ansible entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToAnsibleID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToAnsibleID(*id)
	}
	return psuo
}

// SetProvisioningStepToAnsible sets the "ProvisioningStepToAnsible" edge to the Ansible entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToAnsible(a *Ansible) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToAnsibleID(a.ID)
}

// SetProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToPlanID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToPlanID(id)
	return psuo
}

// SetNillableProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToPlanID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToPlanID(*id)
	}
	return psuo
}

// SetProvisioningStepToPlan sets the "ProvisioningStepToPlan" edge to the Plan entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToPlan(p *Plan) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToPlanID(p.ID)
}

// AddProvisioningStepToAgentTaskIDs adds the "ProvisioningStepToAgentTask" edge to the AgentTask entity by IDs.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToAgentTaskIDs(ids...)
	return psuo
}

// AddProvisioningStepToAgentTask adds the "ProvisioningStepToAgentTask" edges to the AgentTask entity.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToAgentTask(a ...*AgentTask) *ProvisioningStepUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psuo.AddProvisioningStepToAgentTaskIDs(ids...)
}

// SetProvisioningStepToGinFileMiddlewareID sets the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToGinFileMiddlewareID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisioningStepToGinFileMiddlewareID(id)
	return psuo
}

// SetNillableProvisioningStepToGinFileMiddlewareID sets the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisioningStepToGinFileMiddlewareID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisioningStepToGinFileMiddlewareID(*id)
	}
	return psuo
}

// SetProvisioningStepToGinFileMiddleware sets the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisioningStepToGinFileMiddleware(g *GinFileMiddleware) *ProvisioningStepUpdateOne {
	return psuo.SetProvisioningStepToGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psuo *ProvisioningStepUpdateOne) Mutation() *ProvisioningStepMutation {
	return psuo.mutation
}

// ClearProvisioningStepToStatus clears the "ProvisioningStepToStatus" edge to the Status entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToStatus() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToStatus()
	return psuo
}

// ClearProvisioningStepToProvisionedHost clears the "ProvisioningStepToProvisionedHost" edge to the ProvisionedHost entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToProvisionedHost() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToProvisionedHost()
	return psuo
}

// ClearProvisioningStepToScript clears the "ProvisioningStepToScript" edge to the Script entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToScript() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToScript()
	return psuo
}

// ClearProvisioningStepToCommand clears the "ProvisioningStepToCommand" edge to the Command entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToCommand() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToCommand()
	return psuo
}

// ClearProvisioningStepToDNSRecord clears the "ProvisioningStepToDNSRecord" edge to the DNSRecord entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToDNSRecord() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToDNSRecord()
	return psuo
}

// ClearProvisioningStepToFileDelete clears the "ProvisioningStepToFileDelete" edge to the FileDelete entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToFileDelete() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToFileDelete()
	return psuo
}

// ClearProvisioningStepToFileDownload clears the "ProvisioningStepToFileDownload" edge to the FileDownload entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToFileDownload() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToFileDownload()
	return psuo
}

// ClearProvisioningStepToFileExtract clears the "ProvisioningStepToFileExtract" edge to the FileExtract entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToFileExtract() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToFileExtract()
	return psuo
}

// ClearProvisioningStepToAnsible clears the "ProvisioningStepToAnsible" edge to the Ansible entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToAnsible() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToAnsible()
	return psuo
}

// ClearProvisioningStepToPlan clears the "ProvisioningStepToPlan" edge to the Plan entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToPlan() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToPlan()
	return psuo
}

// ClearProvisioningStepToAgentTask clears all "ProvisioningStepToAgentTask" edges to the AgentTask entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToAgentTask() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToAgentTask()
	return psuo
}

// RemoveProvisioningStepToAgentTaskIDs removes the "ProvisioningStepToAgentTask" edge to AgentTask entities by IDs.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToAgentTaskIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToAgentTask removes "ProvisioningStepToAgentTask" edges to AgentTask entities.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToAgentTask(a ...*AgentTask) *ProvisioningStepUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psuo.RemoveProvisioningStepToAgentTaskIDs(ids...)
}

// ClearProvisioningStepToGinFileMiddleware clears the "ProvisioningStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToGinFileMiddleware() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToGinFileMiddleware()
	return psuo
}

// Where appends a list predicates to the ProvisioningStepUpdate builder.
func (psuo *ProvisioningStepUpdateOne) Where(ps ...predicate.ProvisioningStep) *ProvisioningStepUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProvisioningStepUpdateOne) Select(field string, fields ...string) *ProvisioningStepUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProvisioningStep entity.
func (psuo *ProvisioningStepUpdateOne) Save(ctx context.Context) (*ProvisioningStep, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) SaveX(ctx context.Context) *ProvisioningStep {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProvisioningStepUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProvisioningStepUpdateOne) check() error {
	if v, ok := psuo.mutation.GetType(); ok {
		if err := provisioningstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningStep.type": %w`, err)}
		}
	}
	return nil
}

func (psuo *ProvisioningStepUpdateOne) sqlSave(ctx context.Context) (_node *ProvisioningStep, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(provisioningstep.Table, provisioningstep.Columns, sqlgraph.NewFieldSpec(provisioningstep.FieldID, field.TypeUUID))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProvisioningStep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningstep.FieldID)
		for _, f := range fields {
			if !provisioningstep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provisioningstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.GetType(); ok {
		_spec.SetField(provisioningstep.FieldType, field.TypeEnum, value)
	}
	if value, ok := psuo.mutation.StepNumber(); ok {
		_spec.SetField(provisioningstep.FieldStepNumber, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedStepNumber(); ok {
		_spec.AddField(provisioningstep.FieldStepNumber, field.TypeInt, value)
	}
	if psuo.mutation.ProvisioningStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisioningStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionedhost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisioningStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionedhost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileextract.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileextract.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToAnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToAnsibleTable,
			Columns: []string{provisioningstep.ProvisioningStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansible.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToAnsibleTable,
			Columns: []string{provisioningstep.ProvisioningStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansible.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToAgentTaskTable,
			Columns: []string{provisioningstep.ProvisioningStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToAgentTaskIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToAgentTaskTable,
			Columns: []string{provisioningstep.ProvisioningStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToAgentTaskTable,
			Columns: []string{provisioningstep.ProvisioningStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToGinFileMiddlewareTable,
			Columns: []string{provisioningstep.ProvisioningStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ginfilemiddleware.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.ProvisioningStepToGinFileMiddlewareTable,
			Columns: []string{provisioningstep.ProvisioningStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ginfilemiddleware.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisioningStep{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
