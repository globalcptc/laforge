// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningStepUpdate is the builder for updating ProvisioningStep entities.
type ProvisioningStepUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// Where appends a list predicates to the ProvisioningStepUpdate builder.
func (psu *ProvisioningStepUpdate) Where(ps ...predicate.ProvisioningStep) *ProvisioningStepUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetType sets the "type" field.
func (psu *ProvisioningStepUpdate) SetType(pr provisioningstep.Type) *ProvisioningStepUpdate {
	psu.mutation.SetType(pr)
	return psu
}

// SetStepNumber sets the "step_number" field.
func (psu *ProvisioningStepUpdate) SetStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.ResetStepNumber()
	psu.mutation.SetStepNumber(i)
	return psu
}

// AddStepNumber adds i to the "step_number" field.
func (psu *ProvisioningStepUpdate) AddStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.AddStepNumber(i)
	return psu
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (psu *ProvisioningStepUpdate) SetStatusID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetStatusID(id)
	return psu
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableStatusID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetStatusID(*id)
	}
	return psu
}

// SetStatus sets the "Status" edge to the Status entity.
func (psu *ProvisioningStepUpdate) SetStatus(s *Status) *ProvisioningStepUpdate {
	return psu.SetStatusID(s.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (psu *ProvisioningStepUpdate) SetProvisionedHostID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetProvisionedHostID(id)
	return psu
}

// SetNillableProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableProvisionedHostID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetProvisionedHostID(*id)
	}
	return psu
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (psu *ProvisioningStepUpdate) SetProvisionedHost(p *ProvisionedHost) *ProvisioningStepUpdate {
	return psu.SetProvisionedHostID(p.ID)
}

// SetScriptID sets the "Script" edge to the Script entity by ID.
func (psu *ProvisioningStepUpdate) SetScriptID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetScriptID(id)
	return psu
}

// SetNillableScriptID sets the "Script" edge to the Script entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableScriptID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetScriptID(*id)
	}
	return psu
}

// SetScript sets the "Script" edge to the Script entity.
func (psu *ProvisioningStepUpdate) SetScript(s *Script) *ProvisioningStepUpdate {
	return psu.SetScriptID(s.ID)
}

// SetCommandID sets the "Command" edge to the Command entity by ID.
func (psu *ProvisioningStepUpdate) SetCommandID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetCommandID(id)
	return psu
}

// SetNillableCommandID sets the "Command" edge to the Command entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableCommandID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetCommandID(*id)
	}
	return psu
}

// SetCommand sets the "Command" edge to the Command entity.
func (psu *ProvisioningStepUpdate) SetCommand(c *Command) *ProvisioningStepUpdate {
	return psu.SetCommandID(c.ID)
}

// SetDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID.
func (psu *ProvisioningStepUpdate) SetDNSRecordID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetDNSRecordID(id)
	return psu
}

// SetNillableDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableDNSRecordID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetDNSRecordID(*id)
	}
	return psu
}

// SetDNSRecord sets the "DNSRecord" edge to the DNSRecord entity.
func (psu *ProvisioningStepUpdate) SetDNSRecord(d *DNSRecord) *ProvisioningStepUpdate {
	return psu.SetDNSRecordID(d.ID)
}

// SetFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID.
func (psu *ProvisioningStepUpdate) SetFileDeleteID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetFileDeleteID(id)
	return psu
}

// SetNillableFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableFileDeleteID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetFileDeleteID(*id)
	}
	return psu
}

// SetFileDelete sets the "FileDelete" edge to the FileDelete entity.
func (psu *ProvisioningStepUpdate) SetFileDelete(f *FileDelete) *ProvisioningStepUpdate {
	return psu.SetFileDeleteID(f.ID)
}

// SetFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID.
func (psu *ProvisioningStepUpdate) SetFileDownloadID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetFileDownloadID(id)
	return psu
}

// SetNillableFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableFileDownloadID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetFileDownloadID(*id)
	}
	return psu
}

// SetFileDownload sets the "FileDownload" edge to the FileDownload entity.
func (psu *ProvisioningStepUpdate) SetFileDownload(f *FileDownload) *ProvisioningStepUpdate {
	return psu.SetFileDownloadID(f.ID)
}

// SetFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID.
func (psu *ProvisioningStepUpdate) SetFileExtractID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetFileExtractID(id)
	return psu
}

// SetNillableFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableFileExtractID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetFileExtractID(*id)
	}
	return psu
}

// SetFileExtract sets the "FileExtract" edge to the FileExtract entity.
func (psu *ProvisioningStepUpdate) SetFileExtract(f *FileExtract) *ProvisioningStepUpdate {
	return psu.SetFileExtractID(f.ID)
}

// SetAnsibleID sets the "Ansible" edge to the Ansible entity by ID.
func (psu *ProvisioningStepUpdate) SetAnsibleID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetAnsibleID(id)
	return psu
}

// SetNillableAnsibleID sets the "Ansible" edge to the Ansible entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableAnsibleID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetAnsibleID(*id)
	}
	return psu
}

// SetAnsible sets the "Ansible" edge to the Ansible entity.
func (psu *ProvisioningStepUpdate) SetAnsible(a *Ansible) *ProvisioningStepUpdate {
	return psu.SetAnsibleID(a.ID)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (psu *ProvisioningStepUpdate) SetPlanID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetPlanID(id)
	return psu
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillablePlanID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetPlanID(*id)
	}
	return psu
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (psu *ProvisioningStepUpdate) SetPlan(p *Plan) *ProvisioningStepUpdate {
	return psu.SetPlanID(p.ID)
}

// AddAgentTaskIDs adds the "AgentTasks" edge to the AgentTask entity by IDs.
func (psu *ProvisioningStepUpdate) AddAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.AddAgentTaskIDs(ids...)
	return psu
}

// AddAgentTasks adds the "AgentTasks" edges to the AgentTask entity.
func (psu *ProvisioningStepUpdate) AddAgentTasks(a ...*AgentTask) *ProvisioningStepUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psu.AddAgentTaskIDs(ids...)
}

// SetGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (psu *ProvisioningStepUpdate) SetGinFileMiddlewareID(id uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.SetGinFileMiddlewareID(id)
	return psu
}

// SetNillableGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (psu *ProvisioningStepUpdate) SetNillableGinFileMiddlewareID(id *uuid.UUID) *ProvisioningStepUpdate {
	if id != nil {
		psu = psu.SetGinFileMiddlewareID(*id)
	}
	return psu
}

// SetGinFileMiddleware sets the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (psu *ProvisioningStepUpdate) SetGinFileMiddleware(g *GinFileMiddleware) *ProvisioningStepUpdate {
	return psu.SetGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psu *ProvisioningStepUpdate) Mutation() *ProvisioningStepMutation {
	return psu.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (psu *ProvisioningStepUpdate) ClearStatus() *ProvisioningStepUpdate {
	psu.mutation.ClearStatus()
	return psu
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (psu *ProvisioningStepUpdate) ClearProvisionedHost() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisionedHost()
	return psu
}

// ClearScript clears the "Script" edge to the Script entity.
func (psu *ProvisioningStepUpdate) ClearScript() *ProvisioningStepUpdate {
	psu.mutation.ClearScript()
	return psu
}

// ClearCommand clears the "Command" edge to the Command entity.
func (psu *ProvisioningStepUpdate) ClearCommand() *ProvisioningStepUpdate {
	psu.mutation.ClearCommand()
	return psu
}

// ClearDNSRecord clears the "DNSRecord" edge to the DNSRecord entity.
func (psu *ProvisioningStepUpdate) ClearDNSRecord() *ProvisioningStepUpdate {
	psu.mutation.ClearDNSRecord()
	return psu
}

// ClearFileDelete clears the "FileDelete" edge to the FileDelete entity.
func (psu *ProvisioningStepUpdate) ClearFileDelete() *ProvisioningStepUpdate {
	psu.mutation.ClearFileDelete()
	return psu
}

// ClearFileDownload clears the "FileDownload" edge to the FileDownload entity.
func (psu *ProvisioningStepUpdate) ClearFileDownload() *ProvisioningStepUpdate {
	psu.mutation.ClearFileDownload()
	return psu
}

// ClearFileExtract clears the "FileExtract" edge to the FileExtract entity.
func (psu *ProvisioningStepUpdate) ClearFileExtract() *ProvisioningStepUpdate {
	psu.mutation.ClearFileExtract()
	return psu
}

// ClearAnsible clears the "Ansible" edge to the Ansible entity.
func (psu *ProvisioningStepUpdate) ClearAnsible() *ProvisioningStepUpdate {
	psu.mutation.ClearAnsible()
	return psu
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (psu *ProvisioningStepUpdate) ClearPlan() *ProvisioningStepUpdate {
	psu.mutation.ClearPlan()
	return psu
}

// ClearAgentTasks clears all "AgentTasks" edges to the AgentTask entity.
func (psu *ProvisioningStepUpdate) ClearAgentTasks() *ProvisioningStepUpdate {
	psu.mutation.ClearAgentTasks()
	return psu
}

// RemoveAgentTaskIDs removes the "AgentTasks" edge to AgentTask entities by IDs.
func (psu *ProvisioningStepUpdate) RemoveAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdate {
	psu.mutation.RemoveAgentTaskIDs(ids...)
	return psu
}

// RemoveAgentTasks removes "AgentTasks" edges to AgentTask entities.
func (psu *ProvisioningStepUpdate) RemoveAgentTasks(a ...*AgentTask) *ProvisioningStepUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psu.RemoveAgentTaskIDs(ids...)
}

// ClearGinFileMiddleware clears the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (psu *ProvisioningStepUpdate) ClearGinFileMiddleware() *ProvisioningStepUpdate {
	psu.mutation.ClearGinFileMiddleware()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProvisioningStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		if err = psu.check(); err != nil {
			return 0, err
		}
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psu.check(); err != nil {
				return 0, err
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			if psu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProvisioningStepUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProvisioningStepUpdate) check() error {
	if v, ok := psu.mutation.GetType(); ok {
		if err := provisioningstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningStep.type": %w`, err)}
		}
	}
	return nil
}

func (psu *ProvisioningStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningstep.Table,
			Columns: provisioningstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningstep.FieldID,
			},
		},
	}
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisioningstep.FieldType,
		})
	}
	if value, ok := psu.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psu.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if psu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.StatusTable,
			Columns: []string{provisioningstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.StatusTable,
			Columns: []string{provisioningstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.DNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.FileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDeleteTable,
			Columns: []string{provisioningstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.FileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDeleteTable,
			Columns: []string{provisioningstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.FileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDownloadTable,
			Columns: []string{provisioningstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.FileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDownloadTable,
			Columns: []string{provisioningstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.FileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileExtractTable,
			Columns: []string{provisioningstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.FileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileExtractTable,
			Columns: []string{provisioningstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.AnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.AnsibleTable,
			Columns: []string{provisioningstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.AnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.AnsibleTable,
			Columns: []string{provisioningstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.PlanTable,
			Columns: []string{provisioningstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.PlanTable,
			Columns: []string{provisioningstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.AgentTasksTable,
			Columns: []string{provisioningstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedAgentTasksIDs(); len(nodes) > 0 && !psu.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.AgentTasksTable,
			Columns: []string{provisioningstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.AgentTasksTable,
			Columns: []string{provisioningstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.GinFileMiddlewareTable,
			Columns: []string{provisioningstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.GinFileMiddlewareTable,
			Columns: []string{provisioningstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProvisioningStepUpdateOne is the builder for updating a single ProvisioningStep entity.
type ProvisioningStepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// SetType sets the "type" field.
func (psuo *ProvisioningStepUpdateOne) SetType(pr provisioningstep.Type) *ProvisioningStepUpdateOne {
	psuo.mutation.SetType(pr)
	return psuo
}

// SetStepNumber sets the "step_number" field.
func (psuo *ProvisioningStepUpdateOne) SetStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.ResetStepNumber()
	psuo.mutation.SetStepNumber(i)
	return psuo
}

// AddStepNumber adds i to the "step_number" field.
func (psuo *ProvisioningStepUpdateOne) AddStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddStepNumber(i)
	return psuo
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetStatusID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetStatusID(id)
	return psuo
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableStatusID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetStatusID(*id)
	}
	return psuo
}

// SetStatus sets the "Status" edge to the Status entity.
func (psuo *ProvisioningStepUpdateOne) SetStatus(s *Status) *ProvisioningStepUpdateOne {
	return psuo.SetStatusID(s.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetProvisionedHostID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisionedHostID(id)
	return psuo
}

// SetNillableProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableProvisionedHostID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetProvisionedHostID(*id)
	}
	return psuo
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (psuo *ProvisioningStepUpdateOne) SetProvisionedHost(p *ProvisionedHost) *ProvisioningStepUpdateOne {
	return psuo.SetProvisionedHostID(p.ID)
}

// SetScriptID sets the "Script" edge to the Script entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetScriptID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetScriptID(id)
	return psuo
}

// SetNillableScriptID sets the "Script" edge to the Script entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableScriptID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetScriptID(*id)
	}
	return psuo
}

// SetScript sets the "Script" edge to the Script entity.
func (psuo *ProvisioningStepUpdateOne) SetScript(s *Script) *ProvisioningStepUpdateOne {
	return psuo.SetScriptID(s.ID)
}

// SetCommandID sets the "Command" edge to the Command entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetCommandID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetCommandID(id)
	return psuo
}

// SetNillableCommandID sets the "Command" edge to the Command entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableCommandID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetCommandID(*id)
	}
	return psuo
}

// SetCommand sets the "Command" edge to the Command entity.
func (psuo *ProvisioningStepUpdateOne) SetCommand(c *Command) *ProvisioningStepUpdateOne {
	return psuo.SetCommandID(c.ID)
}

// SetDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetDNSRecordID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetDNSRecordID(id)
	return psuo
}

// SetNillableDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableDNSRecordID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetDNSRecordID(*id)
	}
	return psuo
}

// SetDNSRecord sets the "DNSRecord" edge to the DNSRecord entity.
func (psuo *ProvisioningStepUpdateOne) SetDNSRecord(d *DNSRecord) *ProvisioningStepUpdateOne {
	return psuo.SetDNSRecordID(d.ID)
}

// SetFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetFileDeleteID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetFileDeleteID(id)
	return psuo
}

// SetNillableFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableFileDeleteID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetFileDeleteID(*id)
	}
	return psuo
}

// SetFileDelete sets the "FileDelete" edge to the FileDelete entity.
func (psuo *ProvisioningStepUpdateOne) SetFileDelete(f *FileDelete) *ProvisioningStepUpdateOne {
	return psuo.SetFileDeleteID(f.ID)
}

// SetFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetFileDownloadID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetFileDownloadID(id)
	return psuo
}

// SetNillableFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableFileDownloadID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetFileDownloadID(*id)
	}
	return psuo
}

// SetFileDownload sets the "FileDownload" edge to the FileDownload entity.
func (psuo *ProvisioningStepUpdateOne) SetFileDownload(f *FileDownload) *ProvisioningStepUpdateOne {
	return psuo.SetFileDownloadID(f.ID)
}

// SetFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetFileExtractID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetFileExtractID(id)
	return psuo
}

// SetNillableFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableFileExtractID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetFileExtractID(*id)
	}
	return psuo
}

// SetFileExtract sets the "FileExtract" edge to the FileExtract entity.
func (psuo *ProvisioningStepUpdateOne) SetFileExtract(f *FileExtract) *ProvisioningStepUpdateOne {
	return psuo.SetFileExtractID(f.ID)
}

// SetAnsibleID sets the "Ansible" edge to the Ansible entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetAnsibleID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetAnsibleID(id)
	return psuo
}

// SetNillableAnsibleID sets the "Ansible" edge to the Ansible entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableAnsibleID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetAnsibleID(*id)
	}
	return psuo
}

// SetAnsible sets the "Ansible" edge to the Ansible entity.
func (psuo *ProvisioningStepUpdateOne) SetAnsible(a *Ansible) *ProvisioningStepUpdateOne {
	return psuo.SetAnsibleID(a.ID)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetPlanID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetPlanID(id)
	return psuo
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillablePlanID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetPlanID(*id)
	}
	return psuo
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (psuo *ProvisioningStepUpdateOne) SetPlan(p *Plan) *ProvisioningStepUpdateOne {
	return psuo.SetPlanID(p.ID)
}

// AddAgentTaskIDs adds the "AgentTasks" edge to the AgentTask entity by IDs.
func (psuo *ProvisioningStepUpdateOne) AddAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.AddAgentTaskIDs(ids...)
	return psuo
}

// AddAgentTasks adds the "AgentTasks" edges to the AgentTask entity.
func (psuo *ProvisioningStepUpdateOne) AddAgentTasks(a ...*AgentTask) *ProvisioningStepUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psuo.AddAgentTaskIDs(ids...)
}

// SetGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (psuo *ProvisioningStepUpdateOne) SetGinFileMiddlewareID(id uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.SetGinFileMiddlewareID(id)
	return psuo
}

// SetNillableGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (psuo *ProvisioningStepUpdateOne) SetNillableGinFileMiddlewareID(id *uuid.UUID) *ProvisioningStepUpdateOne {
	if id != nil {
		psuo = psuo.SetGinFileMiddlewareID(*id)
	}
	return psuo
}

// SetGinFileMiddleware sets the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (psuo *ProvisioningStepUpdateOne) SetGinFileMiddleware(g *GinFileMiddleware) *ProvisioningStepUpdateOne {
	return psuo.SetGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psuo *ProvisioningStepUpdateOne) Mutation() *ProvisioningStepMutation {
	return psuo.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (psuo *ProvisioningStepUpdateOne) ClearStatus() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearStatus()
	return psuo
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (psuo *ProvisioningStepUpdateOne) ClearProvisionedHost() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisionedHost()
	return psuo
}

// ClearScript clears the "Script" edge to the Script entity.
func (psuo *ProvisioningStepUpdateOne) ClearScript() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearScript()
	return psuo
}

// ClearCommand clears the "Command" edge to the Command entity.
func (psuo *ProvisioningStepUpdateOne) ClearCommand() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearCommand()
	return psuo
}

// ClearDNSRecord clears the "DNSRecord" edge to the DNSRecord entity.
func (psuo *ProvisioningStepUpdateOne) ClearDNSRecord() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearDNSRecord()
	return psuo
}

// ClearFileDelete clears the "FileDelete" edge to the FileDelete entity.
func (psuo *ProvisioningStepUpdateOne) ClearFileDelete() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearFileDelete()
	return psuo
}

// ClearFileDownload clears the "FileDownload" edge to the FileDownload entity.
func (psuo *ProvisioningStepUpdateOne) ClearFileDownload() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearFileDownload()
	return psuo
}

// ClearFileExtract clears the "FileExtract" edge to the FileExtract entity.
func (psuo *ProvisioningStepUpdateOne) ClearFileExtract() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearFileExtract()
	return psuo
}

// ClearAnsible clears the "Ansible" edge to the Ansible entity.
func (psuo *ProvisioningStepUpdateOne) ClearAnsible() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearAnsible()
	return psuo
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (psuo *ProvisioningStepUpdateOne) ClearPlan() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearPlan()
	return psuo
}

// ClearAgentTasks clears all "AgentTasks" edges to the AgentTask entity.
func (psuo *ProvisioningStepUpdateOne) ClearAgentTasks() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearAgentTasks()
	return psuo
}

// RemoveAgentTaskIDs removes the "AgentTasks" edge to AgentTask entities by IDs.
func (psuo *ProvisioningStepUpdateOne) RemoveAgentTaskIDs(ids ...uuid.UUID) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveAgentTaskIDs(ids...)
	return psuo
}

// RemoveAgentTasks removes "AgentTasks" edges to AgentTask entities.
func (psuo *ProvisioningStepUpdateOne) RemoveAgentTasks(a ...*AgentTask) *ProvisioningStepUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psuo.RemoveAgentTaskIDs(ids...)
}

// ClearGinFileMiddleware clears the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (psuo *ProvisioningStepUpdateOne) ClearGinFileMiddleware() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearGinFileMiddleware()
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProvisioningStepUpdateOne) Select(field string, fields ...string) *ProvisioningStepUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProvisioningStep entity.
func (psuo *ProvisioningStepUpdateOne) Save(ctx context.Context) (*ProvisioningStep, error) {
	var (
		err  error
		node *ProvisioningStep
	)
	if len(psuo.hooks) == 0 {
		if err = psuo.check(); err != nil {
			return nil, err
		}
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psuo.check(); err != nil {
				return nil, err
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			if psuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, psuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProvisioningStep)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProvisioningStepMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) SaveX(ctx context.Context) *ProvisioningStep {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProvisioningStepUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProvisioningStepUpdateOne) check() error {
	if v, ok := psuo.mutation.GetType(); ok {
		if err := provisioningstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningStep.type": %w`, err)}
		}
	}
	return nil
}

func (psuo *ProvisioningStepUpdateOne) sqlSave(ctx context.Context) (_node *ProvisioningStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningstep.Table,
			Columns: provisioningstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningstep.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProvisioningStep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningstep.FieldID)
		for _, f := range fields {
			if !provisioningstep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provisioningstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisioningstep.FieldType,
		})
	}
	if value, ok := psuo.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psuo.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if psuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.StatusTable,
			Columns: []string{provisioningstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningstep.StatusTable,
			Columns: []string{provisioningstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: []string{provisioningstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.DNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.FileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDeleteTable,
			Columns: []string{provisioningstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.FileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDeleteTable,
			Columns: []string{provisioningstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.FileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDownloadTable,
			Columns: []string{provisioningstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.FileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileDownloadTable,
			Columns: []string{provisioningstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.FileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileExtractTable,
			Columns: []string{provisioningstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.FileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.FileExtractTable,
			Columns: []string{provisioningstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.AnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.AnsibleTable,
			Columns: []string{provisioningstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.AnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningstep.AnsibleTable,
			Columns: []string{provisioningstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.PlanTable,
			Columns: []string{provisioningstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.PlanTable,
			Columns: []string{provisioningstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.AgentTasksTable,
			Columns: []string{provisioningstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedAgentTasksIDs(); len(nodes) > 0 && !psuo.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.AgentTasksTable,
			Columns: []string{provisioningstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningstep.AgentTasksTable,
			Columns: []string{provisioningstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.GinFileMiddlewareTable,
			Columns: []string{provisioningstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningstep.GinFileMiddlewareTable,
			Columns: []string{provisioningstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisioningStep{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
