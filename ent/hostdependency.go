// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/google/uuid"
)

// HostDependency is the model entity for the HostDependency schema.
type HostDependency struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HostID holds the value of the "host_id" field.
	HostID string `json:"host_id,omitempty" hcl:"host,attr"`
	// NetworkID holds the value of the "network_id" field.
	NetworkID string `json:"network_id,omitempty" hcl:"network,attr"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostDependencyQuery when eager-loading is set.
	Edges HostDependencyEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// HostDependencyToDependOnHost holds the value of the HostDependencyToDependOnHost edge.
	HCLHostDependencyToDependOnHost *Host `json:"HostDependencyToDependOnHost,omitempty"`
	// HostDependencyToDependByHost holds the value of the HostDependencyToDependByHost edge.
	HCLHostDependencyToDependByHost *Host `json:"HostDependencyToDependByHost,omitempty"`
	// HostDependencyToNetwork holds the value of the HostDependencyToNetwork edge.
	HCLHostDependencyToNetwork *Network `json:"HostDependencyToNetwork,omitempty"`
	// HostDependencyToEnvironment holds the value of the HostDependencyToEnvironment edge.
	HCLHostDependencyToEnvironment *Environment `json:"HostDependencyToEnvironment,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	environment_environment_to_host_dependency        *uuid.UUID
	host_dependency_host_dependency_to_depend_on_host *uuid.UUID
	host_dependency_host_dependency_to_depend_by_host *uuid.UUID
	host_dependency_host_dependency_to_network        *uuid.UUID
	selectValues                                      sql.SelectValues
}

// HostDependencyEdges holds the relations/edges for other nodes in the graph.
type HostDependencyEdges struct {
	// HostDependencyToDependOnHost holds the value of the HostDependencyToDependOnHost edge.
	HostDependencyToDependOnHost *Host `json:"HostDependencyToDependOnHost,omitempty"`
	// HostDependencyToDependByHost holds the value of the HostDependencyToDependByHost edge.
	HostDependencyToDependByHost *Host `json:"HostDependencyToDependByHost,omitempty"`
	// HostDependencyToNetwork holds the value of the HostDependencyToNetwork edge.
	HostDependencyToNetwork *Network `json:"HostDependencyToNetwork,omitempty"`
	// HostDependencyToEnvironment holds the value of the HostDependencyToEnvironment edge.
	HostDependencyToEnvironment *Environment `json:"HostDependencyToEnvironment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// HostDependencyToDependOnHostOrErr returns the HostDependencyToDependOnHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostDependencyEdges) HostDependencyToDependOnHostOrErr() (*Host, error) {
	if e.loadedTypes[0] {
		if e.HostDependencyToDependOnHost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.HostDependencyToDependOnHost, nil
	}
	return nil, &NotLoadedError{edge: "HostDependencyToDependOnHost"}
}

// HostDependencyToDependByHostOrErr returns the HostDependencyToDependByHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostDependencyEdges) HostDependencyToDependByHostOrErr() (*Host, error) {
	if e.loadedTypes[1] {
		if e.HostDependencyToDependByHost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.HostDependencyToDependByHost, nil
	}
	return nil, &NotLoadedError{edge: "HostDependencyToDependByHost"}
}

// HostDependencyToNetworkOrErr returns the HostDependencyToNetwork value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostDependencyEdges) HostDependencyToNetworkOrErr() (*Network, error) {
	if e.loadedTypes[2] {
		if e.HostDependencyToNetwork == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: network.Label}
		}
		return e.HostDependencyToNetwork, nil
	}
	return nil, &NotLoadedError{edge: "HostDependencyToNetwork"}
}

// HostDependencyToEnvironmentOrErr returns the HostDependencyToEnvironment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostDependencyEdges) HostDependencyToEnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[3] {
		if e.HostDependencyToEnvironment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.HostDependencyToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "HostDependencyToEnvironment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostdependency.FieldHostID, hostdependency.FieldNetworkID:
			values[i] = new(sql.NullString)
		case hostdependency.FieldID:
			values[i] = new(uuid.UUID)
		case hostdependency.ForeignKeys[0]: // environment_environment_to_host_dependency
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case hostdependency.ForeignKeys[1]: // host_dependency_host_dependency_to_depend_on_host
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case hostdependency.ForeignKeys[2]: // host_dependency_host_dependency_to_depend_by_host
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case hostdependency.ForeignKeys[3]: // host_dependency_host_dependency_to_network
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostDependency fields.
func (hd *HostDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostdependency.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hd.ID = *value
			}
		case hostdependency.FieldHostID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_id", values[i])
			} else if value.Valid {
				hd.HostID = value.String
			}
		case hostdependency.FieldNetworkID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network_id", values[i])
			} else if value.Valid {
				hd.NetworkID = value.String
			}
		case hostdependency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field environment_environment_to_host_dependency", values[i])
			} else if value.Valid {
				hd.environment_environment_to_host_dependency = new(uuid.UUID)
				*hd.environment_environment_to_host_dependency = *value.S.(*uuid.UUID)
			}
		case hostdependency.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field host_dependency_host_dependency_to_depend_on_host", values[i])
			} else if value.Valid {
				hd.host_dependency_host_dependency_to_depend_on_host = new(uuid.UUID)
				*hd.host_dependency_host_dependency_to_depend_on_host = *value.S.(*uuid.UUID)
			}
		case hostdependency.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field host_dependency_host_dependency_to_depend_by_host", values[i])
			} else if value.Valid {
				hd.host_dependency_host_dependency_to_depend_by_host = new(uuid.UUID)
				*hd.host_dependency_host_dependency_to_depend_by_host = *value.S.(*uuid.UUID)
			}
		case hostdependency.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field host_dependency_host_dependency_to_network", values[i])
			} else if value.Valid {
				hd.host_dependency_host_dependency_to_network = new(uuid.UUID)
				*hd.host_dependency_host_dependency_to_network = *value.S.(*uuid.UUID)
			}
		default:
			hd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HostDependency.
// This includes values selected through modifiers, order, etc.
func (hd *HostDependency) Value(name string) (ent.Value, error) {
	return hd.selectValues.Get(name)
}

// QueryHostDependencyToDependOnHost queries the "HostDependencyToDependOnHost" edge of the HostDependency entity.
func (hd *HostDependency) QueryHostDependencyToDependOnHost() *HostQuery {
	return NewHostDependencyClient(hd.config).QueryHostDependencyToDependOnHost(hd)
}

// QueryHostDependencyToDependByHost queries the "HostDependencyToDependByHost" edge of the HostDependency entity.
func (hd *HostDependency) QueryHostDependencyToDependByHost() *HostQuery {
	return NewHostDependencyClient(hd.config).QueryHostDependencyToDependByHost(hd)
}

// QueryHostDependencyToNetwork queries the "HostDependencyToNetwork" edge of the HostDependency entity.
func (hd *HostDependency) QueryHostDependencyToNetwork() *NetworkQuery {
	return NewHostDependencyClient(hd.config).QueryHostDependencyToNetwork(hd)
}

// QueryHostDependencyToEnvironment queries the "HostDependencyToEnvironment" edge of the HostDependency entity.
func (hd *HostDependency) QueryHostDependencyToEnvironment() *EnvironmentQuery {
	return NewHostDependencyClient(hd.config).QueryHostDependencyToEnvironment(hd)
}

// Update returns a builder for updating this HostDependency.
// Note that you need to call HostDependency.Unwrap() before calling this method if this HostDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (hd *HostDependency) Update() *HostDependencyUpdateOne {
	return NewHostDependencyClient(hd.config).UpdateOne(hd)
}

// Unwrap unwraps the HostDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hd *HostDependency) Unwrap() *HostDependency {
	_tx, ok := hd.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostDependency is not a transactional entity")
	}
	hd.config.driver = _tx.drv
	return hd
}

// String implements the fmt.Stringer.
func (hd *HostDependency) String() string {
	var builder strings.Builder
	builder.WriteString("HostDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hd.ID))
	builder.WriteString("host_id=")
	builder.WriteString(hd.HostID)
	builder.WriteString(", ")
	builder.WriteString("network_id=")
	builder.WriteString(hd.NetworkID)
	builder.WriteByte(')')
	return builder.String()
}

// HostDependencies is a parsable slice of HostDependency.
type HostDependencies []*HostDependency
