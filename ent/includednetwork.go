// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/google/uuid"
)

// IncludedNetwork is the model entity for the IncludedNetwork schema.
type IncludedNetwork struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,label"`
	// IncludedHosts holds the value of the "included_hosts" field.
	IncludedHosts []string `json:"included_hosts,omitempty" hcl:"included_hosts,attr"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncludedNetworkQuery when eager-loading is set.
	Edges IncludedNetworkEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Tags holds the value of the Tags edge.
	HCLTags []*Tag `json:"Tags,omitempty"`
	// Hosts holds the value of the Hosts edge.
	HCLHosts []*Host `json:"Hosts,omitempty"`
	// Network holds the value of the Network edge.
	HCLNetwork *Network `json:"Network,omitempty"`
	// Environments holds the value of the Environments edge.
	HCLEnvironments []*Environment `json:"Environments,omitempty"`
	//
	included_network_network *uuid.UUID
}

// IncludedNetworkEdges holds the relations/edges for other nodes in the graph.
type IncludedNetworkEdges struct {
	// Tags holds the value of the Tags edge.
	Tags []*Tag `json:"Tags,omitempty"`
	// Hosts holds the value of the Hosts edge.
	Hosts []*Host `json:"Hosts,omitempty"`
	// Network holds the value of the Network edge.
	Network *Network `json:"Network,omitempty"`
	// Environments holds the value of the Environments edge.
	Environments []*Environment `json:"Environments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e IncludedNetworkEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "Tags"}
}

// HostsOrErr returns the Hosts value or an error if the edge
// was not loaded in eager-loading.
func (e IncludedNetworkEdges) HostsOrErr() ([]*Host, error) {
	if e.loadedTypes[1] {
		return e.Hosts, nil
	}
	return nil, &NotLoadedError{edge: "Hosts"}
}

// NetworkOrErr returns the Network value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncludedNetworkEdges) NetworkOrErr() (*Network, error) {
	if e.loadedTypes[2] {
		if e.Network == nil {
			// The edge Network was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: network.Label}
		}
		return e.Network, nil
	}
	return nil, &NotLoadedError{edge: "Network"}
}

// EnvironmentsOrErr returns the Environments value or an error if the edge
// was not loaded in eager-loading.
func (e IncludedNetworkEdges) EnvironmentsOrErr() ([]*Environment, error) {
	if e.loadedTypes[3] {
		return e.Environments, nil
	}
	return nil, &NotLoadedError{edge: "Environments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncludedNetwork) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case includednetwork.FieldIncludedHosts:
			values[i] = new([]byte)
		case includednetwork.FieldName:
			values[i] = new(sql.NullString)
		case includednetwork.FieldID:
			values[i] = new(uuid.UUID)
		case includednetwork.ForeignKeys[0]: // included_network_network
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IncludedNetwork", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncludedNetwork fields.
func (in *IncludedNetwork) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case includednetwork.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				in.ID = *value
			}
		case includednetwork.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				in.Name = value.String
			}
		case includednetwork.FieldIncludedHosts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field included_hosts", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &in.IncludedHosts); err != nil {
					return fmt.Errorf("unmarshal field included_hosts: %w", err)
				}
			}
		case includednetwork.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field included_network_network", values[i])
			} else if value.Valid {
				in.included_network_network = new(uuid.UUID)
				*in.included_network_network = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTags queries the "Tags" edge of the IncludedNetwork entity.
func (in *IncludedNetwork) QueryTags() *TagQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryTags(in)
}

// QueryHosts queries the "Hosts" edge of the IncludedNetwork entity.
func (in *IncludedNetwork) QueryHosts() *HostQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryHosts(in)
}

// QueryNetwork queries the "Network" edge of the IncludedNetwork entity.
func (in *IncludedNetwork) QueryNetwork() *NetworkQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryNetwork(in)
}

// QueryEnvironments queries the "Environments" edge of the IncludedNetwork entity.
func (in *IncludedNetwork) QueryEnvironments() *EnvironmentQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryEnvironments(in)
}

// Update returns a builder for updating this IncludedNetwork.
// Note that you need to call IncludedNetwork.Unwrap() before calling this method if this IncludedNetwork
// was returned from a transaction, and the transaction was committed or rolled back.
func (in *IncludedNetwork) Update() *IncludedNetworkUpdateOne {
	return (&IncludedNetworkClient{config: in.config}).UpdateOne(in)
}

// Unwrap unwraps the IncludedNetwork entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (in *IncludedNetwork) Unwrap() *IncludedNetwork {
	tx, ok := in.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncludedNetwork is not a transactional entity")
	}
	in.config.driver = tx.drv
	return in
}

// String implements the fmt.Stringer.
func (in *IncludedNetwork) String() string {
	var builder strings.Builder
	builder.WriteString("IncludedNetwork(")
	builder.WriteString(fmt.Sprintf("id=%v", in.ID))
	builder.WriteString(", name=")
	builder.WriteString(in.Name)
	builder.WriteString(", included_hosts=")
	builder.WriteString(fmt.Sprintf("%v", in.IncludedHosts))
	builder.WriteByte(')')
	return builder.String()
}

// IncludedNetworks is a parsable slice of IncludedNetwork.
type IncludedNetworks []*IncludedNetwork

func (in IncludedNetworks) config(cfg config) {
	for _i := range in {
		in[_i].config = cfg
	}
}
