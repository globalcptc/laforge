// Code generated by ent, DO NOT EDIT.

package disk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the disk type in the database.
	Label = "disk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "Host"
	// Table holds the table name of the disk in the database.
	Table = "disks"
	// HostTable is the table that holds the Host relation/edge.
	HostTable = "disks"
	// HostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostInverseTable = "hosts"
	// HostColumn is the table column denoting the Host relation/edge.
	HostColumn = "host_disk"
)

// Columns holds all SQL columns for disk fields.
var Columns = []string{
	FieldID,
	FieldSize,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "disks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"host_disk",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SizeValidator is a validator for the "size" field. It is called by the builders before save.
	SizeValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Disk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByHostField orders the results by Host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, HostTable, HostColumn),
	)
}
