// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// StatusUpdate is the builder for updating Status entities.
type StatusUpdate struct {
	config
	hooks    []Hook
	mutation *StatusMutation
}

// Where appends a list predicates to the StatusUpdate builder.
func (su *StatusUpdate) Where(ps ...predicate.Status) *StatusUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetState sets the "state" field.
func (su *StatusUpdate) SetState(s status.State) *StatusUpdate {
	su.mutation.SetState(s)
	return su
}

// SetStatusFor sets the "status_for" field.
func (su *StatusUpdate) SetStatusFor(sf status.StatusFor) *StatusUpdate {
	su.mutation.SetStatusFor(sf)
	return su
}

// SetStartedAt sets the "started_at" field.
func (su *StatusUpdate) SetStartedAt(t time.Time) *StatusUpdate {
	su.mutation.SetStartedAt(t)
	return su
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (su *StatusUpdate) SetNillableStartedAt(t *time.Time) *StatusUpdate {
	if t != nil {
		su.SetStartedAt(*t)
	}
	return su
}

// ClearStartedAt clears the value of the "started_at" field.
func (su *StatusUpdate) ClearStartedAt() *StatusUpdate {
	su.mutation.ClearStartedAt()
	return su
}

// SetEndedAt sets the "ended_at" field.
func (su *StatusUpdate) SetEndedAt(t time.Time) *StatusUpdate {
	su.mutation.SetEndedAt(t)
	return su
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (su *StatusUpdate) SetNillableEndedAt(t *time.Time) *StatusUpdate {
	if t != nil {
		su.SetEndedAt(*t)
	}
	return su
}

// ClearEndedAt clears the value of the "ended_at" field.
func (su *StatusUpdate) ClearEndedAt() *StatusUpdate {
	su.mutation.ClearEndedAt()
	return su
}

// SetFailed sets the "failed" field.
func (su *StatusUpdate) SetFailed(b bool) *StatusUpdate {
	su.mutation.SetFailed(b)
	return su
}

// SetNillableFailed sets the "failed" field if the given value is not nil.
func (su *StatusUpdate) SetNillableFailed(b *bool) *StatusUpdate {
	if b != nil {
		su.SetFailed(*b)
	}
	return su
}

// SetCompleted sets the "completed" field.
func (su *StatusUpdate) SetCompleted(b bool) *StatusUpdate {
	su.mutation.SetCompleted(b)
	return su
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (su *StatusUpdate) SetNillableCompleted(b *bool) *StatusUpdate {
	if b != nil {
		su.SetCompleted(*b)
	}
	return su
}

// SetError sets the "error" field.
func (su *StatusUpdate) SetError(s string) *StatusUpdate {
	su.mutation.SetError(s)
	return su
}

// SetNillableError sets the "error" field if the given value is not nil.
func (su *StatusUpdate) SetNillableError(s *string) *StatusUpdate {
	if s != nil {
		su.SetError(*s)
	}
	return su
}

// ClearError clears the value of the "error" field.
func (su *StatusUpdate) ClearError() *StatusUpdate {
	su.mutation.ClearError()
	return su
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (su *StatusUpdate) SetBuildID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetBuildID(id)
	return su
}

// SetNillableBuildID sets the "Build" edge to the Build entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableBuildID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetBuildID(*id)
	}
	return su
}

// SetBuild sets the "Build" edge to the Build entity.
func (su *StatusUpdate) SetBuild(b *Build) *StatusUpdate {
	return su.SetBuildID(b.ID)
}

// SetProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (su *StatusUpdate) SetProvisionedNetworkID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetProvisionedNetworkID(id)
	return su
}

// SetNillableProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableProvisionedNetworkID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetProvisionedNetworkID(*id)
	}
	return su
}

// SetProvisionedNetwork sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (su *StatusUpdate) SetProvisionedNetwork(p *ProvisionedNetwork) *StatusUpdate {
	return su.SetProvisionedNetworkID(p.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (su *StatusUpdate) SetProvisionedHostID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetProvisionedHostID(id)
	return su
}

// SetNillableProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableProvisionedHostID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetProvisionedHostID(*id)
	}
	return su
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (su *StatusUpdate) SetProvisionedHost(p *ProvisionedHost) *StatusUpdate {
	return su.SetProvisionedHostID(p.ID)
}

// SetProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID.
func (su *StatusUpdate) SetProvisioningStepID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetProvisioningStepID(id)
	return su
}

// SetNillableProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableProvisioningStepID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetProvisioningStepID(*id)
	}
	return su
}

// SetProvisioningStep sets the "ProvisioningStep" edge to the ProvisioningStep entity.
func (su *StatusUpdate) SetProvisioningStep(p *ProvisioningStep) *StatusUpdate {
	return su.SetProvisioningStepID(p.ID)
}

// SetTeamID sets the "Team" edge to the Team entity by ID.
func (su *StatusUpdate) SetTeamID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetTeamID(id)
	return su
}

// SetNillableTeamID sets the "Team" edge to the Team entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableTeamID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetTeamID(*id)
	}
	return su
}

// SetTeam sets the "Team" edge to the Team entity.
func (su *StatusUpdate) SetTeam(t *Team) *StatusUpdate {
	return su.SetTeamID(t.ID)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (su *StatusUpdate) SetPlanID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetPlanID(id)
	return su
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillablePlanID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetPlanID(*id)
	}
	return su
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (su *StatusUpdate) SetPlan(p *Plan) *StatusUpdate {
	return su.SetPlanID(p.ID)
}

// SetServerTaskID sets the "ServerTask" edge to the ServerTask entity by ID.
func (su *StatusUpdate) SetServerTaskID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetServerTaskID(id)
	return su
}

// SetNillableServerTaskID sets the "ServerTask" edge to the ServerTask entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableServerTaskID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetServerTaskID(*id)
	}
	return su
}

// SetServerTask sets the "ServerTask" edge to the ServerTask entity.
func (su *StatusUpdate) SetServerTask(s *ServerTask) *StatusUpdate {
	return su.SetServerTaskID(s.ID)
}

// SetAdhocPlanID sets the "AdhocPlan" edge to the AdhocPlan entity by ID.
func (su *StatusUpdate) SetAdhocPlanID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetAdhocPlanID(id)
	return su
}

// SetNillableAdhocPlanID sets the "AdhocPlan" edge to the AdhocPlan entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableAdhocPlanID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetAdhocPlanID(*id)
	}
	return su
}

// SetAdhocPlan sets the "AdhocPlan" edge to the AdhocPlan entity.
func (su *StatusUpdate) SetAdhocPlan(a *AdhocPlan) *StatusUpdate {
	return su.SetAdhocPlanID(a.ID)
}

// SetProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID.
func (su *StatusUpdate) SetProvisioningScheduledStepID(id uuid.UUID) *StatusUpdate {
	su.mutation.SetProvisioningScheduledStepID(id)
	return su
}

// SetNillableProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID if the given value is not nil.
func (su *StatusUpdate) SetNillableProvisioningScheduledStepID(id *uuid.UUID) *StatusUpdate {
	if id != nil {
		su = su.SetProvisioningScheduledStepID(*id)
	}
	return su
}

// SetProvisioningScheduledStep sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (su *StatusUpdate) SetProvisioningScheduledStep(p *ProvisioningScheduledStep) *StatusUpdate {
	return su.SetProvisioningScheduledStepID(p.ID)
}

// Mutation returns the StatusMutation object of the builder.
func (su *StatusUpdate) Mutation() *StatusMutation {
	return su.mutation
}

// ClearBuild clears the "Build" edge to the Build entity.
func (su *StatusUpdate) ClearBuild() *StatusUpdate {
	su.mutation.ClearBuild()
	return su
}

// ClearProvisionedNetwork clears the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (su *StatusUpdate) ClearProvisionedNetwork() *StatusUpdate {
	su.mutation.ClearProvisionedNetwork()
	return su
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (su *StatusUpdate) ClearProvisionedHost() *StatusUpdate {
	su.mutation.ClearProvisionedHost()
	return su
}

// ClearProvisioningStep clears the "ProvisioningStep" edge to the ProvisioningStep entity.
func (su *StatusUpdate) ClearProvisioningStep() *StatusUpdate {
	su.mutation.ClearProvisioningStep()
	return su
}

// ClearTeam clears the "Team" edge to the Team entity.
func (su *StatusUpdate) ClearTeam() *StatusUpdate {
	su.mutation.ClearTeam()
	return su
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (su *StatusUpdate) ClearPlan() *StatusUpdate {
	su.mutation.ClearPlan()
	return su
}

// ClearServerTask clears the "ServerTask" edge to the ServerTask entity.
func (su *StatusUpdate) ClearServerTask() *StatusUpdate {
	su.mutation.ClearServerTask()
	return su
}

// ClearAdhocPlan clears the "AdhocPlan" edge to the AdhocPlan entity.
func (su *StatusUpdate) ClearAdhocPlan() *StatusUpdate {
	su.mutation.ClearAdhocPlan()
	return su
}

// ClearProvisioningScheduledStep clears the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (su *StatusUpdate) ClearProvisioningScheduledStep() *StatusUpdate {
	su.mutation.ClearProvisioningScheduledStep()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatusUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatusUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatusUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatusUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StatusUpdate) check() error {
	if v, ok := su.mutation.State(); ok {
		if err := status.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Status.state": %w`, err)}
		}
	}
	if v, ok := su.mutation.StatusFor(); ok {
		if err := status.StatusForValidator(v); err != nil {
			return &ValidationError{Name: "status_for", err: fmt.Errorf(`ent: validator failed for field "Status.status_for": %w`, err)}
		}
	}
	return nil
}

func (su *StatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   status.Table,
			Columns: status.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: status.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: status.FieldState,
		})
	}
	if value, ok := su.mutation.StatusFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: status.FieldStatusFor,
		})
	}
	if value, ok := su.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: status.FieldStartedAt,
		})
	}
	if su.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: status.FieldStartedAt,
		})
	}
	if value, ok := su.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: status.FieldEndedAt,
		})
	}
	if su.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: status.FieldEndedAt,
		})
	}
	if value, ok := su.mutation.Failed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: status.FieldFailed,
		})
	}
	if value, ok := su.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: status.FieldCompleted,
		})
	}
	if value, ok := su.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: status.FieldError,
		})
	}
	if su.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: status.FieldError,
		})
	}
	if su.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.BuildTable,
			Columns: []string{status.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.BuildTable,
			Columns: []string{status.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedNetworkTable,
			Columns: []string{status.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedNetworkTable,
			Columns: []string{status.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedHostTable,
			Columns: []string{status.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedHostTable,
			Columns: []string{status.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningStepTable,
			Columns: []string{status.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningStepTable,
			Columns: []string{status.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.TeamTable,
			Columns: []string{status.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.TeamTable,
			Columns: []string{status.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.PlanTable,
			Columns: []string{status.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.PlanTable,
			Columns: []string{status.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServerTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ServerTaskTable,
			Columns: []string{status.ServerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServerTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ServerTaskTable,
			Columns: []string{status.ServerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AdhocPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.AdhocPlanTable,
			Columns: []string{status.AdhocPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AdhocPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.AdhocPlanTable,
			Columns: []string{status.AdhocPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProvisioningScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningScheduledStepTable,
			Columns: []string{status.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProvisioningScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningScheduledStepTable,
			Columns: []string{status.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{status.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StatusUpdateOne is the builder for updating a single Status entity.
type StatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatusMutation
}

// SetState sets the "state" field.
func (suo *StatusUpdateOne) SetState(s status.State) *StatusUpdateOne {
	suo.mutation.SetState(s)
	return suo
}

// SetStatusFor sets the "status_for" field.
func (suo *StatusUpdateOne) SetStatusFor(sf status.StatusFor) *StatusUpdateOne {
	suo.mutation.SetStatusFor(sf)
	return suo
}

// SetStartedAt sets the "started_at" field.
func (suo *StatusUpdateOne) SetStartedAt(t time.Time) *StatusUpdateOne {
	suo.mutation.SetStartedAt(t)
	return suo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableStartedAt(t *time.Time) *StatusUpdateOne {
	if t != nil {
		suo.SetStartedAt(*t)
	}
	return suo
}

// ClearStartedAt clears the value of the "started_at" field.
func (suo *StatusUpdateOne) ClearStartedAt() *StatusUpdateOne {
	suo.mutation.ClearStartedAt()
	return suo
}

// SetEndedAt sets the "ended_at" field.
func (suo *StatusUpdateOne) SetEndedAt(t time.Time) *StatusUpdateOne {
	suo.mutation.SetEndedAt(t)
	return suo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableEndedAt(t *time.Time) *StatusUpdateOne {
	if t != nil {
		suo.SetEndedAt(*t)
	}
	return suo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (suo *StatusUpdateOne) ClearEndedAt() *StatusUpdateOne {
	suo.mutation.ClearEndedAt()
	return suo
}

// SetFailed sets the "failed" field.
func (suo *StatusUpdateOne) SetFailed(b bool) *StatusUpdateOne {
	suo.mutation.SetFailed(b)
	return suo
}

// SetNillableFailed sets the "failed" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableFailed(b *bool) *StatusUpdateOne {
	if b != nil {
		suo.SetFailed(*b)
	}
	return suo
}

// SetCompleted sets the "completed" field.
func (suo *StatusUpdateOne) SetCompleted(b bool) *StatusUpdateOne {
	suo.mutation.SetCompleted(b)
	return suo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableCompleted(b *bool) *StatusUpdateOne {
	if b != nil {
		suo.SetCompleted(*b)
	}
	return suo
}

// SetError sets the "error" field.
func (suo *StatusUpdateOne) SetError(s string) *StatusUpdateOne {
	suo.mutation.SetError(s)
	return suo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableError(s *string) *StatusUpdateOne {
	if s != nil {
		suo.SetError(*s)
	}
	return suo
}

// ClearError clears the value of the "error" field.
func (suo *StatusUpdateOne) ClearError() *StatusUpdateOne {
	suo.mutation.ClearError()
	return suo
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (suo *StatusUpdateOne) SetBuildID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetBuildID(id)
	return suo
}

// SetNillableBuildID sets the "Build" edge to the Build entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableBuildID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetBuildID(*id)
	}
	return suo
}

// SetBuild sets the "Build" edge to the Build entity.
func (suo *StatusUpdateOne) SetBuild(b *Build) *StatusUpdateOne {
	return suo.SetBuildID(b.ID)
}

// SetProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (suo *StatusUpdateOne) SetProvisionedNetworkID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetProvisionedNetworkID(id)
	return suo
}

// SetNillableProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableProvisionedNetworkID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetProvisionedNetworkID(*id)
	}
	return suo
}

// SetProvisionedNetwork sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (suo *StatusUpdateOne) SetProvisionedNetwork(p *ProvisionedNetwork) *StatusUpdateOne {
	return suo.SetProvisionedNetworkID(p.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (suo *StatusUpdateOne) SetProvisionedHostID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetProvisionedHostID(id)
	return suo
}

// SetNillableProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableProvisionedHostID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetProvisionedHostID(*id)
	}
	return suo
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (suo *StatusUpdateOne) SetProvisionedHost(p *ProvisionedHost) *StatusUpdateOne {
	return suo.SetProvisionedHostID(p.ID)
}

// SetProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID.
func (suo *StatusUpdateOne) SetProvisioningStepID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetProvisioningStepID(id)
	return suo
}

// SetNillableProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableProvisioningStepID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetProvisioningStepID(*id)
	}
	return suo
}

// SetProvisioningStep sets the "ProvisioningStep" edge to the ProvisioningStep entity.
func (suo *StatusUpdateOne) SetProvisioningStep(p *ProvisioningStep) *StatusUpdateOne {
	return suo.SetProvisioningStepID(p.ID)
}

// SetTeamID sets the "Team" edge to the Team entity by ID.
func (suo *StatusUpdateOne) SetTeamID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetTeamID(id)
	return suo
}

// SetNillableTeamID sets the "Team" edge to the Team entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableTeamID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetTeamID(*id)
	}
	return suo
}

// SetTeam sets the "Team" edge to the Team entity.
func (suo *StatusUpdateOne) SetTeam(t *Team) *StatusUpdateOne {
	return suo.SetTeamID(t.ID)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (suo *StatusUpdateOne) SetPlanID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetPlanID(id)
	return suo
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillablePlanID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetPlanID(*id)
	}
	return suo
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (suo *StatusUpdateOne) SetPlan(p *Plan) *StatusUpdateOne {
	return suo.SetPlanID(p.ID)
}

// SetServerTaskID sets the "ServerTask" edge to the ServerTask entity by ID.
func (suo *StatusUpdateOne) SetServerTaskID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetServerTaskID(id)
	return suo
}

// SetNillableServerTaskID sets the "ServerTask" edge to the ServerTask entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableServerTaskID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetServerTaskID(*id)
	}
	return suo
}

// SetServerTask sets the "ServerTask" edge to the ServerTask entity.
func (suo *StatusUpdateOne) SetServerTask(s *ServerTask) *StatusUpdateOne {
	return suo.SetServerTaskID(s.ID)
}

// SetAdhocPlanID sets the "AdhocPlan" edge to the AdhocPlan entity by ID.
func (suo *StatusUpdateOne) SetAdhocPlanID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetAdhocPlanID(id)
	return suo
}

// SetNillableAdhocPlanID sets the "AdhocPlan" edge to the AdhocPlan entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableAdhocPlanID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetAdhocPlanID(*id)
	}
	return suo
}

// SetAdhocPlan sets the "AdhocPlan" edge to the AdhocPlan entity.
func (suo *StatusUpdateOne) SetAdhocPlan(a *AdhocPlan) *StatusUpdateOne {
	return suo.SetAdhocPlanID(a.ID)
}

// SetProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID.
func (suo *StatusUpdateOne) SetProvisioningScheduledStepID(id uuid.UUID) *StatusUpdateOne {
	suo.mutation.SetProvisioningScheduledStepID(id)
	return suo
}

// SetNillableProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableProvisioningScheduledStepID(id *uuid.UUID) *StatusUpdateOne {
	if id != nil {
		suo = suo.SetProvisioningScheduledStepID(*id)
	}
	return suo
}

// SetProvisioningScheduledStep sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (suo *StatusUpdateOne) SetProvisioningScheduledStep(p *ProvisioningScheduledStep) *StatusUpdateOne {
	return suo.SetProvisioningScheduledStepID(p.ID)
}

// Mutation returns the StatusMutation object of the builder.
func (suo *StatusUpdateOne) Mutation() *StatusMutation {
	return suo.mutation
}

// ClearBuild clears the "Build" edge to the Build entity.
func (suo *StatusUpdateOne) ClearBuild() *StatusUpdateOne {
	suo.mutation.ClearBuild()
	return suo
}

// ClearProvisionedNetwork clears the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (suo *StatusUpdateOne) ClearProvisionedNetwork() *StatusUpdateOne {
	suo.mutation.ClearProvisionedNetwork()
	return suo
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (suo *StatusUpdateOne) ClearProvisionedHost() *StatusUpdateOne {
	suo.mutation.ClearProvisionedHost()
	return suo
}

// ClearProvisioningStep clears the "ProvisioningStep" edge to the ProvisioningStep entity.
func (suo *StatusUpdateOne) ClearProvisioningStep() *StatusUpdateOne {
	suo.mutation.ClearProvisioningStep()
	return suo
}

// ClearTeam clears the "Team" edge to the Team entity.
func (suo *StatusUpdateOne) ClearTeam() *StatusUpdateOne {
	suo.mutation.ClearTeam()
	return suo
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (suo *StatusUpdateOne) ClearPlan() *StatusUpdateOne {
	suo.mutation.ClearPlan()
	return suo
}

// ClearServerTask clears the "ServerTask" edge to the ServerTask entity.
func (suo *StatusUpdateOne) ClearServerTask() *StatusUpdateOne {
	suo.mutation.ClearServerTask()
	return suo
}

// ClearAdhocPlan clears the "AdhocPlan" edge to the AdhocPlan entity.
func (suo *StatusUpdateOne) ClearAdhocPlan() *StatusUpdateOne {
	suo.mutation.ClearAdhocPlan()
	return suo
}

// ClearProvisioningScheduledStep clears the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (suo *StatusUpdateOne) ClearProvisioningScheduledStep() *StatusUpdateOne {
	suo.mutation.ClearProvisioningScheduledStep()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatusUpdateOne) Select(field string, fields ...string) *StatusUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Status entity.
func (suo *StatusUpdateOne) Save(ctx context.Context) (*Status, error) {
	var (
		err  error
		node *Status
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Status)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StatusMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatusUpdateOne) SaveX(ctx context.Context) *Status {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatusUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatusUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StatusUpdateOne) check() error {
	if v, ok := suo.mutation.State(); ok {
		if err := status.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Status.state": %w`, err)}
		}
	}
	if v, ok := suo.mutation.StatusFor(); ok {
		if err := status.StatusForValidator(v); err != nil {
			return &ValidationError{Name: "status_for", err: fmt.Errorf(`ent: validator failed for field "Status.status_for": %w`, err)}
		}
	}
	return nil
}

func (suo *StatusUpdateOne) sqlSave(ctx context.Context) (_node *Status, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   status.Table,
			Columns: status.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: status.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Status.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, status.FieldID)
		for _, f := range fields {
			if !status.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != status.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: status.FieldState,
		})
	}
	if value, ok := suo.mutation.StatusFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: status.FieldStatusFor,
		})
	}
	if value, ok := suo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: status.FieldStartedAt,
		})
	}
	if suo.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: status.FieldStartedAt,
		})
	}
	if value, ok := suo.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: status.FieldEndedAt,
		})
	}
	if suo.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: status.FieldEndedAt,
		})
	}
	if value, ok := suo.mutation.Failed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: status.FieldFailed,
		})
	}
	if value, ok := suo.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: status.FieldCompleted,
		})
	}
	if value, ok := suo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: status.FieldError,
		})
	}
	if suo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: status.FieldError,
		})
	}
	if suo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.BuildTable,
			Columns: []string{status.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.BuildTable,
			Columns: []string{status.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedNetworkTable,
			Columns: []string{status.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedNetworkTable,
			Columns: []string{status.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedHostTable,
			Columns: []string{status.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisionedHostTable,
			Columns: []string{status.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningStepTable,
			Columns: []string{status.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningStepTable,
			Columns: []string{status.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.TeamTable,
			Columns: []string{status.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.TeamTable,
			Columns: []string{status.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.PlanTable,
			Columns: []string{status.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.PlanTable,
			Columns: []string{status.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServerTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ServerTaskTable,
			Columns: []string{status.ServerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServerTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ServerTaskTable,
			Columns: []string{status.ServerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AdhocPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.AdhocPlanTable,
			Columns: []string{status.AdhocPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AdhocPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.AdhocPlanTable,
			Columns: []string{status.AdhocPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProvisioningScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningScheduledStepTable,
			Columns: []string{status.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProvisioningScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   status.ProvisioningScheduledStepTable,
			Columns: []string{status.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Status{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{status.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
