// Code generated by ent, DO NOT EDIT.

package script

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the script type in the database.
	Label = "script"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldCooldown holds the string denoting the cooldown field in the database.
	FieldCooldown = "cooldown"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldIgnoreErrors holds the string denoting the ignore_errors field in the database.
	FieldIgnoreErrors = "ignore_errors"
	// FieldArgs holds the string denoting the args field in the database.
	FieldArgs = "args"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldAbsPath holds the string denoting the abs_path field in the database.
	FieldAbsPath = "abs_path"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeScriptToUser holds the string denoting the scripttouser edge name in mutations.
	EdgeScriptToUser = "ScriptToUser"
	// EdgeScriptToFinding holds the string denoting the scripttofinding edge name in mutations.
	EdgeScriptToFinding = "ScriptToFinding"
	// EdgeScriptToEnvironment holds the string denoting the scripttoenvironment edge name in mutations.
	EdgeScriptToEnvironment = "ScriptToEnvironment"
	// Table holds the table name of the script in the database.
	Table = "scripts"
	// ScriptToUserTable is the table that holds the ScriptToUser relation/edge.
	ScriptToUserTable = "users"
	// ScriptToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ScriptToUserInverseTable = "users"
	// ScriptToUserColumn is the table column denoting the ScriptToUser relation/edge.
	ScriptToUserColumn = "script_script_to_user"
	// ScriptToFindingTable is the table that holds the ScriptToFinding relation/edge.
	ScriptToFindingTable = "findings"
	// ScriptToFindingInverseTable is the table name for the Finding entity.
	// It exists in this package in order to avoid circular dependency with the "finding" package.
	ScriptToFindingInverseTable = "findings"
	// ScriptToFindingColumn is the table column denoting the ScriptToFinding relation/edge.
	ScriptToFindingColumn = "script_script_to_finding"
	// ScriptToEnvironmentTable is the table that holds the ScriptToEnvironment relation/edge.
	ScriptToEnvironmentTable = "scripts"
	// ScriptToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	ScriptToEnvironmentInverseTable = "environments"
	// ScriptToEnvironmentColumn is the table column denoting the ScriptToEnvironment relation/edge.
	ScriptToEnvironmentColumn = "environment_environment_to_script"
)

// Columns holds all SQL columns for script fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldName,
	FieldLanguage,
	FieldDescription,
	FieldSource,
	FieldSourceType,
	FieldCooldown,
	FieldTimeout,
	FieldIgnoreErrors,
	FieldArgs,
	FieldDisabled,
	FieldVars,
	FieldAbsPath,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scripts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_environment_to_script",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Script queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// BySourceType orders the results by the source_type field.
func BySourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceType, opts...).ToFunc()
}

// ByCooldown orders the results by the cooldown field.
func ByCooldown(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCooldown, opts...).ToFunc()
}

// ByTimeout orders the results by the timeout field.
func ByTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeout, opts...).ToFunc()
}

// ByIgnoreErrors orders the results by the ignore_errors field.
func ByIgnoreErrors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIgnoreErrors, opts...).ToFunc()
}

// ByDisabled orders the results by the disabled field.
func ByDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabled, opts...).ToFunc()
}

// ByAbsPath orders the results by the abs_path field.
func ByAbsPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbsPath, opts...).ToFunc()
}

// ByScriptToUserCount orders the results by ScriptToUser count.
func ByScriptToUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScriptToUserStep(), opts...)
	}
}

// ByScriptToUser orders the results by ScriptToUser terms.
func ByScriptToUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScriptToUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScriptToFindingCount orders the results by ScriptToFinding count.
func ByScriptToFindingCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScriptToFindingStep(), opts...)
	}
}

// ByScriptToFinding orders the results by ScriptToFinding terms.
func ByScriptToFinding(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScriptToFindingStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScriptToEnvironmentField orders the results by ScriptToEnvironment field.
func ByScriptToEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScriptToEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}
func newScriptToUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScriptToUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScriptToUserTable, ScriptToUserColumn),
	)
}
func newScriptToFindingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScriptToFindingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScriptToFindingTable, ScriptToFindingColumn),
	)
}
func newScriptToEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScriptToEnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScriptToEnvironmentTable, ScriptToEnvironmentColumn),
	)
}
