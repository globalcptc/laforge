// Code generated by ent, DO NOT EDIT.

package script

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the script type in the database.
	Label = "script"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHclID holds the string denoting the hcl_id field in the database.
	FieldHclID = "hcl_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldCooldown holds the string denoting the cooldown field in the database.
	FieldCooldown = "cooldown"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldIgnoreErrors holds the string denoting the ignore_errors field in the database.
	FieldIgnoreErrors = "ignore_errors"
	// FieldArgs holds the string denoting the args field in the database.
	FieldArgs = "args"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldAbsPath holds the string denoting the abs_path field in the database.
	FieldAbsPath = "abs_path"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "Users"
	// EdgeFindings holds the string denoting the findings edge name in mutations.
	EdgeFindings = "Findings"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// Table holds the table name of the script in the database.
	Table = "scripts"
	// UsersTable is the table that holds the Users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the Users relation/edge.
	UsersColumn = "script_users"
	// FindingsTable is the table that holds the Findings relation/edge.
	FindingsTable = "findings"
	// FindingsInverseTable is the table name for the Finding entity.
	// It exists in this package in order to avoid circular dependency with the "finding" package.
	FindingsInverseTable = "findings"
	// FindingsColumn is the table column denoting the Findings relation/edge.
	FindingsColumn = "script_findings"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "scripts"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "environment_scripts"
)

// Columns holds all SQL columns for script fields.
var Columns = []string{
	FieldID,
	FieldHclID,
	FieldName,
	FieldLanguage,
	FieldDescription,
	FieldSource,
	FieldSourceType,
	FieldCooldown,
	FieldTimeout,
	FieldIgnoreErrors,
	FieldArgs,
	FieldDisabled,
	FieldVars,
	FieldAbsPath,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scripts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_scripts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
