// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// EnvironmentCreate is the builder for creating a Environment entity.
type EnvironmentCreate struct {
	config
	mutation *EnvironmentMutation
	hooks    []Hook
}

// SetHCLID sets the "hcl_id" field.
func (ec *EnvironmentCreate) SetHCLID(s string) *EnvironmentCreate {
	ec.mutation.SetHCLID(s)
	return ec
}

// SetCompetitionID sets the "competition_id" field.
func (ec *EnvironmentCreate) SetCompetitionID(s string) *EnvironmentCreate {
	ec.mutation.SetCompetitionID(s)
	return ec
}

// SetName sets the "name" field.
func (ec *EnvironmentCreate) SetName(s string) *EnvironmentCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EnvironmentCreate) SetDescription(s string) *EnvironmentCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetBuilder sets the "builder" field.
func (ec *EnvironmentCreate) SetBuilder(s string) *EnvironmentCreate {
	ec.mutation.SetBuilder(s)
	return ec
}

// SetTeamCount sets the "team_count" field.
func (ec *EnvironmentCreate) SetTeamCount(i int) *EnvironmentCreate {
	ec.mutation.SetTeamCount(i)
	return ec
}

// SetRevision sets the "revision" field.
func (ec *EnvironmentCreate) SetRevision(i int) *EnvironmentCreate {
	ec.mutation.SetRevision(i)
	return ec
}

// SetAdminCidrs sets the "admin_cidrs" field.
func (ec *EnvironmentCreate) SetAdminCidrs(s []string) *EnvironmentCreate {
	ec.mutation.SetAdminCidrs(s)
	return ec
}

// SetExposedVdiPorts sets the "exposed_vdi_ports" field.
func (ec *EnvironmentCreate) SetExposedVdiPorts(s []string) *EnvironmentCreate {
	ec.mutation.SetExposedVdiPorts(s)
	return ec
}

// SetConfig sets the "config" field.
func (ec *EnvironmentCreate) SetConfig(m map[string]string) *EnvironmentCreate {
	ec.mutation.SetConfig(m)
	return ec
}

// SetTags sets the "tags" field.
func (ec *EnvironmentCreate) SetTags(m map[string]string) *EnvironmentCreate {
	ec.mutation.SetTags(m)
	return ec
}

// SetID sets the "id" field.
func (ec *EnvironmentCreate) SetID(u uuid.UUID) *EnvironmentCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EnvironmentCreate) SetNillableID(u *uuid.UUID) *EnvironmentCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// AddEnvironmentToUserIDs adds the "EnvironmentToUser" edge to the User entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToUserIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToUserIDs(ids...)
	return ec
}

// AddEnvironmentToUser adds the "EnvironmentToUser" edges to the User entity.
func (ec *EnvironmentCreate) AddEnvironmentToUser(u ...*User) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddEnvironmentToUserIDs(ids...)
}

// AddEnvironmentToHostIDs adds the "EnvironmentToHost" edge to the Host entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToHostIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToHostIDs(ids...)
	return ec
}

// AddEnvironmentToHost adds the "EnvironmentToHost" edges to the Host entity.
func (ec *EnvironmentCreate) AddEnvironmentToHost(h ...*Host) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ec.AddEnvironmentToHostIDs(ids...)
}

// AddEnvironmentToCompetitionIDs adds the "EnvironmentToCompetition" edge to the Competition entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToCompetitionIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToCompetitionIDs(ids...)
	return ec
}

// AddEnvironmentToCompetition adds the "EnvironmentToCompetition" edges to the Competition entity.
func (ec *EnvironmentCreate) AddEnvironmentToCompetition(c ...*Competition) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddEnvironmentToCompetitionIDs(ids...)
}

// AddEnvironmentToIdentityIDs adds the "EnvironmentToIdentity" edge to the Identity entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToIdentityIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToIdentityIDs(ids...)
	return ec
}

// AddEnvironmentToIdentity adds the "EnvironmentToIdentity" edges to the Identity entity.
func (ec *EnvironmentCreate) AddEnvironmentToIdentity(i ...*Identity) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ec.AddEnvironmentToIdentityIDs(ids...)
}

// AddEnvironmentToCommandIDs adds the "EnvironmentToCommand" edge to the Command entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToCommandIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToCommandIDs(ids...)
	return ec
}

// AddEnvironmentToCommand adds the "EnvironmentToCommand" edges to the Command entity.
func (ec *EnvironmentCreate) AddEnvironmentToCommand(c ...*Command) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddEnvironmentToCommandIDs(ids...)
}

// AddEnvironmentToScriptIDs adds the "EnvironmentToScript" edge to the Script entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToScriptIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToScriptIDs(ids...)
	return ec
}

// AddEnvironmentToScript adds the "EnvironmentToScript" edges to the Script entity.
func (ec *EnvironmentCreate) AddEnvironmentToScript(s ...*Script) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddEnvironmentToScriptIDs(ids...)
}

// AddEnvironmentToFileDownloadIDs adds the "EnvironmentToFileDownload" edge to the FileDownload entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToFileDownloadIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToFileDownloadIDs(ids...)
	return ec
}

// AddEnvironmentToFileDownload adds the "EnvironmentToFileDownload" edges to the FileDownload entity.
func (ec *EnvironmentCreate) AddEnvironmentToFileDownload(f ...*FileDownload) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddEnvironmentToFileDownloadIDs(ids...)
}

// AddEnvironmentToFileDeleteIDs adds the "EnvironmentToFileDelete" edge to the FileDelete entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToFileDeleteIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToFileDeleteIDs(ids...)
	return ec
}

// AddEnvironmentToFileDelete adds the "EnvironmentToFileDelete" edges to the FileDelete entity.
func (ec *EnvironmentCreate) AddEnvironmentToFileDelete(f ...*FileDelete) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddEnvironmentToFileDeleteIDs(ids...)
}

// AddEnvironmentToFileExtractIDs adds the "EnvironmentToFileExtract" edge to the FileExtract entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToFileExtractIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToFileExtractIDs(ids...)
	return ec
}

// AddEnvironmentToFileExtract adds the "EnvironmentToFileExtract" edges to the FileExtract entity.
func (ec *EnvironmentCreate) AddEnvironmentToFileExtract(f ...*FileExtract) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddEnvironmentToFileExtractIDs(ids...)
}

// AddEnvironmentToIncludedNetworkIDs adds the "EnvironmentToIncludedNetwork" edge to the IncludedNetwork entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToIncludedNetworkIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToIncludedNetworkIDs(ids...)
	return ec
}

// AddEnvironmentToIncludedNetwork adds the "EnvironmentToIncludedNetwork" edges to the IncludedNetwork entity.
func (ec *EnvironmentCreate) AddEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ec.AddEnvironmentToIncludedNetworkIDs(ids...)
}

// AddEnvironmentToFindingIDs adds the "EnvironmentToFinding" edge to the Finding entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToFindingIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToFindingIDs(ids...)
	return ec
}

// AddEnvironmentToFinding adds the "EnvironmentToFinding" edges to the Finding entity.
func (ec *EnvironmentCreate) AddEnvironmentToFinding(f ...*Finding) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddEnvironmentToFindingIDs(ids...)
}

// AddEnvironmentToDNSRecordIDs adds the "EnvironmentToDNSRecord" edge to the DNSRecord entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToDNSRecordIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToDNSRecordIDs(ids...)
	return ec
}

// AddEnvironmentToDNSRecord adds the "EnvironmentToDNSRecord" edges to the DNSRecord entity.
func (ec *EnvironmentCreate) AddEnvironmentToDNSRecord(d ...*DNSRecord) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddEnvironmentToDNSRecordIDs(ids...)
}

// AddEnvironmentToDNSIDs adds the "EnvironmentToDNS" edge to the DNS entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToDNSIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToDNSIDs(ids...)
	return ec
}

// AddEnvironmentToDNS adds the "EnvironmentToDNS" edges to the DNS entity.
func (ec *EnvironmentCreate) AddEnvironmentToDNS(d ...*DNS) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddEnvironmentToDNSIDs(ids...)
}

// AddEnvironmentToNetworkIDs adds the "EnvironmentToNetwork" edge to the Network entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToNetworkIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToNetworkIDs(ids...)
	return ec
}

// AddEnvironmentToNetwork adds the "EnvironmentToNetwork" edges to the Network entity.
func (ec *EnvironmentCreate) AddEnvironmentToNetwork(n ...*Network) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ec.AddEnvironmentToNetworkIDs(ids...)
}

// AddEnvironmentToHostDependencyIDs adds the "EnvironmentToHostDependency" edge to the HostDependency entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToHostDependencyIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToHostDependencyIDs(ids...)
	return ec
}

// AddEnvironmentToHostDependency adds the "EnvironmentToHostDependency" edges to the HostDependency entity.
func (ec *EnvironmentCreate) AddEnvironmentToHostDependency(h ...*HostDependency) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ec.AddEnvironmentToHostDependencyIDs(ids...)
}

// AddEnvironmentToAnsibleIDs adds the "EnvironmentToAnsible" edge to the Ansible entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToAnsibleIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToAnsibleIDs(ids...)
	return ec
}

// AddEnvironmentToAnsible adds the "EnvironmentToAnsible" edges to the Ansible entity.
func (ec *EnvironmentCreate) AddEnvironmentToAnsible(a ...*Ansible) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddEnvironmentToAnsibleIDs(ids...)
}

// AddEnvironmentToBuildIDs adds the "EnvironmentToBuild" edge to the Build entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToBuildIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToBuildIDs(ids...)
	return ec
}

// AddEnvironmentToBuild adds the "EnvironmentToBuild" edges to the Build entity.
func (ec *EnvironmentCreate) AddEnvironmentToBuild(b ...*Build) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ec.AddEnvironmentToBuildIDs(ids...)
}

// AddEnvironmentToRepositoryIDs adds the "EnvironmentToRepository" edge to the Repository entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToRepositoryIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToRepositoryIDs(ids...)
	return ec
}

// AddEnvironmentToRepository adds the "EnvironmentToRepository" edges to the Repository entity.
func (ec *EnvironmentCreate) AddEnvironmentToRepository(r ...*Repository) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ec.AddEnvironmentToRepositoryIDs(ids...)
}

// AddEnvironmentToServerTaskIDs adds the "EnvironmentToServerTask" edge to the ServerTask entity by IDs.
func (ec *EnvironmentCreate) AddEnvironmentToServerTaskIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddEnvironmentToServerTaskIDs(ids...)
	return ec
}

// AddEnvironmentToServerTask adds the "EnvironmentToServerTask" edges to the ServerTask entity.
func (ec *EnvironmentCreate) AddEnvironmentToServerTask(s ...*ServerTask) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddEnvironmentToServerTaskIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (ec *EnvironmentCreate) Mutation() *EnvironmentMutation {
	return ec.mutation
}

// Save creates the Environment in the database.
func (ec *EnvironmentCreate) Save(ctx context.Context) (*Environment, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EnvironmentCreate) SaveX(ctx context.Context) *Environment {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EnvironmentCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EnvironmentCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EnvironmentCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := environment.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EnvironmentCreate) check() error {
	if _, ok := ec.mutation.HCLID(); !ok {
		return &ValidationError{Name: "hcl_id", err: errors.New(`ent: missing required field "Environment.hcl_id"`)}
	}
	if _, ok := ec.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition_id", err: errors.New(`ent: missing required field "Environment.competition_id"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Environment.name"`)}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Environment.description"`)}
	}
	if _, ok := ec.mutation.Builder(); !ok {
		return &ValidationError{Name: "builder", err: errors.New(`ent: missing required field "Environment.builder"`)}
	}
	if _, ok := ec.mutation.TeamCount(); !ok {
		return &ValidationError{Name: "team_count", err: errors.New(`ent: missing required field "Environment.team_count"`)}
	}
	if _, ok := ec.mutation.Revision(); !ok {
		return &ValidationError{Name: "revision", err: errors.New(`ent: missing required field "Environment.revision"`)}
	}
	if _, ok := ec.mutation.AdminCidrs(); !ok {
		return &ValidationError{Name: "admin_cidrs", err: errors.New(`ent: missing required field "Environment.admin_cidrs"`)}
	}
	if _, ok := ec.mutation.ExposedVdiPorts(); !ok {
		return &ValidationError{Name: "exposed_vdi_ports", err: errors.New(`ent: missing required field "Environment.exposed_vdi_ports"`)}
	}
	if _, ok := ec.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "Environment.config"`)}
	}
	if _, ok := ec.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Environment.tags"`)}
	}
	return nil
}

func (ec *EnvironmentCreate) sqlSave(ctx context.Context) (*Environment, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EnvironmentCreate) createSpec() (*Environment, *sqlgraph.CreateSpec) {
	var (
		_node = &Environment{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(environment.Table, sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.HCLID(); ok {
		_spec.SetField(environment.FieldHCLID, field.TypeString, value)
		_node.HCLID = value
	}
	if value, ok := ec.mutation.CompetitionID(); ok {
		_spec.SetField(environment.FieldCompetitionID, field.TypeString, value)
		_node.CompetitionID = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(environment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(environment.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.Builder(); ok {
		_spec.SetField(environment.FieldBuilder, field.TypeString, value)
		_node.Builder = value
	}
	if value, ok := ec.mutation.TeamCount(); ok {
		_spec.SetField(environment.FieldTeamCount, field.TypeInt, value)
		_node.TeamCount = value
	}
	if value, ok := ec.mutation.Revision(); ok {
		_spec.SetField(environment.FieldRevision, field.TypeInt, value)
		_node.Revision = value
	}
	if value, ok := ec.mutation.AdminCidrs(); ok {
		_spec.SetField(environment.FieldAdminCidrs, field.TypeJSON, value)
		_node.AdminCidrs = value
	}
	if value, ok := ec.mutation.ExposedVdiPorts(); ok {
		_spec.SetField(environment.FieldExposedVdiPorts, field.TypeJSON, value)
		_node.ExposedVdiPorts = value
	}
	if value, ok := ec.mutation.Config(); ok {
		_spec.SetField(environment.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := ec.mutation.Tags(); ok {
		_spec.SetField(environment.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := ec.mutation.EnvironmentToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: []string{environment.EnvironmentToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToCompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: []string{environment.EnvironmentToCompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToIdentityTable,
			Columns: []string{environment.EnvironmentToIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToCommandTable,
			Columns: []string{environment.EnvironmentToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToScriptTable,
			Columns: []string{environment.EnvironmentToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(script.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDownloadTable,
			Columns: []string{environment.EnvironmentToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDeleteTable,
			Columns: []string{environment.EnvironmentToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileExtractTable,
			Columns: []string{environment.EnvironmentToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileextract.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToIncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToFindingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToFindingTable,
			Columns: []string{environment.EnvironmentToFindingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finding.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSRecordTable,
			Columns: []string{environment.EnvironmentToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToDNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSTable,
			Columns: environment.EnvironmentToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dns.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: []string{environment.EnvironmentToNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToHostDependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostDependencyTable,
			Columns: []string{environment.EnvironmentToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToAnsibleTable,
			Columns: []string{environment.EnvironmentToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansible.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToBuildTable,
			Columns: []string{environment.EnvironmentToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToRepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToRepositoryTable,
			Columns: environment.EnvironmentToRepositoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnvironmentToServerTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToServerTaskTable,
			Columns: []string{environment.EnvironmentToServerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EnvironmentCreateBulk is the builder for creating many Environment entities in bulk.
type EnvironmentCreateBulk struct {
	config
	err      error
	builders []*EnvironmentCreate
}

// Save creates the Environment entities in the database.
func (ecb *EnvironmentCreateBulk) Save(ctx context.Context) ([]*Environment, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Environment, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnvironmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EnvironmentCreateBulk) SaveX(ctx context.Context) []*Environment {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EnvironmentCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EnvironmentCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
