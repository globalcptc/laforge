// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// Build is the model entity for the Build schema.
type Build struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// EnvironmentRevision holds the value of the "environment_revision" field.
	EnvironmentRevision int `json:"environment_revision,omitempty"`
	// Vars holds the value of the "vars" field.
	Vars map[string]string `json:"vars,omitempty"`
	// CompletedPlan holds the value of the "completed_plan" field.
	CompletedPlan bool `json:"completed_plan,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuildQuery when eager-loading is set.
	Edges BuildEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Status holds the value of the Status edge.
	HCLStatus *Status `json:"Status,omitempty"`
	// Environment holds the value of the Environment edge.
	HCLEnvironment *Environment `json:"Environment,omitempty"`
	// Competition holds the value of the Competition edge.
	HCLCompetition *Competition `json:"Competition,omitempty"`
	// LatestBuildCommit holds the value of the LatestBuildCommit edge.
	HCLLatestBuildCommit *BuildCommit `json:"LatestBuildCommit,omitempty"`
	// RepoCommit holds the value of the RepoCommit edge.
	HCLRepoCommit *RepoCommit `json:"RepoCommit,omitempty"`
	// ProvisionedNetworks holds the value of the ProvisionedNetworks edge.
	HCLProvisionedNetworks []*ProvisionedNetwork `json:"ProvisionedNetworks,omitempty"`
	// Teams holds the value of the Teams edge.
	HCLTeams []*Team `json:"Teams,omitempty"`
	// Plans holds the value of the Plans edge.
	HCLPlans []*Plan `json:"Plans,omitempty"`
	// BuildCommits holds the value of the BuildCommits edge.
	HCLBuildCommits []*BuildCommit `json:"BuildCommits,omitempty"`
	// AdhocPlans holds the value of the AdhocPlans edge.
	HCLAdhocPlans []*AdhocPlan `json:"AdhocPlans,omitempty"`
	// AgentStatuses holds the value of the AgentStatuses edge.
	HCLAgentStatuses []*AgentStatus `json:"AgentStatuses,omitempty"`
	// ServerTasks holds the value of the ServerTasks edge.
	HCLServerTasks []*ServerTask `json:"ServerTasks,omitempty"`
	//
	build_environment         *uuid.UUID
	build_competition         *uuid.UUID
	build_latest_build_commit *uuid.UUID
	build_repo_commit         *uuid.UUID
}

// BuildEdges holds the relations/edges for other nodes in the graph.
type BuildEdges struct {
	// Status holds the value of the Status edge.
	Status *Status `json:"Status,omitempty"`
	// Environment holds the value of the Environment edge.
	Environment *Environment `json:"Environment,omitempty"`
	// Competition holds the value of the Competition edge.
	Competition *Competition `json:"Competition,omitempty"`
	// LatestBuildCommit holds the value of the LatestBuildCommit edge.
	LatestBuildCommit *BuildCommit `json:"LatestBuildCommit,omitempty"`
	// RepoCommit holds the value of the RepoCommit edge.
	RepoCommit *RepoCommit `json:"RepoCommit,omitempty"`
	// ProvisionedNetworks holds the value of the ProvisionedNetworks edge.
	ProvisionedNetworks []*ProvisionedNetwork `json:"ProvisionedNetworks,omitempty"`
	// Teams holds the value of the Teams edge.
	Teams []*Team `json:"Teams,omitempty"`
	// Plans holds the value of the Plans edge.
	Plans []*Plan `json:"Plans,omitempty"`
	// BuildCommits holds the value of the BuildCommits edge.
	BuildCommits []*BuildCommit `json:"BuildCommits,omitempty"`
	// AdhocPlans holds the value of the AdhocPlans edge.
	AdhocPlans []*AdhocPlan `json:"AdhocPlans,omitempty"`
	// AgentStatuses holds the value of the AgentStatuses edge.
	AgentStatuses []*AgentStatus `json:"AgentStatuses,omitempty"`
	// ServerTasks holds the value of the ServerTasks edge.
	ServerTasks []*ServerTask `json:"ServerTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) StatusOrErr() (*Status, error) {
	if e.loadedTypes[0] {
		if e.Status == nil {
			// The edge Status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "Status"}
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[1] {
		if e.Environment == nil {
			// The edge Environment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "Environment"}
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[2] {
		if e.Competition == nil {
			// The edge Competition was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "Competition"}
}

// LatestBuildCommitOrErr returns the LatestBuildCommit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) LatestBuildCommitOrErr() (*BuildCommit, error) {
	if e.loadedTypes[3] {
		if e.LatestBuildCommit == nil {
			// The edge LatestBuildCommit was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: buildcommit.Label}
		}
		return e.LatestBuildCommit, nil
	}
	return nil, &NotLoadedError{edge: "LatestBuildCommit"}
}

// RepoCommitOrErr returns the RepoCommit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) RepoCommitOrErr() (*RepoCommit, error) {
	if e.loadedTypes[4] {
		if e.RepoCommit == nil {
			// The edge RepoCommit was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repocommit.Label}
		}
		return e.RepoCommit, nil
	}
	return nil, &NotLoadedError{edge: "RepoCommit"}
}

// ProvisionedNetworksOrErr returns the ProvisionedNetworks value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) ProvisionedNetworksOrErr() ([]*ProvisionedNetwork, error) {
	if e.loadedTypes[5] {
		return e.ProvisionedNetworks, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedNetworks"}
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[6] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "Teams"}
}

// PlansOrErr returns the Plans value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) PlansOrErr() ([]*Plan, error) {
	if e.loadedTypes[7] {
		return e.Plans, nil
	}
	return nil, &NotLoadedError{edge: "Plans"}
}

// BuildCommitsOrErr returns the BuildCommits value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildCommitsOrErr() ([]*BuildCommit, error) {
	if e.loadedTypes[8] {
		return e.BuildCommits, nil
	}
	return nil, &NotLoadedError{edge: "BuildCommits"}
}

// AdhocPlansOrErr returns the AdhocPlans value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) AdhocPlansOrErr() ([]*AdhocPlan, error) {
	if e.loadedTypes[9] {
		return e.AdhocPlans, nil
	}
	return nil, &NotLoadedError{edge: "AdhocPlans"}
}

// AgentStatusesOrErr returns the AgentStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) AgentStatusesOrErr() ([]*AgentStatus, error) {
	if e.loadedTypes[10] {
		return e.AgentStatuses, nil
	}
	return nil, &NotLoadedError{edge: "AgentStatuses"}
}

// ServerTasksOrErr returns the ServerTasks value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) ServerTasksOrErr() ([]*ServerTask, error) {
	if e.loadedTypes[11] {
		return e.ServerTasks, nil
	}
	return nil, &NotLoadedError{edge: "ServerTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Build) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case build.FieldVars:
			values[i] = new([]byte)
		case build.FieldCompletedPlan:
			values[i] = new(sql.NullBool)
		case build.FieldRevision, build.FieldEnvironmentRevision:
			values[i] = new(sql.NullInt64)
		case build.FieldID:
			values[i] = new(uuid.UUID)
		case build.ForeignKeys[0]: // build_environment
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case build.ForeignKeys[1]: // build_competition
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case build.ForeignKeys[2]: // build_latest_build_commit
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case build.ForeignKeys[3]: // build_repo_commit
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Build", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Build fields.
func (b *Build) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case build.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case build.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				b.Revision = int(value.Int64)
			}
		case build.FieldEnvironmentRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field environment_revision", values[i])
			} else if value.Valid {
				b.EnvironmentRevision = int(value.Int64)
			}
		case build.FieldVars:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vars", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Vars); err != nil {
					return fmt.Errorf("unmarshal field vars: %w", err)
				}
			}
		case build.FieldCompletedPlan:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed_plan", values[i])
			} else if value.Valid {
				b.CompletedPlan = value.Bool
			}
		case build.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_environment", values[i])
			} else if value.Valid {
				b.build_environment = new(uuid.UUID)
				*b.build_environment = *value.S.(*uuid.UUID)
			}
		case build.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_competition", values[i])
			} else if value.Valid {
				b.build_competition = new(uuid.UUID)
				*b.build_competition = *value.S.(*uuid.UUID)
			}
		case build.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_latest_build_commit", values[i])
			} else if value.Valid {
				b.build_latest_build_commit = new(uuid.UUID)
				*b.build_latest_build_commit = *value.S.(*uuid.UUID)
			}
		case build.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_repo_commit", values[i])
			} else if value.Valid {
				b.build_repo_commit = new(uuid.UUID)
				*b.build_repo_commit = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryStatus queries the "Status" edge of the Build entity.
func (b *Build) QueryStatus() *StatusQuery {
	return (&BuildClient{config: b.config}).QueryStatus(b)
}

// QueryEnvironment queries the "Environment" edge of the Build entity.
func (b *Build) QueryEnvironment() *EnvironmentQuery {
	return (&BuildClient{config: b.config}).QueryEnvironment(b)
}

// QueryCompetition queries the "Competition" edge of the Build entity.
func (b *Build) QueryCompetition() *CompetitionQuery {
	return (&BuildClient{config: b.config}).QueryCompetition(b)
}

// QueryLatestBuildCommit queries the "LatestBuildCommit" edge of the Build entity.
func (b *Build) QueryLatestBuildCommit() *BuildCommitQuery {
	return (&BuildClient{config: b.config}).QueryLatestBuildCommit(b)
}

// QueryRepoCommit queries the "RepoCommit" edge of the Build entity.
func (b *Build) QueryRepoCommit() *RepoCommitQuery {
	return (&BuildClient{config: b.config}).QueryRepoCommit(b)
}

// QueryProvisionedNetworks queries the "ProvisionedNetworks" edge of the Build entity.
func (b *Build) QueryProvisionedNetworks() *ProvisionedNetworkQuery {
	return (&BuildClient{config: b.config}).QueryProvisionedNetworks(b)
}

// QueryTeams queries the "Teams" edge of the Build entity.
func (b *Build) QueryTeams() *TeamQuery {
	return (&BuildClient{config: b.config}).QueryTeams(b)
}

// QueryPlans queries the "Plans" edge of the Build entity.
func (b *Build) QueryPlans() *PlanQuery {
	return (&BuildClient{config: b.config}).QueryPlans(b)
}

// QueryBuildCommits queries the "BuildCommits" edge of the Build entity.
func (b *Build) QueryBuildCommits() *BuildCommitQuery {
	return (&BuildClient{config: b.config}).QueryBuildCommits(b)
}

// QueryAdhocPlans queries the "AdhocPlans" edge of the Build entity.
func (b *Build) QueryAdhocPlans() *AdhocPlanQuery {
	return (&BuildClient{config: b.config}).QueryAdhocPlans(b)
}

// QueryAgentStatuses queries the "AgentStatuses" edge of the Build entity.
func (b *Build) QueryAgentStatuses() *AgentStatusQuery {
	return (&BuildClient{config: b.config}).QueryAgentStatuses(b)
}

// QueryServerTasks queries the "ServerTasks" edge of the Build entity.
func (b *Build) QueryServerTasks() *ServerTaskQuery {
	return (&BuildClient{config: b.config}).QueryServerTasks(b)
}

// Update returns a builder for updating this Build.
// Note that you need to call Build.Unwrap() before calling this method if this Build
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Build) Update() *BuildUpdateOne {
	return (&BuildClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Build entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Build) Unwrap() *Build {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Build is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Build) String() string {
	var builder strings.Builder
	builder.WriteString("Build(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", b.Revision))
	builder.WriteString(", environment_revision=")
	builder.WriteString(fmt.Sprintf("%v", b.EnvironmentRevision))
	builder.WriteString(", vars=")
	builder.WriteString(fmt.Sprintf("%v", b.Vars))
	builder.WriteString(", completed_plan=")
	builder.WriteString(fmt.Sprintf("%v", b.CompletedPlan))
	builder.WriteByte(')')
	return builder.String()
}

// Builds is a parsable slice of Build.
type Builds []*Build

func (b Builds) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
