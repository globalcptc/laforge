// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// Build is the model entity for the Build schema.
type Build struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// EnvironmentRevision holds the value of the "environment_revision" field.
	EnvironmentRevision int `json:"environment_revision,omitempty"`
	// Vars holds the value of the "vars" field.
	Vars map[string]string `json:"vars,omitempty"`
	// CompletedPlan holds the value of the "completed_plan" field.
	CompletedPlan bool `json:"completed_plan,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuildQuery when eager-loading is set.
	Edges BuildEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// BuildToStatus holds the value of the BuildToStatus edge.
	HCLBuildToStatus *Status `json:"BuildToStatus,omitempty"`
	// BuildToEnvironment holds the value of the BuildToEnvironment edge.
	HCLBuildToEnvironment *Environment `json:"BuildToEnvironment,omitempty"`
	// BuildToCompetition holds the value of the BuildToCompetition edge.
	HCLBuildToCompetition *Competition `json:"BuildToCompetition,omitempty"`
	// BuildToLatestBuildCommit holds the value of the BuildToLatestBuildCommit edge.
	HCLBuildToLatestBuildCommit *BuildCommit `json:"BuildToLatestBuildCommit,omitempty"`
	// BuildToRepoCommit holds the value of the BuildToRepoCommit edge.
	HCLBuildToRepoCommit *RepoCommit `json:"BuildToRepoCommit,omitempty"`
	// BuildToProvisionedNetwork holds the value of the BuildToProvisionedNetwork edge.
	HCLBuildToProvisionedNetwork []*ProvisionedNetwork `json:"BuildToProvisionedNetwork,omitempty"`
	// BuildToTeam holds the value of the BuildToTeam edge.
	HCLBuildToTeam []*Team `json:"BuildToTeam,omitempty"`
	// BuildToPlan holds the value of the BuildToPlan edge.
	HCLBuildToPlan []*Plan `json:"BuildToPlan,omitempty"`
	// BuildToBuildCommits holds the value of the BuildToBuildCommits edge.
	HCLBuildToBuildCommits []*BuildCommit `json:"BuildToBuildCommits,omitempty"`
	// BuildToAdhocPlans holds the value of the BuildToAdhocPlans edge.
	HCLBuildToAdhocPlans []*AdhocPlan `json:"BuildToAdhocPlans,omitempty"`
	// BuildToAgentStatuses holds the value of the BuildToAgentStatuses edge.
	HCLBuildToAgentStatuses []*AgentStatus `json:"BuildToAgentStatuses,omitempty"`
	// BuildToServerTasks holds the value of the BuildToServerTasks edge.
	HCLBuildToServerTasks []*ServerTask `json:"BuildToServerTasks,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	build_build_to_environment         *uuid.UUID
	build_build_to_competition         *uuid.UUID
	build_build_to_latest_build_commit *uuid.UUID
	build_build_to_repo_commit         *uuid.UUID
	selectValues                       sql.SelectValues
}

// BuildEdges holds the relations/edges for other nodes in the graph.
type BuildEdges struct {
	// BuildToStatus holds the value of the BuildToStatus edge.
	BuildToStatus *Status `json:"BuildToStatus,omitempty"`
	// BuildToEnvironment holds the value of the BuildToEnvironment edge.
	BuildToEnvironment *Environment `json:"BuildToEnvironment,omitempty"`
	// BuildToCompetition holds the value of the BuildToCompetition edge.
	BuildToCompetition *Competition `json:"BuildToCompetition,omitempty"`
	// BuildToLatestBuildCommit holds the value of the BuildToLatestBuildCommit edge.
	BuildToLatestBuildCommit *BuildCommit `json:"BuildToLatestBuildCommit,omitempty"`
	// BuildToRepoCommit holds the value of the BuildToRepoCommit edge.
	BuildToRepoCommit *RepoCommit `json:"BuildToRepoCommit,omitempty"`
	// BuildToProvisionedNetwork holds the value of the BuildToProvisionedNetwork edge.
	BuildToProvisionedNetwork []*ProvisionedNetwork `json:"BuildToProvisionedNetwork,omitempty"`
	// BuildToTeam holds the value of the BuildToTeam edge.
	BuildToTeam []*Team `json:"BuildToTeam,omitempty"`
	// BuildToPlan holds the value of the BuildToPlan edge.
	BuildToPlan []*Plan `json:"BuildToPlan,omitempty"`
	// BuildToBuildCommits holds the value of the BuildToBuildCommits edge.
	BuildToBuildCommits []*BuildCommit `json:"BuildToBuildCommits,omitempty"`
	// BuildToAdhocPlans holds the value of the BuildToAdhocPlans edge.
	BuildToAdhocPlans []*AdhocPlan `json:"BuildToAdhocPlans,omitempty"`
	// BuildToAgentStatuses holds the value of the BuildToAgentStatuses edge.
	BuildToAgentStatuses []*AgentStatus `json:"BuildToAgentStatuses,omitempty"`
	// BuildToServerTasks holds the value of the BuildToServerTasks edge.
	BuildToServerTasks []*ServerTask `json:"BuildToServerTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
	// totalCount holds the count of the edges above.
	totalCount [12]map[string]int

	namedBuildToProvisionedNetwork map[string][]*ProvisionedNetwork
	namedBuildToTeam               map[string][]*Team
	namedBuildToPlan               map[string][]*Plan
	namedBuildToBuildCommits       map[string][]*BuildCommit
	namedBuildToAdhocPlans         map[string][]*AdhocPlan
	namedBuildToAgentStatuses      map[string][]*AgentStatus
	namedBuildToServerTasks        map[string][]*ServerTask
}

// BuildToStatusOrErr returns the BuildToStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) BuildToStatusOrErr() (*Status, error) {
	if e.loadedTypes[0] {
		if e.BuildToStatus == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.BuildToStatus, nil
	}
	return nil, &NotLoadedError{edge: "BuildToStatus"}
}

// BuildToEnvironmentOrErr returns the BuildToEnvironment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) BuildToEnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[1] {
		if e.BuildToEnvironment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.BuildToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "BuildToEnvironment"}
}

// BuildToCompetitionOrErr returns the BuildToCompetition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) BuildToCompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[2] {
		if e.BuildToCompetition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.BuildToCompetition, nil
	}
	return nil, &NotLoadedError{edge: "BuildToCompetition"}
}

// BuildToLatestBuildCommitOrErr returns the BuildToLatestBuildCommit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) BuildToLatestBuildCommitOrErr() (*BuildCommit, error) {
	if e.loadedTypes[3] {
		if e.BuildToLatestBuildCommit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: buildcommit.Label}
		}
		return e.BuildToLatestBuildCommit, nil
	}
	return nil, &NotLoadedError{edge: "BuildToLatestBuildCommit"}
}

// BuildToRepoCommitOrErr returns the BuildToRepoCommit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildEdges) BuildToRepoCommitOrErr() (*RepoCommit, error) {
	if e.loadedTypes[4] {
		if e.BuildToRepoCommit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: repocommit.Label}
		}
		return e.BuildToRepoCommit, nil
	}
	return nil, &NotLoadedError{edge: "BuildToRepoCommit"}
}

// BuildToProvisionedNetworkOrErr returns the BuildToProvisionedNetwork value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToProvisionedNetworkOrErr() ([]*ProvisionedNetwork, error) {
	if e.loadedTypes[5] {
		return e.BuildToProvisionedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "BuildToProvisionedNetwork"}
}

// BuildToTeamOrErr returns the BuildToTeam value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToTeamOrErr() ([]*Team, error) {
	if e.loadedTypes[6] {
		return e.BuildToTeam, nil
	}
	return nil, &NotLoadedError{edge: "BuildToTeam"}
}

// BuildToPlanOrErr returns the BuildToPlan value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToPlanOrErr() ([]*Plan, error) {
	if e.loadedTypes[7] {
		return e.BuildToPlan, nil
	}
	return nil, &NotLoadedError{edge: "BuildToPlan"}
}

// BuildToBuildCommitsOrErr returns the BuildToBuildCommits value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToBuildCommitsOrErr() ([]*BuildCommit, error) {
	if e.loadedTypes[8] {
		return e.BuildToBuildCommits, nil
	}
	return nil, &NotLoadedError{edge: "BuildToBuildCommits"}
}

// BuildToAdhocPlansOrErr returns the BuildToAdhocPlans value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToAdhocPlansOrErr() ([]*AdhocPlan, error) {
	if e.loadedTypes[9] {
		return e.BuildToAdhocPlans, nil
	}
	return nil, &NotLoadedError{edge: "BuildToAdhocPlans"}
}

// BuildToAgentStatusesOrErr returns the BuildToAgentStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToAgentStatusesOrErr() ([]*AgentStatus, error) {
	if e.loadedTypes[10] {
		return e.BuildToAgentStatuses, nil
	}
	return nil, &NotLoadedError{edge: "BuildToAgentStatuses"}
}

// BuildToServerTasksOrErr returns the BuildToServerTasks value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToServerTasksOrErr() ([]*ServerTask, error) {
	if e.loadedTypes[11] {
		return e.BuildToServerTasks, nil
	}
	return nil, &NotLoadedError{edge: "BuildToServerTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Build) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case build.FieldVars:
			values[i] = new([]byte)
		case build.FieldCompletedPlan:
			values[i] = new(sql.NullBool)
		case build.FieldRevision, build.FieldEnvironmentRevision:
			values[i] = new(sql.NullInt64)
		case build.FieldID:
			values[i] = new(uuid.UUID)
		case build.ForeignKeys[0]: // build_build_to_environment
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case build.ForeignKeys[1]: // build_build_to_competition
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case build.ForeignKeys[2]: // build_build_to_latest_build_commit
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case build.ForeignKeys[3]: // build_build_to_repo_commit
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Build fields.
func (b *Build) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case build.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case build.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				b.Revision = int(value.Int64)
			}
		case build.FieldEnvironmentRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field environment_revision", values[i])
			} else if value.Valid {
				b.EnvironmentRevision = int(value.Int64)
			}
		case build.FieldVars:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vars", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Vars); err != nil {
					return fmt.Errorf("unmarshal field vars: %w", err)
				}
			}
		case build.FieldCompletedPlan:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed_plan", values[i])
			} else if value.Valid {
				b.CompletedPlan = value.Bool
			}
		case build.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_build_to_environment", values[i])
			} else if value.Valid {
				b.build_build_to_environment = new(uuid.UUID)
				*b.build_build_to_environment = *value.S.(*uuid.UUID)
			}
		case build.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_build_to_competition", values[i])
			} else if value.Valid {
				b.build_build_to_competition = new(uuid.UUID)
				*b.build_build_to_competition = *value.S.(*uuid.UUID)
			}
		case build.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_build_to_latest_build_commit", values[i])
			} else if value.Valid {
				b.build_build_to_latest_build_commit = new(uuid.UUID)
				*b.build_build_to_latest_build_commit = *value.S.(*uuid.UUID)
			}
		case build.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_build_to_repo_commit", values[i])
			} else if value.Valid {
				b.build_build_to_repo_commit = new(uuid.UUID)
				*b.build_build_to_repo_commit = *value.S.(*uuid.UUID)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Build.
// This includes values selected through modifiers, order, etc.
func (b *Build) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryBuildToStatus queries the "BuildToStatus" edge of the Build entity.
func (b *Build) QueryBuildToStatus() *StatusQuery {
	return NewBuildClient(b.config).QueryBuildToStatus(b)
}

// QueryBuildToEnvironment queries the "BuildToEnvironment" edge of the Build entity.
func (b *Build) QueryBuildToEnvironment() *EnvironmentQuery {
	return NewBuildClient(b.config).QueryBuildToEnvironment(b)
}

// QueryBuildToCompetition queries the "BuildToCompetition" edge of the Build entity.
func (b *Build) QueryBuildToCompetition() *CompetitionQuery {
	return NewBuildClient(b.config).QueryBuildToCompetition(b)
}

// QueryBuildToLatestBuildCommit queries the "BuildToLatestBuildCommit" edge of the Build entity.
func (b *Build) QueryBuildToLatestBuildCommit() *BuildCommitQuery {
	return NewBuildClient(b.config).QueryBuildToLatestBuildCommit(b)
}

// QueryBuildToRepoCommit queries the "BuildToRepoCommit" edge of the Build entity.
func (b *Build) QueryBuildToRepoCommit() *RepoCommitQuery {
	return NewBuildClient(b.config).QueryBuildToRepoCommit(b)
}

// QueryBuildToProvisionedNetwork queries the "BuildToProvisionedNetwork" edge of the Build entity.
func (b *Build) QueryBuildToProvisionedNetwork() *ProvisionedNetworkQuery {
	return NewBuildClient(b.config).QueryBuildToProvisionedNetwork(b)
}

// QueryBuildToTeam queries the "BuildToTeam" edge of the Build entity.
func (b *Build) QueryBuildToTeam() *TeamQuery {
	return NewBuildClient(b.config).QueryBuildToTeam(b)
}

// QueryBuildToPlan queries the "BuildToPlan" edge of the Build entity.
func (b *Build) QueryBuildToPlan() *PlanQuery {
	return NewBuildClient(b.config).QueryBuildToPlan(b)
}

// QueryBuildToBuildCommits queries the "BuildToBuildCommits" edge of the Build entity.
func (b *Build) QueryBuildToBuildCommits() *BuildCommitQuery {
	return NewBuildClient(b.config).QueryBuildToBuildCommits(b)
}

// QueryBuildToAdhocPlans queries the "BuildToAdhocPlans" edge of the Build entity.
func (b *Build) QueryBuildToAdhocPlans() *AdhocPlanQuery {
	return NewBuildClient(b.config).QueryBuildToAdhocPlans(b)
}

// QueryBuildToAgentStatuses queries the "BuildToAgentStatuses" edge of the Build entity.
func (b *Build) QueryBuildToAgentStatuses() *AgentStatusQuery {
	return NewBuildClient(b.config).QueryBuildToAgentStatuses(b)
}

// QueryBuildToServerTasks queries the "BuildToServerTasks" edge of the Build entity.
func (b *Build) QueryBuildToServerTasks() *ServerTaskQuery {
	return NewBuildClient(b.config).QueryBuildToServerTasks(b)
}

// Update returns a builder for updating this Build.
// Note that you need to call Build.Unwrap() before calling this method if this Build
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Build) Update() *BuildUpdateOne {
	return NewBuildClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Build entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Build) Unwrap() *Build {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Build is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Build) String() string {
	var builder strings.Builder
	builder.WriteString("Build(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("revision=")
	builder.WriteString(fmt.Sprintf("%v", b.Revision))
	builder.WriteString(", ")
	builder.WriteString("environment_revision=")
	builder.WriteString(fmt.Sprintf("%v", b.EnvironmentRevision))
	builder.WriteString(", ")
	builder.WriteString("vars=")
	builder.WriteString(fmt.Sprintf("%v", b.Vars))
	builder.WriteString(", ")
	builder.WriteString("completed_plan=")
	builder.WriteString(fmt.Sprintf("%v", b.CompletedPlan))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBuildToProvisionedNetwork returns the BuildToProvisionedNetwork named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Build) NamedBuildToProvisionedNetwork(name string) ([]*ProvisionedNetwork, error) {
	if b.Edges.namedBuildToProvisionedNetwork == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBuildToProvisionedNetwork[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Build) appendNamedBuildToProvisionedNetwork(name string, edges ...*ProvisionedNetwork) {
	if b.Edges.namedBuildToProvisionedNetwork == nil {
		b.Edges.namedBuildToProvisionedNetwork = make(map[string][]*ProvisionedNetwork)
	}
	if len(edges) == 0 {
		b.Edges.namedBuildToProvisionedNetwork[name] = []*ProvisionedNetwork{}
	} else {
		b.Edges.namedBuildToProvisionedNetwork[name] = append(b.Edges.namedBuildToProvisionedNetwork[name], edges...)
	}
}

// NamedBuildToTeam returns the BuildToTeam named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Build) NamedBuildToTeam(name string) ([]*Team, error) {
	if b.Edges.namedBuildToTeam == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBuildToTeam[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Build) appendNamedBuildToTeam(name string, edges ...*Team) {
	if b.Edges.namedBuildToTeam == nil {
		b.Edges.namedBuildToTeam = make(map[string][]*Team)
	}
	if len(edges) == 0 {
		b.Edges.namedBuildToTeam[name] = []*Team{}
	} else {
		b.Edges.namedBuildToTeam[name] = append(b.Edges.namedBuildToTeam[name], edges...)
	}
}

// NamedBuildToPlan returns the BuildToPlan named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Build) NamedBuildToPlan(name string) ([]*Plan, error) {
	if b.Edges.namedBuildToPlan == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBuildToPlan[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Build) appendNamedBuildToPlan(name string, edges ...*Plan) {
	if b.Edges.namedBuildToPlan == nil {
		b.Edges.namedBuildToPlan = make(map[string][]*Plan)
	}
	if len(edges) == 0 {
		b.Edges.namedBuildToPlan[name] = []*Plan{}
	} else {
		b.Edges.namedBuildToPlan[name] = append(b.Edges.namedBuildToPlan[name], edges...)
	}
}

// NamedBuildToBuildCommits returns the BuildToBuildCommits named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Build) NamedBuildToBuildCommits(name string) ([]*BuildCommit, error) {
	if b.Edges.namedBuildToBuildCommits == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBuildToBuildCommits[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Build) appendNamedBuildToBuildCommits(name string, edges ...*BuildCommit) {
	if b.Edges.namedBuildToBuildCommits == nil {
		b.Edges.namedBuildToBuildCommits = make(map[string][]*BuildCommit)
	}
	if len(edges) == 0 {
		b.Edges.namedBuildToBuildCommits[name] = []*BuildCommit{}
	} else {
		b.Edges.namedBuildToBuildCommits[name] = append(b.Edges.namedBuildToBuildCommits[name], edges...)
	}
}

// NamedBuildToAdhocPlans returns the BuildToAdhocPlans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Build) NamedBuildToAdhocPlans(name string) ([]*AdhocPlan, error) {
	if b.Edges.namedBuildToAdhocPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBuildToAdhocPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Build) appendNamedBuildToAdhocPlans(name string, edges ...*AdhocPlan) {
	if b.Edges.namedBuildToAdhocPlans == nil {
		b.Edges.namedBuildToAdhocPlans = make(map[string][]*AdhocPlan)
	}
	if len(edges) == 0 {
		b.Edges.namedBuildToAdhocPlans[name] = []*AdhocPlan{}
	} else {
		b.Edges.namedBuildToAdhocPlans[name] = append(b.Edges.namedBuildToAdhocPlans[name], edges...)
	}
}

// NamedBuildToAgentStatuses returns the BuildToAgentStatuses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Build) NamedBuildToAgentStatuses(name string) ([]*AgentStatus, error) {
	if b.Edges.namedBuildToAgentStatuses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBuildToAgentStatuses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Build) appendNamedBuildToAgentStatuses(name string, edges ...*AgentStatus) {
	if b.Edges.namedBuildToAgentStatuses == nil {
		b.Edges.namedBuildToAgentStatuses = make(map[string][]*AgentStatus)
	}
	if len(edges) == 0 {
		b.Edges.namedBuildToAgentStatuses[name] = []*AgentStatus{}
	} else {
		b.Edges.namedBuildToAgentStatuses[name] = append(b.Edges.namedBuildToAgentStatuses[name], edges...)
	}
}

// NamedBuildToServerTasks returns the BuildToServerTasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Build) NamedBuildToServerTasks(name string) ([]*ServerTask, error) {
	if b.Edges.namedBuildToServerTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBuildToServerTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Build) appendNamedBuildToServerTasks(name string, edges ...*ServerTask) {
	if b.Edges.namedBuildToServerTasks == nil {
		b.Edges.namedBuildToServerTasks = make(map[string][]*ServerTask)
	}
	if len(edges) == 0 {
		b.Edges.namedBuildToServerTasks[name] = []*ServerTask{}
	} else {
		b.Edges.namedBuildToServerTasks[name] = append(b.Edges.namedBuildToServerTasks[name], edges...)
	}
}

// Builds is a parsable slice of Build.
type Builds []*Build
