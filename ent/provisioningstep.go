// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningStep is the model entity for the ProvisioningStep schema.
type ProvisioningStep struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type provisioningstep.Type `json:"type,omitempty"`
	// StepNumber holds the value of the "step_number" field.
	StepNumber int `json:"step_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvisioningStepQuery when eager-loading is set.
	Edges ProvisioningStepEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// ProvisioningStepToStatus holds the value of the ProvisioningStepToStatus edge.
	HCLProvisioningStepToStatus *Status `json:"ProvisioningStepToStatus,omitempty"`
	// ProvisioningStepToProvisionedHost holds the value of the ProvisioningStepToProvisionedHost edge.
	HCLProvisioningStepToProvisionedHost *ProvisionedHost `json:"ProvisioningStepToProvisionedHost,omitempty"`
	// ProvisioningStepToScript holds the value of the ProvisioningStepToScript edge.
	HCLProvisioningStepToScript *Script `json:"ProvisioningStepToScript,omitempty"`
	// ProvisioningStepToCommand holds the value of the ProvisioningStepToCommand edge.
	HCLProvisioningStepToCommand *Command `json:"ProvisioningStepToCommand,omitempty"`
	// ProvisioningStepToDNSRecord holds the value of the ProvisioningStepToDNSRecord edge.
	HCLProvisioningStepToDNSRecord *DNSRecord `json:"ProvisioningStepToDNSRecord,omitempty"`
	// ProvisioningStepToFileDelete holds the value of the ProvisioningStepToFileDelete edge.
	HCLProvisioningStepToFileDelete *FileDelete `json:"ProvisioningStepToFileDelete,omitempty"`
	// ProvisioningStepToFileDownload holds the value of the ProvisioningStepToFileDownload edge.
	HCLProvisioningStepToFileDownload *FileDownload `json:"ProvisioningStepToFileDownload,omitempty"`
	// ProvisioningStepToFileExtract holds the value of the ProvisioningStepToFileExtract edge.
	HCLProvisioningStepToFileExtract *FileExtract `json:"ProvisioningStepToFileExtract,omitempty"`
	// ProvisioningStepToAnsible holds the value of the ProvisioningStepToAnsible edge.
	HCLProvisioningStepToAnsible *Ansible `json:"ProvisioningStepToAnsible,omitempty"`
	// ProvisioningStepToPlan holds the value of the ProvisioningStepToPlan edge.
	HCLProvisioningStepToPlan *Plan `json:"ProvisioningStepToPlan,omitempty"`
	// ProvisioningStepToAgentTask holds the value of the ProvisioningStepToAgentTask edge.
	HCLProvisioningStepToAgentTask []*AgentTask `json:"ProvisioningStepToAgentTask,omitempty"`
	// ProvisioningStepToGinFileMiddleware holds the value of the ProvisioningStepToGinFileMiddleware edge.
	HCLProvisioningStepToGinFileMiddleware *GinFileMiddleware `json:"ProvisioningStepToGinFileMiddleware,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	gin_file_middleware_gin_file_middleware_to_provisioning_step *uuid.UUID
	plan_plan_to_provisioning_step                               *uuid.UUID
	provisioning_step_provisioning_step_to_provisioned_host      *uuid.UUID
	provisioning_step_provisioning_step_to_script                *uuid.UUID
	provisioning_step_provisioning_step_to_command               *uuid.UUID
	provisioning_step_provisioning_step_to_dns_record            *uuid.UUID
	provisioning_step_provisioning_step_to_file_delete           *uuid.UUID
	provisioning_step_provisioning_step_to_file_download         *uuid.UUID
	provisioning_step_provisioning_step_to_file_extract          *uuid.UUID
	provisioning_step_provisioning_step_to_ansible               *uuid.UUID
	selectValues                                                 sql.SelectValues
}

// ProvisioningStepEdges holds the relations/edges for other nodes in the graph.
type ProvisioningStepEdges struct {
	// ProvisioningStepToStatus holds the value of the ProvisioningStepToStatus edge.
	ProvisioningStepToStatus *Status `json:"ProvisioningStepToStatus,omitempty"`
	// ProvisioningStepToProvisionedHost holds the value of the ProvisioningStepToProvisionedHost edge.
	ProvisioningStepToProvisionedHost *ProvisionedHost `json:"ProvisioningStepToProvisionedHost,omitempty"`
	// ProvisioningStepToScript holds the value of the ProvisioningStepToScript edge.
	ProvisioningStepToScript *Script `json:"ProvisioningStepToScript,omitempty"`
	// ProvisioningStepToCommand holds the value of the ProvisioningStepToCommand edge.
	ProvisioningStepToCommand *Command `json:"ProvisioningStepToCommand,omitempty"`
	// ProvisioningStepToDNSRecord holds the value of the ProvisioningStepToDNSRecord edge.
	ProvisioningStepToDNSRecord *DNSRecord `json:"ProvisioningStepToDNSRecord,omitempty"`
	// ProvisioningStepToFileDelete holds the value of the ProvisioningStepToFileDelete edge.
	ProvisioningStepToFileDelete *FileDelete `json:"ProvisioningStepToFileDelete,omitempty"`
	// ProvisioningStepToFileDownload holds the value of the ProvisioningStepToFileDownload edge.
	ProvisioningStepToFileDownload *FileDownload `json:"ProvisioningStepToFileDownload,omitempty"`
	// ProvisioningStepToFileExtract holds the value of the ProvisioningStepToFileExtract edge.
	ProvisioningStepToFileExtract *FileExtract `json:"ProvisioningStepToFileExtract,omitempty"`
	// ProvisioningStepToAnsible holds the value of the ProvisioningStepToAnsible edge.
	ProvisioningStepToAnsible *Ansible `json:"ProvisioningStepToAnsible,omitempty"`
	// ProvisioningStepToPlan holds the value of the ProvisioningStepToPlan edge.
	ProvisioningStepToPlan *Plan `json:"ProvisioningStepToPlan,omitempty"`
	// ProvisioningStepToAgentTask holds the value of the ProvisioningStepToAgentTask edge.
	ProvisioningStepToAgentTask []*AgentTask `json:"ProvisioningStepToAgentTask,omitempty"`
	// ProvisioningStepToGinFileMiddleware holds the value of the ProvisioningStepToGinFileMiddleware edge.
	ProvisioningStepToGinFileMiddleware *GinFileMiddleware `json:"ProvisioningStepToGinFileMiddleware,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
	// totalCount holds the count of the edges above.
	totalCount [12]map[string]int

	namedProvisioningStepToAgentTask map[string][]*AgentTask
}

// ProvisioningStepToStatusOrErr returns the ProvisioningStepToStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToStatusOrErr() (*Status, error) {
	if e.loadedTypes[0] {
		if e.ProvisioningStepToStatus == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.ProvisioningStepToStatus, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToStatus"}
}

// ProvisioningStepToProvisionedHostOrErr returns the ProvisioningStepToProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[1] {
		if e.ProvisioningStepToProvisionedHost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.ProvisioningStepToProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToProvisionedHost"}
}

// ProvisioningStepToScriptOrErr returns the ProvisioningStepToScript value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToScriptOrErr() (*Script, error) {
	if e.loadedTypes[2] {
		if e.ProvisioningStepToScript == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: script.Label}
		}
		return e.ProvisioningStepToScript, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToScript"}
}

// ProvisioningStepToCommandOrErr returns the ProvisioningStepToCommand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToCommandOrErr() (*Command, error) {
	if e.loadedTypes[3] {
		if e.ProvisioningStepToCommand == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: command.Label}
		}
		return e.ProvisioningStepToCommand, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToCommand"}
}

// ProvisioningStepToDNSRecordOrErr returns the ProvisioningStepToDNSRecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToDNSRecordOrErr() (*DNSRecord, error) {
	if e.loadedTypes[4] {
		if e.ProvisioningStepToDNSRecord == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dnsrecord.Label}
		}
		return e.ProvisioningStepToDNSRecord, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToDNSRecord"}
}

// ProvisioningStepToFileDeleteOrErr returns the ProvisioningStepToFileDelete value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToFileDeleteOrErr() (*FileDelete, error) {
	if e.loadedTypes[5] {
		if e.ProvisioningStepToFileDelete == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: filedelete.Label}
		}
		return e.ProvisioningStepToFileDelete, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToFileDelete"}
}

// ProvisioningStepToFileDownloadOrErr returns the ProvisioningStepToFileDownload value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToFileDownloadOrErr() (*FileDownload, error) {
	if e.loadedTypes[6] {
		if e.ProvisioningStepToFileDownload == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: filedownload.Label}
		}
		return e.ProvisioningStepToFileDownload, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToFileDownload"}
}

// ProvisioningStepToFileExtractOrErr returns the ProvisioningStepToFileExtract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToFileExtractOrErr() (*FileExtract, error) {
	if e.loadedTypes[7] {
		if e.ProvisioningStepToFileExtract == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fileextract.Label}
		}
		return e.ProvisioningStepToFileExtract, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToFileExtract"}
}

// ProvisioningStepToAnsibleOrErr returns the ProvisioningStepToAnsible value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToAnsibleOrErr() (*Ansible, error) {
	if e.loadedTypes[8] {
		if e.ProvisioningStepToAnsible == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ansible.Label}
		}
		return e.ProvisioningStepToAnsible, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToAnsible"}
}

// ProvisioningStepToPlanOrErr returns the ProvisioningStepToPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToPlanOrErr() (*Plan, error) {
	if e.loadedTypes[9] {
		if e.ProvisioningStepToPlan == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.ProvisioningStepToPlan, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToPlan"}
}

// ProvisioningStepToAgentTaskOrErr returns the ProvisioningStepToAgentTask value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) ProvisioningStepToAgentTaskOrErr() ([]*AgentTask, error) {
	if e.loadedTypes[10] {
		return e.ProvisioningStepToAgentTask, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToAgentTask"}
}

// ProvisioningStepToGinFileMiddlewareOrErr returns the ProvisioningStepToGinFileMiddleware value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningStepEdges) ProvisioningStepToGinFileMiddlewareOrErr() (*GinFileMiddleware, error) {
	if e.loadedTypes[11] {
		if e.ProvisioningStepToGinFileMiddleware == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ginfilemiddleware.Label}
		}
		return e.ProvisioningStepToGinFileMiddleware, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToGinFileMiddleware"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProvisioningStep) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case provisioningstep.FieldStepNumber:
			values[i] = new(sql.NullInt64)
		case provisioningstep.FieldType:
			values[i] = new(sql.NullString)
		case provisioningstep.FieldID:
			values[i] = new(uuid.UUID)
		case provisioningstep.ForeignKeys[0]: // gin_file_middleware_gin_file_middleware_to_provisioning_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[1]: // plan_plan_to_provisioning_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[2]: // provisioning_step_provisioning_step_to_provisioned_host
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[3]: // provisioning_step_provisioning_step_to_script
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[4]: // provisioning_step_provisioning_step_to_command
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[5]: // provisioning_step_provisioning_step_to_dns_record
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[6]: // provisioning_step_provisioning_step_to_file_delete
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[7]: // provisioning_step_provisioning_step_to_file_download
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[8]: // provisioning_step_provisioning_step_to_file_extract
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningstep.ForeignKeys[9]: // provisioning_step_provisioning_step_to_ansible
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProvisioningStep fields.
func (ps *ProvisioningStep) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case provisioningstep.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ps.ID = *value
			}
		case provisioningstep.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ps.Type = provisioningstep.Type(value.String)
			}
		case provisioningstep.FieldStepNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step_number", values[i])
			} else if value.Valid {
				ps.StepNumber = int(value.Int64)
			}
		case provisioningstep.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field gin_file_middleware_gin_file_middleware_to_provisioning_step", values[i])
			} else if value.Valid {
				ps.gin_file_middleware_gin_file_middleware_to_provisioning_step = new(uuid.UUID)
				*ps.gin_file_middleware_gin_file_middleware_to_provisioning_step = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_plan_to_provisioning_step", values[i])
			} else if value.Valid {
				ps.plan_plan_to_provisioning_step = new(uuid.UUID)
				*ps.plan_plan_to_provisioning_step = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_provisioned_host", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_provisioned_host = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_provisioned_host = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_script", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_script = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_script = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_command", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_command = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_command = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_dns_record", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_dns_record = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_dns_record = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_file_delete", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_file_delete = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_file_delete = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_file_download", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_file_download = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_file_download = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[8]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_file_extract", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_file_extract = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_file_extract = *value.S.(*uuid.UUID)
			}
		case provisioningstep.ForeignKeys[9]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_ansible", values[i])
			} else if value.Valid {
				ps.provisioning_step_provisioning_step_to_ansible = new(uuid.UUID)
				*ps.provisioning_step_provisioning_step_to_ansible = *value.S.(*uuid.UUID)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProvisioningStep.
// This includes values selected through modifiers, order, etc.
func (ps *ProvisioningStep) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryProvisioningStepToStatus queries the "ProvisioningStepToStatus" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToStatus() *StatusQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToStatus(ps)
}

// QueryProvisioningStepToProvisionedHost queries the "ProvisioningStepToProvisionedHost" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToProvisionedHost() *ProvisionedHostQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToProvisionedHost(ps)
}

// QueryProvisioningStepToScript queries the "ProvisioningStepToScript" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToScript() *ScriptQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToScript(ps)
}

// QueryProvisioningStepToCommand queries the "ProvisioningStepToCommand" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToCommand() *CommandQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToCommand(ps)
}

// QueryProvisioningStepToDNSRecord queries the "ProvisioningStepToDNSRecord" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToDNSRecord() *DNSRecordQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToDNSRecord(ps)
}

// QueryProvisioningStepToFileDelete queries the "ProvisioningStepToFileDelete" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToFileDelete() *FileDeleteQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToFileDelete(ps)
}

// QueryProvisioningStepToFileDownload queries the "ProvisioningStepToFileDownload" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToFileDownload() *FileDownloadQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToFileDownload(ps)
}

// QueryProvisioningStepToFileExtract queries the "ProvisioningStepToFileExtract" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToFileExtract() *FileExtractQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToFileExtract(ps)
}

// QueryProvisioningStepToAnsible queries the "ProvisioningStepToAnsible" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToAnsible() *AnsibleQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToAnsible(ps)
}

// QueryProvisioningStepToPlan queries the "ProvisioningStepToPlan" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToPlan() *PlanQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToPlan(ps)
}

// QueryProvisioningStepToAgentTask queries the "ProvisioningStepToAgentTask" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToAgentTask() *AgentTaskQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToAgentTask(ps)
}

// QueryProvisioningStepToGinFileMiddleware queries the "ProvisioningStepToGinFileMiddleware" edge of the ProvisioningStep entity.
func (ps *ProvisioningStep) QueryProvisioningStepToGinFileMiddleware() *GinFileMiddlewareQuery {
	return NewProvisioningStepClient(ps.config).QueryProvisioningStepToGinFileMiddleware(ps)
}

// Update returns a builder for updating this ProvisioningStep.
// Note that you need to call ProvisioningStep.Unwrap() before calling this method if this ProvisioningStep
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProvisioningStep) Update() *ProvisioningStepUpdateOne {
	return NewProvisioningStepClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the ProvisioningStep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProvisioningStep) Unwrap() *ProvisioningStep {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProvisioningStep is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProvisioningStep) String() string {
	var builder strings.Builder
	builder.WriteString("ProvisioningStep(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ps.Type))
	builder.WriteString(", ")
	builder.WriteString("step_number=")
	builder.WriteString(fmt.Sprintf("%v", ps.StepNumber))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProvisioningStepToAgentTask returns the ProvisioningStepToAgentTask named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ps *ProvisioningStep) NamedProvisioningStepToAgentTask(name string) ([]*AgentTask, error) {
	if ps.Edges.namedProvisioningStepToAgentTask == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ps.Edges.namedProvisioningStepToAgentTask[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ps *ProvisioningStep) appendNamedProvisioningStepToAgentTask(name string, edges ...*AgentTask) {
	if ps.Edges.namedProvisioningStepToAgentTask == nil {
		ps.Edges.namedProvisioningStepToAgentTask = make(map[string][]*AgentTask)
	}
	if len(edges) == 0 {
		ps.Edges.namedProvisioningStepToAgentTask[name] = []*AgentTask{}
	} else {
		ps.Edges.namedProvisioningStepToAgentTask[name] = append(ps.Edges.namedProvisioningStepToAgentTask[name], edges...)
	}
}

// ProvisioningSteps is a parsable slice of ProvisioningStep.
type ProvisioningSteps []*ProvisioningStep
