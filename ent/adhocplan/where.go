// Code generated by ent, DO NOT EDIT.

package adhocplan

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.FieldLTE(FieldID, id))
}

// HasPrevAdhocPlan applies the HasEdge predicate on the "PrevAdhocPlan" edge.
func HasPrevAdhocPlan() predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PrevAdhocPlanTable, PrevAdhocPlanPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrevAdhocPlanWith applies the HasEdge predicate on the "PrevAdhocPlan" edge with a given conditions (other predicates).
func HasPrevAdhocPlanWith(preds ...predicate.AdhocPlan) predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := newPrevAdhocPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNextAdhocPlan applies the HasEdge predicate on the "NextAdhocPlan" edge.
func HasNextAdhocPlan() predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NextAdhocPlanTable, NextAdhocPlanPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextAdhocPlanWith applies the HasEdge predicate on the "NextAdhocPlan" edge with a given conditions (other predicates).
func HasNextAdhocPlanWith(preds ...predicate.AdhocPlan) predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := newNextAdhocPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdhocPlanToBuild applies the HasEdge predicate on the "AdhocPlanToBuild" edge.
func HasAdhocPlanToBuild() predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AdhocPlanToBuildTable, AdhocPlanToBuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdhocPlanToBuildWith applies the HasEdge predicate on the "AdhocPlanToBuild" edge with a given conditions (other predicates).
func HasAdhocPlanToBuildWith(preds ...predicate.Build) predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := newAdhocPlanToBuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdhocPlanToStatus applies the HasEdge predicate on the "AdhocPlanToStatus" edge.
func HasAdhocPlanToStatus() predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AdhocPlanToStatusTable, AdhocPlanToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdhocPlanToStatusWith applies the HasEdge predicate on the "AdhocPlanToStatus" edge with a given conditions (other predicates).
func HasAdhocPlanToStatusWith(preds ...predicate.Status) predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := newAdhocPlanToStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdhocPlanToAgentTask applies the HasEdge predicate on the "AdhocPlanToAgentTask" edge.
func HasAdhocPlanToAgentTask() predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AdhocPlanToAgentTaskTable, AdhocPlanToAgentTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdhocPlanToAgentTaskWith applies the HasEdge predicate on the "AdhocPlanToAgentTask" edge with a given conditions (other predicates).
func HasAdhocPlanToAgentTaskWith(preds ...predicate.AgentTask) predicate.AdhocPlan {
	return predicate.AdhocPlan(func(s *sql.Selector) {
		step := newAdhocPlanToAgentTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdhocPlan) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdhocPlan) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdhocPlan) predicate.AdhocPlan {
	return predicate.AdhocPlan(sql.NotPredicates(p))
}
