// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// NetworkQuery is the builder for querying Network entities.
type NetworkQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.Network
	withEnvironment      *EnvironmentQuery
	withHostDependencies *HostDependencyQuery
	withIncludedNetworks *IncludedNetworkQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NetworkQuery builder.
func (nq *NetworkQuery) Where(ps ...predicate.Network) *NetworkQuery {
	nq.predicates = append(nq.predicates, ps...)
	return nq
}

// Limit adds a limit step to the query.
func (nq *NetworkQuery) Limit(limit int) *NetworkQuery {
	nq.limit = &limit
	return nq
}

// Offset adds an offset step to the query.
func (nq *NetworkQuery) Offset(offset int) *NetworkQuery {
	nq.offset = &offset
	return nq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nq *NetworkQuery) Unique(unique bool) *NetworkQuery {
	nq.unique = &unique
	return nq
}

// Order adds an order step to the query.
func (nq *NetworkQuery) Order(o ...OrderFunc) *NetworkQuery {
	nq.order = append(nq.order, o...)
	return nq
}

// QueryEnvironment chains the current query on the "Environment" edge.
func (nq *NetworkQuery) QueryEnvironment() *EnvironmentQuery {
	query := &EnvironmentQuery{config: nq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, network.EnvironmentTable, network.EnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostDependencies chains the current query on the "HostDependencies" edge.
func (nq *NetworkQuery) QueryHostDependencies() *HostDependencyQuery {
	query := &HostDependencyQuery{config: nq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, selector),
			sqlgraph.To(hostdependency.Table, hostdependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, network.HostDependenciesTable, network.HostDependenciesColumn),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncludedNetworks chains the current query on the "IncludedNetworks" edge.
func (nq *NetworkQuery) QueryIncludedNetworks() *IncludedNetworkQuery {
	query := &IncludedNetworkQuery{config: nq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, selector),
			sqlgraph.To(includednetwork.Table, includednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, network.IncludedNetworksTable, network.IncludedNetworksColumn),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Network entity from the query.
// Returns a *NotFoundError when no Network was found.
func (nq *NetworkQuery) First(ctx context.Context) (*Network, error) {
	nodes, err := nq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{network.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nq *NetworkQuery) FirstX(ctx context.Context) *Network {
	node, err := nq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Network ID from the query.
// Returns a *NotFoundError when no Network ID was found.
func (nq *NetworkQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = nq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{network.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nq *NetworkQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := nq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Network entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Network entity is found.
// Returns a *NotFoundError when no Network entities are found.
func (nq *NetworkQuery) Only(ctx context.Context) (*Network, error) {
	nodes, err := nq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{network.Label}
	default:
		return nil, &NotSingularError{network.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nq *NetworkQuery) OnlyX(ctx context.Context) *Network {
	node, err := nq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Network ID in the query.
// Returns a *NotSingularError when more than one Network ID is found.
// Returns a *NotFoundError when no entities are found.
func (nq *NetworkQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = nq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{network.Label}
	default:
		err = &NotSingularError{network.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nq *NetworkQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := nq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Networks.
func (nq *NetworkQuery) All(ctx context.Context) ([]*Network, error) {
	if err := nq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return nq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (nq *NetworkQuery) AllX(ctx context.Context) []*Network {
	nodes, err := nq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Network IDs.
func (nq *NetworkQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := nq.Select(network.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nq *NetworkQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := nq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nq *NetworkQuery) Count(ctx context.Context) (int, error) {
	if err := nq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return nq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (nq *NetworkQuery) CountX(ctx context.Context) int {
	count, err := nq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nq *NetworkQuery) Exist(ctx context.Context) (bool, error) {
	if err := nq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return nq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (nq *NetworkQuery) ExistX(ctx context.Context) bool {
	exist, err := nq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NetworkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nq *NetworkQuery) Clone() *NetworkQuery {
	if nq == nil {
		return nil
	}
	return &NetworkQuery{
		config:               nq.config,
		limit:                nq.limit,
		offset:               nq.offset,
		order:                append([]OrderFunc{}, nq.order...),
		predicates:           append([]predicate.Network{}, nq.predicates...),
		withEnvironment:      nq.withEnvironment.Clone(),
		withHostDependencies: nq.withHostDependencies.Clone(),
		withIncludedNetworks: nq.withIncludedNetworks.Clone(),
		// clone intermediate query.
		sql:    nq.sql.Clone(),
		path:   nq.path,
		unique: nq.unique,
	}
}

// WithEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "Environment" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NetworkQuery) WithEnvironment(opts ...func(*EnvironmentQuery)) *NetworkQuery {
	query := &EnvironmentQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	nq.withEnvironment = query
	return nq
}

// WithHostDependencies tells the query-builder to eager-load the nodes that are connected to
// the "HostDependencies" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NetworkQuery) WithHostDependencies(opts ...func(*HostDependencyQuery)) *NetworkQuery {
	query := &HostDependencyQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	nq.withHostDependencies = query
	return nq
}

// WithIncludedNetworks tells the query-builder to eager-load the nodes that are connected to
// the "IncludedNetworks" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NetworkQuery) WithIncludedNetworks(opts ...func(*IncludedNetworkQuery)) *NetworkQuery {
	query := &IncludedNetworkQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	nq.withIncludedNetworks = query
	return nq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Network.Query().
//		GroupBy(network.FieldHclID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nq *NetworkQuery) GroupBy(field string, fields ...string) *NetworkGroupBy {
	grbuild := &NetworkGroupBy{config: nq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return nq.sqlQuery(ctx), nil
	}
	grbuild.label = network.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
//	}
//
//	client.Network.Query().
//		Select(network.FieldHclID).
//		Scan(ctx, &v)
func (nq *NetworkQuery) Select(fields ...string) *NetworkSelect {
	nq.fields = append(nq.fields, fields...)
	selbuild := &NetworkSelect{NetworkQuery: nq}
	selbuild.label = network.Label
	selbuild.flds, selbuild.scan = &nq.fields, selbuild.Scan
	return selbuild
}

func (nq *NetworkQuery) prepareQuery(ctx context.Context) error {
	for _, f := range nq.fields {
		if !network.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nq.path != nil {
		prev, err := nq.path(ctx)
		if err != nil {
			return err
		}
		nq.sql = prev
	}
	return nil
}

func (nq *NetworkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Network, error) {
	var (
		nodes       = []*Network{}
		withFKs     = nq.withFKs
		_spec       = nq.querySpec()
		loadedTypes = [3]bool{
			nq.withEnvironment != nil,
			nq.withHostDependencies != nil,
			nq.withIncludedNetworks != nil,
		}
	)
	if nq.withEnvironment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, network.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Network).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Network{config: nq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nq.withEnvironment; query != nil {
		if err := nq.loadEnvironment(ctx, query, nodes, nil,
			func(n *Network, e *Environment) { n.Edges.Environment = e }); err != nil {
			return nil, err
		}
	}
	if query := nq.withHostDependencies; query != nil {
		if err := nq.loadHostDependencies(ctx, query, nodes,
			func(n *Network) { n.Edges.HostDependencies = []*HostDependency{} },
			func(n *Network, e *HostDependency) { n.Edges.HostDependencies = append(n.Edges.HostDependencies, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withIncludedNetworks; query != nil {
		if err := nq.loadIncludedNetworks(ctx, query, nodes,
			func(n *Network) { n.Edges.IncludedNetworks = []*IncludedNetwork{} },
			func(n *Network, e *IncludedNetwork) { n.Edges.IncludedNetworks = append(n.Edges.IncludedNetworks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nq *NetworkQuery) loadEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*Network, init func(*Network), assign func(*Network, *Environment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Network)
	for i := range nodes {
		if nodes[i].environment_networks == nil {
			continue
		}
		fk := *nodes[i].environment_networks
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_networks" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nq *NetworkQuery) loadHostDependencies(ctx context.Context, query *HostDependencyQuery, nodes []*Network, init func(*Network), assign func(*Network, *HostDependency)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Network)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HostDependency(func(s *sql.Selector) {
		s.Where(sql.InValues(network.HostDependenciesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.host_dependency_depend_on_network
		if fk == nil {
			return fmt.Errorf(`foreign-key "host_dependency_depend_on_network" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_dependency_depend_on_network" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (nq *NetworkQuery) loadIncludedNetworks(ctx context.Context, query *IncludedNetworkQuery, nodes []*Network, init func(*Network), assign func(*Network, *IncludedNetwork)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Network)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.IncludedNetwork(func(s *sql.Selector) {
		s.Where(sql.InValues(network.IncludedNetworksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.included_network_network
		if fk == nil {
			return fmt.Errorf(`foreign-key "included_network_network" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "included_network_network" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (nq *NetworkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nq.querySpec()
	_spec.Node.Columns = nq.fields
	if len(nq.fields) > 0 {
		_spec.Unique = nq.unique != nil && *nq.unique
	}
	return sqlgraph.CountNodes(ctx, nq.driver, _spec)
}

func (nq *NetworkQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := nq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (nq *NetworkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   network.Table,
			Columns: network.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: network.FieldID,
			},
		},
		From:   nq.sql,
		Unique: true,
	}
	if unique := nq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, network.FieldID)
		for i := range fields {
			if fields[i] != network.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nq *NetworkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nq.driver.Dialect())
	t1 := builder.Table(network.Table)
	columns := nq.fields
	if len(columns) == 0 {
		columns = network.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nq.sql != nil {
		selector = nq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nq.unique != nil && *nq.unique {
		selector.Distinct()
	}
	for _, p := range nq.predicates {
		p(selector)
	}
	for _, p := range nq.order {
		p(selector)
	}
	if offset := nq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NetworkGroupBy is the group-by builder for Network entities.
type NetworkGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ngb *NetworkGroupBy) Aggregate(fns ...AggregateFunc) *NetworkGroupBy {
	ngb.fns = append(ngb.fns, fns...)
	return ngb
}

// Scan applies the group-by query and scans the result into the given value.
func (ngb *NetworkGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ngb.path(ctx)
	if err != nil {
		return err
	}
	ngb.sql = query
	return ngb.sqlScan(ctx, v)
}

func (ngb *NetworkGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ngb.fields {
		if !network.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ngb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ngb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ngb *NetworkGroupBy) sqlQuery() *sql.Selector {
	selector := ngb.sql.Select()
	aggregation := make([]string, 0, len(ngb.fns))
	for _, fn := range ngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ngb.fields)+len(ngb.fns))
		for _, f := range ngb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ngb.fields...)...)
}

// NetworkSelect is the builder for selecting fields of Network entities.
type NetworkSelect struct {
	*NetworkQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ns *NetworkSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ns.prepareQuery(ctx); err != nil {
		return err
	}
	ns.sql = ns.NetworkQuery.sqlQuery(ctx)
	return ns.sqlScan(ctx, v)
}

func (ns *NetworkSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ns.sql.Query()
	if err := ns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
