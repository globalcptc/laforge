// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// Status is the model entity for the Status schema.
type Status struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State status.State `json:"state,omitempty"`
	// StatusFor holds the value of the "status_for" field.
	StatusFor status.StatusFor `json:"status_for,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt time.Time `json:"ended_at,omitempty"`
	// Failed holds the value of the "failed" field.
	Failed bool `json:"failed,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusQuery when eager-loading is set.
	Edges StatusEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Build holds the value of the Build edge.
	HCLBuild *Build `json:"Build,omitempty"`
	// ProvisionedNetwork holds the value of the ProvisionedNetwork edge.
	HCLProvisionedNetwork *ProvisionedNetwork `json:"ProvisionedNetwork,omitempty"`
	// ProvisionedHost holds the value of the ProvisionedHost edge.
	HCLProvisionedHost *ProvisionedHost `json:"ProvisionedHost,omitempty"`
	// ProvisioningStep holds the value of the ProvisioningStep edge.
	HCLProvisioningStep *ProvisioningStep `json:"ProvisioningStep,omitempty"`
	// Team holds the value of the Team edge.
	HCLTeam *Team `json:"Team,omitempty"`
	// Plan holds the value of the Plan edge.
	HCLPlan *Plan `json:"Plan,omitempty"`
	// ServerTask holds the value of the ServerTask edge.
	HCLServerTask *ServerTask `json:"ServerTask,omitempty"`
	// AdhocPlan holds the value of the AdhocPlan edge.
	HCLAdhocPlan *AdhocPlan `json:"AdhocPlan,omitempty"`
	// ProvisioningScheduledStep holds the value of the ProvisioningScheduledStep edge.
	HCLProvisioningScheduledStep *ProvisioningScheduledStep `json:"ProvisioningScheduledStep,omitempty"`
	//
	adhoc_plan_status                  *uuid.UUID
	build_status                       *uuid.UUID
	plan_status                        *uuid.UUID
	provisioned_host_status            *uuid.UUID
	provisioned_network_status         *uuid.UUID
	provisioning_scheduled_step_status *uuid.UUID
	provisioning_step_status           *uuid.UUID
	server_task_status                 *uuid.UUID
	team_status                        *uuid.UUID
}

// StatusEdges holds the relations/edges for other nodes in the graph.
type StatusEdges struct {
	// Build holds the value of the Build edge.
	Build *Build `json:"Build,omitempty"`
	// ProvisionedNetwork holds the value of the ProvisionedNetwork edge.
	ProvisionedNetwork *ProvisionedNetwork `json:"ProvisionedNetwork,omitempty"`
	// ProvisionedHost holds the value of the ProvisionedHost edge.
	ProvisionedHost *ProvisionedHost `json:"ProvisionedHost,omitempty"`
	// ProvisioningStep holds the value of the ProvisioningStep edge.
	ProvisioningStep *ProvisioningStep `json:"ProvisioningStep,omitempty"`
	// Team holds the value of the Team edge.
	Team *Team `json:"Team,omitempty"`
	// Plan holds the value of the Plan edge.
	Plan *Plan `json:"Plan,omitempty"`
	// ServerTask holds the value of the ServerTask edge.
	ServerTask *ServerTask `json:"ServerTask,omitempty"`
	// AdhocPlan holds the value of the AdhocPlan edge.
	AdhocPlan *AdhocPlan `json:"AdhocPlan,omitempty"`
	// ProvisioningScheduledStep holds the value of the ProvisioningScheduledStep edge.
	ProvisioningScheduledStep *ProvisioningScheduledStep `json:"ProvisioningScheduledStep,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// BuildOrErr returns the Build value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) BuildOrErr() (*Build, error) {
	if e.loadedTypes[0] {
		if e.Build == nil {
			// The edge Build was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.Build, nil
	}
	return nil, &NotLoadedError{edge: "Build"}
}

// ProvisionedNetworkOrErr returns the ProvisionedNetwork value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) ProvisionedNetworkOrErr() (*ProvisionedNetwork, error) {
	if e.loadedTypes[1] {
		if e.ProvisionedNetwork == nil {
			// The edge ProvisionedNetwork was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionednetwork.Label}
		}
		return e.ProvisionedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedNetwork"}
}

// ProvisionedHostOrErr returns the ProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) ProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[2] {
		if e.ProvisionedHost == nil {
			// The edge ProvisionedHost was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.ProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedHost"}
}

// ProvisioningStepOrErr returns the ProvisioningStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) ProvisioningStepOrErr() (*ProvisioningStep, error) {
	if e.loadedTypes[3] {
		if e.ProvisioningStep == nil {
			// The edge ProvisioningStep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisioningstep.Label}
		}
		return e.ProvisioningStep, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStep"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[4] {
		if e.Team == nil {
			// The edge Team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "Team"}
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) PlanOrErr() (*Plan, error) {
	if e.loadedTypes[5] {
		if e.Plan == nil {
			// The edge Plan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Plan, nil
	}
	return nil, &NotLoadedError{edge: "Plan"}
}

// ServerTaskOrErr returns the ServerTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) ServerTaskOrErr() (*ServerTask, error) {
	if e.loadedTypes[6] {
		if e.ServerTask == nil {
			// The edge ServerTask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: servertask.Label}
		}
		return e.ServerTask, nil
	}
	return nil, &NotLoadedError{edge: "ServerTask"}
}

// AdhocPlanOrErr returns the AdhocPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) AdhocPlanOrErr() (*AdhocPlan, error) {
	if e.loadedTypes[7] {
		if e.AdhocPlan == nil {
			// The edge AdhocPlan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: adhocplan.Label}
		}
		return e.AdhocPlan, nil
	}
	return nil, &NotLoadedError{edge: "AdhocPlan"}
}

// ProvisioningScheduledStepOrErr returns the ProvisioningScheduledStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) ProvisioningScheduledStepOrErr() (*ProvisioningScheduledStep, error) {
	if e.loadedTypes[8] {
		if e.ProvisioningScheduledStep == nil {
			// The edge ProvisioningScheduledStep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisioningscheduledstep.Label}
		}
		return e.ProvisioningScheduledStep, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStep"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Status) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case status.FieldFailed, status.FieldCompleted:
			values[i] = new(sql.NullBool)
		case status.FieldState, status.FieldStatusFor, status.FieldError:
			values[i] = new(sql.NullString)
		case status.FieldStartedAt, status.FieldEndedAt:
			values[i] = new(sql.NullTime)
		case status.FieldID:
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[0]: // adhoc_plan_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[1]: // build_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[2]: // plan_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[3]: // provisioned_host_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[4]: // provisioned_network_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[5]: // provisioning_scheduled_step_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[6]: // provisioning_step_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[7]: // server_task_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case status.ForeignKeys[8]: // team_status
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Status", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Status fields.
func (s *Status) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case status.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case status.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				s.State = status.State(value.String)
			}
		case status.FieldStatusFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_for", values[i])
			} else if value.Valid {
				s.StatusFor = status.StatusFor(value.String)
			}
		case status.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = value.Time
			}
		case status.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				s.EndedAt = value.Time
			}
		case status.FieldFailed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field failed", values[i])
			} else if value.Valid {
				s.Failed = value.Bool
			}
		case status.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				s.Completed = value.Bool
			}
		case status.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				s.Error = value.String
			}
		case status.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field adhoc_plan_status", values[i])
			} else if value.Valid {
				s.adhoc_plan_status = new(uuid.UUID)
				*s.adhoc_plan_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_status", values[i])
			} else if value.Valid {
				s.build_status = new(uuid.UUID)
				*s.build_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_status", values[i])
			} else if value.Valid {
				s.plan_status = new(uuid.UUID)
				*s.plan_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_host_status", values[i])
			} else if value.Valid {
				s.provisioned_host_status = new(uuid.UUID)
				*s.provisioned_host_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_network_status", values[i])
			} else if value.Valid {
				s.provisioned_network_status = new(uuid.UUID)
				*s.provisioned_network_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_status", values[i])
			} else if value.Valid {
				s.provisioning_scheduled_step_status = new(uuid.UUID)
				*s.provisioning_scheduled_step_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_status", values[i])
			} else if value.Valid {
				s.provisioning_step_status = new(uuid.UUID)
				*s.provisioning_step_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_task_status", values[i])
			} else if value.Valid {
				s.server_task_status = new(uuid.UUID)
				*s.server_task_status = *value.S.(*uuid.UUID)
			}
		case status.ForeignKeys[8]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field team_status", values[i])
			} else if value.Valid {
				s.team_status = new(uuid.UUID)
				*s.team_status = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryBuild queries the "Build" edge of the Status entity.
func (s *Status) QueryBuild() *BuildQuery {
	return (&StatusClient{config: s.config}).QueryBuild(s)
}

// QueryProvisionedNetwork queries the "ProvisionedNetwork" edge of the Status entity.
func (s *Status) QueryProvisionedNetwork() *ProvisionedNetworkQuery {
	return (&StatusClient{config: s.config}).QueryProvisionedNetwork(s)
}

// QueryProvisionedHost queries the "ProvisionedHost" edge of the Status entity.
func (s *Status) QueryProvisionedHost() *ProvisionedHostQuery {
	return (&StatusClient{config: s.config}).QueryProvisionedHost(s)
}

// QueryProvisioningStep queries the "ProvisioningStep" edge of the Status entity.
func (s *Status) QueryProvisioningStep() *ProvisioningStepQuery {
	return (&StatusClient{config: s.config}).QueryProvisioningStep(s)
}

// QueryTeam queries the "Team" edge of the Status entity.
func (s *Status) QueryTeam() *TeamQuery {
	return (&StatusClient{config: s.config}).QueryTeam(s)
}

// QueryPlan queries the "Plan" edge of the Status entity.
func (s *Status) QueryPlan() *PlanQuery {
	return (&StatusClient{config: s.config}).QueryPlan(s)
}

// QueryServerTask queries the "ServerTask" edge of the Status entity.
func (s *Status) QueryServerTask() *ServerTaskQuery {
	return (&StatusClient{config: s.config}).QueryServerTask(s)
}

// QueryAdhocPlan queries the "AdhocPlan" edge of the Status entity.
func (s *Status) QueryAdhocPlan() *AdhocPlanQuery {
	return (&StatusClient{config: s.config}).QueryAdhocPlan(s)
}

// QueryProvisioningScheduledStep queries the "ProvisioningScheduledStep" edge of the Status entity.
func (s *Status) QueryProvisioningScheduledStep() *ProvisioningScheduledStepQuery {
	return (&StatusClient{config: s.config}).QueryProvisioningScheduledStep(s)
}

// Update returns a builder for updating this Status.
// Note that you need to call Status.Unwrap() before calling this method if this Status
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Status) Update() *StatusUpdateOne {
	return (&StatusClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Status entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Status) Unwrap() *Status {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Status is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Status) String() string {
	var builder strings.Builder
	builder.WriteString("Status(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", s.State))
	builder.WriteString(", status_for=")
	builder.WriteString(fmt.Sprintf("%v", s.StatusFor))
	builder.WriteString(", started_at=")
	builder.WriteString(s.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ended_at=")
	builder.WriteString(s.EndedAt.Format(time.ANSIC))
	builder.WriteString(", failed=")
	builder.WriteString(fmt.Sprintf("%v", s.Failed))
	builder.WriteString(", completed=")
	builder.WriteString(fmt.Sprintf("%v", s.Completed))
	builder.WriteString(", error=")
	builder.WriteString(s.Error)
	builder.WriteByte(')')
	return builder.String()
}

// StatusSlice is a parsable slice of Status.
type StatusSlice []*Status

func (s StatusSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
