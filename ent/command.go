// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/google/uuid"
)

// Command is the model entity for the Command schema.
type Command struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HCLID holds the value of the "hcl_id" field.
	HCLID string `json:"hcl_id,omitempty" hcl:"id,label"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,attr"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty" hcl:"description,attr"`
	// Program holds the value of the "program" field.
	Program string `json:"program,omitempty" hcl:"program,attr"`
	// Args holds the value of the "args" field.
	Args []string `json:"args,omitempty" hcl:"args,attr"`
	// IgnoreErrors holds the value of the "ignore_errors" field.
	IgnoreErrors bool `json:"ignore_errors,omitempty" hcl:"ignore_errors,attr"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty" hcl:"disabled,attr"`
	// Cooldown holds the value of the "cooldown" field.
	Cooldown int `json:"cooldown,omitempty" hcl:"cooldown,attr"`
	// Timeout holds the value of the "timeout" field.
	Timeout int `json:"timeout,omitempty" hcl:"timeout,attr" `
	// Vars holds the value of the "vars" field.
	Vars map[string]string `json:"vars,omitempty" hcl:"vars,attr"`
	// Tags holds the value of the "tags" field.
	Tags map[string]string `json:"tags,omitempty" hcl:"tags,optional"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommandQuery when eager-loading is set.
	Edges CommandEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// Users holds the value of the Users edge.
	HCLUsers []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Environment holds the value of the Environment edge.
	HCLEnvironment *Environment `json:"Environment,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	environment_commands *uuid.UUID
	selectValues         sql.SelectValues
}

// CommandEdges holds the relations/edges for other nodes in the graph.
type CommandEdges struct {
	// Users holds the value of the Users edge.
	Users []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Environment holds the value of the Environment edge.
	Environment *Environment `json:"Environment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedUsers map[string][]*User
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e CommandEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "Users"}
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommandEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[1] {
		if e.Environment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "Environment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Command) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case command.FieldArgs, command.FieldVars, command.FieldTags:
			values[i] = new([]byte)
		case command.FieldIgnoreErrors, command.FieldDisabled:
			values[i] = new(sql.NullBool)
		case command.FieldCooldown, command.FieldTimeout:
			values[i] = new(sql.NullInt64)
		case command.FieldHCLID, command.FieldName, command.FieldDescription, command.FieldProgram:
			values[i] = new(sql.NullString)
		case command.FieldID:
			values[i] = new(uuid.UUID)
		case command.ForeignKeys[0]: // environment_commands
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Command fields.
func (c *Command) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case command.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case command.FieldHCLID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hcl_id", values[i])
			} else if value.Valid {
				c.HCLID = value.String
			}
		case command.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case command.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case command.FieldProgram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program", values[i])
			} else if value.Valid {
				c.Program = value.String
			}
		case command.FieldArgs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field args", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Args); err != nil {
					return fmt.Errorf("unmarshal field args: %w", err)
				}
			}
		case command.FieldIgnoreErrors:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ignore_errors", values[i])
			} else if value.Valid {
				c.IgnoreErrors = value.Bool
			}
		case command.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				c.Disabled = value.Bool
			}
		case command.FieldCooldown:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cooldown", values[i])
			} else if value.Valid {
				c.Cooldown = int(value.Int64)
			}
		case command.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				c.Timeout = int(value.Int64)
			}
		case command.FieldVars:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vars", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Vars); err != nil {
					return fmt.Errorf("unmarshal field vars: %w", err)
				}
			}
		case command.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case command.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field environment_commands", values[i])
			} else if value.Valid {
				c.environment_commands = new(uuid.UUID)
				*c.environment_commands = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Command.
// This includes values selected through modifiers, order, etc.
func (c *Command) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUsers queries the "Users" edge of the Command entity.
func (c *Command) QueryUsers() *UserQuery {
	return NewCommandClient(c.config).QueryUsers(c)
}

// QueryEnvironment queries the "Environment" edge of the Command entity.
func (c *Command) QueryEnvironment() *EnvironmentQuery {
	return NewCommandClient(c.config).QueryEnvironment(c)
}

// Update returns a builder for updating this Command.
// Note that you need to call Command.Unwrap() before calling this method if this Command
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Command) Update() *CommandUpdateOne {
	return NewCommandClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Command entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Command) Unwrap() *Command {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Command is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Command) String() string {
	var builder strings.Builder
	builder.WriteString("Command(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("hcl_id=")
	builder.WriteString(c.HCLID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("program=")
	builder.WriteString(c.Program)
	builder.WriteString(", ")
	builder.WriteString("args=")
	builder.WriteString(fmt.Sprintf("%v", c.Args))
	builder.WriteString(", ")
	builder.WriteString("ignore_errors=")
	builder.WriteString(fmt.Sprintf("%v", c.IgnoreErrors))
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", c.Disabled))
	builder.WriteString(", ")
	builder.WriteString("cooldown=")
	builder.WriteString(fmt.Sprintf("%v", c.Cooldown))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", c.Timeout))
	builder.WriteString(", ")
	builder.WriteString("vars=")
	builder.WriteString(fmt.Sprintf("%v", c.Vars))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", c.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Command) NamedUsers(name string) ([]*User, error) {
	if c.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Command) appendNamedUsers(name string, edges ...*User) {
	if c.Edges.namedUsers == nil {
		c.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		c.Edges.namedUsers[name] = []*User{}
	} else {
		c.Edges.namedUsers[name] = append(c.Edges.namedUsers[name], edges...)
	}
}

// Commands is a parsable slice of Command.
type Commands []*Command
