// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningStepQuery is the builder for querying ProvisioningStep entities.
type ProvisioningStepQuery struct {
	config
	ctx                                     *QueryContext
	order                                   []provisioningstep.OrderOption
	inters                                  []Interceptor
	predicates                              []predicate.ProvisioningStep
	withProvisioningStepToStatus            *StatusQuery
	withProvisioningStepToProvisionedHost   *ProvisionedHostQuery
	withProvisioningStepToScript            *ScriptQuery
	withProvisioningStepToCommand           *CommandQuery
	withProvisioningStepToDNSRecord         *DNSRecordQuery
	withProvisioningStepToFileDelete        *FileDeleteQuery
	withProvisioningStepToFileDownload      *FileDownloadQuery
	withProvisioningStepToFileExtract       *FileExtractQuery
	withProvisioningStepToAnsible           *AnsibleQuery
	withProvisioningStepToPlan              *PlanQuery
	withProvisioningStepToAgentTask         *AgentTaskQuery
	withProvisioningStepToGinFileMiddleware *GinFileMiddlewareQuery
	withFKs                                 bool
	modifiers                               []func(*sql.Selector)
	loadTotal                               []func(context.Context, []*ProvisioningStep) error
	withNamedProvisioningStepToAgentTask    map[string]*AgentTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProvisioningStepQuery builder.
func (psq *ProvisioningStepQuery) Where(ps ...predicate.ProvisioningStep) *ProvisioningStepQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit the number of records to be returned by this query.
func (psq *ProvisioningStepQuery) Limit(limit int) *ProvisioningStepQuery {
	psq.ctx.Limit = &limit
	return psq
}

// Offset to start from.
func (psq *ProvisioningStepQuery) Offset(offset int) *ProvisioningStepQuery {
	psq.ctx.Offset = &offset
	return psq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psq *ProvisioningStepQuery) Unique(unique bool) *ProvisioningStepQuery {
	psq.ctx.Unique = &unique
	return psq
}

// Order specifies how the records should be ordered.
func (psq *ProvisioningStepQuery) Order(o ...provisioningstep.OrderOption) *ProvisioningStepQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryProvisioningStepToStatus chains the current query on the "ProvisioningStepToStatus" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToStatus() *StatusQuery {
	query := (&StatusClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, provisioningstep.ProvisioningStepToStatusTable, provisioningstep.ProvisioningStepToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToProvisionedHost chains the current query on the "ProvisioningStepToProvisionedHost" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToProvisionedHost() *ProvisionedHostQuery {
	query := (&ProvisionedHostClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToProvisionedHostTable, provisioningstep.ProvisioningStepToProvisionedHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToScript chains the current query on the "ProvisioningStepToScript" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToScript() *ScriptQuery {
	query := (&ScriptClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToScriptTable, provisioningstep.ProvisioningStepToScriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToCommand chains the current query on the "ProvisioningStepToCommand" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToCommand() *CommandQuery {
	query := (&CommandClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToCommandTable, provisioningstep.ProvisioningStepToCommandColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToDNSRecord chains the current query on the "ProvisioningStepToDNSRecord" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToDNSRecord() *DNSRecordQuery {
	query := (&DNSRecordClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(dnsrecord.Table, dnsrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToDNSRecordTable, provisioningstep.ProvisioningStepToDNSRecordColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToFileDelete chains the current query on the "ProvisioningStepToFileDelete" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToFileDelete() *FileDeleteQuery {
	query := (&FileDeleteClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(filedelete.Table, filedelete.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToFileDeleteTable, provisioningstep.ProvisioningStepToFileDeleteColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToFileDownload chains the current query on the "ProvisioningStepToFileDownload" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToFileDownload() *FileDownloadQuery {
	query := (&FileDownloadClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(filedownload.Table, filedownload.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToFileDownloadTable, provisioningstep.ProvisioningStepToFileDownloadColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToFileExtract chains the current query on the "ProvisioningStepToFileExtract" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToFileExtract() *FileExtractQuery {
	query := (&FileExtractClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(fileextract.Table, fileextract.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToFileExtractTable, provisioningstep.ProvisioningStepToFileExtractColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToAnsible chains the current query on the "ProvisioningStepToAnsible" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToAnsible() *AnsibleQuery {
	query := (&AnsibleClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(ansible.Table, ansible.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningstep.ProvisioningStepToAnsibleTable, provisioningstep.ProvisioningStepToAnsibleColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToPlan chains the current query on the "ProvisioningStepToPlan" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToPlan() *PlanQuery {
	query := (&PlanClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisioningstep.ProvisioningStepToPlanTable, provisioningstep.ProvisioningStepToPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToAgentTask chains the current query on the "ProvisioningStepToAgentTask" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToAgentTask() *AgentTaskQuery {
	query := (&AgentTaskClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(agenttask.Table, agenttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, provisioningstep.ProvisioningStepToAgentTaskTable, provisioningstep.ProvisioningStepToAgentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToGinFileMiddleware chains the current query on the "ProvisioningStepToGinFileMiddleware" edge.
func (psq *ProvisioningStepQuery) QueryProvisioningStepToGinFileMiddleware() *GinFileMiddlewareQuery {
	query := (&GinFileMiddlewareClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(ginfilemiddleware.Table, ginfilemiddleware.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisioningstep.ProvisioningStepToGinFileMiddlewareTable, provisioningstep.ProvisioningStepToGinFileMiddlewareColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProvisioningStep entity from the query.
// Returns a *NotFoundError when no ProvisioningStep was found.
func (psq *ProvisioningStepQuery) First(ctx context.Context) (*ProvisioningStep, error) {
	nodes, err := psq.Limit(1).All(setContextOp(ctx, psq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{provisioningstep.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *ProvisioningStepQuery) FirstX(ctx context.Context) *ProvisioningStep {
	node, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProvisioningStep ID from the query.
// Returns a *NotFoundError when no ProvisioningStep ID was found.
func (psq *ProvisioningStepQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = psq.Limit(1).IDs(setContextOp(ctx, psq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{provisioningstep.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psq *ProvisioningStepQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProvisioningStep entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProvisioningStep entity is found.
// Returns a *NotFoundError when no ProvisioningStep entities are found.
func (psq *ProvisioningStepQuery) Only(ctx context.Context) (*ProvisioningStep, error) {
	nodes, err := psq.Limit(2).All(setContextOp(ctx, psq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{provisioningstep.Label}
	default:
		return nil, &NotSingularError{provisioningstep.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *ProvisioningStepQuery) OnlyX(ctx context.Context) *ProvisioningStep {
	node, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProvisioningStep ID in the query.
// Returns a *NotSingularError when more than one ProvisioningStep ID is found.
// Returns a *NotFoundError when no entities are found.
func (psq *ProvisioningStepQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = psq.Limit(2).IDs(setContextOp(ctx, psq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = &NotSingularError{provisioningstep.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *ProvisioningStepQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProvisioningSteps.
func (psq *ProvisioningStepQuery) All(ctx context.Context) ([]*ProvisioningStep, error) {
	ctx = setContextOp(ctx, psq.ctx, "All")
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProvisioningStep, *ProvisioningStepQuery]()
	return withInterceptors[[]*ProvisioningStep](ctx, psq, qr, psq.inters)
}

// AllX is like All, but panics if an error occurs.
func (psq *ProvisioningStepQuery) AllX(ctx context.Context) []*ProvisioningStep {
	nodes, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProvisioningStep IDs.
func (psq *ProvisioningStepQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if psq.ctx.Unique == nil && psq.path != nil {
		psq.Unique(true)
	}
	ctx = setContextOp(ctx, psq.ctx, "IDs")
	if err = psq.Select(provisioningstep.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *ProvisioningStepQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *ProvisioningStepQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, psq.ctx, "Count")
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, psq, querierCount[*ProvisioningStepQuery](), psq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (psq *ProvisioningStepQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *ProvisioningStepQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, psq.ctx, "Exist")
	switch _, err := psq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *ProvisioningStepQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProvisioningStepQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *ProvisioningStepQuery) Clone() *ProvisioningStepQuery {
	if psq == nil {
		return nil
	}
	return &ProvisioningStepQuery{
		config:                                  psq.config,
		ctx:                                     psq.ctx.Clone(),
		order:                                   append([]provisioningstep.OrderOption{}, psq.order...),
		inters:                                  append([]Interceptor{}, psq.inters...),
		predicates:                              append([]predicate.ProvisioningStep{}, psq.predicates...),
		withProvisioningStepToStatus:            psq.withProvisioningStepToStatus.Clone(),
		withProvisioningStepToProvisionedHost:   psq.withProvisioningStepToProvisionedHost.Clone(),
		withProvisioningStepToScript:            psq.withProvisioningStepToScript.Clone(),
		withProvisioningStepToCommand:           psq.withProvisioningStepToCommand.Clone(),
		withProvisioningStepToDNSRecord:         psq.withProvisioningStepToDNSRecord.Clone(),
		withProvisioningStepToFileDelete:        psq.withProvisioningStepToFileDelete.Clone(),
		withProvisioningStepToFileDownload:      psq.withProvisioningStepToFileDownload.Clone(),
		withProvisioningStepToFileExtract:       psq.withProvisioningStepToFileExtract.Clone(),
		withProvisioningStepToAnsible:           psq.withProvisioningStepToAnsible.Clone(),
		withProvisioningStepToPlan:              psq.withProvisioningStepToPlan.Clone(),
		withProvisioningStepToAgentTask:         psq.withProvisioningStepToAgentTask.Clone(),
		withProvisioningStepToGinFileMiddleware: psq.withProvisioningStepToGinFileMiddleware.Clone(),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

// WithProvisioningStepToStatus tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToStatus(opts ...func(*StatusQuery)) *ProvisioningStepQuery {
	query := (&StatusClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToStatus = query
	return psq
}

// WithProvisioningStepToProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToProvisionedHost(opts ...func(*ProvisionedHostQuery)) *ProvisioningStepQuery {
	query := (&ProvisionedHostClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToProvisionedHost = query
	return psq
}

// WithProvisioningStepToScript tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToScript" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToScript(opts ...func(*ScriptQuery)) *ProvisioningStepQuery {
	query := (&ScriptClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToScript = query
	return psq
}

// WithProvisioningStepToCommand tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToCommand" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToCommand(opts ...func(*CommandQuery)) *ProvisioningStepQuery {
	query := (&CommandClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToCommand = query
	return psq
}

// WithProvisioningStepToDNSRecord tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToDNSRecord" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToDNSRecord(opts ...func(*DNSRecordQuery)) *ProvisioningStepQuery {
	query := (&DNSRecordClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToDNSRecord = query
	return psq
}

// WithProvisioningStepToFileDelete tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToFileDelete" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToFileDelete(opts ...func(*FileDeleteQuery)) *ProvisioningStepQuery {
	query := (&FileDeleteClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToFileDelete = query
	return psq
}

// WithProvisioningStepToFileDownload tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToFileDownload" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToFileDownload(opts ...func(*FileDownloadQuery)) *ProvisioningStepQuery {
	query := (&FileDownloadClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToFileDownload = query
	return psq
}

// WithProvisioningStepToFileExtract tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToFileExtract" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToFileExtract(opts ...func(*FileExtractQuery)) *ProvisioningStepQuery {
	query := (&FileExtractClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToFileExtract = query
	return psq
}

// WithProvisioningStepToAnsible tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToAnsible" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToAnsible(opts ...func(*AnsibleQuery)) *ProvisioningStepQuery {
	query := (&AnsibleClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToAnsible = query
	return psq
}

// WithProvisioningStepToPlan tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToPlan(opts ...func(*PlanQuery)) *ProvisioningStepQuery {
	query := (&PlanClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToPlan = query
	return psq
}

// WithProvisioningStepToAgentTask tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToAgentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToAgentTask(opts ...func(*AgentTaskQuery)) *ProvisioningStepQuery {
	query := (&AgentTaskClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToAgentTask = query
	return psq
}

// WithProvisioningStepToGinFileMiddleware tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToGinFileMiddleware" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisioningStepToGinFileMiddleware(opts ...func(*GinFileMiddlewareQuery)) *ProvisioningStepQuery {
	query := (&GinFileMiddlewareClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisioningStepToGinFileMiddleware = query
	return psq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type provisioningstep.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProvisioningStep.Query().
//		GroupBy(provisioningstep.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psq *ProvisioningStepQuery) GroupBy(field string, fields ...string) *ProvisioningStepGroupBy {
	psq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProvisioningStepGroupBy{build: psq}
	grbuild.flds = &psq.ctx.Fields
	grbuild.label = provisioningstep.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type provisioningstep.Type `json:"type,omitempty"`
//	}
//
//	client.ProvisioningStep.Query().
//		Select(provisioningstep.FieldType).
//		Scan(ctx, &v)
func (psq *ProvisioningStepQuery) Select(fields ...string) *ProvisioningStepSelect {
	psq.ctx.Fields = append(psq.ctx.Fields, fields...)
	sbuild := &ProvisioningStepSelect{ProvisioningStepQuery: psq}
	sbuild.label = provisioningstep.Label
	sbuild.flds, sbuild.scan = &psq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProvisioningStepSelect configured with the given aggregations.
func (psq *ProvisioningStepQuery) Aggregate(fns ...AggregateFunc) *ProvisioningStepSelect {
	return psq.Select().Aggregate(fns...)
}

func (psq *ProvisioningStepQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range psq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, psq); err != nil {
				return err
			}
		}
	}
	for _, f := range psq.ctx.Fields {
		if !provisioningstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *ProvisioningStepQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProvisioningStep, error) {
	var (
		nodes       = []*ProvisioningStep{}
		withFKs     = psq.withFKs
		_spec       = psq.querySpec()
		loadedTypes = [12]bool{
			psq.withProvisioningStepToStatus != nil,
			psq.withProvisioningStepToProvisionedHost != nil,
			psq.withProvisioningStepToScript != nil,
			psq.withProvisioningStepToCommand != nil,
			psq.withProvisioningStepToDNSRecord != nil,
			psq.withProvisioningStepToFileDelete != nil,
			psq.withProvisioningStepToFileDownload != nil,
			psq.withProvisioningStepToFileExtract != nil,
			psq.withProvisioningStepToAnsible != nil,
			psq.withProvisioningStepToPlan != nil,
			psq.withProvisioningStepToAgentTask != nil,
			psq.withProvisioningStepToGinFileMiddleware != nil,
		}
	)
	if psq.withProvisioningStepToProvisionedHost != nil || psq.withProvisioningStepToScript != nil || psq.withProvisioningStepToCommand != nil || psq.withProvisioningStepToDNSRecord != nil || psq.withProvisioningStepToFileDelete != nil || psq.withProvisioningStepToFileDownload != nil || psq.withProvisioningStepToFileExtract != nil || psq.withProvisioningStepToAnsible != nil || psq.withProvisioningStepToPlan != nil || psq.withProvisioningStepToGinFileMiddleware != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningstep.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProvisioningStep).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProvisioningStep{config: psq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(psq.modifiers) > 0 {
		_spec.Modifiers = psq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psq.withProvisioningStepToStatus; query != nil {
		if err := psq.loadProvisioningStepToStatus(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *Status) { n.Edges.ProvisioningStepToStatus = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToProvisionedHost; query != nil {
		if err := psq.loadProvisioningStepToProvisionedHost(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *ProvisionedHost) { n.Edges.ProvisioningStepToProvisionedHost = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToScript; query != nil {
		if err := psq.loadProvisioningStepToScript(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *Script) { n.Edges.ProvisioningStepToScript = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToCommand; query != nil {
		if err := psq.loadProvisioningStepToCommand(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *Command) { n.Edges.ProvisioningStepToCommand = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToDNSRecord; query != nil {
		if err := psq.loadProvisioningStepToDNSRecord(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *DNSRecord) { n.Edges.ProvisioningStepToDNSRecord = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToFileDelete; query != nil {
		if err := psq.loadProvisioningStepToFileDelete(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *FileDelete) { n.Edges.ProvisioningStepToFileDelete = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToFileDownload; query != nil {
		if err := psq.loadProvisioningStepToFileDownload(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *FileDownload) { n.Edges.ProvisioningStepToFileDownload = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToFileExtract; query != nil {
		if err := psq.loadProvisioningStepToFileExtract(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *FileExtract) { n.Edges.ProvisioningStepToFileExtract = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToAnsible; query != nil {
		if err := psq.loadProvisioningStepToAnsible(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *Ansible) { n.Edges.ProvisioningStepToAnsible = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToPlan; query != nil {
		if err := psq.loadProvisioningStepToPlan(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *Plan) { n.Edges.ProvisioningStepToPlan = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToAgentTask; query != nil {
		if err := psq.loadProvisioningStepToAgentTask(ctx, query, nodes,
			func(n *ProvisioningStep) { n.Edges.ProvisioningStepToAgentTask = []*AgentTask{} },
			func(n *ProvisioningStep, e *AgentTask) {
				n.Edges.ProvisioningStepToAgentTask = append(n.Edges.ProvisioningStepToAgentTask, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := psq.withProvisioningStepToGinFileMiddleware; query != nil {
		if err := psq.loadProvisioningStepToGinFileMiddleware(ctx, query, nodes, nil,
			func(n *ProvisioningStep, e *GinFileMiddleware) { n.Edges.ProvisioningStepToGinFileMiddleware = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range psq.withNamedProvisioningStepToAgentTask {
		if err := psq.loadProvisioningStepToAgentTask(ctx, query, nodes,
			func(n *ProvisioningStep) { n.appendNamedProvisioningStepToAgentTask(name) },
			func(n *ProvisioningStep, e *AgentTask) { n.appendNamedProvisioningStepToAgentTask(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range psq.loadTotal {
		if err := psq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psq *ProvisioningStepQuery) loadProvisioningStepToStatus(ctx context.Context, query *StatusQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ProvisioningStep)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(provisioningstep.ProvisioningStepToStatusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provisioning_step_provisioning_step_to_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "provisioning_step_provisioning_step_to_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "provisioning_step_provisioning_step_to_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToProvisionedHost(ctx context.Context, query *ProvisionedHostQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *ProvisionedHost)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_provisioned_host == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_provisioned_host
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(provisionedhost.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_provisioned_host" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToScript(ctx context.Context, query *ScriptQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *Script)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_script == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_script
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(script.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_script" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToCommand(ctx context.Context, query *CommandQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *Command)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_command == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_command
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(command.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_command" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToDNSRecord(ctx context.Context, query *DNSRecordQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *DNSRecord)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_dns_record == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_dns_record
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(dnsrecord.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_dns_record" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToFileDelete(ctx context.Context, query *FileDeleteQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *FileDelete)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_file_delete == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_file_delete
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(filedelete.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_file_delete" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToFileDownload(ctx context.Context, query *FileDownloadQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *FileDownload)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_file_download == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_file_download
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(filedownload.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_file_download" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToFileExtract(ctx context.Context, query *FileExtractQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *FileExtract)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_file_extract == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_file_extract
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(fileextract.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_file_extract" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToAnsible(ctx context.Context, query *AnsibleQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *Ansible)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].provisioning_step_provisioning_step_to_ansible == nil {
			continue
		}
		fk := *nodes[i].provisioning_step_provisioning_step_to_ansible
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ansible.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_ansible" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToPlan(ctx context.Context, query *PlanQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *Plan)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].plan_plan_to_provisioning_step == nil {
			continue
		}
		fk := *nodes[i].plan_plan_to_provisioning_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(plan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_plan_to_provisioning_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToAgentTask(ctx context.Context, query *AgentTaskQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *AgentTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ProvisioningStep)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AgentTask(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(provisioningstep.ProvisioningStepToAgentTaskColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_task_agent_task_to_provisioning_step
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_task_agent_task_to_provisioning_step" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_task_agent_task_to_provisioning_step" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ProvisioningStepQuery) loadProvisioningStepToGinFileMiddleware(ctx context.Context, query *GinFileMiddlewareQuery, nodes []*ProvisioningStep, init func(*ProvisioningStep), assign func(*ProvisioningStep, *GinFileMiddleware)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningStep)
	for i := range nodes {
		if nodes[i].gin_file_middleware_gin_file_middleware_to_provisioning_step == nil {
			continue
		}
		fk := *nodes[i].gin_file_middleware_gin_file_middleware_to_provisioning_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ginfilemiddleware.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "gin_file_middleware_gin_file_middleware_to_provisioning_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (psq *ProvisioningStepQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	if len(psq.modifiers) > 0 {
		_spec.Modifiers = psq.modifiers
	}
	_spec.Node.Columns = psq.ctx.Fields
	if len(psq.ctx.Fields) > 0 {
		_spec.Unique = psq.ctx.Unique != nil && *psq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *ProvisioningStepQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(provisioningstep.Table, provisioningstep.Columns, sqlgraph.NewFieldSpec(provisioningstep.FieldID, field.TypeUUID))
	_spec.From = psq.sql
	if unique := psq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if psq.path != nil {
		_spec.Unique = true
	}
	if fields := psq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningstep.FieldID)
		for i := range fields {
			if fields[i] != provisioningstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *ProvisioningStepQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(provisioningstep.Table)
	columns := psq.ctx.Fields
	if len(columns) == 0 {
		columns = provisioningstep.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psq.ctx.Unique != nil && *psq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedProvisioningStepToAgentTask tells the query-builder to eager-load the nodes that are connected to the "ProvisioningStepToAgentTask"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithNamedProvisioningStepToAgentTask(name string, opts ...func(*AgentTaskQuery)) *ProvisioningStepQuery {
	query := (&AgentTaskClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if psq.withNamedProvisioningStepToAgentTask == nil {
		psq.withNamedProvisioningStepToAgentTask = make(map[string]*AgentTaskQuery)
	}
	psq.withNamedProvisioningStepToAgentTask[name] = query
	return psq
}

// ProvisioningStepGroupBy is the group-by builder for ProvisioningStep entities.
type ProvisioningStepGroupBy struct {
	selector
	build *ProvisioningStepQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *ProvisioningStepGroupBy) Aggregate(fns ...AggregateFunc) *ProvisioningStepGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the selector query and scans the result into the given value.
func (psgb *ProvisioningStepGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psgb.build.ctx, "GroupBy")
	if err := psgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProvisioningStepQuery, *ProvisioningStepGroupBy](ctx, psgb.build, psgb, psgb.build.inters, v)
}

func (psgb *ProvisioningStepGroupBy) sqlScan(ctx context.Context, root *ProvisioningStepQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(psgb.fns))
	for _, fn := range psgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*psgb.flds)+len(psgb.fns))
		for _, f := range *psgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*psgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProvisioningStepSelect is the builder for selecting fields of ProvisioningStep entities.
type ProvisioningStepSelect struct {
	*ProvisioningStepQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pss *ProvisioningStepSelect) Aggregate(fns ...AggregateFunc) *ProvisioningStepSelect {
	pss.fns = append(pss.fns, fns...)
	return pss
}

// Scan applies the selector query and scans the result into the given value.
func (pss *ProvisioningStepSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pss.ctx, "Select")
	if err := pss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProvisioningStepQuery, *ProvisioningStepSelect](ctx, pss.ProvisioningStepQuery, pss, pss.inters, v)
}

func (pss *ProvisioningStepSelect) sqlScan(ctx context.Context, root *ProvisioningStepQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pss.fns))
	for _, fn := range pss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
