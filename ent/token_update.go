// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/token"
	"github.com/google/uuid"
)

// TokenUpdate is the builder for updating Token entities.
type TokenUpdate struct {
	config
	hooks    []Hook
	mutation *TokenMutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (tu *TokenUpdate) Where(ps ...predicate.Token) *TokenUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetToken sets the "token" field.
func (tu *TokenUpdate) SetToken(s string) *TokenUpdate {
	tu.mutation.SetToken(s)
	return tu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableToken(s *string) *TokenUpdate {
	if s != nil {
		tu.SetToken(*s)
	}
	return tu
}

// SetExpireAt sets the "expire_at" field.
func (tu *TokenUpdate) SetExpireAt(i int64) *TokenUpdate {
	tu.mutation.ResetExpireAt()
	tu.mutation.SetExpireAt(i)
	return tu
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableExpireAt(i *int64) *TokenUpdate {
	if i != nil {
		tu.SetExpireAt(*i)
	}
	return tu
}

// AddExpireAt adds i to the "expire_at" field.
func (tu *TokenUpdate) AddExpireAt(i int64) *TokenUpdate {
	tu.mutation.AddExpireAt(i)
	return tu
}

// SetTokenToAuthUserID sets the "TokenToAuthUser" edge to the AuthUser entity by ID.
func (tu *TokenUpdate) SetTokenToAuthUserID(id uuid.UUID) *TokenUpdate {
	tu.mutation.SetTokenToAuthUserID(id)
	return tu
}

// SetTokenToAuthUser sets the "TokenToAuthUser" edge to the AuthUser entity.
func (tu *TokenUpdate) SetTokenToAuthUser(a *AuthUser) *TokenUpdate {
	return tu.SetTokenToAuthUserID(a.ID)
}

// Mutation returns the TokenMutation object of the builder.
func (tu *TokenUpdate) Mutation() *TokenMutation {
	return tu.mutation
}

// ClearTokenToAuthUser clears the "TokenToAuthUser" edge to the AuthUser entity.
func (tu *TokenUpdate) ClearTokenToAuthUser() *TokenUpdate {
	tu.mutation.ClearTokenToAuthUser()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TokenUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TokenUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TokenUpdate) check() error {
	if _, ok := tu.mutation.TokenToAuthUserID(); tu.mutation.TokenToAuthUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Token.TokenToAuthUser"`)
	}
	return nil
}

func (tu *TokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Token(); ok {
		_spec.SetField(token.FieldToken, field.TypeString, value)
	}
	if value, ok := tu.mutation.ExpireAt(); ok {
		_spec.SetField(token.FieldExpireAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedExpireAt(); ok {
		_spec.AddField(token.FieldExpireAt, field.TypeInt64, value)
	}
	if tu.mutation.TokenToAuthUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.TokenToAuthUserTable,
			Columns: []string{token.TokenToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TokenToAuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.TokenToAuthUserTable,
			Columns: []string{token.TokenToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TokenUpdateOne is the builder for updating a single Token entity.
type TokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenMutation
}

// SetToken sets the "token" field.
func (tuo *TokenUpdateOne) SetToken(s string) *TokenUpdateOne {
	tuo.mutation.SetToken(s)
	return tuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableToken(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetToken(*s)
	}
	return tuo
}

// SetExpireAt sets the "expire_at" field.
func (tuo *TokenUpdateOne) SetExpireAt(i int64) *TokenUpdateOne {
	tuo.mutation.ResetExpireAt()
	tuo.mutation.SetExpireAt(i)
	return tuo
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableExpireAt(i *int64) *TokenUpdateOne {
	if i != nil {
		tuo.SetExpireAt(*i)
	}
	return tuo
}

// AddExpireAt adds i to the "expire_at" field.
func (tuo *TokenUpdateOne) AddExpireAt(i int64) *TokenUpdateOne {
	tuo.mutation.AddExpireAt(i)
	return tuo
}

// SetTokenToAuthUserID sets the "TokenToAuthUser" edge to the AuthUser entity by ID.
func (tuo *TokenUpdateOne) SetTokenToAuthUserID(id uuid.UUID) *TokenUpdateOne {
	tuo.mutation.SetTokenToAuthUserID(id)
	return tuo
}

// SetTokenToAuthUser sets the "TokenToAuthUser" edge to the AuthUser entity.
func (tuo *TokenUpdateOne) SetTokenToAuthUser(a *AuthUser) *TokenUpdateOne {
	return tuo.SetTokenToAuthUserID(a.ID)
}

// Mutation returns the TokenMutation object of the builder.
func (tuo *TokenUpdateOne) Mutation() *TokenMutation {
	return tuo.mutation
}

// ClearTokenToAuthUser clears the "TokenToAuthUser" edge to the AuthUser entity.
func (tuo *TokenUpdateOne) ClearTokenToAuthUser() *TokenUpdateOne {
	tuo.mutation.ClearTokenToAuthUser()
	return tuo
}

// Where appends a list predicates to the TokenUpdate builder.
func (tuo *TokenUpdateOne) Where(ps ...predicate.Token) *TokenUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TokenUpdateOne) Select(field string, fields ...string) *TokenUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Token entity.
func (tuo *TokenUpdateOne) Save(ctx context.Context) (*Token, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TokenUpdateOne) SaveX(ctx context.Context) *Token {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TokenUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TokenUpdateOne) check() error {
	if _, ok := tuo.mutation.TokenToAuthUserID(); tuo.mutation.TokenToAuthUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Token.TokenToAuthUser"`)
	}
	return nil
}

func (tuo *TokenUpdateOne) sqlSave(ctx context.Context) (_node *Token, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, token.FieldID)
		for _, f := range fields {
			if !token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Token(); ok {
		_spec.SetField(token.FieldToken, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ExpireAt(); ok {
		_spec.SetField(token.FieldExpireAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedExpireAt(); ok {
		_spec.AddField(token.FieldExpireAt, field.TypeInt64, value)
	}
	if tuo.mutation.TokenToAuthUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.TokenToAuthUserTable,
			Columns: []string{token.TokenToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TokenToAuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.TokenToAuthUserTable,
			Columns: []string{token.TokenToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Token{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
