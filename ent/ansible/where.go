// Code generated by ent, DO NOT EDIT.

package ansible

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldName, v))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldHCLID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldDescription, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldSource, v))
}

// PlaybookName applies equality check predicate on the "playbook_name" field. It's identical to PlaybookNameEQ.
func PlaybookName(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldPlaybookName, v))
}

// Inventory applies equality check predicate on the "inventory" field. It's identical to InventoryEQ.
func Inventory(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldInventory, v))
}

// AbsPath applies equality check predicate on the "abs_path" field. It's identical to AbsPathEQ.
func AbsPath(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldAbsPath, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContainsFold(FieldName, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContainsFold(FieldHCLID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContainsFold(FieldDescription, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContainsFold(FieldSource, v))
}

// PlaybookNameEQ applies the EQ predicate on the "playbook_name" field.
func PlaybookNameEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldPlaybookName, v))
}

// PlaybookNameNEQ applies the NEQ predicate on the "playbook_name" field.
func PlaybookNameNEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldPlaybookName, v))
}

// PlaybookNameIn applies the In predicate on the "playbook_name" field.
func PlaybookNameIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldPlaybookName, vs...))
}

// PlaybookNameNotIn applies the NotIn predicate on the "playbook_name" field.
func PlaybookNameNotIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldPlaybookName, vs...))
}

// PlaybookNameGT applies the GT predicate on the "playbook_name" field.
func PlaybookNameGT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldPlaybookName, v))
}

// PlaybookNameGTE applies the GTE predicate on the "playbook_name" field.
func PlaybookNameGTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldPlaybookName, v))
}

// PlaybookNameLT applies the LT predicate on the "playbook_name" field.
func PlaybookNameLT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldPlaybookName, v))
}

// PlaybookNameLTE applies the LTE predicate on the "playbook_name" field.
func PlaybookNameLTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldPlaybookName, v))
}

// PlaybookNameContains applies the Contains predicate on the "playbook_name" field.
func PlaybookNameContains(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContains(FieldPlaybookName, v))
}

// PlaybookNameHasPrefix applies the HasPrefix predicate on the "playbook_name" field.
func PlaybookNameHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasPrefix(FieldPlaybookName, v))
}

// PlaybookNameHasSuffix applies the HasSuffix predicate on the "playbook_name" field.
func PlaybookNameHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasSuffix(FieldPlaybookName, v))
}

// PlaybookNameEqualFold applies the EqualFold predicate on the "playbook_name" field.
func PlaybookNameEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEqualFold(FieldPlaybookName, v))
}

// PlaybookNameContainsFold applies the ContainsFold predicate on the "playbook_name" field.
func PlaybookNameContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContainsFold(FieldPlaybookName, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v Method) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v Method) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...Method) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...Method) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldMethod, vs...))
}

// InventoryEQ applies the EQ predicate on the "inventory" field.
func InventoryEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldInventory, v))
}

// InventoryNEQ applies the NEQ predicate on the "inventory" field.
func InventoryNEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldInventory, v))
}

// InventoryIn applies the In predicate on the "inventory" field.
func InventoryIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldInventory, vs...))
}

// InventoryNotIn applies the NotIn predicate on the "inventory" field.
func InventoryNotIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldInventory, vs...))
}

// InventoryGT applies the GT predicate on the "inventory" field.
func InventoryGT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldInventory, v))
}

// InventoryGTE applies the GTE predicate on the "inventory" field.
func InventoryGTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldInventory, v))
}

// InventoryLT applies the LT predicate on the "inventory" field.
func InventoryLT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldInventory, v))
}

// InventoryLTE applies the LTE predicate on the "inventory" field.
func InventoryLTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldInventory, v))
}

// InventoryContains applies the Contains predicate on the "inventory" field.
func InventoryContains(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContains(FieldInventory, v))
}

// InventoryHasPrefix applies the HasPrefix predicate on the "inventory" field.
func InventoryHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasPrefix(FieldInventory, v))
}

// InventoryHasSuffix applies the HasSuffix predicate on the "inventory" field.
func InventoryHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasSuffix(FieldInventory, v))
}

// InventoryEqualFold applies the EqualFold predicate on the "inventory" field.
func InventoryEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEqualFold(FieldInventory, v))
}

// InventoryContainsFold applies the ContainsFold predicate on the "inventory" field.
func InventoryContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContainsFold(FieldInventory, v))
}

// AbsPathEQ applies the EQ predicate on the "abs_path" field.
func AbsPathEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEQ(FieldAbsPath, v))
}

// AbsPathNEQ applies the NEQ predicate on the "abs_path" field.
func AbsPathNEQ(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNEQ(FieldAbsPath, v))
}

// AbsPathIn applies the In predicate on the "abs_path" field.
func AbsPathIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldIn(FieldAbsPath, vs...))
}

// AbsPathNotIn applies the NotIn predicate on the "abs_path" field.
func AbsPathNotIn(vs ...string) predicate.Ansible {
	return predicate.Ansible(sql.FieldNotIn(FieldAbsPath, vs...))
}

// AbsPathGT applies the GT predicate on the "abs_path" field.
func AbsPathGT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGT(FieldAbsPath, v))
}

// AbsPathGTE applies the GTE predicate on the "abs_path" field.
func AbsPathGTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldGTE(FieldAbsPath, v))
}

// AbsPathLT applies the LT predicate on the "abs_path" field.
func AbsPathLT(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLT(FieldAbsPath, v))
}

// AbsPathLTE applies the LTE predicate on the "abs_path" field.
func AbsPathLTE(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldLTE(FieldAbsPath, v))
}

// AbsPathContains applies the Contains predicate on the "abs_path" field.
func AbsPathContains(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContains(FieldAbsPath, v))
}

// AbsPathHasPrefix applies the HasPrefix predicate on the "abs_path" field.
func AbsPathHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasPrefix(FieldAbsPath, v))
}

// AbsPathHasSuffix applies the HasSuffix predicate on the "abs_path" field.
func AbsPathHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldHasSuffix(FieldAbsPath, v))
}

// AbsPathEqualFold applies the EqualFold predicate on the "abs_path" field.
func AbsPathEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldEqualFold(FieldAbsPath, v))
}

// AbsPathContainsFold applies the ContainsFold predicate on the "abs_path" field.
func AbsPathContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(sql.FieldContainsFold(FieldAbsPath, v))
}

// HasAnsibleToUser applies the HasEdge predicate on the "AnsibleToUser" edge.
func HasAnsibleToUser() predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnsibleToUserTable, AnsibleToUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnsibleToUserWith applies the HasEdge predicate on the "AnsibleToUser" edge with a given conditions (other predicates).
func HasAnsibleToUserWith(preds ...predicate.User) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := newAnsibleToUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnsibleFromEnvironment applies the HasEdge predicate on the "AnsibleFromEnvironment" edge.
func HasAnsibleFromEnvironment() predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AnsibleFromEnvironmentTable, AnsibleFromEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnsibleFromEnvironmentWith applies the HasEdge predicate on the "AnsibleFromEnvironment" edge with a given conditions (other predicates).
func HasAnsibleFromEnvironmentWith(preds ...predicate.Environment) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := newAnsibleFromEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ansible) predicate.Ansible {
	return predicate.Ansible(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ansible) predicate.Ansible {
	return predicate.Ansible(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ansible) predicate.Ansible {
	return predicate.Ansible(sql.NotPredicates(p))
}
