// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/plandiff"
	"github.com/gen0cide/laforge/ent/predicate"
)

// PlanDiffDelete is the builder for deleting a PlanDiff entity.
type PlanDiffDelete struct {
	config
	hooks    []Hook
	mutation *PlanDiffMutation
}

// Where appends a list predicates to the PlanDiffDelete builder.
func (pdd *PlanDiffDelete) Where(ps ...predicate.PlanDiff) *PlanDiffDelete {
	pdd.mutation.Where(ps...)
	return pdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pdd *PlanDiffDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pdd.sqlExec, pdd.mutation, pdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pdd *PlanDiffDelete) ExecX(ctx context.Context) int {
	n, err := pdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pdd *PlanDiffDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(plandiff.Table, sqlgraph.NewFieldSpec(plandiff.FieldID, field.TypeUUID))
	if ps := pdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pdd.mutation.done = true
	return affected, err
}

// PlanDiffDeleteOne is the builder for deleting a single PlanDiff entity.
type PlanDiffDeleteOne struct {
	pdd *PlanDiffDelete
}

// Where appends a list predicates to the PlanDiffDelete builder.
func (pddo *PlanDiffDeleteOne) Where(ps ...predicate.PlanDiff) *PlanDiffDeleteOne {
	pddo.pdd.mutation.Where(ps...)
	return pddo
}

// Exec executes the deletion query.
func (pddo *PlanDiffDeleteOne) Exec(ctx context.Context) error {
	n, err := pddo.pdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{plandiff.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pddo *PlanDiffDeleteOne) ExecX(ctx context.Context) {
	if err := pddo.Exec(ctx); err != nil {
		panic(err)
	}
}
