// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// ProvisionedNetwork is the model entity for the ProvisionedNetwork schema.
type ProvisionedNetwork struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Cidr holds the value of the "cidr" field.
	Cidr string `json:"cidr,omitempty"`
	// Vars holds the value of the "vars" field.
	Vars map[string]string `json:"vars,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvisionedNetworkQuery when eager-loading is set.
	Edges ProvisionedNetworkEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Status holds the value of the Status edge.
	HCLStatus *Status `json:"Status,omitempty"`
	// Network holds the value of the Network edge.
	HCLNetwork *Network `json:"Network,omitempty"`
	// Build holds the value of the Build edge.
	HCLBuild *Build `json:"Build,omitempty"`
	// Team holds the value of the Team edge.
	HCLTeam *Team `json:"Team,omitempty"`
	// ProvisionedHosts holds the value of the ProvisionedHosts edge.
	HCLProvisionedHosts []*ProvisionedHost `json:"ProvisionedHosts,omitempty"`
	// Plan holds the value of the Plan edge.
	HCLPlan *Plan `json:"Plan,omitempty"`
	//
	plan_provisioned_network    *uuid.UUID
	provisioned_network_network *uuid.UUID
	provisioned_network_build   *uuid.UUID
	provisioned_network_team    *uuid.UUID
}

// ProvisionedNetworkEdges holds the relations/edges for other nodes in the graph.
type ProvisionedNetworkEdges struct {
	// Status holds the value of the Status edge.
	Status *Status `json:"Status,omitempty"`
	// Network holds the value of the Network edge.
	Network *Network `json:"Network,omitempty"`
	// Build holds the value of the Build edge.
	Build *Build `json:"Build,omitempty"`
	// Team holds the value of the Team edge.
	Team *Team `json:"Team,omitempty"`
	// ProvisionedHosts holds the value of the ProvisionedHosts edge.
	ProvisionedHosts []*ProvisionedHost `json:"ProvisionedHosts,omitempty"`
	// Plan holds the value of the Plan edge.
	Plan *Plan `json:"Plan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedNetworkEdges) StatusOrErr() (*Status, error) {
	if e.loadedTypes[0] {
		if e.Status == nil {
			// The edge Status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "Status"}
}

// NetworkOrErr returns the Network value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedNetworkEdges) NetworkOrErr() (*Network, error) {
	if e.loadedTypes[1] {
		if e.Network == nil {
			// The edge Network was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: network.Label}
		}
		return e.Network, nil
	}
	return nil, &NotLoadedError{edge: "Network"}
}

// BuildOrErr returns the Build value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedNetworkEdges) BuildOrErr() (*Build, error) {
	if e.loadedTypes[2] {
		if e.Build == nil {
			// The edge Build was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.Build, nil
	}
	return nil, &NotLoadedError{edge: "Build"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedNetworkEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[3] {
		if e.Team == nil {
			// The edge Team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "Team"}
}

// ProvisionedHostsOrErr returns the ProvisionedHosts value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisionedNetworkEdges) ProvisionedHostsOrErr() ([]*ProvisionedHost, error) {
	if e.loadedTypes[4] {
		return e.ProvisionedHosts, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedHosts"}
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedNetworkEdges) PlanOrErr() (*Plan, error) {
	if e.loadedTypes[5] {
		if e.Plan == nil {
			// The edge Plan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Plan, nil
	}
	return nil, &NotLoadedError{edge: "Plan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProvisionedNetwork) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case provisionednetwork.FieldVars:
			values[i] = new([]byte)
		case provisionednetwork.FieldName, provisionednetwork.FieldCidr:
			values[i] = new(sql.NullString)
		case provisionednetwork.FieldID:
			values[i] = new(uuid.UUID)
		case provisionednetwork.ForeignKeys[0]: // plan_provisioned_network
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisionednetwork.ForeignKeys[1]: // provisioned_network_network
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisionednetwork.ForeignKeys[2]: // provisioned_network_build
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisionednetwork.ForeignKeys[3]: // provisioned_network_team
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProvisionedNetwork", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProvisionedNetwork fields.
func (pn *ProvisionedNetwork) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case provisionednetwork.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pn.ID = *value
			}
		case provisionednetwork.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pn.Name = value.String
			}
		case provisionednetwork.FieldCidr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cidr", values[i])
			} else if value.Valid {
				pn.Cidr = value.String
			}
		case provisionednetwork.FieldVars:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vars", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pn.Vars); err != nil {
					return fmt.Errorf("unmarshal field vars: %w", err)
				}
			}
		case provisionednetwork.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_provisioned_network", values[i])
			} else if value.Valid {
				pn.plan_provisioned_network = new(uuid.UUID)
				*pn.plan_provisioned_network = *value.S.(*uuid.UUID)
			}
		case provisionednetwork.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_network_network", values[i])
			} else if value.Valid {
				pn.provisioned_network_network = new(uuid.UUID)
				*pn.provisioned_network_network = *value.S.(*uuid.UUID)
			}
		case provisionednetwork.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_network_build", values[i])
			} else if value.Valid {
				pn.provisioned_network_build = new(uuid.UUID)
				*pn.provisioned_network_build = *value.S.(*uuid.UUID)
			}
		case provisionednetwork.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_network_team", values[i])
			} else if value.Valid {
				pn.provisioned_network_team = new(uuid.UUID)
				*pn.provisioned_network_team = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryStatus queries the "Status" edge of the ProvisionedNetwork entity.
func (pn *ProvisionedNetwork) QueryStatus() *StatusQuery {
	return (&ProvisionedNetworkClient{config: pn.config}).QueryStatus(pn)
}

// QueryNetwork queries the "Network" edge of the ProvisionedNetwork entity.
func (pn *ProvisionedNetwork) QueryNetwork() *NetworkQuery {
	return (&ProvisionedNetworkClient{config: pn.config}).QueryNetwork(pn)
}

// QueryBuild queries the "Build" edge of the ProvisionedNetwork entity.
func (pn *ProvisionedNetwork) QueryBuild() *BuildQuery {
	return (&ProvisionedNetworkClient{config: pn.config}).QueryBuild(pn)
}

// QueryTeam queries the "Team" edge of the ProvisionedNetwork entity.
func (pn *ProvisionedNetwork) QueryTeam() *TeamQuery {
	return (&ProvisionedNetworkClient{config: pn.config}).QueryTeam(pn)
}

// QueryProvisionedHosts queries the "ProvisionedHosts" edge of the ProvisionedNetwork entity.
func (pn *ProvisionedNetwork) QueryProvisionedHosts() *ProvisionedHostQuery {
	return (&ProvisionedNetworkClient{config: pn.config}).QueryProvisionedHosts(pn)
}

// QueryPlan queries the "Plan" edge of the ProvisionedNetwork entity.
func (pn *ProvisionedNetwork) QueryPlan() *PlanQuery {
	return (&ProvisionedNetworkClient{config: pn.config}).QueryPlan(pn)
}

// Update returns a builder for updating this ProvisionedNetwork.
// Note that you need to call ProvisionedNetwork.Unwrap() before calling this method if this ProvisionedNetwork
// was returned from a transaction, and the transaction was committed or rolled back.
func (pn *ProvisionedNetwork) Update() *ProvisionedNetworkUpdateOne {
	return (&ProvisionedNetworkClient{config: pn.config}).UpdateOne(pn)
}

// Unwrap unwraps the ProvisionedNetwork entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pn *ProvisionedNetwork) Unwrap() *ProvisionedNetwork {
	tx, ok := pn.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProvisionedNetwork is not a transactional entity")
	}
	pn.config.driver = tx.drv
	return pn
}

// String implements the fmt.Stringer.
func (pn *ProvisionedNetwork) String() string {
	var builder strings.Builder
	builder.WriteString("ProvisionedNetwork(")
	builder.WriteString(fmt.Sprintf("id=%v", pn.ID))
	builder.WriteString(", name=")
	builder.WriteString(pn.Name)
	builder.WriteString(", cidr=")
	builder.WriteString(pn.Cidr)
	builder.WriteString(", vars=")
	builder.WriteString(fmt.Sprintf("%v", pn.Vars))
	builder.WriteByte(')')
	return builder.String()
}

// ProvisionedNetworks is a parsable slice of ProvisionedNetwork.
type ProvisionedNetworks []*ProvisionedNetwork

func (pn ProvisionedNetworks) config(cfg config) {
	for _i := range pn {
		pn[_i].config = cfg
	}
}
