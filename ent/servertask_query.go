// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ServerTaskQuery is the builder for querying ServerTask entities.
type ServerTaskQuery struct {
	config
	ctx                                    *QueryContext
	order                                  []servertask.OrderOption
	inters                                 []Interceptor
	predicates                             []predicate.ServerTask
	withServerTaskToAuthUser               *AuthUserQuery
	withServerTaskToStatus                 *StatusQuery
	withServerTaskToEnvironment            *EnvironmentQuery
	withServerTaskToBuild                  *BuildQuery
	withServerTaskToBuildCommit            *BuildCommitQuery
	withServerTaskToGinFileMiddleware      *GinFileMiddlewareQuery
	withFKs                                bool
	modifiers                              []func(*sql.Selector)
	loadTotal                              []func(context.Context, []*ServerTask) error
	withNamedServerTaskToGinFileMiddleware map[string]*GinFileMiddlewareQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServerTaskQuery builder.
func (stq *ServerTaskQuery) Where(ps ...predicate.ServerTask) *ServerTaskQuery {
	stq.predicates = append(stq.predicates, ps...)
	return stq
}

// Limit the number of records to be returned by this query.
func (stq *ServerTaskQuery) Limit(limit int) *ServerTaskQuery {
	stq.ctx.Limit = &limit
	return stq
}

// Offset to start from.
func (stq *ServerTaskQuery) Offset(offset int) *ServerTaskQuery {
	stq.ctx.Offset = &offset
	return stq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (stq *ServerTaskQuery) Unique(unique bool) *ServerTaskQuery {
	stq.ctx.Unique = &unique
	return stq
}

// Order specifies how the records should be ordered.
func (stq *ServerTaskQuery) Order(o ...servertask.OrderOption) *ServerTaskQuery {
	stq.order = append(stq.order, o...)
	return stq
}

// QueryServerTaskToAuthUser chains the current query on the "ServerTaskToAuthUser" edge.
func (stq *ServerTaskQuery) QueryServerTaskToAuthUser() *AuthUserQuery {
	query := (&AuthUserClient{config: stq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(authuser.Table, authuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.ServerTaskToAuthUserTable, servertask.ServerTaskToAuthUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTaskToStatus chains the current query on the "ServerTaskToStatus" edge.
func (stq *ServerTaskQuery) QueryServerTaskToStatus() *StatusQuery {
	query := (&StatusClient{config: stq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, servertask.ServerTaskToStatusTable, servertask.ServerTaskToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTaskToEnvironment chains the current query on the "ServerTaskToEnvironment" edge.
func (stq *ServerTaskQuery) QueryServerTaskToEnvironment() *EnvironmentQuery {
	query := (&EnvironmentClient{config: stq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.ServerTaskToEnvironmentTable, servertask.ServerTaskToEnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTaskToBuild chains the current query on the "ServerTaskToBuild" edge.
func (stq *ServerTaskQuery) QueryServerTaskToBuild() *BuildQuery {
	query := (&BuildClient{config: stq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.ServerTaskToBuildTable, servertask.ServerTaskToBuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTaskToBuildCommit chains the current query on the "ServerTaskToBuildCommit" edge.
func (stq *ServerTaskQuery) QueryServerTaskToBuildCommit() *BuildCommitQuery {
	query := (&BuildCommitClient{config: stq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.ServerTaskToBuildCommitTable, servertask.ServerTaskToBuildCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTaskToGinFileMiddleware chains the current query on the "ServerTaskToGinFileMiddleware" edge.
func (stq *ServerTaskQuery) QueryServerTaskToGinFileMiddleware() *GinFileMiddlewareQuery {
	query := (&GinFileMiddlewareClient{config: stq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(ginfilemiddleware.Table, ginfilemiddleware.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servertask.ServerTaskToGinFileMiddlewareTable, servertask.ServerTaskToGinFileMiddlewareColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServerTask entity from the query.
// Returns a *NotFoundError when no ServerTask was found.
func (stq *ServerTaskQuery) First(ctx context.Context) (*ServerTask, error) {
	nodes, err := stq.Limit(1).All(setContextOp(ctx, stq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{servertask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (stq *ServerTaskQuery) FirstX(ctx context.Context) *ServerTask {
	node, err := stq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServerTask ID from the query.
// Returns a *NotFoundError when no ServerTask ID was found.
func (stq *ServerTaskQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = stq.Limit(1).IDs(setContextOp(ctx, stq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{servertask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (stq *ServerTaskQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := stq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServerTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServerTask entity is found.
// Returns a *NotFoundError when no ServerTask entities are found.
func (stq *ServerTaskQuery) Only(ctx context.Context) (*ServerTask, error) {
	nodes, err := stq.Limit(2).All(setContextOp(ctx, stq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{servertask.Label}
	default:
		return nil, &NotSingularError{servertask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (stq *ServerTaskQuery) OnlyX(ctx context.Context) *ServerTask {
	node, err := stq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServerTask ID in the query.
// Returns a *NotSingularError when more than one ServerTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (stq *ServerTaskQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = stq.Limit(2).IDs(setContextOp(ctx, stq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{servertask.Label}
	default:
		err = &NotSingularError{servertask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (stq *ServerTaskQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := stq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServerTasks.
func (stq *ServerTaskQuery) All(ctx context.Context) ([]*ServerTask, error) {
	ctx = setContextOp(ctx, stq.ctx, "All")
	if err := stq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServerTask, *ServerTaskQuery]()
	return withInterceptors[[]*ServerTask](ctx, stq, qr, stq.inters)
}

// AllX is like All, but panics if an error occurs.
func (stq *ServerTaskQuery) AllX(ctx context.Context) []*ServerTask {
	nodes, err := stq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServerTask IDs.
func (stq *ServerTaskQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if stq.ctx.Unique == nil && stq.path != nil {
		stq.Unique(true)
	}
	ctx = setContextOp(ctx, stq.ctx, "IDs")
	if err = stq.Select(servertask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (stq *ServerTaskQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := stq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (stq *ServerTaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, stq.ctx, "Count")
	if err := stq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, stq, querierCount[*ServerTaskQuery](), stq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (stq *ServerTaskQuery) CountX(ctx context.Context) int {
	count, err := stq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (stq *ServerTaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, stq.ctx, "Exist")
	switch _, err := stq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (stq *ServerTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := stq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServerTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (stq *ServerTaskQuery) Clone() *ServerTaskQuery {
	if stq == nil {
		return nil
	}
	return &ServerTaskQuery{
		config:                            stq.config,
		ctx:                               stq.ctx.Clone(),
		order:                             append([]servertask.OrderOption{}, stq.order...),
		inters:                            append([]Interceptor{}, stq.inters...),
		predicates:                        append([]predicate.ServerTask{}, stq.predicates...),
		withServerTaskToAuthUser:          stq.withServerTaskToAuthUser.Clone(),
		withServerTaskToStatus:            stq.withServerTaskToStatus.Clone(),
		withServerTaskToEnvironment:       stq.withServerTaskToEnvironment.Clone(),
		withServerTaskToBuild:             stq.withServerTaskToBuild.Clone(),
		withServerTaskToBuildCommit:       stq.withServerTaskToBuildCommit.Clone(),
		withServerTaskToGinFileMiddleware: stq.withServerTaskToGinFileMiddleware.Clone(),
		// clone intermediate query.
		sql:  stq.sql.Clone(),
		path: stq.path,
	}
}

// WithServerTaskToAuthUser tells the query-builder to eager-load the nodes that are connected to
// the "ServerTaskToAuthUser" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithServerTaskToAuthUser(opts ...func(*AuthUserQuery)) *ServerTaskQuery {
	query := (&AuthUserClient{config: stq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stq.withServerTaskToAuthUser = query
	return stq
}

// WithServerTaskToStatus tells the query-builder to eager-load the nodes that are connected to
// the "ServerTaskToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithServerTaskToStatus(opts ...func(*StatusQuery)) *ServerTaskQuery {
	query := (&StatusClient{config: stq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stq.withServerTaskToStatus = query
	return stq
}

// WithServerTaskToEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "ServerTaskToEnvironment" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithServerTaskToEnvironment(opts ...func(*EnvironmentQuery)) *ServerTaskQuery {
	query := (&EnvironmentClient{config: stq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stq.withServerTaskToEnvironment = query
	return stq
}

// WithServerTaskToBuild tells the query-builder to eager-load the nodes that are connected to
// the "ServerTaskToBuild" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithServerTaskToBuild(opts ...func(*BuildQuery)) *ServerTaskQuery {
	query := (&BuildClient{config: stq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stq.withServerTaskToBuild = query
	return stq
}

// WithServerTaskToBuildCommit tells the query-builder to eager-load the nodes that are connected to
// the "ServerTaskToBuildCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithServerTaskToBuildCommit(opts ...func(*BuildCommitQuery)) *ServerTaskQuery {
	query := (&BuildCommitClient{config: stq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stq.withServerTaskToBuildCommit = query
	return stq
}

// WithServerTaskToGinFileMiddleware tells the query-builder to eager-load the nodes that are connected to
// the "ServerTaskToGinFileMiddleware" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithServerTaskToGinFileMiddleware(opts ...func(*GinFileMiddlewareQuery)) *ServerTaskQuery {
	query := (&GinFileMiddlewareClient{config: stq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stq.withServerTaskToGinFileMiddleware = query
	return stq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type servertask.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServerTask.Query().
//		GroupBy(servertask.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (stq *ServerTaskQuery) GroupBy(field string, fields ...string) *ServerTaskGroupBy {
	stq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServerTaskGroupBy{build: stq}
	grbuild.flds = &stq.ctx.Fields
	grbuild.label = servertask.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type servertask.Type `json:"type,omitempty"`
//	}
//
//	client.ServerTask.Query().
//		Select(servertask.FieldType).
//		Scan(ctx, &v)
func (stq *ServerTaskQuery) Select(fields ...string) *ServerTaskSelect {
	stq.ctx.Fields = append(stq.ctx.Fields, fields...)
	sbuild := &ServerTaskSelect{ServerTaskQuery: stq}
	sbuild.label = servertask.Label
	sbuild.flds, sbuild.scan = &stq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServerTaskSelect configured with the given aggregations.
func (stq *ServerTaskQuery) Aggregate(fns ...AggregateFunc) *ServerTaskSelect {
	return stq.Select().Aggregate(fns...)
}

func (stq *ServerTaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range stq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, stq); err != nil {
				return err
			}
		}
	}
	for _, f := range stq.ctx.Fields {
		if !servertask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if stq.path != nil {
		prev, err := stq.path(ctx)
		if err != nil {
			return err
		}
		stq.sql = prev
	}
	return nil
}

func (stq *ServerTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServerTask, error) {
	var (
		nodes       = []*ServerTask{}
		withFKs     = stq.withFKs
		_spec       = stq.querySpec()
		loadedTypes = [6]bool{
			stq.withServerTaskToAuthUser != nil,
			stq.withServerTaskToStatus != nil,
			stq.withServerTaskToEnvironment != nil,
			stq.withServerTaskToBuild != nil,
			stq.withServerTaskToBuildCommit != nil,
			stq.withServerTaskToGinFileMiddleware != nil,
		}
	)
	if stq.withServerTaskToAuthUser != nil || stq.withServerTaskToEnvironment != nil || stq.withServerTaskToBuild != nil || stq.withServerTaskToBuildCommit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, servertask.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServerTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServerTask{config: stq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(stq.modifiers) > 0 {
		_spec.Modifiers = stq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, stq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := stq.withServerTaskToAuthUser; query != nil {
		if err := stq.loadServerTaskToAuthUser(ctx, query, nodes, nil,
			func(n *ServerTask, e *AuthUser) { n.Edges.ServerTaskToAuthUser = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withServerTaskToStatus; query != nil {
		if err := stq.loadServerTaskToStatus(ctx, query, nodes, nil,
			func(n *ServerTask, e *Status) { n.Edges.ServerTaskToStatus = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withServerTaskToEnvironment; query != nil {
		if err := stq.loadServerTaskToEnvironment(ctx, query, nodes, nil,
			func(n *ServerTask, e *Environment) { n.Edges.ServerTaskToEnvironment = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withServerTaskToBuild; query != nil {
		if err := stq.loadServerTaskToBuild(ctx, query, nodes, nil,
			func(n *ServerTask, e *Build) { n.Edges.ServerTaskToBuild = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withServerTaskToBuildCommit; query != nil {
		if err := stq.loadServerTaskToBuildCommit(ctx, query, nodes, nil,
			func(n *ServerTask, e *BuildCommit) { n.Edges.ServerTaskToBuildCommit = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withServerTaskToGinFileMiddleware; query != nil {
		if err := stq.loadServerTaskToGinFileMiddleware(ctx, query, nodes,
			func(n *ServerTask) { n.Edges.ServerTaskToGinFileMiddleware = []*GinFileMiddleware{} },
			func(n *ServerTask, e *GinFileMiddleware) {
				n.Edges.ServerTaskToGinFileMiddleware = append(n.Edges.ServerTaskToGinFileMiddleware, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range stq.withNamedServerTaskToGinFileMiddleware {
		if err := stq.loadServerTaskToGinFileMiddleware(ctx, query, nodes,
			func(n *ServerTask) { n.appendNamedServerTaskToGinFileMiddleware(name) },
			func(n *ServerTask, e *GinFileMiddleware) { n.appendNamedServerTaskToGinFileMiddleware(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range stq.loadTotal {
		if err := stq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (stq *ServerTaskQuery) loadServerTaskToAuthUser(ctx context.Context, query *AuthUserQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *AuthUser)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_server_task_to_auth_user == nil {
			continue
		}
		fk := *nodes[i].server_task_server_task_to_auth_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(authuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_server_task_to_auth_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadServerTaskToStatus(ctx context.Context, query *StatusQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ServerTask)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(servertask.ServerTaskToStatusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_server_task_to_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_server_task_to_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "server_task_server_task_to_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (stq *ServerTaskQuery) loadServerTaskToEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *Environment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_server_task_to_environment == nil {
			continue
		}
		fk := *nodes[i].server_task_server_task_to_environment
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_server_task_to_environment" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadServerTaskToBuild(ctx context.Context, query *BuildQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *Build)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_server_task_to_build == nil {
			continue
		}
		fk := *nodes[i].server_task_server_task_to_build
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(build.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_server_task_to_build" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadServerTaskToBuildCommit(ctx context.Context, query *BuildCommitQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *BuildCommit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_server_task_to_build_commit == nil {
			continue
		}
		fk := *nodes[i].server_task_server_task_to_build_commit
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(buildcommit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_server_task_to_build_commit" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadServerTaskToGinFileMiddleware(ctx context.Context, query *GinFileMiddlewareQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *GinFileMiddleware)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ServerTask)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GinFileMiddleware(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(servertask.ServerTaskToGinFileMiddlewareColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_server_task_to_gin_file_middleware
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_server_task_to_gin_file_middleware" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "server_task_server_task_to_gin_file_middleware" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (stq *ServerTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := stq.querySpec()
	if len(stq.modifiers) > 0 {
		_spec.Modifiers = stq.modifiers
	}
	_spec.Node.Columns = stq.ctx.Fields
	if len(stq.ctx.Fields) > 0 {
		_spec.Unique = stq.ctx.Unique != nil && *stq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, stq.driver, _spec)
}

func (stq *ServerTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(servertask.Table, servertask.Columns, sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID))
	_spec.From = stq.sql
	if unique := stq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if stq.path != nil {
		_spec.Unique = true
	}
	if fields := stq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servertask.FieldID)
		for i := range fields {
			if fields[i] != servertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := stq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := stq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := stq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := stq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (stq *ServerTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(stq.driver.Dialect())
	t1 := builder.Table(servertask.Table)
	columns := stq.ctx.Fields
	if len(columns) == 0 {
		columns = servertask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if stq.sql != nil {
		selector = stq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if stq.ctx.Unique != nil && *stq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range stq.predicates {
		p(selector)
	}
	for _, p := range stq.order {
		p(selector)
	}
	if offset := stq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := stq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedServerTaskToGinFileMiddleware tells the query-builder to eager-load the nodes that are connected to the "ServerTaskToGinFileMiddleware"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithNamedServerTaskToGinFileMiddleware(name string, opts ...func(*GinFileMiddlewareQuery)) *ServerTaskQuery {
	query := (&GinFileMiddlewareClient{config: stq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if stq.withNamedServerTaskToGinFileMiddleware == nil {
		stq.withNamedServerTaskToGinFileMiddleware = make(map[string]*GinFileMiddlewareQuery)
	}
	stq.withNamedServerTaskToGinFileMiddleware[name] = query
	return stq
}

// ServerTaskGroupBy is the group-by builder for ServerTask entities.
type ServerTaskGroupBy struct {
	selector
	build *ServerTaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (stgb *ServerTaskGroupBy) Aggregate(fns ...AggregateFunc) *ServerTaskGroupBy {
	stgb.fns = append(stgb.fns, fns...)
	return stgb
}

// Scan applies the selector query and scans the result into the given value.
func (stgb *ServerTaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, stgb.build.ctx, "GroupBy")
	if err := stgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerTaskQuery, *ServerTaskGroupBy](ctx, stgb.build, stgb, stgb.build.inters, v)
}

func (stgb *ServerTaskGroupBy) sqlScan(ctx context.Context, root *ServerTaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(stgb.fns))
	for _, fn := range stgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*stgb.flds)+len(stgb.fns))
		for _, f := range *stgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*stgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := stgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServerTaskSelect is the builder for selecting fields of ServerTask entities.
type ServerTaskSelect struct {
	*ServerTaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sts *ServerTaskSelect) Aggregate(fns ...AggregateFunc) *ServerTaskSelect {
	sts.fns = append(sts.fns, fns...)
	return sts
}

// Scan applies the selector query and scans the result into the given value.
func (sts *ServerTaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sts.ctx, "Select")
	if err := sts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerTaskQuery, *ServerTaskSelect](ctx, sts.ServerTaskQuery, sts, sts.inters, v)
}

func (sts *ServerTaskSelect) sqlScan(ctx context.Context, root *ServerTaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sts.fns))
	for _, fn := range sts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
