// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ServerTaskQuery is the builder for querying ServerTask entities.
type ServerTaskQuery struct {
	config
	limit                 *int
	offset                *int
	unique                *bool
	order                 []OrderFunc
	fields                []string
	predicates            []predicate.ServerTask
	withAuthUser          *AuthUserQuery
	withStatus            *StatusQuery
	withEnvironment       *EnvironmentQuery
	withBuild             *BuildQuery
	withBuildCommit       *BuildCommitQuery
	withGinFileMiddleware *GinFileMiddlewareQuery
	withFKs               bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServerTaskQuery builder.
func (stq *ServerTaskQuery) Where(ps ...predicate.ServerTask) *ServerTaskQuery {
	stq.predicates = append(stq.predicates, ps...)
	return stq
}

// Limit adds a limit step to the query.
func (stq *ServerTaskQuery) Limit(limit int) *ServerTaskQuery {
	stq.limit = &limit
	return stq
}

// Offset adds an offset step to the query.
func (stq *ServerTaskQuery) Offset(offset int) *ServerTaskQuery {
	stq.offset = &offset
	return stq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (stq *ServerTaskQuery) Unique(unique bool) *ServerTaskQuery {
	stq.unique = &unique
	return stq
}

// Order adds an order step to the query.
func (stq *ServerTaskQuery) Order(o ...OrderFunc) *ServerTaskQuery {
	stq.order = append(stq.order, o...)
	return stq
}

// QueryAuthUser chains the current query on the "AuthUser" edge.
func (stq *ServerTaskQuery) QueryAuthUser() *AuthUserQuery {
	query := &AuthUserQuery{config: stq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(authuser.Table, authuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.AuthUserTable, servertask.AuthUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatus chains the current query on the "Status" edge.
func (stq *ServerTaskQuery) QueryStatus() *StatusQuery {
	query := &StatusQuery{config: stq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, servertask.StatusTable, servertask.StatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironment chains the current query on the "Environment" edge.
func (stq *ServerTaskQuery) QueryEnvironment() *EnvironmentQuery {
	query := &EnvironmentQuery{config: stq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.EnvironmentTable, servertask.EnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuild chains the current query on the "Build" edge.
func (stq *ServerTaskQuery) QueryBuild() *BuildQuery {
	query := &BuildQuery{config: stq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.BuildTable, servertask.BuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildCommit chains the current query on the "BuildCommit" edge.
func (stq *ServerTaskQuery) QueryBuildCommit() *BuildCommitQuery {
	query := &BuildCommitQuery{config: stq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servertask.BuildCommitTable, servertask.BuildCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGinFileMiddleware chains the current query on the "GinFileMiddleware" edge.
func (stq *ServerTaskQuery) QueryGinFileMiddleware() *GinFileMiddlewareQuery {
	query := &GinFileMiddlewareQuery{config: stq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servertask.Table, servertask.FieldID, selector),
			sqlgraph.To(ginfilemiddleware.Table, ginfilemiddleware.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servertask.GinFileMiddlewareTable, servertask.GinFileMiddlewareColumn),
		)
		fromU = sqlgraph.SetNeighbors(stq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServerTask entity from the query.
// Returns a *NotFoundError when no ServerTask was found.
func (stq *ServerTaskQuery) First(ctx context.Context) (*ServerTask, error) {
	nodes, err := stq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{servertask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (stq *ServerTaskQuery) FirstX(ctx context.Context) *ServerTask {
	node, err := stq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServerTask ID from the query.
// Returns a *NotFoundError when no ServerTask ID was found.
func (stq *ServerTaskQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = stq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{servertask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (stq *ServerTaskQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := stq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServerTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServerTask entity is found.
// Returns a *NotFoundError when no ServerTask entities are found.
func (stq *ServerTaskQuery) Only(ctx context.Context) (*ServerTask, error) {
	nodes, err := stq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{servertask.Label}
	default:
		return nil, &NotSingularError{servertask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (stq *ServerTaskQuery) OnlyX(ctx context.Context) *ServerTask {
	node, err := stq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServerTask ID in the query.
// Returns a *NotSingularError when more than one ServerTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (stq *ServerTaskQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = stq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{servertask.Label}
	default:
		err = &NotSingularError{servertask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (stq *ServerTaskQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := stq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServerTasks.
func (stq *ServerTaskQuery) All(ctx context.Context) ([]*ServerTask, error) {
	if err := stq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return stq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (stq *ServerTaskQuery) AllX(ctx context.Context) []*ServerTask {
	nodes, err := stq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServerTask IDs.
func (stq *ServerTaskQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := stq.Select(servertask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (stq *ServerTaskQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := stq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (stq *ServerTaskQuery) Count(ctx context.Context) (int, error) {
	if err := stq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return stq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (stq *ServerTaskQuery) CountX(ctx context.Context) int {
	count, err := stq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (stq *ServerTaskQuery) Exist(ctx context.Context) (bool, error) {
	if err := stq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return stq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (stq *ServerTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := stq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServerTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (stq *ServerTaskQuery) Clone() *ServerTaskQuery {
	if stq == nil {
		return nil
	}
	return &ServerTaskQuery{
		config:                stq.config,
		limit:                 stq.limit,
		offset:                stq.offset,
		order:                 append([]OrderFunc{}, stq.order...),
		predicates:            append([]predicate.ServerTask{}, stq.predicates...),
		withAuthUser:          stq.withAuthUser.Clone(),
		withStatus:            stq.withStatus.Clone(),
		withEnvironment:       stq.withEnvironment.Clone(),
		withBuild:             stq.withBuild.Clone(),
		withBuildCommit:       stq.withBuildCommit.Clone(),
		withGinFileMiddleware: stq.withGinFileMiddleware.Clone(),
		// clone intermediate query.
		sql:    stq.sql.Clone(),
		path:   stq.path,
		unique: stq.unique,
	}
}

// WithAuthUser tells the query-builder to eager-load the nodes that are connected to
// the "AuthUser" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithAuthUser(opts ...func(*AuthUserQuery)) *ServerTaskQuery {
	query := &AuthUserQuery{config: stq.config}
	for _, opt := range opts {
		opt(query)
	}
	stq.withAuthUser = query
	return stq
}

// WithStatus tells the query-builder to eager-load the nodes that are connected to
// the "Status" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithStatus(opts ...func(*StatusQuery)) *ServerTaskQuery {
	query := &StatusQuery{config: stq.config}
	for _, opt := range opts {
		opt(query)
	}
	stq.withStatus = query
	return stq
}

// WithEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "Environment" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithEnvironment(opts ...func(*EnvironmentQuery)) *ServerTaskQuery {
	query := &EnvironmentQuery{config: stq.config}
	for _, opt := range opts {
		opt(query)
	}
	stq.withEnvironment = query
	return stq
}

// WithBuild tells the query-builder to eager-load the nodes that are connected to
// the "Build" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithBuild(opts ...func(*BuildQuery)) *ServerTaskQuery {
	query := &BuildQuery{config: stq.config}
	for _, opt := range opts {
		opt(query)
	}
	stq.withBuild = query
	return stq
}

// WithBuildCommit tells the query-builder to eager-load the nodes that are connected to
// the "BuildCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithBuildCommit(opts ...func(*BuildCommitQuery)) *ServerTaskQuery {
	query := &BuildCommitQuery{config: stq.config}
	for _, opt := range opts {
		opt(query)
	}
	stq.withBuildCommit = query
	return stq
}

// WithGinFileMiddleware tells the query-builder to eager-load the nodes that are connected to
// the "GinFileMiddleware" edge. The optional arguments are used to configure the query builder of the edge.
func (stq *ServerTaskQuery) WithGinFileMiddleware(opts ...func(*GinFileMiddlewareQuery)) *ServerTaskQuery {
	query := &GinFileMiddlewareQuery{config: stq.config}
	for _, opt := range opts {
		opt(query)
	}
	stq.withGinFileMiddleware = query
	return stq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type servertask.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServerTask.Query().
//		GroupBy(servertask.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (stq *ServerTaskQuery) GroupBy(field string, fields ...string) *ServerTaskGroupBy {
	grbuild := &ServerTaskGroupBy{config: stq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return stq.sqlQuery(ctx), nil
	}
	grbuild.label = servertask.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type servertask.Type `json:"type,omitempty"`
//	}
//
//	client.ServerTask.Query().
//		Select(servertask.FieldType).
//		Scan(ctx, &v)
func (stq *ServerTaskQuery) Select(fields ...string) *ServerTaskSelect {
	stq.fields = append(stq.fields, fields...)
	selbuild := &ServerTaskSelect{ServerTaskQuery: stq}
	selbuild.label = servertask.Label
	selbuild.flds, selbuild.scan = &stq.fields, selbuild.Scan
	return selbuild
}

func (stq *ServerTaskQuery) prepareQuery(ctx context.Context) error {
	for _, f := range stq.fields {
		if !servertask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if stq.path != nil {
		prev, err := stq.path(ctx)
		if err != nil {
			return err
		}
		stq.sql = prev
	}
	return nil
}

func (stq *ServerTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServerTask, error) {
	var (
		nodes       = []*ServerTask{}
		withFKs     = stq.withFKs
		_spec       = stq.querySpec()
		loadedTypes = [6]bool{
			stq.withAuthUser != nil,
			stq.withStatus != nil,
			stq.withEnvironment != nil,
			stq.withBuild != nil,
			stq.withBuildCommit != nil,
			stq.withGinFileMiddleware != nil,
		}
	)
	if stq.withAuthUser != nil || stq.withEnvironment != nil || stq.withBuild != nil || stq.withBuildCommit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, servertask.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ServerTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ServerTask{config: stq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, stq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := stq.withAuthUser; query != nil {
		if err := stq.loadAuthUser(ctx, query, nodes, nil,
			func(n *ServerTask, e *AuthUser) { n.Edges.AuthUser = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withStatus; query != nil {
		if err := stq.loadStatus(ctx, query, nodes, nil,
			func(n *ServerTask, e *Status) { n.Edges.Status = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withEnvironment; query != nil {
		if err := stq.loadEnvironment(ctx, query, nodes, nil,
			func(n *ServerTask, e *Environment) { n.Edges.Environment = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withBuild; query != nil {
		if err := stq.loadBuild(ctx, query, nodes, nil,
			func(n *ServerTask, e *Build) { n.Edges.Build = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withBuildCommit; query != nil {
		if err := stq.loadBuildCommit(ctx, query, nodes, nil,
			func(n *ServerTask, e *BuildCommit) { n.Edges.BuildCommit = e }); err != nil {
			return nil, err
		}
	}
	if query := stq.withGinFileMiddleware; query != nil {
		if err := stq.loadGinFileMiddleware(ctx, query, nodes,
			func(n *ServerTask) { n.Edges.GinFileMiddleware = []*GinFileMiddleware{} },
			func(n *ServerTask, e *GinFileMiddleware) {
				n.Edges.GinFileMiddleware = append(n.Edges.GinFileMiddleware, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (stq *ServerTaskQuery) loadAuthUser(ctx context.Context, query *AuthUserQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *AuthUser)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_auth_user == nil {
			continue
		}
		fk := *nodes[i].server_task_auth_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(authuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_auth_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadStatus(ctx context.Context, query *StatusQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ServerTask)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(servertask.StatusColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (stq *ServerTaskQuery) loadEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *Environment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_environment == nil {
			continue
		}
		fk := *nodes[i].server_task_environment
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_environment" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadBuild(ctx context.Context, query *BuildQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *Build)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_build == nil {
			continue
		}
		fk := *nodes[i].server_task_build
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(build.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_build" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadBuildCommit(ctx context.Context, query *BuildCommitQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *BuildCommit)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServerTask)
	for i := range nodes {
		if nodes[i].server_task_build_commit == nil {
			continue
		}
		fk := *nodes[i].server_task_build_commit
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(buildcommit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_build_commit" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stq *ServerTaskQuery) loadGinFileMiddleware(ctx context.Context, query *GinFileMiddlewareQuery, nodes []*ServerTask, init func(*ServerTask), assign func(*ServerTask, *GinFileMiddleware)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ServerTask)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GinFileMiddleware(func(s *sql.Selector) {
		s.Where(sql.InValues(servertask.GinFileMiddlewareColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_gin_file_middleware
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_gin_file_middleware" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_gin_file_middleware" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (stq *ServerTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := stq.querySpec()
	_spec.Node.Columns = stq.fields
	if len(stq.fields) > 0 {
		_spec.Unique = stq.unique != nil && *stq.unique
	}
	return sqlgraph.CountNodes(ctx, stq.driver, _spec)
}

func (stq *ServerTaskQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := stq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (stq *ServerTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servertask.Table,
			Columns: servertask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servertask.FieldID,
			},
		},
		From:   stq.sql,
		Unique: true,
	}
	if unique := stq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := stq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servertask.FieldID)
		for i := range fields {
			if fields[i] != servertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := stq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := stq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := stq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := stq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (stq *ServerTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(stq.driver.Dialect())
	t1 := builder.Table(servertask.Table)
	columns := stq.fields
	if len(columns) == 0 {
		columns = servertask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if stq.sql != nil {
		selector = stq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if stq.unique != nil && *stq.unique {
		selector.Distinct()
	}
	for _, p := range stq.predicates {
		p(selector)
	}
	for _, p := range stq.order {
		p(selector)
	}
	if offset := stq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := stq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServerTaskGroupBy is the group-by builder for ServerTask entities.
type ServerTaskGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (stgb *ServerTaskGroupBy) Aggregate(fns ...AggregateFunc) *ServerTaskGroupBy {
	stgb.fns = append(stgb.fns, fns...)
	return stgb
}

// Scan applies the group-by query and scans the result into the given value.
func (stgb *ServerTaskGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := stgb.path(ctx)
	if err != nil {
		return err
	}
	stgb.sql = query
	return stgb.sqlScan(ctx, v)
}

func (stgb *ServerTaskGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range stgb.fields {
		if !servertask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := stgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := stgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (stgb *ServerTaskGroupBy) sqlQuery() *sql.Selector {
	selector := stgb.sql.Select()
	aggregation := make([]string, 0, len(stgb.fns))
	for _, fn := range stgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(stgb.fields)+len(stgb.fns))
		for _, f := range stgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(stgb.fields...)...)
}

// ServerTaskSelect is the builder for selecting fields of ServerTask entities.
type ServerTaskSelect struct {
	*ServerTaskQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sts *ServerTaskSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sts.prepareQuery(ctx); err != nil {
		return err
	}
	sts.sql = sts.ServerTaskQuery.sqlQuery(ctx)
	return sts.sqlScan(ctx, v)
}

func (sts *ServerTaskSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sts.sql.Query()
	if err := sts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
