// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningScheduledStepUpdate is the builder for updating ProvisioningScheduledStep entities.
type ProvisioningScheduledStepUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisioningScheduledStepMutation
}

// Where appends a list predicates to the ProvisioningScheduledStepUpdate builder.
func (pssu *ProvisioningScheduledStepUpdate) Where(ps ...predicate.ProvisioningScheduledStep) *ProvisioningScheduledStepUpdate {
	pssu.mutation.Where(ps...)
	return pssu
}

// SetType sets the "type" field.
func (pssu *ProvisioningScheduledStepUpdate) SetType(pr provisioningscheduledstep.Type) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetType(pr)
	return pssu
}

// SetRunTime sets the "run_time" field.
func (pssu *ProvisioningScheduledStepUpdate) SetRunTime(t time.Time) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetRunTime(t)
	return pssu
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetStatusID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetStatusID(id)
	return pssu
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableStatusID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetStatusID(*id)
	}
	return pssu
}

// SetStatus sets the "Status" edge to the Status entity.
func (pssu *ProvisioningScheduledStepUpdate) SetStatus(s *Status) *ProvisioningScheduledStepUpdate {
	return pssu.SetStatusID(s.ID)
}

// SetScheduledStepID sets the "ScheduledStep" edge to the ScheduledStep entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetScheduledStepID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetScheduledStepID(id)
	return pssu
}

// SetScheduledStep sets the "ScheduledStep" edge to the ScheduledStep entity.
func (pssu *ProvisioningScheduledStepUpdate) SetScheduledStep(s *ScheduledStep) *ProvisioningScheduledStepUpdate {
	return pssu.SetScheduledStepID(s.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisionedHostID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisionedHostID(id)
	return pssu
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisionedHost(p *ProvisionedHost) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisionedHostID(p.ID)
}

// SetScriptID sets the "Script" edge to the Script entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetScriptID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetScriptID(id)
	return pssu
}

// SetNillableScriptID sets the "Script" edge to the Script entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableScriptID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetScriptID(*id)
	}
	return pssu
}

// SetScript sets the "Script" edge to the Script entity.
func (pssu *ProvisioningScheduledStepUpdate) SetScript(s *Script) *ProvisioningScheduledStepUpdate {
	return pssu.SetScriptID(s.ID)
}

// SetCommandID sets the "Command" edge to the Command entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetCommandID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetCommandID(id)
	return pssu
}

// SetNillableCommandID sets the "Command" edge to the Command entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableCommandID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetCommandID(*id)
	}
	return pssu
}

// SetCommand sets the "Command" edge to the Command entity.
func (pssu *ProvisioningScheduledStepUpdate) SetCommand(c *Command) *ProvisioningScheduledStepUpdate {
	return pssu.SetCommandID(c.ID)
}

// SetDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetDNSRecordID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetDNSRecordID(id)
	return pssu
}

// SetNillableDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableDNSRecordID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetDNSRecordID(*id)
	}
	return pssu
}

// SetDNSRecord sets the "DNSRecord" edge to the DNSRecord entity.
func (pssu *ProvisioningScheduledStepUpdate) SetDNSRecord(d *DNSRecord) *ProvisioningScheduledStepUpdate {
	return pssu.SetDNSRecordID(d.ID)
}

// SetFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetFileDeleteID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetFileDeleteID(id)
	return pssu
}

// SetNillableFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableFileDeleteID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetFileDeleteID(*id)
	}
	return pssu
}

// SetFileDelete sets the "FileDelete" edge to the FileDelete entity.
func (pssu *ProvisioningScheduledStepUpdate) SetFileDelete(f *FileDelete) *ProvisioningScheduledStepUpdate {
	return pssu.SetFileDeleteID(f.ID)
}

// SetFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetFileDownloadID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetFileDownloadID(id)
	return pssu
}

// SetNillableFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableFileDownloadID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetFileDownloadID(*id)
	}
	return pssu
}

// SetFileDownload sets the "FileDownload" edge to the FileDownload entity.
func (pssu *ProvisioningScheduledStepUpdate) SetFileDownload(f *FileDownload) *ProvisioningScheduledStepUpdate {
	return pssu.SetFileDownloadID(f.ID)
}

// SetFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetFileExtractID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetFileExtractID(id)
	return pssu
}

// SetNillableFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableFileExtractID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetFileExtractID(*id)
	}
	return pssu
}

// SetFileExtract sets the "FileExtract" edge to the FileExtract entity.
func (pssu *ProvisioningScheduledStepUpdate) SetFileExtract(f *FileExtract) *ProvisioningScheduledStepUpdate {
	return pssu.SetFileExtractID(f.ID)
}

// SetAnsibleID sets the "Ansible" edge to the Ansible entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetAnsibleID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetAnsibleID(id)
	return pssu
}

// SetNillableAnsibleID sets the "Ansible" edge to the Ansible entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableAnsibleID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetAnsibleID(*id)
	}
	return pssu
}

// SetAnsible sets the "Ansible" edge to the Ansible entity.
func (pssu *ProvisioningScheduledStepUpdate) SetAnsible(a *Ansible) *ProvisioningScheduledStepUpdate {
	return pssu.SetAnsibleID(a.ID)
}

// AddAgentTaskIDs adds the "AgentTasks" edge to the AgentTask entity by IDs.
func (pssu *ProvisioningScheduledStepUpdate) AddAgentTaskIDs(ids ...uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.AddAgentTaskIDs(ids...)
	return pssu
}

// AddAgentTasks adds the "AgentTasks" edges to the AgentTask entity.
func (pssu *ProvisioningScheduledStepUpdate) AddAgentTasks(a ...*AgentTask) *ProvisioningScheduledStepUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pssu.AddAgentTaskIDs(ids...)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetPlanID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetPlanID(id)
	return pssu
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillablePlanID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetPlanID(*id)
	}
	return pssu
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (pssu *ProvisioningScheduledStepUpdate) SetPlan(p *Plan) *ProvisioningScheduledStepUpdate {
	return pssu.SetPlanID(p.ID)
}

// SetGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetGinFileMiddlewareID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetGinFileMiddlewareID(id)
	return pssu
}

// SetNillableGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableGinFileMiddlewareID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetGinFileMiddlewareID(*id)
	}
	return pssu
}

// SetGinFileMiddleware sets the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssu *ProvisioningScheduledStepUpdate) SetGinFileMiddleware(g *GinFileMiddleware) *ProvisioningScheduledStepUpdate {
	return pssu.SetGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningScheduledStepMutation object of the builder.
func (pssu *ProvisioningScheduledStepUpdate) Mutation() *ProvisioningScheduledStepMutation {
	return pssu.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearStatus() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearStatus()
	return pssu
}

// ClearScheduledStep clears the "ScheduledStep" edge to the ScheduledStep entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearScheduledStep() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearScheduledStep()
	return pssu
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisionedHost() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisionedHost()
	return pssu
}

// ClearScript clears the "Script" edge to the Script entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearScript() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearScript()
	return pssu
}

// ClearCommand clears the "Command" edge to the Command entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearCommand() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearCommand()
	return pssu
}

// ClearDNSRecord clears the "DNSRecord" edge to the DNSRecord entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearDNSRecord() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearDNSRecord()
	return pssu
}

// ClearFileDelete clears the "FileDelete" edge to the FileDelete entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearFileDelete() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearFileDelete()
	return pssu
}

// ClearFileDownload clears the "FileDownload" edge to the FileDownload entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearFileDownload() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearFileDownload()
	return pssu
}

// ClearFileExtract clears the "FileExtract" edge to the FileExtract entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearFileExtract() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearFileExtract()
	return pssu
}

// ClearAnsible clears the "Ansible" edge to the Ansible entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearAnsible() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearAnsible()
	return pssu
}

// ClearAgentTasks clears all "AgentTasks" edges to the AgentTask entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearAgentTasks() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearAgentTasks()
	return pssu
}

// RemoveAgentTaskIDs removes the "AgentTasks" edge to AgentTask entities by IDs.
func (pssu *ProvisioningScheduledStepUpdate) RemoveAgentTaskIDs(ids ...uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.RemoveAgentTaskIDs(ids...)
	return pssu
}

// RemoveAgentTasks removes "AgentTasks" edges to AgentTask entities.
func (pssu *ProvisioningScheduledStepUpdate) RemoveAgentTasks(a ...*AgentTask) *ProvisioningScheduledStepUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pssu.RemoveAgentTaskIDs(ids...)
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearPlan() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearPlan()
	return pssu
}

// ClearGinFileMiddleware clears the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearGinFileMiddleware() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearGinFileMiddleware()
	return pssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pssu *ProvisioningScheduledStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pssu.hooks) == 0 {
		if err = pssu.check(); err != nil {
			return 0, err
		}
		affected, err = pssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningScheduledStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pssu.check(); err != nil {
				return 0, err
			}
			pssu.mutation = mutation
			affected, err = pssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pssu.hooks) - 1; i >= 0; i-- {
			if pssu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssu *ProvisioningScheduledStepUpdate) SaveX(ctx context.Context) int {
	affected, err := pssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pssu *ProvisioningScheduledStepUpdate) Exec(ctx context.Context) error {
	_, err := pssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssu *ProvisioningScheduledStepUpdate) ExecX(ctx context.Context) {
	if err := pssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssu *ProvisioningScheduledStepUpdate) check() error {
	if v, ok := pssu.mutation.GetType(); ok {
		if err := provisioningscheduledstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningScheduledStep.type": %w`, err)}
		}
	}
	if _, ok := pssu.mutation.ScheduledStepID(); pssu.mutation.ScheduledStepCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ScheduledStep"`)
	}
	if _, ok := pssu.mutation.ProvisionedHostID(); pssu.mutation.ProvisionedHostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ProvisionedHost"`)
	}
	return nil
}

func (pssu *ProvisioningScheduledStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningscheduledstep.Table,
			Columns: provisioningscheduledstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningscheduledstep.FieldID,
			},
		},
	}
	if ps := pssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisioningscheduledstep.FieldType,
		})
	}
	if value, ok := pssu.mutation.RunTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provisioningscheduledstep.FieldRunTime,
		})
	}
	if pssu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.StatusTable,
			Columns: []string{provisioningscheduledstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.StatusTable,
			Columns: []string{provisioningscheduledstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScriptTable,
			Columns: []string{provisioningscheduledstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScriptTable,
			Columns: []string{provisioningscheduledstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.CommandTable,
			Columns: []string{provisioningscheduledstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.CommandTable,
			Columns: []string{provisioningscheduledstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.DNSRecordTable,
			Columns: []string{provisioningscheduledstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.DNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.DNSRecordTable,
			Columns: []string{provisioningscheduledstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.FileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDeleteTable,
			Columns: []string{provisioningscheduledstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.FileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDeleteTable,
			Columns: []string{provisioningscheduledstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.FileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDownloadTable,
			Columns: []string{provisioningscheduledstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.FileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDownloadTable,
			Columns: []string{provisioningscheduledstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.FileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileExtractTable,
			Columns: []string{provisioningscheduledstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.FileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileExtractTable,
			Columns: []string{provisioningscheduledstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.AnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.AnsibleTable,
			Columns: []string{provisioningscheduledstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.AnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.AnsibleTable,
			Columns: []string{provisioningscheduledstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningscheduledstep.AgentTasksTable,
			Columns: []string{provisioningscheduledstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.RemovedAgentTasksIDs(); len(nodes) > 0 && !pssu.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningscheduledstep.AgentTasksTable,
			Columns: []string{provisioningscheduledstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningscheduledstep.AgentTasksTable,
			Columns: []string{provisioningscheduledstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.PlanTable,
			Columns: []string{provisioningscheduledstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.PlanTable,
			Columns: []string{provisioningscheduledstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.GinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.GinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningscheduledstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProvisioningScheduledStepUpdateOne is the builder for updating a single ProvisioningScheduledStep entity.
type ProvisioningScheduledStepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvisioningScheduledStepMutation
}

// SetType sets the "type" field.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetType(pr provisioningscheduledstep.Type) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetType(pr)
	return pssuo
}

// SetRunTime sets the "run_time" field.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetRunTime(t time.Time) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetRunTime(t)
	return pssuo
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetStatusID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetStatusID(id)
	return pssuo
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableStatusID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetStatusID(*id)
	}
	return pssuo
}

// SetStatus sets the "Status" edge to the Status entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetStatus(s *Status) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetStatusID(s.ID)
}

// SetScheduledStepID sets the "ScheduledStep" edge to the ScheduledStep entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetScheduledStepID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetScheduledStepID(id)
	return pssuo
}

// SetScheduledStep sets the "ScheduledStep" edge to the ScheduledStep entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetScheduledStep(s *ScheduledStep) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetScheduledStepID(s.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisionedHostID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisionedHostID(id)
	return pssuo
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisionedHost(p *ProvisionedHost) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisionedHostID(p.ID)
}

// SetScriptID sets the "Script" edge to the Script entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetScriptID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetScriptID(id)
	return pssuo
}

// SetNillableScriptID sets the "Script" edge to the Script entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableScriptID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetScriptID(*id)
	}
	return pssuo
}

// SetScript sets the "Script" edge to the Script entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetScript(s *Script) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetScriptID(s.ID)
}

// SetCommandID sets the "Command" edge to the Command entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetCommandID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetCommandID(id)
	return pssuo
}

// SetNillableCommandID sets the "Command" edge to the Command entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableCommandID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetCommandID(*id)
	}
	return pssuo
}

// SetCommand sets the "Command" edge to the Command entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetCommand(c *Command) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetCommandID(c.ID)
}

// SetDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetDNSRecordID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetDNSRecordID(id)
	return pssuo
}

// SetNillableDNSRecordID sets the "DNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableDNSRecordID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetDNSRecordID(*id)
	}
	return pssuo
}

// SetDNSRecord sets the "DNSRecord" edge to the DNSRecord entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetDNSRecord(d *DNSRecord) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetDNSRecordID(d.ID)
}

// SetFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetFileDeleteID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetFileDeleteID(id)
	return pssuo
}

// SetNillableFileDeleteID sets the "FileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableFileDeleteID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetFileDeleteID(*id)
	}
	return pssuo
}

// SetFileDelete sets the "FileDelete" edge to the FileDelete entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetFileDelete(f *FileDelete) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetFileDeleteID(f.ID)
}

// SetFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetFileDownloadID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetFileDownloadID(id)
	return pssuo
}

// SetNillableFileDownloadID sets the "FileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableFileDownloadID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetFileDownloadID(*id)
	}
	return pssuo
}

// SetFileDownload sets the "FileDownload" edge to the FileDownload entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetFileDownload(f *FileDownload) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetFileDownloadID(f.ID)
}

// SetFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetFileExtractID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetFileExtractID(id)
	return pssuo
}

// SetNillableFileExtractID sets the "FileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableFileExtractID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetFileExtractID(*id)
	}
	return pssuo
}

// SetFileExtract sets the "FileExtract" edge to the FileExtract entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetFileExtract(f *FileExtract) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetFileExtractID(f.ID)
}

// SetAnsibleID sets the "Ansible" edge to the Ansible entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetAnsibleID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetAnsibleID(id)
	return pssuo
}

// SetNillableAnsibleID sets the "Ansible" edge to the Ansible entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableAnsibleID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetAnsibleID(*id)
	}
	return pssuo
}

// SetAnsible sets the "Ansible" edge to the Ansible entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetAnsible(a *Ansible) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetAnsibleID(a.ID)
}

// AddAgentTaskIDs adds the "AgentTasks" edge to the AgentTask entity by IDs.
func (pssuo *ProvisioningScheduledStepUpdateOne) AddAgentTaskIDs(ids ...uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.AddAgentTaskIDs(ids...)
	return pssuo
}

// AddAgentTasks adds the "AgentTasks" edges to the AgentTask entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) AddAgentTasks(a ...*AgentTask) *ProvisioningScheduledStepUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pssuo.AddAgentTaskIDs(ids...)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetPlanID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetPlanID(id)
	return pssuo
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillablePlanID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetPlanID(*id)
	}
	return pssuo
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetPlan(p *Plan) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetPlanID(p.ID)
}

// SetGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetGinFileMiddlewareID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetGinFileMiddlewareID(id)
	return pssuo
}

// SetNillableGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableGinFileMiddlewareID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetGinFileMiddlewareID(*id)
	}
	return pssuo
}

// SetGinFileMiddleware sets the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetGinFileMiddleware(g *GinFileMiddleware) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningScheduledStepMutation object of the builder.
func (pssuo *ProvisioningScheduledStepUpdateOne) Mutation() *ProvisioningScheduledStepMutation {
	return pssuo.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearStatus() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearStatus()
	return pssuo
}

// ClearScheduledStep clears the "ScheduledStep" edge to the ScheduledStep entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearScheduledStep() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearScheduledStep()
	return pssuo
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisionedHost() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisionedHost()
	return pssuo
}

// ClearScript clears the "Script" edge to the Script entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearScript() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearScript()
	return pssuo
}

// ClearCommand clears the "Command" edge to the Command entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearCommand() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearCommand()
	return pssuo
}

// ClearDNSRecord clears the "DNSRecord" edge to the DNSRecord entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearDNSRecord() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearDNSRecord()
	return pssuo
}

// ClearFileDelete clears the "FileDelete" edge to the FileDelete entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearFileDelete() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearFileDelete()
	return pssuo
}

// ClearFileDownload clears the "FileDownload" edge to the FileDownload entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearFileDownload() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearFileDownload()
	return pssuo
}

// ClearFileExtract clears the "FileExtract" edge to the FileExtract entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearFileExtract() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearFileExtract()
	return pssuo
}

// ClearAnsible clears the "Ansible" edge to the Ansible entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearAnsible() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearAnsible()
	return pssuo
}

// ClearAgentTasks clears all "AgentTasks" edges to the AgentTask entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearAgentTasks() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearAgentTasks()
	return pssuo
}

// RemoveAgentTaskIDs removes the "AgentTasks" edge to AgentTask entities by IDs.
func (pssuo *ProvisioningScheduledStepUpdateOne) RemoveAgentTaskIDs(ids ...uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.RemoveAgentTaskIDs(ids...)
	return pssuo
}

// RemoveAgentTasks removes "AgentTasks" edges to AgentTask entities.
func (pssuo *ProvisioningScheduledStepUpdateOne) RemoveAgentTasks(a ...*AgentTask) *ProvisioningScheduledStepUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pssuo.RemoveAgentTaskIDs(ids...)
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearPlan() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearPlan()
	return pssuo
}

// ClearGinFileMiddleware clears the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearGinFileMiddleware() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearGinFileMiddleware()
	return pssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pssuo *ProvisioningScheduledStepUpdateOne) Select(field string, fields ...string) *ProvisioningScheduledStepUpdateOne {
	pssuo.fields = append([]string{field}, fields...)
	return pssuo
}

// Save executes the query and returns the updated ProvisioningScheduledStep entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) Save(ctx context.Context) (*ProvisioningScheduledStep, error) {
	var (
		err  error
		node *ProvisioningScheduledStep
	)
	if len(pssuo.hooks) == 0 {
		if err = pssuo.check(); err != nil {
			return nil, err
		}
		node, err = pssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningScheduledStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pssuo.check(); err != nil {
				return nil, err
			}
			pssuo.mutation = mutation
			node, err = pssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pssuo.hooks) - 1; i >= 0; i-- {
			if pssuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pssuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pssuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProvisioningScheduledStep)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProvisioningScheduledStepMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssuo *ProvisioningScheduledStepUpdateOne) SaveX(ctx context.Context) *ProvisioningScheduledStep {
	node, err := pssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) Exec(ctx context.Context) error {
	_, err := pssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssuo *ProvisioningScheduledStepUpdateOne) ExecX(ctx context.Context) {
	if err := pssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssuo *ProvisioningScheduledStepUpdateOne) check() error {
	if v, ok := pssuo.mutation.GetType(); ok {
		if err := provisioningscheduledstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningScheduledStep.type": %w`, err)}
		}
	}
	if _, ok := pssuo.mutation.ScheduledStepID(); pssuo.mutation.ScheduledStepCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ScheduledStep"`)
	}
	if _, ok := pssuo.mutation.ProvisionedHostID(); pssuo.mutation.ProvisionedHostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ProvisionedHost"`)
	}
	return nil
}

func (pssuo *ProvisioningScheduledStepUpdateOne) sqlSave(ctx context.Context) (_node *ProvisioningScheduledStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningscheduledstep.Table,
			Columns: provisioningscheduledstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningscheduledstep.FieldID,
			},
		},
	}
	id, ok := pssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProvisioningScheduledStep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningscheduledstep.FieldID)
		for _, f := range fields {
			if !provisioningscheduledstep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provisioningscheduledstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisioningscheduledstep.FieldType,
		})
	}
	if value, ok := pssuo.mutation.RunTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provisioningscheduledstep.FieldRunTime,
		})
	}
	if pssuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.StatusTable,
			Columns: []string{provisioningscheduledstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.StatusTable,
			Columns: []string{provisioningscheduledstep.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScriptTable,
			Columns: []string{provisioningscheduledstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ScriptTable,
			Columns: []string{provisioningscheduledstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.CommandTable,
			Columns: []string{provisioningscheduledstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.CommandTable,
			Columns: []string{provisioningscheduledstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.DNSRecordTable,
			Columns: []string{provisioningscheduledstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.DNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.DNSRecordTable,
			Columns: []string{provisioningscheduledstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.FileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDeleteTable,
			Columns: []string{provisioningscheduledstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.FileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDeleteTable,
			Columns: []string{provisioningscheduledstep.FileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.FileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDownloadTable,
			Columns: []string{provisioningscheduledstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.FileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileDownloadTable,
			Columns: []string{provisioningscheduledstep.FileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.FileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileExtractTable,
			Columns: []string{provisioningscheduledstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.FileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.FileExtractTable,
			Columns: []string{provisioningscheduledstep.FileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.AnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.AnsibleTable,
			Columns: []string{provisioningscheduledstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.AnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.AnsibleTable,
			Columns: []string{provisioningscheduledstep.AnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningscheduledstep.AgentTasksTable,
			Columns: []string{provisioningscheduledstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.RemovedAgentTasksIDs(); len(nodes) > 0 && !pssuo.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningscheduledstep.AgentTasksTable,
			Columns: []string{provisioningscheduledstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisioningscheduledstep.AgentTasksTable,
			Columns: []string{provisioningscheduledstep.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.PlanTable,
			Columns: []string{provisioningscheduledstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.PlanTable,
			Columns: []string{provisioningscheduledstep.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.GinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.GinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisioningScheduledStep{config: pssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningscheduledstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
