// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/disk"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// HostCreate is the builder for creating a Host entity.
type HostCreate struct {
	config
	mutation *HostMutation
	hooks    []Hook
}

// SetHclID sets the "hcl_id" field.
func (hc *HostCreate) SetHclID(s string) *HostCreate {
	hc.mutation.SetHclID(s)
	return hc
}

// SetHostname sets the "hostname" field.
func (hc *HostCreate) SetHostname(s string) *HostCreate {
	hc.mutation.SetHostname(s)
	return hc
}

// SetDescription sets the "description" field.
func (hc *HostCreate) SetDescription(s string) *HostCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetOS sets the "OS" field.
func (hc *HostCreate) SetOS(s string) *HostCreate {
	hc.mutation.SetOS(s)
	return hc
}

// SetLastOctet sets the "last_octet" field.
func (hc *HostCreate) SetLastOctet(i int) *HostCreate {
	hc.mutation.SetLastOctet(i)
	return hc
}

// SetInstanceSize sets the "instance_size" field.
func (hc *HostCreate) SetInstanceSize(s string) *HostCreate {
	hc.mutation.SetInstanceSize(s)
	return hc
}

// SetAllowMACChanges sets the "allow_mac_changes" field.
func (hc *HostCreate) SetAllowMACChanges(b bool) *HostCreate {
	hc.mutation.SetAllowMACChanges(b)
	return hc
}

// SetExposedTCPPorts sets the "exposed_tcp_ports" field.
func (hc *HostCreate) SetExposedTCPPorts(s []string) *HostCreate {
	hc.mutation.SetExposedTCPPorts(s)
	return hc
}

// SetExposedUDPPorts sets the "exposed_udp_ports" field.
func (hc *HostCreate) SetExposedUDPPorts(s []string) *HostCreate {
	hc.mutation.SetExposedUDPPorts(s)
	return hc
}

// SetOverridePassword sets the "override_password" field.
func (hc *HostCreate) SetOverridePassword(s string) *HostCreate {
	hc.mutation.SetOverridePassword(s)
	return hc
}

// SetVars sets the "vars" field.
func (hc *HostCreate) SetVars(m map[string]string) *HostCreate {
	hc.mutation.SetVars(m)
	return hc
}

// SetUserGroups sets the "user_groups" field.
func (hc *HostCreate) SetUserGroups(s []string) *HostCreate {
	hc.mutation.SetUserGroups(s)
	return hc
}

// SetProvisionSteps sets the "provision_steps" field.
func (hc *HostCreate) SetProvisionSteps(s []string) *HostCreate {
	hc.mutation.SetProvisionSteps(s)
	return hc
}

// SetScheduledSteps sets the "scheduled_steps" field.
func (hc *HostCreate) SetScheduledSteps(s []string) *HostCreate {
	hc.mutation.SetScheduledSteps(s)
	return hc
}

// SetTags sets the "tags" field.
func (hc *HostCreate) SetTags(m map[string]string) *HostCreate {
	hc.mutation.SetTags(m)
	return hc
}

// SetID sets the "id" field.
func (hc *HostCreate) SetID(u uuid.UUID) *HostCreate {
	hc.mutation.SetID(u)
	return hc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hc *HostCreate) SetNillableID(u *uuid.UUID) *HostCreate {
	if u != nil {
		hc.SetID(*u)
	}
	return hc
}

// SetDiskID sets the "Disk" edge to the Disk entity by ID.
func (hc *HostCreate) SetDiskID(id uuid.UUID) *HostCreate {
	hc.mutation.SetDiskID(id)
	return hc
}

// SetNillableDiskID sets the "Disk" edge to the Disk entity by ID if the given value is not nil.
func (hc *HostCreate) SetNillableDiskID(id *uuid.UUID) *HostCreate {
	if id != nil {
		hc = hc.SetDiskID(*id)
	}
	return hc
}

// SetDisk sets the "Disk" edge to the Disk entity.
func (hc *HostCreate) SetDisk(d *Disk) *HostCreate {
	return hc.SetDiskID(d.ID)
}

// AddUserIDs adds the "Users" edge to the User entity by IDs.
func (hc *HostCreate) AddUserIDs(ids ...uuid.UUID) *HostCreate {
	hc.mutation.AddUserIDs(ids...)
	return hc
}

// AddUsers adds the "Users" edges to the User entity.
func (hc *HostCreate) AddUsers(u ...*User) *HostCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hc.AddUserIDs(ids...)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (hc *HostCreate) SetEnvironmentID(id uuid.UUID) *HostCreate {
	hc.mutation.SetEnvironmentID(id)
	return hc
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (hc *HostCreate) SetNillableEnvironmentID(id *uuid.UUID) *HostCreate {
	if id != nil {
		hc = hc.SetEnvironmentID(*id)
	}
	return hc
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (hc *HostCreate) SetEnvironment(e *Environment) *HostCreate {
	return hc.SetEnvironmentID(e.ID)
}

// AddIncludedNetworkIDs adds the "IncludedNetworks" edge to the IncludedNetwork entity by IDs.
func (hc *HostCreate) AddIncludedNetworkIDs(ids ...uuid.UUID) *HostCreate {
	hc.mutation.AddIncludedNetworkIDs(ids...)
	return hc
}

// AddIncludedNetworks adds the "IncludedNetworks" edges to the IncludedNetwork entity.
func (hc *HostCreate) AddIncludedNetworks(i ...*IncludedNetwork) *HostCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hc.AddIncludedNetworkIDs(ids...)
}

// AddDependOnHostDependencyIDs adds the "DependOnHostDependencies" edge to the HostDependency entity by IDs.
func (hc *HostCreate) AddDependOnHostDependencyIDs(ids ...uuid.UUID) *HostCreate {
	hc.mutation.AddDependOnHostDependencyIDs(ids...)
	return hc
}

// AddDependOnHostDependencies adds the "DependOnHostDependencies" edges to the HostDependency entity.
func (hc *HostCreate) AddDependOnHostDependencies(h ...*HostDependency) *HostCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hc.AddDependOnHostDependencyIDs(ids...)
}

// AddRequiredByHostDependencyIDs adds the "RequiredByHostDependencies" edge to the HostDependency entity by IDs.
func (hc *HostCreate) AddRequiredByHostDependencyIDs(ids ...uuid.UUID) *HostCreate {
	hc.mutation.AddRequiredByHostDependencyIDs(ids...)
	return hc
}

// AddRequiredByHostDependencies adds the "RequiredByHostDependencies" edges to the HostDependency entity.
func (hc *HostCreate) AddRequiredByHostDependencies(h ...*HostDependency) *HostCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hc.AddRequiredByHostDependencyIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hc *HostCreate) Mutation() *HostMutation {
	return hc.mutation
}

// Save creates the Host in the database.
func (hc *HostCreate) Save(ctx context.Context) (*Host, error) {
	var (
		err  error
		node *Host
	)
	hc.defaults()
	if len(hc.hooks) == 0 {
		if err = hc.check(); err != nil {
			return nil, err
		}
		node, err = hc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hc.check(); err != nil {
				return nil, err
			}
			hc.mutation = mutation
			if node, err = hc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(hc.hooks) - 1; i >= 0; i-- {
			if hc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Host)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HostCreate) SaveX(ctx context.Context) *Host {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HostCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HostCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HostCreate) defaults() {
	if _, ok := hc.mutation.ID(); !ok {
		v := host.DefaultID()
		hc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HostCreate) check() error {
	if _, ok := hc.mutation.HclID(); !ok {
		return &ValidationError{Name: "hcl_id", err: errors.New(`ent: missing required field "Host.hcl_id"`)}
	}
	if _, ok := hc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "Host.hostname"`)}
	}
	if _, ok := hc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Host.description"`)}
	}
	if _, ok := hc.mutation.OS(); !ok {
		return &ValidationError{Name: "OS", err: errors.New(`ent: missing required field "Host.OS"`)}
	}
	if _, ok := hc.mutation.LastOctet(); !ok {
		return &ValidationError{Name: "last_octet", err: errors.New(`ent: missing required field "Host.last_octet"`)}
	}
	if _, ok := hc.mutation.InstanceSize(); !ok {
		return &ValidationError{Name: "instance_size", err: errors.New(`ent: missing required field "Host.instance_size"`)}
	}
	if _, ok := hc.mutation.AllowMACChanges(); !ok {
		return &ValidationError{Name: "allow_mac_changes", err: errors.New(`ent: missing required field "Host.allow_mac_changes"`)}
	}
	if _, ok := hc.mutation.ExposedTCPPorts(); !ok {
		return &ValidationError{Name: "exposed_tcp_ports", err: errors.New(`ent: missing required field "Host.exposed_tcp_ports"`)}
	}
	if _, ok := hc.mutation.ExposedUDPPorts(); !ok {
		return &ValidationError{Name: "exposed_udp_ports", err: errors.New(`ent: missing required field "Host.exposed_udp_ports"`)}
	}
	if _, ok := hc.mutation.OverridePassword(); !ok {
		return &ValidationError{Name: "override_password", err: errors.New(`ent: missing required field "Host.override_password"`)}
	}
	if _, ok := hc.mutation.Vars(); !ok {
		return &ValidationError{Name: "vars", err: errors.New(`ent: missing required field "Host.vars"`)}
	}
	if _, ok := hc.mutation.UserGroups(); !ok {
		return &ValidationError{Name: "user_groups", err: errors.New(`ent: missing required field "Host.user_groups"`)}
	}
	if _, ok := hc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Host.tags"`)}
	}
	return nil
}

func (hc *HostCreate) sqlSave(ctx context.Context) (*Host, error) {
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (hc *HostCreate) createSpec() (*Host, *sqlgraph.CreateSpec) {
	var (
		_node = &Host{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: host.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: host.FieldID,
			},
		}
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := hc.mutation.HclID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHclID,
		})
		_node.HclID = value
	}
	if value, ok := hc.mutation.Hostname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
		_node.Hostname = value
	}
	if value, ok := hc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := hc.mutation.OS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOS,
		})
		_node.OS = value
	}
	if value, ok := hc.mutation.LastOctet(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastOctet,
		})
		_node.LastOctet = value
	}
	if value, ok := hc.mutation.InstanceSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldInstanceSize,
		})
		_node.InstanceSize = value
	}
	if value, ok := hc.mutation.AllowMACChanges(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: host.FieldAllowMACChanges,
		})
		_node.AllowMACChanges = value
	}
	if value, ok := hc.mutation.ExposedTCPPorts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldExposedTCPPorts,
		})
		_node.ExposedTCPPorts = value
	}
	if value, ok := hc.mutation.ExposedUDPPorts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldExposedUDPPorts,
		})
		_node.ExposedUDPPorts = value
	}
	if value, ok := hc.mutation.OverridePassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOverridePassword,
		})
		_node.OverridePassword = value
	}
	if value, ok := hc.mutation.Vars(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldVars,
		})
		_node.Vars = value
	}
	if value, ok := hc.mutation.UserGroups(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldUserGroups,
		})
		_node.UserGroups = value
	}
	if value, ok := hc.mutation.ProvisionSteps(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldProvisionSteps,
		})
		_node.ProvisionSteps = value
	}
	if value, ok := hc.mutation.ScheduledSteps(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldScheduledSteps,
		})
		_node.ScheduledSteps = value
	}
	if value, ok := hc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldTags,
		})
		_node.Tags = value
	}
	if nodes := hc.mutation.DiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   host.DiskTable,
			Columns: []string{host.DiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.UsersTable,
			Columns: []string{host.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.EnvironmentTable,
			Columns: []string{host.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.environment_hosts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.IncludedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.IncludedNetworksTable,
			Columns: host.IncludedNetworksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.DependOnHostDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependOnHostDependenciesTable,
			Columns: []string{host.DependOnHostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.RequiredByHostDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.RequiredByHostDependenciesTable,
			Columns: []string{host.RequiredByHostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostCreateBulk is the builder for creating many Host entities in bulk.
type HostCreateBulk struct {
	config
	builders []*HostCreate
}

// Save creates the Host entities in the database.
func (hcb *HostCreateBulk) Save(ctx context.Context) ([]*Host, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Host, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HostCreateBulk) SaveX(ctx context.Context) []*Host {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HostCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HostCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
