// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/google/uuid"
)

// GinFileMiddleware is the model entity for the GinFileMiddleware schema.
type GinFileMiddleware struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// URLID holds the value of the "url_id" field.
	URLID string `json:"url_id,omitempty"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty"`
	// Accessed holds the value of the "accessed" field.
	Accessed bool `json:"accessed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GinFileMiddlewareQuery when eager-loading is set.
	Edges GinFileMiddlewareEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// GinFileMiddlewareToProvisionedHost holds the value of the GinFileMiddlewareToProvisionedHost edge.
	HCLGinFileMiddlewareToProvisionedHost *ProvisionedHost `json:"GinFileMiddlewareToProvisionedHost,omitempty"`
	// GinFileMiddlewareToProvisioningStep holds the value of the GinFileMiddlewareToProvisioningStep edge.
	HCLGinFileMiddlewareToProvisioningStep *ProvisioningStep `json:"GinFileMiddlewareToProvisioningStep,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	server_task_server_task_to_gin_file_middleware *uuid.UUID
	selectValues                                   sql.SelectValues
}

// GinFileMiddlewareEdges holds the relations/edges for other nodes in the graph.
type GinFileMiddlewareEdges struct {
	// GinFileMiddlewareToProvisionedHost holds the value of the GinFileMiddlewareToProvisionedHost edge.
	GinFileMiddlewareToProvisionedHost *ProvisionedHost `json:"GinFileMiddlewareToProvisionedHost,omitempty"`
	// GinFileMiddlewareToProvisioningStep holds the value of the GinFileMiddlewareToProvisioningStep edge.
	GinFileMiddlewareToProvisioningStep *ProvisioningStep `json:"GinFileMiddlewareToProvisioningStep,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// GinFileMiddlewareToProvisionedHostOrErr returns the GinFileMiddlewareToProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GinFileMiddlewareEdges) GinFileMiddlewareToProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[0] {
		if e.GinFileMiddlewareToProvisionedHost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.GinFileMiddlewareToProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "GinFileMiddlewareToProvisionedHost"}
}

// GinFileMiddlewareToProvisioningStepOrErr returns the GinFileMiddlewareToProvisioningStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GinFileMiddlewareEdges) GinFileMiddlewareToProvisioningStepOrErr() (*ProvisioningStep, error) {
	if e.loadedTypes[1] {
		if e.GinFileMiddlewareToProvisioningStep == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provisioningstep.Label}
		}
		return e.GinFileMiddlewareToProvisioningStep, nil
	}
	return nil, &NotLoadedError{edge: "GinFileMiddlewareToProvisioningStep"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GinFileMiddleware) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ginfilemiddleware.FieldAccessed:
			values[i] = new(sql.NullBool)
		case ginfilemiddleware.FieldURLID, ginfilemiddleware.FieldFilePath:
			values[i] = new(sql.NullString)
		case ginfilemiddleware.FieldID:
			values[i] = new(uuid.UUID)
		case ginfilemiddleware.ForeignKeys[0]: // server_task_server_task_to_gin_file_middleware
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GinFileMiddleware fields.
func (gfm *GinFileMiddleware) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ginfilemiddleware.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gfm.ID = *value
			}
		case ginfilemiddleware.FieldURLID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_id", values[i])
			} else if value.Valid {
				gfm.URLID = value.String
			}
		case ginfilemiddleware.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				gfm.FilePath = value.String
			}
		case ginfilemiddleware.FieldAccessed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accessed", values[i])
			} else if value.Valid {
				gfm.Accessed = value.Bool
			}
		case ginfilemiddleware.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_task_server_task_to_gin_file_middleware", values[i])
			} else if value.Valid {
				gfm.server_task_server_task_to_gin_file_middleware = new(uuid.UUID)
				*gfm.server_task_server_task_to_gin_file_middleware = *value.S.(*uuid.UUID)
			}
		default:
			gfm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GinFileMiddleware.
// This includes values selected through modifiers, order, etc.
func (gfm *GinFileMiddleware) Value(name string) (ent.Value, error) {
	return gfm.selectValues.Get(name)
}

// QueryGinFileMiddlewareToProvisionedHost queries the "GinFileMiddlewareToProvisionedHost" edge of the GinFileMiddleware entity.
func (gfm *GinFileMiddleware) QueryGinFileMiddlewareToProvisionedHost() *ProvisionedHostQuery {
	return NewGinFileMiddlewareClient(gfm.config).QueryGinFileMiddlewareToProvisionedHost(gfm)
}

// QueryGinFileMiddlewareToProvisioningStep queries the "GinFileMiddlewareToProvisioningStep" edge of the GinFileMiddleware entity.
func (gfm *GinFileMiddleware) QueryGinFileMiddlewareToProvisioningStep() *ProvisioningStepQuery {
	return NewGinFileMiddlewareClient(gfm.config).QueryGinFileMiddlewareToProvisioningStep(gfm)
}

// Update returns a builder for updating this GinFileMiddleware.
// Note that you need to call GinFileMiddleware.Unwrap() before calling this method if this GinFileMiddleware
// was returned from a transaction, and the transaction was committed or rolled back.
func (gfm *GinFileMiddleware) Update() *GinFileMiddlewareUpdateOne {
	return NewGinFileMiddlewareClient(gfm.config).UpdateOne(gfm)
}

// Unwrap unwraps the GinFileMiddleware entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gfm *GinFileMiddleware) Unwrap() *GinFileMiddleware {
	_tx, ok := gfm.config.driver.(*txDriver)
	if !ok {
		panic("ent: GinFileMiddleware is not a transactional entity")
	}
	gfm.config.driver = _tx.drv
	return gfm
}

// String implements the fmt.Stringer.
func (gfm *GinFileMiddleware) String() string {
	var builder strings.Builder
	builder.WriteString("GinFileMiddleware(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gfm.ID))
	builder.WriteString("url_id=")
	builder.WriteString(gfm.URLID)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(gfm.FilePath)
	builder.WriteString(", ")
	builder.WriteString("accessed=")
	builder.WriteString(fmt.Sprintf("%v", gfm.Accessed))
	builder.WriteByte(')')
	return builder.String()
}

// GinFileMiddlewares is a parsable slice of GinFileMiddleware.
type GinFileMiddlewares []*GinFileMiddleware
