// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// BuildCreate is the builder for creating a Build entity.
type BuildCreate struct {
	config
	mutation *BuildMutation
	hooks    []Hook
}

// SetRevision sets the "revision" field.
func (bc *BuildCreate) SetRevision(i int) *BuildCreate {
	bc.mutation.SetRevision(i)
	return bc
}

// SetEnvironmentRevision sets the "environment_revision" field.
func (bc *BuildCreate) SetEnvironmentRevision(i int) *BuildCreate {
	bc.mutation.SetEnvironmentRevision(i)
	return bc
}

// SetVars sets the "vars" field.
func (bc *BuildCreate) SetVars(m map[string]string) *BuildCreate {
	bc.mutation.SetVars(m)
	return bc
}

// SetCompletedPlan sets the "completed_plan" field.
func (bc *BuildCreate) SetCompletedPlan(b bool) *BuildCreate {
	bc.mutation.SetCompletedPlan(b)
	return bc
}

// SetNillableCompletedPlan sets the "completed_plan" field if the given value is not nil.
func (bc *BuildCreate) SetNillableCompletedPlan(b *bool) *BuildCreate {
	if b != nil {
		bc.SetCompletedPlan(*b)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BuildCreate) SetID(u uuid.UUID) *BuildCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BuildCreate) SetNillableID(u *uuid.UUID) *BuildCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (bc *BuildCreate) SetStatusID(id uuid.UUID) *BuildCreate {
	bc.mutation.SetStatusID(id)
	return bc
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (bc *BuildCreate) SetNillableStatusID(id *uuid.UUID) *BuildCreate {
	if id != nil {
		bc = bc.SetStatusID(*id)
	}
	return bc
}

// SetStatus sets the "Status" edge to the Status entity.
func (bc *BuildCreate) SetStatus(s *Status) *BuildCreate {
	return bc.SetStatusID(s.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (bc *BuildCreate) SetEnvironmentID(id uuid.UUID) *BuildCreate {
	bc.mutation.SetEnvironmentID(id)
	return bc
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (bc *BuildCreate) SetEnvironment(e *Environment) *BuildCreate {
	return bc.SetEnvironmentID(e.ID)
}

// SetCompetitionID sets the "Competition" edge to the Competition entity by ID.
func (bc *BuildCreate) SetCompetitionID(id uuid.UUID) *BuildCreate {
	bc.mutation.SetCompetitionID(id)
	return bc
}

// SetCompetition sets the "Competition" edge to the Competition entity.
func (bc *BuildCreate) SetCompetition(c *Competition) *BuildCreate {
	return bc.SetCompetitionID(c.ID)
}

// SetLatestBuildCommitID sets the "LatestBuildCommit" edge to the BuildCommit entity by ID.
func (bc *BuildCreate) SetLatestBuildCommitID(id uuid.UUID) *BuildCreate {
	bc.mutation.SetLatestBuildCommitID(id)
	return bc
}

// SetNillableLatestBuildCommitID sets the "LatestBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (bc *BuildCreate) SetNillableLatestBuildCommitID(id *uuid.UUID) *BuildCreate {
	if id != nil {
		bc = bc.SetLatestBuildCommitID(*id)
	}
	return bc
}

// SetLatestBuildCommit sets the "LatestBuildCommit" edge to the BuildCommit entity.
func (bc *BuildCreate) SetLatestBuildCommit(b *BuildCommit) *BuildCreate {
	return bc.SetLatestBuildCommitID(b.ID)
}

// SetRepoCommitID sets the "RepoCommit" edge to the RepoCommit entity by ID.
func (bc *BuildCreate) SetRepoCommitID(id uuid.UUID) *BuildCreate {
	bc.mutation.SetRepoCommitID(id)
	return bc
}

// SetNillableRepoCommitID sets the "RepoCommit" edge to the RepoCommit entity by ID if the given value is not nil.
func (bc *BuildCreate) SetNillableRepoCommitID(id *uuid.UUID) *BuildCreate {
	if id != nil {
		bc = bc.SetRepoCommitID(*id)
	}
	return bc
}

// SetRepoCommit sets the "RepoCommit" edge to the RepoCommit entity.
func (bc *BuildCreate) SetRepoCommit(r *RepoCommit) *BuildCreate {
	return bc.SetRepoCommitID(r.ID)
}

// AddProvisionedNetworkIDs adds the "ProvisionedNetworks" edge to the ProvisionedNetwork entity by IDs.
func (bc *BuildCreate) AddProvisionedNetworkIDs(ids ...uuid.UUID) *BuildCreate {
	bc.mutation.AddProvisionedNetworkIDs(ids...)
	return bc
}

// AddProvisionedNetworks adds the "ProvisionedNetworks" edges to the ProvisionedNetwork entity.
func (bc *BuildCreate) AddProvisionedNetworks(p ...*ProvisionedNetwork) *BuildCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bc.AddProvisionedNetworkIDs(ids...)
}

// AddTeamIDs adds the "Teams" edge to the Team entity by IDs.
func (bc *BuildCreate) AddTeamIDs(ids ...uuid.UUID) *BuildCreate {
	bc.mutation.AddTeamIDs(ids...)
	return bc
}

// AddTeams adds the "Teams" edges to the Team entity.
func (bc *BuildCreate) AddTeams(t ...*Team) *BuildCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddTeamIDs(ids...)
}

// AddPlanIDs adds the "Plans" edge to the Plan entity by IDs.
func (bc *BuildCreate) AddPlanIDs(ids ...uuid.UUID) *BuildCreate {
	bc.mutation.AddPlanIDs(ids...)
	return bc
}

// AddPlans adds the "Plans" edges to the Plan entity.
func (bc *BuildCreate) AddPlans(p ...*Plan) *BuildCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bc.AddPlanIDs(ids...)
}

// AddBuildCommitIDs adds the "BuildCommits" edge to the BuildCommit entity by IDs.
func (bc *BuildCreate) AddBuildCommitIDs(ids ...uuid.UUID) *BuildCreate {
	bc.mutation.AddBuildCommitIDs(ids...)
	return bc
}

// AddBuildCommits adds the "BuildCommits" edges to the BuildCommit entity.
func (bc *BuildCreate) AddBuildCommits(b ...*BuildCommit) *BuildCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBuildCommitIDs(ids...)
}

// AddAdhocPlanIDs adds the "AdhocPlans" edge to the AdhocPlan entity by IDs.
func (bc *BuildCreate) AddAdhocPlanIDs(ids ...uuid.UUID) *BuildCreate {
	bc.mutation.AddAdhocPlanIDs(ids...)
	return bc
}

// AddAdhocPlans adds the "AdhocPlans" edges to the AdhocPlan entity.
func (bc *BuildCreate) AddAdhocPlans(a ...*AdhocPlan) *BuildCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bc.AddAdhocPlanIDs(ids...)
}

// AddAgentStatuseIDs adds the "AgentStatuses" edge to the AgentStatus entity by IDs.
func (bc *BuildCreate) AddAgentStatuseIDs(ids ...uuid.UUID) *BuildCreate {
	bc.mutation.AddAgentStatuseIDs(ids...)
	return bc
}

// AddAgentStatuses adds the "AgentStatuses" edges to the AgentStatus entity.
func (bc *BuildCreate) AddAgentStatuses(a ...*AgentStatus) *BuildCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bc.AddAgentStatuseIDs(ids...)
}

// AddServerTaskIDs adds the "ServerTasks" edge to the ServerTask entity by IDs.
func (bc *BuildCreate) AddServerTaskIDs(ids ...uuid.UUID) *BuildCreate {
	bc.mutation.AddServerTaskIDs(ids...)
	return bc
}

// AddServerTasks adds the "ServerTasks" edges to the ServerTask entity.
func (bc *BuildCreate) AddServerTasks(s ...*ServerTask) *BuildCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bc.AddServerTaskIDs(ids...)
}

// Mutation returns the BuildMutation object of the builder.
func (bc *BuildCreate) Mutation() *BuildMutation {
	return bc.mutation
}

// Save creates the Build in the database.
func (bc *BuildCreate) Save(ctx context.Context) (*Build, error) {
	var (
		err  error
		node *Build
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Build)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BuildMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BuildCreate) SaveX(ctx context.Context) *Build {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BuildCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BuildCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BuildCreate) defaults() {
	if _, ok := bc.mutation.CompletedPlan(); !ok {
		v := build.DefaultCompletedPlan
		bc.mutation.SetCompletedPlan(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := build.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BuildCreate) check() error {
	if _, ok := bc.mutation.Revision(); !ok {
		return &ValidationError{Name: "revision", err: errors.New(`ent: missing required field "Build.revision"`)}
	}
	if _, ok := bc.mutation.EnvironmentRevision(); !ok {
		return &ValidationError{Name: "environment_revision", err: errors.New(`ent: missing required field "Build.environment_revision"`)}
	}
	if _, ok := bc.mutation.Vars(); !ok {
		return &ValidationError{Name: "vars", err: errors.New(`ent: missing required field "Build.vars"`)}
	}
	if _, ok := bc.mutation.CompletedPlan(); !ok {
		return &ValidationError{Name: "completed_plan", err: errors.New(`ent: missing required field "Build.completed_plan"`)}
	}
	if _, ok := bc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "Environment", err: errors.New(`ent: missing required edge "Build.Environment"`)}
	}
	if _, ok := bc.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "Competition", err: errors.New(`ent: missing required edge "Build.Competition"`)}
	}
	return nil
}

func (bc *BuildCreate) sqlSave(ctx context.Context) (*Build, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (bc *BuildCreate) createSpec() (*Build, *sqlgraph.CreateSpec) {
	var (
		_node = &Build{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: build.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: build.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Revision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
		_node.Revision = value
	}
	if value, ok := bc.mutation.EnvironmentRevision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldEnvironmentRevision,
		})
		_node.EnvironmentRevision = value
	}
	if value, ok := bc.mutation.Vars(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: build.FieldVars,
		})
		_node.Vars = value
	}
	if value, ok := bc.mutation.CompletedPlan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: build.FieldCompletedPlan,
		})
		_node.CompletedPlan = value
	}
	if nodes := bc.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.StatusTable,
			Columns: []string{build.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.EnvironmentTable,
			Columns: []string{build.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.build_environment = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.CompetitionTable,
			Columns: []string{build.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.build_competition = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.LatestBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.LatestBuildCommitTable,
			Columns: []string{build.LatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.build_latest_build_commit = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.RepoCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.RepoCommitTable,
			Columns: []string{build.RepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repocommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.build_repo_commit = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ProvisionedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ProvisionedNetworksTable,
			Columns: []string{build.ProvisionedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.TeamsTable,
			Columns: []string{build.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.PlansTable,
			Columns: []string{build.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BuildCommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildCommitsTable,
			Columns: []string{build.BuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.AdhocPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AdhocPlansTable,
			Columns: []string{build.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.AgentStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AgentStatusesTable,
			Columns: []string{build.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ServerTasksTable,
			Columns: []string{build.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BuildCreateBulk is the builder for creating many Build entities in bulk.
type BuildCreateBulk struct {
	config
	builders []*BuildCreate
}

// Save creates the Build entities in the database.
func (bcb *BuildCreateBulk) Save(ctx context.Context) ([]*Build, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Build, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BuildMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BuildCreateBulk) SaveX(ctx context.Context) []*Build {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BuildCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BuildCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
