// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/go-git/go-git/v5/plumbing/object"
	"github.com/google/uuid"
)

// RepoCommitUpdate is the builder for updating RepoCommit entities.
type RepoCommitUpdate struct {
	config
	hooks    []Hook
	mutation *RepoCommitMutation
}

// Where appends a list predicates to the RepoCommitUpdate builder.
func (rcu *RepoCommitUpdate) Where(ps ...predicate.RepoCommit) *RepoCommitUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetRevision sets the "revision" field.
func (rcu *RepoCommitUpdate) SetRevision(i int) *RepoCommitUpdate {
	rcu.mutation.ResetRevision()
	rcu.mutation.SetRevision(i)
	return rcu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillableRevision(i *int) *RepoCommitUpdate {
	if i != nil {
		rcu.SetRevision(*i)
	}
	return rcu
}

// AddRevision adds i to the "revision" field.
func (rcu *RepoCommitUpdate) AddRevision(i int) *RepoCommitUpdate {
	rcu.mutation.AddRevision(i)
	return rcu
}

// SetHash sets the "hash" field.
func (rcu *RepoCommitUpdate) SetHash(s string) *RepoCommitUpdate {
	rcu.mutation.SetHash(s)
	return rcu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillableHash(s *string) *RepoCommitUpdate {
	if s != nil {
		rcu.SetHash(*s)
	}
	return rcu
}

// SetAuthor sets the "author" field.
func (rcu *RepoCommitUpdate) SetAuthor(o object.Signature) *RepoCommitUpdate {
	rcu.mutation.SetAuthor(o)
	return rcu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillableAuthor(o *object.Signature) *RepoCommitUpdate {
	if o != nil {
		rcu.SetAuthor(*o)
	}
	return rcu
}

// SetCommitter sets the "committer" field.
func (rcu *RepoCommitUpdate) SetCommitter(o object.Signature) *RepoCommitUpdate {
	rcu.mutation.SetCommitter(o)
	return rcu
}

// SetNillableCommitter sets the "committer" field if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillableCommitter(o *object.Signature) *RepoCommitUpdate {
	if o != nil {
		rcu.SetCommitter(*o)
	}
	return rcu
}

// SetPgpSignature sets the "pgp_signature" field.
func (rcu *RepoCommitUpdate) SetPgpSignature(s string) *RepoCommitUpdate {
	rcu.mutation.SetPgpSignature(s)
	return rcu
}

// SetNillablePgpSignature sets the "pgp_signature" field if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillablePgpSignature(s *string) *RepoCommitUpdate {
	if s != nil {
		rcu.SetPgpSignature(*s)
	}
	return rcu
}

// SetMessage sets the "message" field.
func (rcu *RepoCommitUpdate) SetMessage(s string) *RepoCommitUpdate {
	rcu.mutation.SetMessage(s)
	return rcu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillableMessage(s *string) *RepoCommitUpdate {
	if s != nil {
		rcu.SetMessage(*s)
	}
	return rcu
}

// SetTreeHash sets the "tree_hash" field.
func (rcu *RepoCommitUpdate) SetTreeHash(s string) *RepoCommitUpdate {
	rcu.mutation.SetTreeHash(s)
	return rcu
}

// SetNillableTreeHash sets the "tree_hash" field if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillableTreeHash(s *string) *RepoCommitUpdate {
	if s != nil {
		rcu.SetTreeHash(*s)
	}
	return rcu
}

// SetParentHashes sets the "parent_hashes" field.
func (rcu *RepoCommitUpdate) SetParentHashes(s []string) *RepoCommitUpdate {
	rcu.mutation.SetParentHashes(s)
	return rcu
}

// AppendParentHashes appends s to the "parent_hashes" field.
func (rcu *RepoCommitUpdate) AppendParentHashes(s []string) *RepoCommitUpdate {
	rcu.mutation.AppendParentHashes(s)
	return rcu
}

// SetRepositoryID sets the "Repository" edge to the Repository entity by ID.
func (rcu *RepoCommitUpdate) SetRepositoryID(id uuid.UUID) *RepoCommitUpdate {
	rcu.mutation.SetRepositoryID(id)
	return rcu
}

// SetNillableRepositoryID sets the "Repository" edge to the Repository entity by ID if the given value is not nil.
func (rcu *RepoCommitUpdate) SetNillableRepositoryID(id *uuid.UUID) *RepoCommitUpdate {
	if id != nil {
		rcu = rcu.SetRepositoryID(*id)
	}
	return rcu
}

// SetRepository sets the "Repository" edge to the Repository entity.
func (rcu *RepoCommitUpdate) SetRepository(r *Repository) *RepoCommitUpdate {
	return rcu.SetRepositoryID(r.ID)
}

// Mutation returns the RepoCommitMutation object of the builder.
func (rcu *RepoCommitUpdate) Mutation() *RepoCommitMutation {
	return rcu.mutation
}

// ClearRepository clears the "Repository" edge to the Repository entity.
func (rcu *RepoCommitUpdate) ClearRepository() *RepoCommitUpdate {
	rcu.mutation.ClearRepository()
	return rcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RepoCommitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RepoCommitUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RepoCommitUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RepoCommitUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcu *RepoCommitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(repocommit.Table, repocommit.Columns, sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Revision(); ok {
		_spec.SetField(repocommit.FieldRevision, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.AddedRevision(); ok {
		_spec.AddField(repocommit.FieldRevision, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.Hash(); ok {
		_spec.SetField(repocommit.FieldHash, field.TypeString, value)
	}
	if value, ok := rcu.mutation.Author(); ok {
		_spec.SetField(repocommit.FieldAuthor, field.TypeJSON, value)
	}
	if value, ok := rcu.mutation.Committer(); ok {
		_spec.SetField(repocommit.FieldCommitter, field.TypeJSON, value)
	}
	if value, ok := rcu.mutation.PgpSignature(); ok {
		_spec.SetField(repocommit.FieldPgpSignature, field.TypeString, value)
	}
	if value, ok := rcu.mutation.Message(); ok {
		_spec.SetField(repocommit.FieldMessage, field.TypeString, value)
	}
	if value, ok := rcu.mutation.TreeHash(); ok {
		_spec.SetField(repocommit.FieldTreeHash, field.TypeString, value)
	}
	if value, ok := rcu.mutation.ParentHashes(); ok {
		_spec.SetField(repocommit.FieldParentHashes, field.TypeJSON, value)
	}
	if value, ok := rcu.mutation.AppendedParentHashes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, repocommit.FieldParentHashes, value)
		})
	}
	if rcu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repocommit.RepositoryTable,
			Columns: []string{repocommit.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repocommit.RepositoryTable,
			Columns: []string{repocommit.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repocommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RepoCommitUpdateOne is the builder for updating a single RepoCommit entity.
type RepoCommitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepoCommitMutation
}

// SetRevision sets the "revision" field.
func (rcuo *RepoCommitUpdateOne) SetRevision(i int) *RepoCommitUpdateOne {
	rcuo.mutation.ResetRevision()
	rcuo.mutation.SetRevision(i)
	return rcuo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillableRevision(i *int) *RepoCommitUpdateOne {
	if i != nil {
		rcuo.SetRevision(*i)
	}
	return rcuo
}

// AddRevision adds i to the "revision" field.
func (rcuo *RepoCommitUpdateOne) AddRevision(i int) *RepoCommitUpdateOne {
	rcuo.mutation.AddRevision(i)
	return rcuo
}

// SetHash sets the "hash" field.
func (rcuo *RepoCommitUpdateOne) SetHash(s string) *RepoCommitUpdateOne {
	rcuo.mutation.SetHash(s)
	return rcuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillableHash(s *string) *RepoCommitUpdateOne {
	if s != nil {
		rcuo.SetHash(*s)
	}
	return rcuo
}

// SetAuthor sets the "author" field.
func (rcuo *RepoCommitUpdateOne) SetAuthor(o object.Signature) *RepoCommitUpdateOne {
	rcuo.mutation.SetAuthor(o)
	return rcuo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillableAuthor(o *object.Signature) *RepoCommitUpdateOne {
	if o != nil {
		rcuo.SetAuthor(*o)
	}
	return rcuo
}

// SetCommitter sets the "committer" field.
func (rcuo *RepoCommitUpdateOne) SetCommitter(o object.Signature) *RepoCommitUpdateOne {
	rcuo.mutation.SetCommitter(o)
	return rcuo
}

// SetNillableCommitter sets the "committer" field if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillableCommitter(o *object.Signature) *RepoCommitUpdateOne {
	if o != nil {
		rcuo.SetCommitter(*o)
	}
	return rcuo
}

// SetPgpSignature sets the "pgp_signature" field.
func (rcuo *RepoCommitUpdateOne) SetPgpSignature(s string) *RepoCommitUpdateOne {
	rcuo.mutation.SetPgpSignature(s)
	return rcuo
}

// SetNillablePgpSignature sets the "pgp_signature" field if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillablePgpSignature(s *string) *RepoCommitUpdateOne {
	if s != nil {
		rcuo.SetPgpSignature(*s)
	}
	return rcuo
}

// SetMessage sets the "message" field.
func (rcuo *RepoCommitUpdateOne) SetMessage(s string) *RepoCommitUpdateOne {
	rcuo.mutation.SetMessage(s)
	return rcuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillableMessage(s *string) *RepoCommitUpdateOne {
	if s != nil {
		rcuo.SetMessage(*s)
	}
	return rcuo
}

// SetTreeHash sets the "tree_hash" field.
func (rcuo *RepoCommitUpdateOne) SetTreeHash(s string) *RepoCommitUpdateOne {
	rcuo.mutation.SetTreeHash(s)
	return rcuo
}

// SetNillableTreeHash sets the "tree_hash" field if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillableTreeHash(s *string) *RepoCommitUpdateOne {
	if s != nil {
		rcuo.SetTreeHash(*s)
	}
	return rcuo
}

// SetParentHashes sets the "parent_hashes" field.
func (rcuo *RepoCommitUpdateOne) SetParentHashes(s []string) *RepoCommitUpdateOne {
	rcuo.mutation.SetParentHashes(s)
	return rcuo
}

// AppendParentHashes appends s to the "parent_hashes" field.
func (rcuo *RepoCommitUpdateOne) AppendParentHashes(s []string) *RepoCommitUpdateOne {
	rcuo.mutation.AppendParentHashes(s)
	return rcuo
}

// SetRepositoryID sets the "Repository" edge to the Repository entity by ID.
func (rcuo *RepoCommitUpdateOne) SetRepositoryID(id uuid.UUID) *RepoCommitUpdateOne {
	rcuo.mutation.SetRepositoryID(id)
	return rcuo
}

// SetNillableRepositoryID sets the "Repository" edge to the Repository entity by ID if the given value is not nil.
func (rcuo *RepoCommitUpdateOne) SetNillableRepositoryID(id *uuid.UUID) *RepoCommitUpdateOne {
	if id != nil {
		rcuo = rcuo.SetRepositoryID(*id)
	}
	return rcuo
}

// SetRepository sets the "Repository" edge to the Repository entity.
func (rcuo *RepoCommitUpdateOne) SetRepository(r *Repository) *RepoCommitUpdateOne {
	return rcuo.SetRepositoryID(r.ID)
}

// Mutation returns the RepoCommitMutation object of the builder.
func (rcuo *RepoCommitUpdateOne) Mutation() *RepoCommitMutation {
	return rcuo.mutation
}

// ClearRepository clears the "Repository" edge to the Repository entity.
func (rcuo *RepoCommitUpdateOne) ClearRepository() *RepoCommitUpdateOne {
	rcuo.mutation.ClearRepository()
	return rcuo
}

// Where appends a list predicates to the RepoCommitUpdate builder.
func (rcuo *RepoCommitUpdateOne) Where(ps ...predicate.RepoCommit) *RepoCommitUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RepoCommitUpdateOne) Select(field string, fields ...string) *RepoCommitUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RepoCommit entity.
func (rcuo *RepoCommitUpdateOne) Save(ctx context.Context) (*RepoCommit, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RepoCommitUpdateOne) SaveX(ctx context.Context) *RepoCommit {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RepoCommitUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RepoCommitUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcuo *RepoCommitUpdateOne) sqlSave(ctx context.Context) (_node *RepoCommit, err error) {
	_spec := sqlgraph.NewUpdateSpec(repocommit.Table, repocommit.Columns, sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RepoCommit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repocommit.FieldID)
		for _, f := range fields {
			if !repocommit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repocommit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Revision(); ok {
		_spec.SetField(repocommit.FieldRevision, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.AddedRevision(); ok {
		_spec.AddField(repocommit.FieldRevision, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.Hash(); ok {
		_spec.SetField(repocommit.FieldHash, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.Author(); ok {
		_spec.SetField(repocommit.FieldAuthor, field.TypeJSON, value)
	}
	if value, ok := rcuo.mutation.Committer(); ok {
		_spec.SetField(repocommit.FieldCommitter, field.TypeJSON, value)
	}
	if value, ok := rcuo.mutation.PgpSignature(); ok {
		_spec.SetField(repocommit.FieldPgpSignature, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.Message(); ok {
		_spec.SetField(repocommit.FieldMessage, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.TreeHash(); ok {
		_spec.SetField(repocommit.FieldTreeHash, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.ParentHashes(); ok {
		_spec.SetField(repocommit.FieldParentHashes, field.TypeJSON, value)
	}
	if value, ok := rcuo.mutation.AppendedParentHashes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, repocommit.FieldParentHashes, value)
		})
	}
	if rcuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repocommit.RepositoryTable,
			Columns: []string{repocommit.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repocommit.RepositoryTable,
			Columns: []string{repocommit.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RepoCommit{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repocommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
