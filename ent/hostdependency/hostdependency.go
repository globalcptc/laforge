// Code generated by ent, DO NOT EDIT.

package hostdependency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the hostdependency type in the database.
	Label = "host_dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHostID holds the string denoting the host_id field in the database.
	FieldHostID = "host_id"
	// FieldNetworkID holds the string denoting the network_id field in the database.
	FieldNetworkID = "network_id"
	// EdgeHostDependencyToDependOnHost holds the string denoting the hostdependencytodependonhost edge name in mutations.
	EdgeHostDependencyToDependOnHost = "HostDependencyToDependOnHost"
	// EdgeHostDependencyToDependByHost holds the string denoting the hostdependencytodependbyhost edge name in mutations.
	EdgeHostDependencyToDependByHost = "HostDependencyToDependByHost"
	// EdgeHostDependencyToNetwork holds the string denoting the hostdependencytonetwork edge name in mutations.
	EdgeHostDependencyToNetwork = "HostDependencyToNetwork"
	// EdgeHostDependencyToEnvironment holds the string denoting the hostdependencytoenvironment edge name in mutations.
	EdgeHostDependencyToEnvironment = "HostDependencyToEnvironment"
	// Table holds the table name of the hostdependency in the database.
	Table = "host_dependencies"
	// HostDependencyToDependOnHostTable is the table that holds the HostDependencyToDependOnHost relation/edge.
	HostDependencyToDependOnHostTable = "host_dependencies"
	// HostDependencyToDependOnHostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostDependencyToDependOnHostInverseTable = "hosts"
	// HostDependencyToDependOnHostColumn is the table column denoting the HostDependencyToDependOnHost relation/edge.
	HostDependencyToDependOnHostColumn = "host_dependency_host_dependency_to_depend_on_host"
	// HostDependencyToDependByHostTable is the table that holds the HostDependencyToDependByHost relation/edge.
	HostDependencyToDependByHostTable = "host_dependencies"
	// HostDependencyToDependByHostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostDependencyToDependByHostInverseTable = "hosts"
	// HostDependencyToDependByHostColumn is the table column denoting the HostDependencyToDependByHost relation/edge.
	HostDependencyToDependByHostColumn = "host_dependency_host_dependency_to_depend_by_host"
	// HostDependencyToNetworkTable is the table that holds the HostDependencyToNetwork relation/edge.
	HostDependencyToNetworkTable = "host_dependencies"
	// HostDependencyToNetworkInverseTable is the table name for the Network entity.
	// It exists in this package in order to avoid circular dependency with the "network" package.
	HostDependencyToNetworkInverseTable = "networks"
	// HostDependencyToNetworkColumn is the table column denoting the HostDependencyToNetwork relation/edge.
	HostDependencyToNetworkColumn = "host_dependency_host_dependency_to_network"
	// HostDependencyToEnvironmentTable is the table that holds the HostDependencyToEnvironment relation/edge.
	HostDependencyToEnvironmentTable = "host_dependencies"
	// HostDependencyToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	HostDependencyToEnvironmentInverseTable = "environments"
	// HostDependencyToEnvironmentColumn is the table column denoting the HostDependencyToEnvironment relation/edge.
	HostDependencyToEnvironmentColumn = "environment_environment_to_host_dependency"
)

// Columns holds all SQL columns for hostdependency fields.
var Columns = []string{
	FieldID,
	FieldHostID,
	FieldNetworkID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "host_dependencies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_environment_to_host_dependency",
	"host_dependency_host_dependency_to_depend_on_host",
	"host_dependency_host_dependency_to_depend_by_host",
	"host_dependency_host_dependency_to_network",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the HostDependency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHostID orders the results by the host_id field.
func ByHostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostID, opts...).ToFunc()
}

// ByNetworkID orders the results by the network_id field.
func ByNetworkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetworkID, opts...).ToFunc()
}

// ByHostDependencyToDependOnHostField orders the results by HostDependencyToDependOnHost field.
func ByHostDependencyToDependOnHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostDependencyToDependOnHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostDependencyToDependByHostField orders the results by HostDependencyToDependByHost field.
func ByHostDependencyToDependByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostDependencyToDependByHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostDependencyToNetworkField orders the results by HostDependencyToNetwork field.
func ByHostDependencyToNetworkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostDependencyToNetworkStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostDependencyToEnvironmentField orders the results by HostDependencyToEnvironment field.
func ByHostDependencyToEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostDependencyToEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}
func newHostDependencyToDependOnHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostDependencyToDependOnHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostDependencyToDependOnHostTable, HostDependencyToDependOnHostColumn),
	)
}
func newHostDependencyToDependByHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostDependencyToDependByHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostDependencyToDependByHostTable, HostDependencyToDependByHostColumn),
	)
}
func newHostDependencyToNetworkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostDependencyToNetworkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostDependencyToNetworkTable, HostDependencyToNetworkColumn),
	)
}
func newHostDependencyToEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostDependencyToEnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HostDependencyToEnvironmentTable, HostDependencyToEnvironmentColumn),
	)
}
