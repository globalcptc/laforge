// Code generated by ent, DO NOT EDIT.

package scheduledstep

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLTE(FieldID, id))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldHCLID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldDescription, v))
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldStep, v))
}

// Schedule applies equality check predicate on the "schedule" field. It's identical to ScheduleEQ.
func Schedule(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldSchedule, v))
}

// RunAt applies equality check predicate on the "run_at" field. It's identical to RunAtEQ.
func RunAt(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldRunAt, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContainsFold(FieldHCLID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContainsFold(FieldDescription, v))
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldStep, v))
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldStep, v))
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldStep, vs...))
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldStep, vs...))
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGT(FieldStep, v))
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGTE(FieldStep, v))
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLT(FieldStep, v))
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLTE(FieldStep, v))
}

// StepContains applies the Contains predicate on the "step" field.
func StepContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContains(FieldStep, v))
}

// StepHasPrefix applies the HasPrefix predicate on the "step" field.
func StepHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasPrefix(FieldStep, v))
}

// StepHasSuffix applies the HasSuffix predicate on the "step" field.
func StepHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasSuffix(FieldStep, v))
}

// StepEqualFold applies the EqualFold predicate on the "step" field.
func StepEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEqualFold(FieldStep, v))
}

// StepContainsFold applies the ContainsFold predicate on the "step" field.
func StepContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContainsFold(FieldStep, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldType, vs...))
}

// ScheduleEQ applies the EQ predicate on the "schedule" field.
func ScheduleEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldSchedule, v))
}

// ScheduleNEQ applies the NEQ predicate on the "schedule" field.
func ScheduleNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldSchedule, v))
}

// ScheduleIn applies the In predicate on the "schedule" field.
func ScheduleIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldSchedule, vs...))
}

// ScheduleNotIn applies the NotIn predicate on the "schedule" field.
func ScheduleNotIn(vs ...string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldSchedule, vs...))
}

// ScheduleGT applies the GT predicate on the "schedule" field.
func ScheduleGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGT(FieldSchedule, v))
}

// ScheduleGTE applies the GTE predicate on the "schedule" field.
func ScheduleGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGTE(FieldSchedule, v))
}

// ScheduleLT applies the LT predicate on the "schedule" field.
func ScheduleLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLT(FieldSchedule, v))
}

// ScheduleLTE applies the LTE predicate on the "schedule" field.
func ScheduleLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLTE(FieldSchedule, v))
}

// ScheduleContains applies the Contains predicate on the "schedule" field.
func ScheduleContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContains(FieldSchedule, v))
}

// ScheduleHasPrefix applies the HasPrefix predicate on the "schedule" field.
func ScheduleHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasPrefix(FieldSchedule, v))
}

// ScheduleHasSuffix applies the HasSuffix predicate on the "schedule" field.
func ScheduleHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldHasSuffix(FieldSchedule, v))
}

// ScheduleIsNil applies the IsNil predicate on the "schedule" field.
func ScheduleIsNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIsNull(FieldSchedule))
}

// ScheduleNotNil applies the NotNil predicate on the "schedule" field.
func ScheduleNotNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotNull(FieldSchedule))
}

// ScheduleEqualFold applies the EqualFold predicate on the "schedule" field.
func ScheduleEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEqualFold(FieldSchedule, v))
}

// ScheduleContainsFold applies the ContainsFold predicate on the "schedule" field.
func ScheduleContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldContainsFold(FieldSchedule, v))
}

// RunAtEQ applies the EQ predicate on the "run_at" field.
func RunAtEQ(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldEQ(FieldRunAt, v))
}

// RunAtNEQ applies the NEQ predicate on the "run_at" field.
func RunAtNEQ(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNEQ(FieldRunAt, v))
}

// RunAtIn applies the In predicate on the "run_at" field.
func RunAtIn(vs ...int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIn(FieldRunAt, vs...))
}

// RunAtNotIn applies the NotIn predicate on the "run_at" field.
func RunAtNotIn(vs ...int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotIn(FieldRunAt, vs...))
}

// RunAtGT applies the GT predicate on the "run_at" field.
func RunAtGT(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGT(FieldRunAt, v))
}

// RunAtGTE applies the GTE predicate on the "run_at" field.
func RunAtGTE(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldGTE(FieldRunAt, v))
}

// RunAtLT applies the LT predicate on the "run_at" field.
func RunAtLT(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLT(FieldRunAt, v))
}

// RunAtLTE applies the LTE predicate on the "run_at" field.
func RunAtLTE(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldLTE(FieldRunAt, v))
}

// RunAtIsNil applies the IsNil predicate on the "run_at" field.
func RunAtIsNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldIsNull(FieldRunAt))
}

// RunAtNotNil applies the NotNil predicate on the "run_at" field.
func RunAtNotNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.FieldNotNull(FieldRunAt))
}

// HasEnvironment applies the HasEdge predicate on the "Environment" edge.
func HasEnvironment() predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "Environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		step := newEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheduledStep) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheduledStep) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheduledStep) predicate.ScheduledStep {
	return predicate.ScheduledStep(sql.NotPredicates(p))
}
