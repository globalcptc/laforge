// Code generated by ent, DO NOT EDIT.

package scheduledstep

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// HclID applies equality check predicate on the "hcl_id" field. It's identical to HclIDEQ.
func HclID(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStep), v))
	})
}

// Schedule applies equality check predicate on the "schedule" field. It's identical to ScheduleEQ.
func Schedule(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchedule), v))
	})
}

// RunAt applies equality check predicate on the "run_at" field. It's identical to RunAtEQ.
func RunAt(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunAt), v))
	})
}

// HclIDEQ applies the EQ predicate on the "hcl_id" field.
func HclIDEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// HclIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HclIDNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHclID), v))
	})
}

// HclIDIn applies the In predicate on the "hcl_id" field.
func HclIDIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHclID), v...))
	})
}

// HclIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HclIDNotIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHclID), v...))
	})
}

// HclIDGT applies the GT predicate on the "hcl_id" field.
func HclIDGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHclID), v))
	})
}

// HclIDGTE applies the GTE predicate on the "hcl_id" field.
func HclIDGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHclID), v))
	})
}

// HclIDLT applies the LT predicate on the "hcl_id" field.
func HclIDLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHclID), v))
	})
}

// HclIDLTE applies the LTE predicate on the "hcl_id" field.
func HclIDLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHclID), v))
	})
}

// HclIDContains applies the Contains predicate on the "hcl_id" field.
func HclIDContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHclID), v))
	})
}

// HclIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HclIDHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHclID), v))
	})
}

// HclIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HclIDHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHclID), v))
	})
}

// HclIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HclIDEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHclID), v))
	})
}

// HclIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HclIDContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHclID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStep), v))
	})
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStep), v))
	})
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStep), v...))
	})
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStep), v...))
	})
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStep), v))
	})
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStep), v))
	})
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStep), v))
	})
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStep), v))
	})
}

// StepContains applies the Contains predicate on the "step" field.
func StepContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStep), v))
	})
}

// StepHasPrefix applies the HasPrefix predicate on the "step" field.
func StepHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStep), v))
	})
}

// StepHasSuffix applies the HasSuffix predicate on the "step" field.
func StepHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStep), v))
	})
}

// StepEqualFold applies the EqualFold predicate on the "step" field.
func StepEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStep), v))
	})
}

// StepContainsFold applies the ContainsFold predicate on the "step" field.
func StepContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStep), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// ScheduleEQ applies the EQ predicate on the "schedule" field.
func ScheduleEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchedule), v))
	})
}

// ScheduleNEQ applies the NEQ predicate on the "schedule" field.
func ScheduleNEQ(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSchedule), v))
	})
}

// ScheduleIn applies the In predicate on the "schedule" field.
func ScheduleIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSchedule), v...))
	})
}

// ScheduleNotIn applies the NotIn predicate on the "schedule" field.
func ScheduleNotIn(vs ...string) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSchedule), v...))
	})
}

// ScheduleGT applies the GT predicate on the "schedule" field.
func ScheduleGT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSchedule), v))
	})
}

// ScheduleGTE applies the GTE predicate on the "schedule" field.
func ScheduleGTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSchedule), v))
	})
}

// ScheduleLT applies the LT predicate on the "schedule" field.
func ScheduleLT(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSchedule), v))
	})
}

// ScheduleLTE applies the LTE predicate on the "schedule" field.
func ScheduleLTE(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSchedule), v))
	})
}

// ScheduleContains applies the Contains predicate on the "schedule" field.
func ScheduleContains(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSchedule), v))
	})
}

// ScheduleHasPrefix applies the HasPrefix predicate on the "schedule" field.
func ScheduleHasPrefix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSchedule), v))
	})
}

// ScheduleHasSuffix applies the HasSuffix predicate on the "schedule" field.
func ScheduleHasSuffix(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSchedule), v))
	})
}

// ScheduleIsNil applies the IsNil predicate on the "schedule" field.
func ScheduleIsNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSchedule)))
	})
}

// ScheduleNotNil applies the NotNil predicate on the "schedule" field.
func ScheduleNotNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSchedule)))
	})
}

// ScheduleEqualFold applies the EqualFold predicate on the "schedule" field.
func ScheduleEqualFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSchedule), v))
	})
}

// ScheduleContainsFold applies the ContainsFold predicate on the "schedule" field.
func ScheduleContainsFold(v string) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSchedule), v))
	})
}

// RunAtEQ applies the EQ predicate on the "run_at" field.
func RunAtEQ(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunAt), v))
	})
}

// RunAtNEQ applies the NEQ predicate on the "run_at" field.
func RunAtNEQ(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRunAt), v))
	})
}

// RunAtIn applies the In predicate on the "run_at" field.
func RunAtIn(vs ...int64) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRunAt), v...))
	})
}

// RunAtNotIn applies the NotIn predicate on the "run_at" field.
func RunAtNotIn(vs ...int64) predicate.ScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRunAt), v...))
	})
}

// RunAtGT applies the GT predicate on the "run_at" field.
func RunAtGT(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRunAt), v))
	})
}

// RunAtGTE applies the GTE predicate on the "run_at" field.
func RunAtGTE(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRunAt), v))
	})
}

// RunAtLT applies the LT predicate on the "run_at" field.
func RunAtLT(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRunAt), v))
	})
}

// RunAtLTE applies the LTE predicate on the "run_at" field.
func RunAtLTE(v int64) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRunAt), v))
	})
}

// RunAtIsNil applies the IsNil predicate on the "run_at" field.
func RunAtIsNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRunAt)))
	})
}

// RunAtNotNil applies the NotNil predicate on the "run_at" field.
func RunAtNotNil() predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRunAt)))
	})
}

// HasEnvironment applies the HasEdge predicate on the "Environment" edge.
func HasEnvironment() predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "Environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheduledStep) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheduledStep) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheduledStep) predicate.ScheduledStep {
	return predicate.ScheduledStep(func(s *sql.Selector) {
		p(s.Not())
	})
}
