// Code generated by ent, DO NOT EDIT.

package scheduledstep

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the scheduledstep type in the database.
	Label = "scheduled_step"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStep holds the string denoting the step field in the database.
	FieldStep = "step"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSchedule holds the string denoting the schedule field in the database.
	FieldSchedule = "schedule"
	// FieldRunAt holds the string denoting the run_at field in the database.
	FieldRunAt = "run_at"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// Table holds the table name of the scheduledstep in the database.
	Table = "scheduled_steps"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "scheduled_steps"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "environment_scheduled_steps"
)

// Columns holds all SQL columns for scheduledstep fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldName,
	FieldDescription,
	FieldStep,
	FieldType,
	FieldSchedule,
	FieldRunAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scheduled_steps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_scheduled_steps",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeCRON    Type = "CRON"
	TypeRUNONCE Type = "RUNONCE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCRON, TypeRUNONCE:
		return nil
	default:
		return fmt.Errorf("scheduledstep: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ScheduledStep queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStep orders the results by the step field.
func ByStep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStep, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySchedule orders the results by the schedule field.
func BySchedule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchedule, opts...).ToFunc()
}

// ByRunAt orders the results by the run_at field.
func ByRunAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunAt, opts...).ToFunc()
}

// ByEnvironmentField orders the results by Environment field.
func ByEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}
func newEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
