// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/google/uuid"
)

// AuthUser is the model entity for the AuthUser schema.
type AuthUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Occupation holds the value of the "occupation" field.
	Occupation string `json:"occupation,omitempty"`
	// PrivateKeyPath holds the value of the "private_key_path" field.
	PrivateKeyPath string `json:"private_key_path,omitempty"`
	// Role holds the value of the "role" field.
	Role authuser.Role `json:"role,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider authuser.Provider `json:"provider,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthUserQuery when eager-loading is set.
	Edges AuthUserEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// AuthUserToToken holds the value of the AuthUserToToken edge.
	HCLAuthUserToToken []*Token `json:"AuthUserToToken,omitempty"`
	// AuthUserToServerTasks holds the value of the AuthUserToServerTasks edge.
	HCLAuthUserToServerTasks []*ServerTask `json:"AuthUserToServerTasks,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	selectValues sql.SelectValues
}

// AuthUserEdges holds the relations/edges for other nodes in the graph.
type AuthUserEdges struct {
	// AuthUserToToken holds the value of the AuthUserToToken edge.
	AuthUserToToken []*Token `json:"AuthUserToToken,omitempty"`
	// AuthUserToServerTasks holds the value of the AuthUserToServerTasks edge.
	AuthUserToServerTasks []*ServerTask `json:"AuthUserToServerTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAuthUserToToken       map[string][]*Token
	namedAuthUserToServerTasks map[string][]*ServerTask
}

// AuthUserToTokenOrErr returns the AuthUserToToken value or an error if the edge
// was not loaded in eager-loading.
func (e AuthUserEdges) AuthUserToTokenOrErr() ([]*Token, error) {
	if e.loadedTypes[0] {
		return e.AuthUserToToken, nil
	}
	return nil, &NotLoadedError{edge: "AuthUserToToken"}
}

// AuthUserToServerTasksOrErr returns the AuthUserToServerTasks value or an error if the edge
// was not loaded in eager-loading.
func (e AuthUserEdges) AuthUserToServerTasksOrErr() ([]*ServerTask, error) {
	if e.loadedTypes[1] {
		return e.AuthUserToServerTasks, nil
	}
	return nil, &NotLoadedError{edge: "AuthUserToServerTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authuser.FieldUsername, authuser.FieldPassword, authuser.FieldFirstName, authuser.FieldLastName, authuser.FieldEmail, authuser.FieldPhone, authuser.FieldCompany, authuser.FieldOccupation, authuser.FieldPrivateKeyPath, authuser.FieldRole, authuser.FieldProvider:
			values[i] = new(sql.NullString)
		case authuser.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthUser fields.
func (au *AuthUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				au.ID = *value
			}
		case authuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				au.Username = value.String
			}
		case authuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				au.Password = value.String
			}
		case authuser.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				au.FirstName = value.String
			}
		case authuser.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				au.LastName = value.String
			}
		case authuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				au.Email = value.String
			}
		case authuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				au.Phone = value.String
			}
		case authuser.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				au.Company = value.String
			}
		case authuser.FieldOccupation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field occupation", values[i])
			} else if value.Valid {
				au.Occupation = value.String
			}
		case authuser.FieldPrivateKeyPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key_path", values[i])
			} else if value.Valid {
				au.PrivateKeyPath = value.String
			}
		case authuser.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				au.Role = authuser.Role(value.String)
			}
		case authuser.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				au.Provider = authuser.Provider(value.String)
			}
		default:
			au.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthUser.
// This includes values selected through modifiers, order, etc.
func (au *AuthUser) Value(name string) (ent.Value, error) {
	return au.selectValues.Get(name)
}

// QueryAuthUserToToken queries the "AuthUserToToken" edge of the AuthUser entity.
func (au *AuthUser) QueryAuthUserToToken() *TokenQuery {
	return NewAuthUserClient(au.config).QueryAuthUserToToken(au)
}

// QueryAuthUserToServerTasks queries the "AuthUserToServerTasks" edge of the AuthUser entity.
func (au *AuthUser) QueryAuthUserToServerTasks() *ServerTaskQuery {
	return NewAuthUserClient(au.config).QueryAuthUserToServerTasks(au)
}

// Update returns a builder for updating this AuthUser.
// Note that you need to call AuthUser.Unwrap() before calling this method if this AuthUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AuthUser) Update() *AuthUserUpdateOne {
	return NewAuthUserClient(au.config).UpdateOne(au)
}

// Unwrap unwraps the AuthUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AuthUser) Unwrap() *AuthUser {
	_tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthUser is not a transactional entity")
	}
	au.config.driver = _tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AuthUser) String() string {
	var builder strings.Builder
	builder.WriteString("AuthUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", au.ID))
	builder.WriteString("username=")
	builder.WriteString(au.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(au.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(au.LastName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(au.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(au.Phone)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(au.Company)
	builder.WriteString(", ")
	builder.WriteString("occupation=")
	builder.WriteString(au.Occupation)
	builder.WriteString(", ")
	builder.WriteString("private_key_path=")
	builder.WriteString(au.PrivateKeyPath)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", au.Role))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(fmt.Sprintf("%v", au.Provider))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthUserToToken returns the AuthUserToToken named value or an error if the edge was not
// loaded in eager-loading with this name.
func (au *AuthUser) NamedAuthUserToToken(name string) ([]*Token, error) {
	if au.Edges.namedAuthUserToToken == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := au.Edges.namedAuthUserToToken[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (au *AuthUser) appendNamedAuthUserToToken(name string, edges ...*Token) {
	if au.Edges.namedAuthUserToToken == nil {
		au.Edges.namedAuthUserToToken = make(map[string][]*Token)
	}
	if len(edges) == 0 {
		au.Edges.namedAuthUserToToken[name] = []*Token{}
	} else {
		au.Edges.namedAuthUserToToken[name] = append(au.Edges.namedAuthUserToToken[name], edges...)
	}
}

// NamedAuthUserToServerTasks returns the AuthUserToServerTasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (au *AuthUser) NamedAuthUserToServerTasks(name string) ([]*ServerTask, error) {
	if au.Edges.namedAuthUserToServerTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := au.Edges.namedAuthUserToServerTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (au *AuthUser) appendNamedAuthUserToServerTasks(name string, edges ...*ServerTask) {
	if au.Edges.namedAuthUserToServerTasks == nil {
		au.Edges.namedAuthUserToServerTasks = make(map[string][]*ServerTask)
	}
	if len(edges) == 0 {
		au.Edges.namedAuthUserToServerTasks[name] = []*ServerTask{}
	} else {
		au.Edges.namedAuthUserToServerTasks[name] = append(au.Edges.namedAuthUserToServerTasks[name], edges...)
	}
}

// AuthUsers is a parsable slice of AuthUser.
type AuthUsers []*AuthUser
