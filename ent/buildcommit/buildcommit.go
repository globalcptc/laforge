// Code generated by ent, DO NOT EDIT.

package buildcommit

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the buildcommit type in the database.
	Label = "build_commit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBuild holds the string denoting the build edge name in mutations.
	EdgeBuild = "Build"
	// EdgeServerTasks holds the string denoting the servertasks edge name in mutations.
	EdgeServerTasks = "ServerTasks"
	// EdgePlanDiffs holds the string denoting the plandiffs edge name in mutations.
	EdgePlanDiffs = "PlanDiffs"
	// Table holds the table name of the buildcommit in the database.
	Table = "build_commits"
	// BuildTable is the table that holds the Build relation/edge.
	BuildTable = "build_commits"
	// BuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	BuildInverseTable = "builds"
	// BuildColumn is the table column denoting the Build relation/edge.
	BuildColumn = "build_commit_build"
	// ServerTasksTable is the table that holds the ServerTasks relation/edge.
	ServerTasksTable = "server_tasks"
	// ServerTasksInverseTable is the table name for the ServerTask entity.
	// It exists in this package in order to avoid circular dependency with the "servertask" package.
	ServerTasksInverseTable = "server_tasks"
	// ServerTasksColumn is the table column denoting the ServerTasks relation/edge.
	ServerTasksColumn = "server_task_build_commit"
	// PlanDiffsTable is the table that holds the PlanDiffs relation/edge.
	PlanDiffsTable = "plan_diffs"
	// PlanDiffsInverseTable is the table name for the PlanDiff entity.
	// It exists in this package in order to avoid circular dependency with the "plandiff" package.
	PlanDiffsInverseTable = "plan_diffs"
	// PlanDiffsColumn is the table column denoting the PlanDiffs relation/edge.
	PlanDiffsColumn = "plan_diff_build_commit"
)

// Columns holds all SQL columns for buildcommit fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRevision,
	FieldState,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "build_commits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"build_commit_build",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeROOT    Type = "ROOT"
	TypeREBUILD Type = "REBUILD"
	TypeDELETE  Type = "DELETE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeROOT, TypeREBUILD, TypeDELETE:
		return nil
	default:
		return fmt.Errorf("buildcommit: invalid enum value for type field: %q", _type)
	}
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StatePLANNING   State = "PLANNING"
	StateINPROGRESS State = "INPROGRESS"
	StateAPPLIED    State = "APPLIED"
	StateCANCELLED  State = "CANCELLED"
	StateAPPROVED   State = "APPROVED"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StatePLANNING, StateINPROGRESS, StateAPPLIED, StateCANCELLED, StateAPPROVED:
		return nil
	default:
		return fmt.Errorf("buildcommit: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the BuildCommit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRevision orders the results by the revision field.
func ByRevision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevision, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBuildField orders the results by Build field.
func ByBuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTasksCount orders the results by ServerTasks count.
func ByServerTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServerTasksStep(), opts...)
	}
}

// ByServerTasks orders the results by ServerTasks terms.
func ByServerTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlanDiffsCount orders the results by PlanDiffs count.
func ByPlanDiffsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlanDiffsStep(), opts...)
	}
}

// ByPlanDiffs orders the results by PlanDiffs terms.
func ByPlanDiffs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanDiffsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BuildTable, BuildColumn),
	)
}
func newServerTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ServerTasksTable, ServerTasksColumn),
	)
}
func newPlanDiffsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanDiffsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PlanDiffsTable, PlanDiffsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e State) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *State) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = State(str)
	if err := StateValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}
