// Code generated by ent, DO NOT EDIT.

package authuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldPassword, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldLastName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldPhone, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldCompany, v))
}

// Occupation applies equality check predicate on the "occupation" field. It's identical to OccupationEQ.
func Occupation(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldOccupation, v))
}

// PrivateKeyPath applies equality check predicate on the "private_key_path" field. It's identical to PrivateKeyPathEQ.
func PrivateKeyPath(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldPrivateKeyPath, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldPassword, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldLastName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldPhone, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldCompany, v))
}

// OccupationEQ applies the EQ predicate on the "occupation" field.
func OccupationEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldOccupation, v))
}

// OccupationNEQ applies the NEQ predicate on the "occupation" field.
func OccupationNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldOccupation, v))
}

// OccupationIn applies the In predicate on the "occupation" field.
func OccupationIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldOccupation, vs...))
}

// OccupationNotIn applies the NotIn predicate on the "occupation" field.
func OccupationNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldOccupation, vs...))
}

// OccupationGT applies the GT predicate on the "occupation" field.
func OccupationGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldOccupation, v))
}

// OccupationGTE applies the GTE predicate on the "occupation" field.
func OccupationGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldOccupation, v))
}

// OccupationLT applies the LT predicate on the "occupation" field.
func OccupationLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldOccupation, v))
}

// OccupationLTE applies the LTE predicate on the "occupation" field.
func OccupationLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldOccupation, v))
}

// OccupationContains applies the Contains predicate on the "occupation" field.
func OccupationContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldOccupation, v))
}

// OccupationHasPrefix applies the HasPrefix predicate on the "occupation" field.
func OccupationHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldOccupation, v))
}

// OccupationHasSuffix applies the HasSuffix predicate on the "occupation" field.
func OccupationHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldOccupation, v))
}

// OccupationEqualFold applies the EqualFold predicate on the "occupation" field.
func OccupationEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldOccupation, v))
}

// OccupationContainsFold applies the ContainsFold predicate on the "occupation" field.
func OccupationContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldOccupation, v))
}

// PrivateKeyPathEQ applies the EQ predicate on the "private_key_path" field.
func PrivateKeyPathEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldPrivateKeyPath, v))
}

// PrivateKeyPathNEQ applies the NEQ predicate on the "private_key_path" field.
func PrivateKeyPathNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldPrivateKeyPath, v))
}

// PrivateKeyPathIn applies the In predicate on the "private_key_path" field.
func PrivateKeyPathIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldPrivateKeyPath, vs...))
}

// PrivateKeyPathNotIn applies the NotIn predicate on the "private_key_path" field.
func PrivateKeyPathNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldPrivateKeyPath, vs...))
}

// PrivateKeyPathGT applies the GT predicate on the "private_key_path" field.
func PrivateKeyPathGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldPrivateKeyPath, v))
}

// PrivateKeyPathGTE applies the GTE predicate on the "private_key_path" field.
func PrivateKeyPathGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldPrivateKeyPath, v))
}

// PrivateKeyPathLT applies the LT predicate on the "private_key_path" field.
func PrivateKeyPathLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldPrivateKeyPath, v))
}

// PrivateKeyPathLTE applies the LTE predicate on the "private_key_path" field.
func PrivateKeyPathLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldPrivateKeyPath, v))
}

// PrivateKeyPathContains applies the Contains predicate on the "private_key_path" field.
func PrivateKeyPathContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldPrivateKeyPath, v))
}

// PrivateKeyPathHasPrefix applies the HasPrefix predicate on the "private_key_path" field.
func PrivateKeyPathHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldPrivateKeyPath, v))
}

// PrivateKeyPathHasSuffix applies the HasSuffix predicate on the "private_key_path" field.
func PrivateKeyPathHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldPrivateKeyPath, v))
}

// PrivateKeyPathEqualFold applies the EqualFold predicate on the "private_key_path" field.
func PrivateKeyPathEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldPrivateKeyPath, v))
}

// PrivateKeyPathContainsFold applies the ContainsFold predicate on the "private_key_path" field.
func PrivateKeyPathContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldPrivateKeyPath, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldRole, vs...))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v Provider) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v Provider) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...Provider) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...Provider) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldProvider, vs...))
}

// HasTokens applies the HasEdge predicate on the "Tokens" edge.
func HasTokens() predicate.AuthUser {
	return predicate.AuthUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "Tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.Token) predicate.AuthUser {
	return predicate.AuthUser(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTasks applies the HasEdge predicate on the "ServerTasks" edge.
func HasServerTasks() predicate.AuthUser {
	return predicate.AuthUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ServerTasksTable, ServerTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTasksWith applies the HasEdge predicate on the "ServerTasks" edge with a given conditions (other predicates).
func HasServerTasksWith(preds ...predicate.ServerTask) predicate.AuthUser {
	return predicate.AuthUser(func(s *sql.Selector) {
		step := newServerTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthUser) predicate.AuthUser {
	return predicate.AuthUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthUser) predicate.AuthUser {
	return predicate.AuthUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthUser) predicate.AuthUser {
	return predicate.AuthUser(sql.NotPredicates(p))
}
