// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// FileDeleteUpdate is the builder for updating FileDelete entities.
type FileDeleteUpdate struct {
	config
	hooks    []Hook
	mutation *FileDeleteMutation
}

// Where appends a list predicates to the FileDeleteUpdate builder.
func (fdu *FileDeleteUpdate) Where(ps ...predicate.FileDelete) *FileDeleteUpdate {
	fdu.mutation.Where(ps...)
	return fdu
}

// SetHCLID sets the "hcl_id" field.
func (fdu *FileDeleteUpdate) SetHCLID(s string) *FileDeleteUpdate {
	fdu.mutation.SetHCLID(s)
	return fdu
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (fdu *FileDeleteUpdate) SetNillableHCLID(s *string) *FileDeleteUpdate {
	if s != nil {
		fdu.SetHCLID(*s)
	}
	return fdu
}

// SetPath sets the "path" field.
func (fdu *FileDeleteUpdate) SetPath(s string) *FileDeleteUpdate {
	fdu.mutation.SetPath(s)
	return fdu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fdu *FileDeleteUpdate) SetNillablePath(s *string) *FileDeleteUpdate {
	if s != nil {
		fdu.SetPath(*s)
	}
	return fdu
}

// SetTags sets the "tags" field.
func (fdu *FileDeleteUpdate) SetTags(m map[string]string) *FileDeleteUpdate {
	fdu.mutation.SetTags(m)
	return fdu
}

// SetFileDeleteToEnvironmentID sets the "FileDeleteToEnvironment" edge to the Environment entity by ID.
func (fdu *FileDeleteUpdate) SetFileDeleteToEnvironmentID(id uuid.UUID) *FileDeleteUpdate {
	fdu.mutation.SetFileDeleteToEnvironmentID(id)
	return fdu
}

// SetNillableFileDeleteToEnvironmentID sets the "FileDeleteToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (fdu *FileDeleteUpdate) SetNillableFileDeleteToEnvironmentID(id *uuid.UUID) *FileDeleteUpdate {
	if id != nil {
		fdu = fdu.SetFileDeleteToEnvironmentID(*id)
	}
	return fdu
}

// SetFileDeleteToEnvironment sets the "FileDeleteToEnvironment" edge to the Environment entity.
func (fdu *FileDeleteUpdate) SetFileDeleteToEnvironment(e *Environment) *FileDeleteUpdate {
	return fdu.SetFileDeleteToEnvironmentID(e.ID)
}

// Mutation returns the FileDeleteMutation object of the builder.
func (fdu *FileDeleteUpdate) Mutation() *FileDeleteMutation {
	return fdu.mutation
}

// ClearFileDeleteToEnvironment clears the "FileDeleteToEnvironment" edge to the Environment entity.
func (fdu *FileDeleteUpdate) ClearFileDeleteToEnvironment() *FileDeleteUpdate {
	fdu.mutation.ClearFileDeleteToEnvironment()
	return fdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdu *FileDeleteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fdu.sqlSave, fdu.mutation, fdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FileDeleteUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FileDeleteUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FileDeleteUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fdu *FileDeleteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(filedelete.Table, filedelete.Columns, sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID))
	if ps := fdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.HCLID(); ok {
		_spec.SetField(filedelete.FieldHCLID, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Path(); ok {
		_spec.SetField(filedelete.FieldPath, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Tags(); ok {
		_spec.SetField(filedelete.FieldTags, field.TypeJSON, value)
	}
	if fdu.mutation.FileDeleteToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedelete.FileDeleteToEnvironmentTable,
			Columns: []string{filedelete.FileDeleteToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fdu.mutation.FileDeleteToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedelete.FileDeleteToEnvironmentTable,
			Columns: []string{filedelete.FileDeleteToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedelete.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fdu.mutation.done = true
	return n, nil
}

// FileDeleteUpdateOne is the builder for updating a single FileDelete entity.
type FileDeleteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileDeleteMutation
}

// SetHCLID sets the "hcl_id" field.
func (fduo *FileDeleteUpdateOne) SetHCLID(s string) *FileDeleteUpdateOne {
	fduo.mutation.SetHCLID(s)
	return fduo
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (fduo *FileDeleteUpdateOne) SetNillableHCLID(s *string) *FileDeleteUpdateOne {
	if s != nil {
		fduo.SetHCLID(*s)
	}
	return fduo
}

// SetPath sets the "path" field.
func (fduo *FileDeleteUpdateOne) SetPath(s string) *FileDeleteUpdateOne {
	fduo.mutation.SetPath(s)
	return fduo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fduo *FileDeleteUpdateOne) SetNillablePath(s *string) *FileDeleteUpdateOne {
	if s != nil {
		fduo.SetPath(*s)
	}
	return fduo
}

// SetTags sets the "tags" field.
func (fduo *FileDeleteUpdateOne) SetTags(m map[string]string) *FileDeleteUpdateOne {
	fduo.mutation.SetTags(m)
	return fduo
}

// SetFileDeleteToEnvironmentID sets the "FileDeleteToEnvironment" edge to the Environment entity by ID.
func (fduo *FileDeleteUpdateOne) SetFileDeleteToEnvironmentID(id uuid.UUID) *FileDeleteUpdateOne {
	fduo.mutation.SetFileDeleteToEnvironmentID(id)
	return fduo
}

// SetNillableFileDeleteToEnvironmentID sets the "FileDeleteToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (fduo *FileDeleteUpdateOne) SetNillableFileDeleteToEnvironmentID(id *uuid.UUID) *FileDeleteUpdateOne {
	if id != nil {
		fduo = fduo.SetFileDeleteToEnvironmentID(*id)
	}
	return fduo
}

// SetFileDeleteToEnvironment sets the "FileDeleteToEnvironment" edge to the Environment entity.
func (fduo *FileDeleteUpdateOne) SetFileDeleteToEnvironment(e *Environment) *FileDeleteUpdateOne {
	return fduo.SetFileDeleteToEnvironmentID(e.ID)
}

// Mutation returns the FileDeleteMutation object of the builder.
func (fduo *FileDeleteUpdateOne) Mutation() *FileDeleteMutation {
	return fduo.mutation
}

// ClearFileDeleteToEnvironment clears the "FileDeleteToEnvironment" edge to the Environment entity.
func (fduo *FileDeleteUpdateOne) ClearFileDeleteToEnvironment() *FileDeleteUpdateOne {
	fduo.mutation.ClearFileDeleteToEnvironment()
	return fduo
}

// Where appends a list predicates to the FileDeleteUpdate builder.
func (fduo *FileDeleteUpdateOne) Where(ps ...predicate.FileDelete) *FileDeleteUpdateOne {
	fduo.mutation.Where(ps...)
	return fduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fduo *FileDeleteUpdateOne) Select(field string, fields ...string) *FileDeleteUpdateOne {
	fduo.fields = append([]string{field}, fields...)
	return fduo
}

// Save executes the query and returns the updated FileDelete entity.
func (fduo *FileDeleteUpdateOne) Save(ctx context.Context) (*FileDelete, error) {
	return withHooks(ctx, fduo.sqlSave, fduo.mutation, fduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FileDeleteUpdateOne) SaveX(ctx context.Context) *FileDelete {
	node, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fduo *FileDeleteUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FileDeleteUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fduo *FileDeleteUpdateOne) sqlSave(ctx context.Context) (_node *FileDelete, err error) {
	_spec := sqlgraph.NewUpdateSpec(filedelete.Table, filedelete.Columns, sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID))
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileDelete.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filedelete.FieldID)
		for _, f := range fields {
			if !filedelete.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filedelete.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fduo.mutation.HCLID(); ok {
		_spec.SetField(filedelete.FieldHCLID, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Path(); ok {
		_spec.SetField(filedelete.FieldPath, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Tags(); ok {
		_spec.SetField(filedelete.FieldTags, field.TypeJSON, value)
	}
	if fduo.mutation.FileDeleteToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedelete.FileDeleteToEnvironmentTable,
			Columns: []string{filedelete.FileDeleteToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fduo.mutation.FileDeleteToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedelete.FileDeleteToEnvironmentTable,
			Columns: []string{filedelete.FileDeleteToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileDelete{config: fduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedelete.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fduo.mutation.done = true
	return _node, nil
}
