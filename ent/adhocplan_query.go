// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// AdhocPlanQuery is the builder for querying AdhocPlan entities.
type AdhocPlanQuery struct {
	config
	ctx                     *QueryContext
	order                   []adhocplan.OrderOption
	inters                  []Interceptor
	predicates              []predicate.AdhocPlan
	withPrevAdhocPlans      *AdhocPlanQuery
	withNextAdhocPlans      *AdhocPlanQuery
	withBuild               *BuildQuery
	withStatus              *StatusQuery
	withAgentTask           *AgentTaskQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*AdhocPlan) error
	withNamedPrevAdhocPlans map[string]*AdhocPlanQuery
	withNamedNextAdhocPlans map[string]*AdhocPlanQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdhocPlanQuery builder.
func (apq *AdhocPlanQuery) Where(ps ...predicate.AdhocPlan) *AdhocPlanQuery {
	apq.predicates = append(apq.predicates, ps...)
	return apq
}

// Limit the number of records to be returned by this query.
func (apq *AdhocPlanQuery) Limit(limit int) *AdhocPlanQuery {
	apq.ctx.Limit = &limit
	return apq
}

// Offset to start from.
func (apq *AdhocPlanQuery) Offset(offset int) *AdhocPlanQuery {
	apq.ctx.Offset = &offset
	return apq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (apq *AdhocPlanQuery) Unique(unique bool) *AdhocPlanQuery {
	apq.ctx.Unique = &unique
	return apq
}

// Order specifies how the records should be ordered.
func (apq *AdhocPlanQuery) Order(o ...adhocplan.OrderOption) *AdhocPlanQuery {
	apq.order = append(apq.order, o...)
	return apq
}

// QueryPrevAdhocPlans chains the current query on the "PrevAdhocPlans" edge.
func (apq *AdhocPlanQuery) QueryPrevAdhocPlans() *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, adhocplan.PrevAdhocPlansTable, adhocplan.PrevAdhocPlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNextAdhocPlans chains the current query on the "NextAdhocPlans" edge.
func (apq *AdhocPlanQuery) QueryNextAdhocPlans() *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, adhocplan.NextAdhocPlansTable, adhocplan.NextAdhocPlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuild chains the current query on the "Build" edge.
func (apq *AdhocPlanQuery) QueryBuild() *BuildQuery {
	query := (&BuildClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adhocplan.BuildTable, adhocplan.BuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatus chains the current query on the "Status" edge.
func (apq *AdhocPlanQuery) QueryStatus() *StatusQuery {
	query := (&StatusClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, adhocplan.StatusTable, adhocplan.StatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAgentTask chains the current query on the "AgentTask" edge.
func (apq *AdhocPlanQuery) QueryAgentTask() *AgentTaskQuery {
	query := (&AgentTaskClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(agenttask.Table, agenttask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adhocplan.AgentTaskTable, adhocplan.AgentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdhocPlan entity from the query.
// Returns a *NotFoundError when no AdhocPlan was found.
func (apq *AdhocPlanQuery) First(ctx context.Context) (*AdhocPlan, error) {
	nodes, err := apq.Limit(1).All(setContextOp(ctx, apq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adhocplan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (apq *AdhocPlanQuery) FirstX(ctx context.Context) *AdhocPlan {
	node, err := apq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdhocPlan ID from the query.
// Returns a *NotFoundError when no AdhocPlan ID was found.
func (apq *AdhocPlanQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apq.Limit(1).IDs(setContextOp(ctx, apq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adhocplan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (apq *AdhocPlanQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := apq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdhocPlan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AdhocPlan entity is found.
// Returns a *NotFoundError when no AdhocPlan entities are found.
func (apq *AdhocPlanQuery) Only(ctx context.Context) (*AdhocPlan, error) {
	nodes, err := apq.Limit(2).All(setContextOp(ctx, apq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adhocplan.Label}
	default:
		return nil, &NotSingularError{adhocplan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (apq *AdhocPlanQuery) OnlyX(ctx context.Context) *AdhocPlan {
	node, err := apq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdhocPlan ID in the query.
// Returns a *NotSingularError when more than one AdhocPlan ID is found.
// Returns a *NotFoundError when no entities are found.
func (apq *AdhocPlanQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apq.Limit(2).IDs(setContextOp(ctx, apq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = &NotSingularError{adhocplan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (apq *AdhocPlanQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := apq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdhocPlans.
func (apq *AdhocPlanQuery) All(ctx context.Context) ([]*AdhocPlan, error) {
	ctx = setContextOp(ctx, apq.ctx, "All")
	if err := apq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AdhocPlan, *AdhocPlanQuery]()
	return withInterceptors[[]*AdhocPlan](ctx, apq, qr, apq.inters)
}

// AllX is like All, but panics if an error occurs.
func (apq *AdhocPlanQuery) AllX(ctx context.Context) []*AdhocPlan {
	nodes, err := apq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdhocPlan IDs.
func (apq *AdhocPlanQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if apq.ctx.Unique == nil && apq.path != nil {
		apq.Unique(true)
	}
	ctx = setContextOp(ctx, apq.ctx, "IDs")
	if err = apq.Select(adhocplan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (apq *AdhocPlanQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := apq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (apq *AdhocPlanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, apq.ctx, "Count")
	if err := apq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, apq, querierCount[*AdhocPlanQuery](), apq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (apq *AdhocPlanQuery) CountX(ctx context.Context) int {
	count, err := apq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (apq *AdhocPlanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, apq.ctx, "Exist")
	switch _, err := apq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (apq *AdhocPlanQuery) ExistX(ctx context.Context) bool {
	exist, err := apq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdhocPlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (apq *AdhocPlanQuery) Clone() *AdhocPlanQuery {
	if apq == nil {
		return nil
	}
	return &AdhocPlanQuery{
		config:             apq.config,
		ctx:                apq.ctx.Clone(),
		order:              append([]adhocplan.OrderOption{}, apq.order...),
		inters:             append([]Interceptor{}, apq.inters...),
		predicates:         append([]predicate.AdhocPlan{}, apq.predicates...),
		withPrevAdhocPlans: apq.withPrevAdhocPlans.Clone(),
		withNextAdhocPlans: apq.withNextAdhocPlans.Clone(),
		withBuild:          apq.withBuild.Clone(),
		withStatus:         apq.withStatus.Clone(),
		withAgentTask:      apq.withAgentTask.Clone(),
		// clone intermediate query.
		sql:  apq.sql.Clone(),
		path: apq.path,
	}
}

// WithPrevAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "PrevAdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithPrevAdhocPlans(opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withPrevAdhocPlans = query
	return apq
}

// WithNextAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "NextAdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithNextAdhocPlans(opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withNextAdhocPlans = query
	return apq
}

// WithBuild tells the query-builder to eager-load the nodes that are connected to
// the "Build" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithBuild(opts ...func(*BuildQuery)) *AdhocPlanQuery {
	query := (&BuildClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withBuild = query
	return apq
}

// WithStatus tells the query-builder to eager-load the nodes that are connected to
// the "Status" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithStatus(opts ...func(*StatusQuery)) *AdhocPlanQuery {
	query := (&StatusClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withStatus = query
	return apq
}

// WithAgentTask tells the query-builder to eager-load the nodes that are connected to
// the "AgentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithAgentTask(opts ...func(*AgentTaskQuery)) *AdhocPlanQuery {
	query := (&AgentTaskClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withAgentTask = query
	return apq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (apq *AdhocPlanQuery) GroupBy(field string, fields ...string) *AdhocPlanGroupBy {
	apq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AdhocPlanGroupBy{build: apq}
	grbuild.flds = &apq.ctx.Fields
	grbuild.label = adhocplan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (apq *AdhocPlanQuery) Select(fields ...string) *AdhocPlanSelect {
	apq.ctx.Fields = append(apq.ctx.Fields, fields...)
	sbuild := &AdhocPlanSelect{AdhocPlanQuery: apq}
	sbuild.label = adhocplan.Label
	sbuild.flds, sbuild.scan = &apq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AdhocPlanSelect configured with the given aggregations.
func (apq *AdhocPlanQuery) Aggregate(fns ...AggregateFunc) *AdhocPlanSelect {
	return apq.Select().Aggregate(fns...)
}

func (apq *AdhocPlanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range apq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, apq); err != nil {
				return err
			}
		}
	}
	for _, f := range apq.ctx.Fields {
		if !adhocplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if apq.path != nil {
		prev, err := apq.path(ctx)
		if err != nil {
			return err
		}
		apq.sql = prev
	}
	return nil
}

func (apq *AdhocPlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AdhocPlan, error) {
	var (
		nodes       = []*AdhocPlan{}
		withFKs     = apq.withFKs
		_spec       = apq.querySpec()
		loadedTypes = [5]bool{
			apq.withPrevAdhocPlans != nil,
			apq.withNextAdhocPlans != nil,
			apq.withBuild != nil,
			apq.withStatus != nil,
			apq.withAgentTask != nil,
		}
	)
	if apq.withBuild != nil || apq.withAgentTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, adhocplan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AdhocPlan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AdhocPlan{config: apq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(apq.modifiers) > 0 {
		_spec.Modifiers = apq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, apq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := apq.withPrevAdhocPlans; query != nil {
		if err := apq.loadPrevAdhocPlans(ctx, query, nodes,
			func(n *AdhocPlan) { n.Edges.PrevAdhocPlans = []*AdhocPlan{} },
			func(n *AdhocPlan, e *AdhocPlan) { n.Edges.PrevAdhocPlans = append(n.Edges.PrevAdhocPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withNextAdhocPlans; query != nil {
		if err := apq.loadNextAdhocPlans(ctx, query, nodes,
			func(n *AdhocPlan) { n.Edges.NextAdhocPlans = []*AdhocPlan{} },
			func(n *AdhocPlan, e *AdhocPlan) { n.Edges.NextAdhocPlans = append(n.Edges.NextAdhocPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withBuild; query != nil {
		if err := apq.loadBuild(ctx, query, nodes, nil,
			func(n *AdhocPlan, e *Build) { n.Edges.Build = e }); err != nil {
			return nil, err
		}
	}
	if query := apq.withStatus; query != nil {
		if err := apq.loadStatus(ctx, query, nodes, nil,
			func(n *AdhocPlan, e *Status) { n.Edges.Status = e }); err != nil {
			return nil, err
		}
	}
	if query := apq.withAgentTask; query != nil {
		if err := apq.loadAgentTask(ctx, query, nodes, nil,
			func(n *AdhocPlan, e *AgentTask) { n.Edges.AgentTask = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedPrevAdhocPlans {
		if err := apq.loadPrevAdhocPlans(ctx, query, nodes,
			func(n *AdhocPlan) { n.appendNamedPrevAdhocPlans(name) },
			func(n *AdhocPlan, e *AdhocPlan) { n.appendNamedPrevAdhocPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedNextAdhocPlans {
		if err := apq.loadNextAdhocPlans(ctx, query, nodes,
			func(n *AdhocPlan) { n.appendNamedNextAdhocPlans(name) },
			func(n *AdhocPlan, e *AdhocPlan) { n.appendNamedNextAdhocPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range apq.loadTotal {
		if err := apq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (apq *AdhocPlanQuery) loadPrevAdhocPlans(ctx context.Context, query *AdhocPlanQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *AdhocPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*AdhocPlan)
	nids := make(map[uuid.UUID]map[*AdhocPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(adhocplan.PrevAdhocPlansTable)
		s.Join(joinT).On(s.C(adhocplan.FieldID), joinT.C(adhocplan.PrevAdhocPlansPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(adhocplan.PrevAdhocPlansPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(adhocplan.PrevAdhocPlansPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*AdhocPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*AdhocPlan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "PrevAdhocPlans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *AdhocPlanQuery) loadNextAdhocPlans(ctx context.Context, query *AdhocPlanQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *AdhocPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*AdhocPlan)
	nids := make(map[uuid.UUID]map[*AdhocPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(adhocplan.NextAdhocPlansTable)
		s.Join(joinT).On(s.C(adhocplan.FieldID), joinT.C(adhocplan.NextAdhocPlansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(adhocplan.NextAdhocPlansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(adhocplan.NextAdhocPlansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*AdhocPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*AdhocPlan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "NextAdhocPlans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *AdhocPlanQuery) loadBuild(ctx context.Context, query *BuildQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *Build)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AdhocPlan)
	for i := range nodes {
		if nodes[i].adhoc_plan_build == nil {
			continue
		}
		fk := *nodes[i].adhoc_plan_build
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(build.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "adhoc_plan_build" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (apq *AdhocPlanQuery) loadStatus(ctx context.Context, query *StatusQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*AdhocPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(adhocplan.StatusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.adhoc_plan_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "adhoc_plan_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "adhoc_plan_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (apq *AdhocPlanQuery) loadAgentTask(ctx context.Context, query *AgentTaskQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *AgentTask)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AdhocPlan)
	for i := range nodes {
		if nodes[i].adhoc_plan_agent_task == nil {
			continue
		}
		fk := *nodes[i].adhoc_plan_agent_task
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agenttask.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "adhoc_plan_agent_task" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (apq *AdhocPlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := apq.querySpec()
	if len(apq.modifiers) > 0 {
		_spec.Modifiers = apq.modifiers
	}
	_spec.Node.Columns = apq.ctx.Fields
	if len(apq.ctx.Fields) > 0 {
		_spec.Unique = apq.ctx.Unique != nil && *apq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, apq.driver, _spec)
}

func (apq *AdhocPlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(adhocplan.Table, adhocplan.Columns, sqlgraph.NewFieldSpec(adhocplan.FieldID, field.TypeUUID))
	_spec.From = apq.sql
	if unique := apq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if apq.path != nil {
		_spec.Unique = true
	}
	if fields := apq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adhocplan.FieldID)
		for i := range fields {
			if fields[i] != adhocplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := apq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := apq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := apq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := apq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (apq *AdhocPlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(apq.driver.Dialect())
	t1 := builder.Table(adhocplan.Table)
	columns := apq.ctx.Fields
	if len(columns) == 0 {
		columns = adhocplan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if apq.sql != nil {
		selector = apq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if apq.ctx.Unique != nil && *apq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range apq.predicates {
		p(selector)
	}
	for _, p := range apq.order {
		p(selector)
	}
	if offset := apq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := apq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPrevAdhocPlans tells the query-builder to eager-load the nodes that are connected to the "PrevAdhocPlans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithNamedPrevAdhocPlans(name string, opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedPrevAdhocPlans == nil {
		apq.withNamedPrevAdhocPlans = make(map[string]*AdhocPlanQuery)
	}
	apq.withNamedPrevAdhocPlans[name] = query
	return apq
}

// WithNamedNextAdhocPlans tells the query-builder to eager-load the nodes that are connected to the "NextAdhocPlans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithNamedNextAdhocPlans(name string, opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedNextAdhocPlans == nil {
		apq.withNamedNextAdhocPlans = make(map[string]*AdhocPlanQuery)
	}
	apq.withNamedNextAdhocPlans[name] = query
	return apq
}

// AdhocPlanGroupBy is the group-by builder for AdhocPlan entities.
type AdhocPlanGroupBy struct {
	selector
	build *AdhocPlanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (apgb *AdhocPlanGroupBy) Aggregate(fns ...AggregateFunc) *AdhocPlanGroupBy {
	apgb.fns = append(apgb.fns, fns...)
	return apgb
}

// Scan applies the selector query and scans the result into the given value.
func (apgb *AdhocPlanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, apgb.build.ctx, "GroupBy")
	if err := apgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AdhocPlanQuery, *AdhocPlanGroupBy](ctx, apgb.build, apgb, apgb.build.inters, v)
}

func (apgb *AdhocPlanGroupBy) sqlScan(ctx context.Context, root *AdhocPlanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(apgb.fns))
	for _, fn := range apgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*apgb.flds)+len(apgb.fns))
		for _, f := range *apgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*apgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AdhocPlanSelect is the builder for selecting fields of AdhocPlan entities.
type AdhocPlanSelect struct {
	*AdhocPlanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aps *AdhocPlanSelect) Aggregate(fns ...AggregateFunc) *AdhocPlanSelect {
	aps.fns = append(aps.fns, fns...)
	return aps
}

// Scan applies the selector query and scans the result into the given value.
func (aps *AdhocPlanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aps.ctx, "Select")
	if err := aps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AdhocPlanQuery, *AdhocPlanSelect](ctx, aps.AdhocPlanQuery, aps, aps.inters, v)
}

func (aps *AdhocPlanSelect) sqlScan(ctx context.Context, root *AdhocPlanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aps.fns))
	for _, fn := range aps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
