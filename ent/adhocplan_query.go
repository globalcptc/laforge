// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// AdhocPlanQuery is the builder for querying AdhocPlan entities.
type AdhocPlanQuery struct {
	config
	limit              *int
	offset             *int
	unique             *bool
	order              []OrderFunc
	fields             []string
	predicates         []predicate.AdhocPlan
	withPrevAdhocPlans *AdhocPlanQuery
	withNextAdhocPlans *AdhocPlanQuery
	withBuild          *BuildQuery
	withStatus         *StatusQuery
	withAgentTask      *AgentTaskQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdhocPlanQuery builder.
func (apq *AdhocPlanQuery) Where(ps ...predicate.AdhocPlan) *AdhocPlanQuery {
	apq.predicates = append(apq.predicates, ps...)
	return apq
}

// Limit adds a limit step to the query.
func (apq *AdhocPlanQuery) Limit(limit int) *AdhocPlanQuery {
	apq.limit = &limit
	return apq
}

// Offset adds an offset step to the query.
func (apq *AdhocPlanQuery) Offset(offset int) *AdhocPlanQuery {
	apq.offset = &offset
	return apq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (apq *AdhocPlanQuery) Unique(unique bool) *AdhocPlanQuery {
	apq.unique = &unique
	return apq
}

// Order adds an order step to the query.
func (apq *AdhocPlanQuery) Order(o ...OrderFunc) *AdhocPlanQuery {
	apq.order = append(apq.order, o...)
	return apq
}

// QueryPrevAdhocPlans chains the current query on the "PrevAdhocPlans" edge.
func (apq *AdhocPlanQuery) QueryPrevAdhocPlans() *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, adhocplan.PrevAdhocPlansTable, adhocplan.PrevAdhocPlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNextAdhocPlans chains the current query on the "NextAdhocPlans" edge.
func (apq *AdhocPlanQuery) QueryNextAdhocPlans() *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, adhocplan.NextAdhocPlansTable, adhocplan.NextAdhocPlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuild chains the current query on the "Build" edge.
func (apq *AdhocPlanQuery) QueryBuild() *BuildQuery {
	query := &BuildQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adhocplan.BuildTable, adhocplan.BuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatus chains the current query on the "Status" edge.
func (apq *AdhocPlanQuery) QueryStatus() *StatusQuery {
	query := &StatusQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, adhocplan.StatusTable, adhocplan.StatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAgentTask chains the current query on the "AgentTask" edge.
func (apq *AdhocPlanQuery) QueryAgentTask() *AgentTaskQuery {
	query := &AgentTaskQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(agenttask.Table, agenttask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adhocplan.AgentTaskTable, adhocplan.AgentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdhocPlan entity from the query.
// Returns a *NotFoundError when no AdhocPlan was found.
func (apq *AdhocPlanQuery) First(ctx context.Context) (*AdhocPlan, error) {
	nodes, err := apq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adhocplan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (apq *AdhocPlanQuery) FirstX(ctx context.Context) *AdhocPlan {
	node, err := apq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdhocPlan ID from the query.
// Returns a *NotFoundError when no AdhocPlan ID was found.
func (apq *AdhocPlanQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adhocplan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (apq *AdhocPlanQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := apq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdhocPlan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AdhocPlan entity is found.
// Returns a *NotFoundError when no AdhocPlan entities are found.
func (apq *AdhocPlanQuery) Only(ctx context.Context) (*AdhocPlan, error) {
	nodes, err := apq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adhocplan.Label}
	default:
		return nil, &NotSingularError{adhocplan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (apq *AdhocPlanQuery) OnlyX(ctx context.Context) *AdhocPlan {
	node, err := apq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdhocPlan ID in the query.
// Returns a *NotSingularError when more than one AdhocPlan ID is found.
// Returns a *NotFoundError when no entities are found.
func (apq *AdhocPlanQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = &NotSingularError{adhocplan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (apq *AdhocPlanQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := apq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdhocPlans.
func (apq *AdhocPlanQuery) All(ctx context.Context) ([]*AdhocPlan, error) {
	if err := apq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return apq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (apq *AdhocPlanQuery) AllX(ctx context.Context) []*AdhocPlan {
	nodes, err := apq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdhocPlan IDs.
func (apq *AdhocPlanQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := apq.Select(adhocplan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (apq *AdhocPlanQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := apq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (apq *AdhocPlanQuery) Count(ctx context.Context) (int, error) {
	if err := apq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return apq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (apq *AdhocPlanQuery) CountX(ctx context.Context) int {
	count, err := apq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (apq *AdhocPlanQuery) Exist(ctx context.Context) (bool, error) {
	if err := apq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return apq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (apq *AdhocPlanQuery) ExistX(ctx context.Context) bool {
	exist, err := apq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdhocPlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (apq *AdhocPlanQuery) Clone() *AdhocPlanQuery {
	if apq == nil {
		return nil
	}
	return &AdhocPlanQuery{
		config:             apq.config,
		limit:              apq.limit,
		offset:             apq.offset,
		order:              append([]OrderFunc{}, apq.order...),
		predicates:         append([]predicate.AdhocPlan{}, apq.predicates...),
		withPrevAdhocPlans: apq.withPrevAdhocPlans.Clone(),
		withNextAdhocPlans: apq.withNextAdhocPlans.Clone(),
		withBuild:          apq.withBuild.Clone(),
		withStatus:         apq.withStatus.Clone(),
		withAgentTask:      apq.withAgentTask.Clone(),
		// clone intermediate query.
		sql:    apq.sql.Clone(),
		path:   apq.path,
		unique: apq.unique,
	}
}

// WithPrevAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "PrevAdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithPrevAdhocPlans(opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withPrevAdhocPlans = query
	return apq
}

// WithNextAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "NextAdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithNextAdhocPlans(opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withNextAdhocPlans = query
	return apq
}

// WithBuild tells the query-builder to eager-load the nodes that are connected to
// the "Build" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithBuild(opts ...func(*BuildQuery)) *AdhocPlanQuery {
	query := &BuildQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withBuild = query
	return apq
}

// WithStatus tells the query-builder to eager-load the nodes that are connected to
// the "Status" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithStatus(opts ...func(*StatusQuery)) *AdhocPlanQuery {
	query := &StatusQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withStatus = query
	return apq
}

// WithAgentTask tells the query-builder to eager-load the nodes that are connected to
// the "AgentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithAgentTask(opts ...func(*AgentTaskQuery)) *AdhocPlanQuery {
	query := &AgentTaskQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withAgentTask = query
	return apq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (apq *AdhocPlanQuery) GroupBy(field string, fields ...string) *AdhocPlanGroupBy {
	grbuild := &AdhocPlanGroupBy{config: apq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return apq.sqlQuery(ctx), nil
	}
	grbuild.label = adhocplan.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (apq *AdhocPlanQuery) Select(fields ...string) *AdhocPlanSelect {
	apq.fields = append(apq.fields, fields...)
	selbuild := &AdhocPlanSelect{AdhocPlanQuery: apq}
	selbuild.label = adhocplan.Label
	selbuild.flds, selbuild.scan = &apq.fields, selbuild.Scan
	return selbuild
}

func (apq *AdhocPlanQuery) prepareQuery(ctx context.Context) error {
	for _, f := range apq.fields {
		if !adhocplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if apq.path != nil {
		prev, err := apq.path(ctx)
		if err != nil {
			return err
		}
		apq.sql = prev
	}
	return nil
}

func (apq *AdhocPlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AdhocPlan, error) {
	var (
		nodes       = []*AdhocPlan{}
		withFKs     = apq.withFKs
		_spec       = apq.querySpec()
		loadedTypes = [5]bool{
			apq.withPrevAdhocPlans != nil,
			apq.withNextAdhocPlans != nil,
			apq.withBuild != nil,
			apq.withStatus != nil,
			apq.withAgentTask != nil,
		}
	)
	if apq.withBuild != nil || apq.withAgentTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, adhocplan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*AdhocPlan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &AdhocPlan{config: apq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, apq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := apq.withPrevAdhocPlans; query != nil {
		if err := apq.loadPrevAdhocPlans(ctx, query, nodes,
			func(n *AdhocPlan) { n.Edges.PrevAdhocPlans = []*AdhocPlan{} },
			func(n *AdhocPlan, e *AdhocPlan) { n.Edges.PrevAdhocPlans = append(n.Edges.PrevAdhocPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withNextAdhocPlans; query != nil {
		if err := apq.loadNextAdhocPlans(ctx, query, nodes,
			func(n *AdhocPlan) { n.Edges.NextAdhocPlans = []*AdhocPlan{} },
			func(n *AdhocPlan, e *AdhocPlan) { n.Edges.NextAdhocPlans = append(n.Edges.NextAdhocPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withBuild; query != nil {
		if err := apq.loadBuild(ctx, query, nodes, nil,
			func(n *AdhocPlan, e *Build) { n.Edges.Build = e }); err != nil {
			return nil, err
		}
	}
	if query := apq.withStatus; query != nil {
		if err := apq.loadStatus(ctx, query, nodes, nil,
			func(n *AdhocPlan, e *Status) { n.Edges.Status = e }); err != nil {
			return nil, err
		}
	}
	if query := apq.withAgentTask; query != nil {
		if err := apq.loadAgentTask(ctx, query, nodes, nil,
			func(n *AdhocPlan, e *AgentTask) { n.Edges.AgentTask = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (apq *AdhocPlanQuery) loadPrevAdhocPlans(ctx context.Context, query *AdhocPlanQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *AdhocPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*AdhocPlan)
	nids := make(map[uuid.UUID]map[*AdhocPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(adhocplan.PrevAdhocPlansTable)
		s.Join(joinT).On(s.C(adhocplan.FieldID), joinT.C(adhocplan.PrevAdhocPlansPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(adhocplan.PrevAdhocPlansPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(adhocplan.PrevAdhocPlansPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*AdhocPlan]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "PrevAdhocPlans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *AdhocPlanQuery) loadNextAdhocPlans(ctx context.Context, query *AdhocPlanQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *AdhocPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*AdhocPlan)
	nids := make(map[uuid.UUID]map[*AdhocPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(adhocplan.NextAdhocPlansTable)
		s.Join(joinT).On(s.C(adhocplan.FieldID), joinT.C(adhocplan.NextAdhocPlansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(adhocplan.NextAdhocPlansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(adhocplan.NextAdhocPlansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*AdhocPlan]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "NextAdhocPlans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *AdhocPlanQuery) loadBuild(ctx context.Context, query *BuildQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *Build)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AdhocPlan)
	for i := range nodes {
		if nodes[i].adhoc_plan_build == nil {
			continue
		}
		fk := *nodes[i].adhoc_plan_build
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(build.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "adhoc_plan_build" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (apq *AdhocPlanQuery) loadStatus(ctx context.Context, query *StatusQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*AdhocPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(adhocplan.StatusColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.adhoc_plan_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "adhoc_plan_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "adhoc_plan_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (apq *AdhocPlanQuery) loadAgentTask(ctx context.Context, query *AgentTaskQuery, nodes []*AdhocPlan, init func(*AdhocPlan), assign func(*AdhocPlan, *AgentTask)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AdhocPlan)
	for i := range nodes {
		if nodes[i].adhoc_plan_agent_task == nil {
			continue
		}
		fk := *nodes[i].adhoc_plan_agent_task
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(agenttask.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "adhoc_plan_agent_task" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (apq *AdhocPlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := apq.querySpec()
	_spec.Node.Columns = apq.fields
	if len(apq.fields) > 0 {
		_spec.Unique = apq.unique != nil && *apq.unique
	}
	return sqlgraph.CountNodes(ctx, apq.driver, _spec)
}

func (apq *AdhocPlanQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := apq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (apq *AdhocPlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adhocplan.Table,
			Columns: adhocplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: adhocplan.FieldID,
			},
		},
		From:   apq.sql,
		Unique: true,
	}
	if unique := apq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := apq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adhocplan.FieldID)
		for i := range fields {
			if fields[i] != adhocplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := apq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := apq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := apq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := apq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (apq *AdhocPlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(apq.driver.Dialect())
	t1 := builder.Table(adhocplan.Table)
	columns := apq.fields
	if len(columns) == 0 {
		columns = adhocplan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if apq.sql != nil {
		selector = apq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if apq.unique != nil && *apq.unique {
		selector.Distinct()
	}
	for _, p := range apq.predicates {
		p(selector)
	}
	for _, p := range apq.order {
		p(selector)
	}
	if offset := apq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := apq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdhocPlanGroupBy is the group-by builder for AdhocPlan entities.
type AdhocPlanGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (apgb *AdhocPlanGroupBy) Aggregate(fns ...AggregateFunc) *AdhocPlanGroupBy {
	apgb.fns = append(apgb.fns, fns...)
	return apgb
}

// Scan applies the group-by query and scans the result into the given value.
func (apgb *AdhocPlanGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := apgb.path(ctx)
	if err != nil {
		return err
	}
	apgb.sql = query
	return apgb.sqlScan(ctx, v)
}

func (apgb *AdhocPlanGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range apgb.fields {
		if !adhocplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := apgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (apgb *AdhocPlanGroupBy) sqlQuery() *sql.Selector {
	selector := apgb.sql.Select()
	aggregation := make([]string, 0, len(apgb.fns))
	for _, fn := range apgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(apgb.fields)+len(apgb.fns))
		for _, f := range apgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(apgb.fields...)...)
}

// AdhocPlanSelect is the builder for selecting fields of AdhocPlan entities.
type AdhocPlanSelect struct {
	*AdhocPlanQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aps *AdhocPlanSelect) Scan(ctx context.Context, v interface{}) error {
	if err := aps.prepareQuery(ctx); err != nil {
		return err
	}
	aps.sql = aps.AdhocPlanQuery.sqlQuery(ctx)
	return aps.sqlScan(ctx, v)
}

func (aps *AdhocPlanSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aps.sql.Query()
	if err := aps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
