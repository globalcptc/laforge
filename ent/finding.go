// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/google/uuid"
)

// Finding is the model entity for the Finding schema.
type Finding struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,attr"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty" hcl:"description,optional"`
	// Severity holds the value of the "severity" field.
	Severity finding.Severity `json:"severity,omitempty" hcl:"severity,attr"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty finding.Difficulty `json:"difficulty,omitempty" hcl:"difficulty,attr"`
	// Tags holds the value of the "tags" field.
	Tags map[string]string `json:"tags,omitempty" hcl:"tags,optional"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FindingQuery when eager-loading is set.
	Edges FindingEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Users holds the value of the Users edge.
	HCLUsers []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Host holds the value of the Host edge.
	HCLHost *Host `json:"Host,omitempty"`
	// Script holds the value of the Script edge.
	HCLScript *Script `json:"Script,omitempty"`
	// Environment holds the value of the Environment edge.
	HCLEnvironment *Environment `json:"Environment,omitempty"`
	//
	environment_findings *uuid.UUID
	finding_host         *uuid.UUID
	script_findings      *uuid.UUID
}

// FindingEdges holds the relations/edges for other nodes in the graph.
type FindingEdges struct {
	// Users holds the value of the Users edge.
	Users []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Host holds the value of the Host edge.
	Host *Host `json:"Host,omitempty"`
	// Script holds the value of the Script edge.
	Script *Script `json:"Script,omitempty"`
	// Environment holds the value of the Environment edge.
	Environment *Environment `json:"Environment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e FindingEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "Users"}
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FindingEdges) HostOrErr() (*Host, error) {
	if e.loadedTypes[1] {
		if e.Host == nil {
			// The edge Host was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "Host"}
}

// ScriptOrErr returns the Script value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FindingEdges) ScriptOrErr() (*Script, error) {
	if e.loadedTypes[2] {
		if e.Script == nil {
			// The edge Script was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: script.Label}
		}
		return e.Script, nil
	}
	return nil, &NotLoadedError{edge: "Script"}
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FindingEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[3] {
		if e.Environment == nil {
			// The edge Environment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "Environment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Finding) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case finding.FieldTags:
			values[i] = new([]byte)
		case finding.FieldName, finding.FieldDescription, finding.FieldSeverity, finding.FieldDifficulty:
			values[i] = new(sql.NullString)
		case finding.FieldID:
			values[i] = new(uuid.UUID)
		case finding.ForeignKeys[0]: // environment_findings
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case finding.ForeignKeys[1]: // finding_host
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case finding.ForeignKeys[2]: // script_findings
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Finding", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Finding fields.
func (f *Finding) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case finding.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case finding.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case finding.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case finding.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				f.Severity = finding.Severity(value.String)
			}
		case finding.FieldDifficulty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				f.Difficulty = finding.Difficulty(value.String)
			}
		case finding.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case finding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field environment_findings", values[i])
			} else if value.Valid {
				f.environment_findings = new(uuid.UUID)
				*f.environment_findings = *value.S.(*uuid.UUID)
			}
		case finding.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field finding_host", values[i])
			} else if value.Valid {
				f.finding_host = new(uuid.UUID)
				*f.finding_host = *value.S.(*uuid.UUID)
			}
		case finding.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field script_findings", values[i])
			} else if value.Valid {
				f.script_findings = new(uuid.UUID)
				*f.script_findings = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUsers queries the "Users" edge of the Finding entity.
func (f *Finding) QueryUsers() *UserQuery {
	return (&FindingClient{config: f.config}).QueryUsers(f)
}

// QueryHost queries the "Host" edge of the Finding entity.
func (f *Finding) QueryHost() *HostQuery {
	return (&FindingClient{config: f.config}).QueryHost(f)
}

// QueryScript queries the "Script" edge of the Finding entity.
func (f *Finding) QueryScript() *ScriptQuery {
	return (&FindingClient{config: f.config}).QueryScript(f)
}

// QueryEnvironment queries the "Environment" edge of the Finding entity.
func (f *Finding) QueryEnvironment() *EnvironmentQuery {
	return (&FindingClient{config: f.config}).QueryEnvironment(f)
}

// Update returns a builder for updating this Finding.
// Note that you need to call Finding.Unwrap() before calling this method if this Finding
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Finding) Update() *FindingUpdateOne {
	return (&FindingClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Finding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Finding) Unwrap() *Finding {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Finding is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Finding) String() string {
	var builder strings.Builder
	builder.WriteString("Finding(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", description=")
	builder.WriteString(f.Description)
	builder.WriteString(", severity=")
	builder.WriteString(fmt.Sprintf("%v", f.Severity))
	builder.WriteString(", difficulty=")
	builder.WriteString(fmt.Sprintf("%v", f.Difficulty))
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", f.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Findings is a parsable slice of Finding.
type Findings []*Finding

func (f Findings) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
