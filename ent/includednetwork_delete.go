// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/predicate"
)

// IncludedNetworkDelete is the builder for deleting a IncludedNetwork entity.
type IncludedNetworkDelete struct {
	config
	hooks    []Hook
	mutation *IncludedNetworkMutation
}

// Where appends a list predicates to the IncludedNetworkDelete builder.
func (ind *IncludedNetworkDelete) Where(ps ...predicate.IncludedNetwork) *IncludedNetworkDelete {
	ind.mutation.Where(ps...)
	return ind
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ind *IncludedNetworkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ind.sqlExec, ind.mutation, ind.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ind *IncludedNetworkDelete) ExecX(ctx context.Context) int {
	n, err := ind.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ind *IncludedNetworkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(includednetwork.Table, sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID))
	if ps := ind.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ind.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ind.mutation.done = true
	return affected, err
}

// IncludedNetworkDeleteOne is the builder for deleting a single IncludedNetwork entity.
type IncludedNetworkDeleteOne struct {
	ind *IncludedNetworkDelete
}

// Where appends a list predicates to the IncludedNetworkDelete builder.
func (indo *IncludedNetworkDeleteOne) Where(ps ...predicate.IncludedNetwork) *IncludedNetworkDeleteOne {
	indo.ind.mutation.Where(ps...)
	return indo
}

// Exec executes the deletion query.
func (indo *IncludedNetworkDeleteOne) Exec(ctx context.Context) error {
	n, err := indo.ind.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{includednetwork.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (indo *IncludedNetworkDeleteOne) ExecX(ctx context.Context) {
	if err := indo.Exec(ctx); err != nil {
		panic(err)
	}
}
