// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/google/uuid"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
}

// SetRepoURL sets the "repo_url" field.
func (rc *RepositoryCreate) SetRepoURL(s string) *RepositoryCreate {
	rc.mutation.SetRepoURL(s)
	return rc
}

// SetBranchName sets the "branch_name" field.
func (rc *RepositoryCreate) SetBranchName(s string) *RepositoryCreate {
	rc.mutation.SetBranchName(s)
	return rc
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableBranchName(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetBranchName(*s)
	}
	return rc
}

// SetEnviromentFilepath sets the "enviroment_filepath" field.
func (rc *RepositoryCreate) SetEnviromentFilepath(s string) *RepositoryCreate {
	rc.mutation.SetEnviromentFilepath(s)
	return rc
}

// SetFolderPath sets the "folder_path" field.
func (rc *RepositoryCreate) SetFolderPath(s string) *RepositoryCreate {
	rc.mutation.SetFolderPath(s)
	return rc
}

// SetNillableFolderPath sets the "folder_path" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableFolderPath(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetFolderPath(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RepositoryCreate) SetID(u uuid.UUID) *RepositoryCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableID(u *uuid.UUID) *RepositoryCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// AddEnvironmentIDs adds the "Environments" edge to the Environment entity by IDs.
func (rc *RepositoryCreate) AddEnvironmentIDs(ids ...uuid.UUID) *RepositoryCreate {
	rc.mutation.AddEnvironmentIDs(ids...)
	return rc
}

// AddEnvironments adds the "Environments" edges to the Environment entity.
func (rc *RepositoryCreate) AddEnvironments(e ...*Environment) *RepositoryCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rc.AddEnvironmentIDs(ids...)
}

// AddRepoCommitIDs adds the "RepoCommits" edge to the RepoCommit entity by IDs.
func (rc *RepositoryCreate) AddRepoCommitIDs(ids ...uuid.UUID) *RepositoryCreate {
	rc.mutation.AddRepoCommitIDs(ids...)
	return rc
}

// AddRepoCommits adds the "RepoCommits" edges to the RepoCommit entity.
func (rc *RepositoryCreate) AddRepoCommits(r ...*RepoCommit) *RepositoryCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRepoCommitIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	var (
		err  error
		node *Repository
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepositoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Repository)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RepositoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RepositoryCreate) defaults() {
	if _, ok := rc.mutation.BranchName(); !ok {
		v := repository.DefaultBranchName
		rc.mutation.SetBranchName(v)
	}
	if _, ok := rc.mutation.FolderPath(); !ok {
		v := repository.DefaultFolderPath
		rc.mutation.SetFolderPath(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := repository.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.RepoURL(); !ok {
		return &ValidationError{Name: "repo_url", err: errors.New(`ent: missing required field "Repository.repo_url"`)}
	}
	if _, ok := rc.mutation.BranchName(); !ok {
		return &ValidationError{Name: "branch_name", err: errors.New(`ent: missing required field "Repository.branch_name"`)}
	}
	if _, ok := rc.mutation.EnviromentFilepath(); !ok {
		return &ValidationError{Name: "enviroment_filepath", err: errors.New(`ent: missing required field "Repository.enviroment_filepath"`)}
	}
	if _, ok := rc.mutation.FolderPath(); !ok {
		return &ValidationError{Name: "folder_path", err: errors.New(`ent: missing required field "Repository.folder_path"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: repository.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: repository.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.RepoURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldRepoURL,
		})
		_node.RepoURL = value
	}
	if value, ok := rc.mutation.BranchName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldBranchName,
		})
		_node.BranchName = value
	}
	if value, ok := rc.mutation.EnviromentFilepath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldEnviromentFilepath,
		})
		_node.EnviromentFilepath = value
	}
	if value, ok := rc.mutation.FolderPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repository.FieldFolderPath,
		})
		_node.FolderPath = value
	}
	if nodes := rc.mutation.EnvironmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.EnvironmentsTable,
			Columns: repository.EnvironmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RepoCommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.RepoCommitsTable,
			Columns: []string{repository.RepoCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repocommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	builders []*RepositoryCreate
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
