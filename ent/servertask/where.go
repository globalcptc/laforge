// Code generated by ent, DO NOT EDIT.

package servertask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLTE(FieldID, id))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldEndTime, v))
}

// LogFilePath applies equality check predicate on the "log_file_path" field. It's identical to LogFilePathEQ.
func LogFilePath(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldLogFilePath, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotIn(FieldType, vs...))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotNull(FieldEndTime))
}

// ErrorsIsNil applies the IsNil predicate on the "errors" field.
func ErrorsIsNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIsNull(FieldErrors))
}

// ErrorsNotNil applies the NotNil predicate on the "errors" field.
func ErrorsNotNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotNull(FieldErrors))
}

// LogFilePathEQ applies the EQ predicate on the "log_file_path" field.
func LogFilePathEQ(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEQ(FieldLogFilePath, v))
}

// LogFilePathNEQ applies the NEQ predicate on the "log_file_path" field.
func LogFilePathNEQ(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNEQ(FieldLogFilePath, v))
}

// LogFilePathIn applies the In predicate on the "log_file_path" field.
func LogFilePathIn(vs ...string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIn(FieldLogFilePath, vs...))
}

// LogFilePathNotIn applies the NotIn predicate on the "log_file_path" field.
func LogFilePathNotIn(vs ...string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotIn(FieldLogFilePath, vs...))
}

// LogFilePathGT applies the GT predicate on the "log_file_path" field.
func LogFilePathGT(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGT(FieldLogFilePath, v))
}

// LogFilePathGTE applies the GTE predicate on the "log_file_path" field.
func LogFilePathGTE(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldGTE(FieldLogFilePath, v))
}

// LogFilePathLT applies the LT predicate on the "log_file_path" field.
func LogFilePathLT(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLT(FieldLogFilePath, v))
}

// LogFilePathLTE applies the LTE predicate on the "log_file_path" field.
func LogFilePathLTE(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldLTE(FieldLogFilePath, v))
}

// LogFilePathContains applies the Contains predicate on the "log_file_path" field.
func LogFilePathContains(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldContains(FieldLogFilePath, v))
}

// LogFilePathHasPrefix applies the HasPrefix predicate on the "log_file_path" field.
func LogFilePathHasPrefix(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldHasPrefix(FieldLogFilePath, v))
}

// LogFilePathHasSuffix applies the HasSuffix predicate on the "log_file_path" field.
func LogFilePathHasSuffix(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldHasSuffix(FieldLogFilePath, v))
}

// LogFilePathIsNil applies the IsNil predicate on the "log_file_path" field.
func LogFilePathIsNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldIsNull(FieldLogFilePath))
}

// LogFilePathNotNil applies the NotNil predicate on the "log_file_path" field.
func LogFilePathNotNil() predicate.ServerTask {
	return predicate.ServerTask(sql.FieldNotNull(FieldLogFilePath))
}

// LogFilePathEqualFold applies the EqualFold predicate on the "log_file_path" field.
func LogFilePathEqualFold(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldEqualFold(FieldLogFilePath, v))
}

// LogFilePathContainsFold applies the ContainsFold predicate on the "log_file_path" field.
func LogFilePathContainsFold(v string) predicate.ServerTask {
	return predicate.ServerTask(sql.FieldContainsFold(FieldLogFilePath, v))
}

// HasServerTaskToAuthUser applies the HasEdge predicate on the "ServerTaskToAuthUser" edge.
func HasServerTaskToAuthUser() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToAuthUserTable, ServerTaskToAuthUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTaskToAuthUserWith applies the HasEdge predicate on the "ServerTaskToAuthUser" edge with a given conditions (other predicates).
func HasServerTaskToAuthUserWith(preds ...predicate.AuthUser) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := newServerTaskToAuthUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTaskToStatus applies the HasEdge predicate on the "ServerTaskToStatus" edge.
func HasServerTaskToStatus() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServerTaskToStatusTable, ServerTaskToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTaskToStatusWith applies the HasEdge predicate on the "ServerTaskToStatus" edge with a given conditions (other predicates).
func HasServerTaskToStatusWith(preds ...predicate.Status) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := newServerTaskToStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTaskToEnvironment applies the HasEdge predicate on the "ServerTaskToEnvironment" edge.
func HasServerTaskToEnvironment() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToEnvironmentTable, ServerTaskToEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTaskToEnvironmentWith applies the HasEdge predicate on the "ServerTaskToEnvironment" edge with a given conditions (other predicates).
func HasServerTaskToEnvironmentWith(preds ...predicate.Environment) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := newServerTaskToEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTaskToBuild applies the HasEdge predicate on the "ServerTaskToBuild" edge.
func HasServerTaskToBuild() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToBuildTable, ServerTaskToBuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTaskToBuildWith applies the HasEdge predicate on the "ServerTaskToBuild" edge with a given conditions (other predicates).
func HasServerTaskToBuildWith(preds ...predicate.Build) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := newServerTaskToBuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTaskToBuildCommit applies the HasEdge predicate on the "ServerTaskToBuildCommit" edge.
func HasServerTaskToBuildCommit() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToBuildCommitTable, ServerTaskToBuildCommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTaskToBuildCommitWith applies the HasEdge predicate on the "ServerTaskToBuildCommit" edge with a given conditions (other predicates).
func HasServerTaskToBuildCommitWith(preds ...predicate.BuildCommit) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := newServerTaskToBuildCommitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTaskToGinFileMiddleware applies the HasEdge predicate on the "ServerTaskToGinFileMiddleware" edge.
func HasServerTaskToGinFileMiddleware() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServerTaskToGinFileMiddlewareTable, ServerTaskToGinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTaskToGinFileMiddlewareWith applies the HasEdge predicate on the "ServerTaskToGinFileMiddleware" edge with a given conditions (other predicates).
func HasServerTaskToGinFileMiddlewareWith(preds ...predicate.GinFileMiddleware) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := newServerTaskToGinFileMiddlewareStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServerTask) predicate.ServerTask {
	return predicate.ServerTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServerTask) predicate.ServerTask {
	return predicate.ServerTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServerTask) predicate.ServerTask {
	return predicate.ServerTask(sql.NotPredicates(p))
}
