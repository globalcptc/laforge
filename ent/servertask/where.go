// Code generated by ent, DO NOT EDIT.

package servertask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// LogFilePath applies equality check predicate on the "log_file_path" field. It's identical to LogFilePathEQ.
func LogFilePath(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogFilePath), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartTime)))
	})
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartTime)))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndTime)))
	})
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndTime)))
	})
}

// ErrorsIsNil applies the IsNil predicate on the "errors" field.
func ErrorsIsNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldErrors)))
	})
}

// ErrorsNotNil applies the NotNil predicate on the "errors" field.
func ErrorsNotNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldErrors)))
	})
}

// LogFilePathEQ applies the EQ predicate on the "log_file_path" field.
func LogFilePathEQ(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathNEQ applies the NEQ predicate on the "log_file_path" field.
func LogFilePathNEQ(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathIn applies the In predicate on the "log_file_path" field.
func LogFilePathIn(vs ...string) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLogFilePath), v...))
	})
}

// LogFilePathNotIn applies the NotIn predicate on the "log_file_path" field.
func LogFilePathNotIn(vs ...string) predicate.ServerTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLogFilePath), v...))
	})
}

// LogFilePathGT applies the GT predicate on the "log_file_path" field.
func LogFilePathGT(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathGTE applies the GTE predicate on the "log_file_path" field.
func LogFilePathGTE(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathLT applies the LT predicate on the "log_file_path" field.
func LogFilePathLT(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathLTE applies the LTE predicate on the "log_file_path" field.
func LogFilePathLTE(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathContains applies the Contains predicate on the "log_file_path" field.
func LogFilePathContains(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathHasPrefix applies the HasPrefix predicate on the "log_file_path" field.
func LogFilePathHasPrefix(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathHasSuffix applies the HasSuffix predicate on the "log_file_path" field.
func LogFilePathHasSuffix(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathIsNil applies the IsNil predicate on the "log_file_path" field.
func LogFilePathIsNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLogFilePath)))
	})
}

// LogFilePathNotNil applies the NotNil predicate on the "log_file_path" field.
func LogFilePathNotNil() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLogFilePath)))
	})
}

// LogFilePathEqualFold applies the EqualFold predicate on the "log_file_path" field.
func LogFilePathEqualFold(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogFilePath), v))
	})
}

// LogFilePathContainsFold applies the ContainsFold predicate on the "log_file_path" field.
func LogFilePathContainsFold(v string) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogFilePath), v))
	})
}

// HasAuthUser applies the HasEdge predicate on the "AuthUser" edge.
func HasAuthUser() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AuthUserTable, AuthUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthUserWith applies the HasEdge predicate on the "AuthUser" edge with a given conditions (other predicates).
func HasAuthUserWith(preds ...predicate.AuthUser) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AuthUserTable, AuthUserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "Status" edge.
func HasStatus() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "Status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.Status) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironment applies the HasEdge predicate on the "Environment" edge.
func HasEnvironment() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "Environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuild applies the HasEdge predicate on the "Build" edge.
func HasBuild() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildWith applies the HasEdge predicate on the "Build" edge with a given conditions (other predicates).
func HasBuildWith(preds ...predicate.Build) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildCommit applies the HasEdge predicate on the "BuildCommit" edge.
func HasBuildCommit() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildCommitTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildCommitTable, BuildCommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildCommitWith applies the HasEdge predicate on the "BuildCommit" edge with a given conditions (other predicates).
func HasBuildCommitWith(preds ...predicate.BuildCommit) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildCommitInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildCommitTable, BuildCommitColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGinFileMiddleware applies the HasEdge predicate on the "GinFileMiddleware" edge.
func HasGinFileMiddleware() predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GinFileMiddlewareTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GinFileMiddlewareTable, GinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGinFileMiddlewareWith applies the HasEdge predicate on the "GinFileMiddleware" edge with a given conditions (other predicates).
func HasGinFileMiddlewareWith(preds ...predicate.GinFileMiddleware) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GinFileMiddlewareInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GinFileMiddlewareTable, GinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServerTask) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServerTask) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServerTask) predicate.ServerTask {
	return predicate.ServerTask(func(s *sql.Selector) {
		p(s.Not())
	})
}
