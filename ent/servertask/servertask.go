// Code generated by ent, DO NOT EDIT.

package servertask

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the servertask type in the database.
	Label = "server_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldErrors holds the string denoting the errors field in the database.
	FieldErrors = "errors"
	// FieldLogFilePath holds the string denoting the log_file_path field in the database.
	FieldLogFilePath = "log_file_path"
	// EdgeServerTaskToAuthUser holds the string denoting the servertasktoauthuser edge name in mutations.
	EdgeServerTaskToAuthUser = "ServerTaskToAuthUser"
	// EdgeServerTaskToStatus holds the string denoting the servertasktostatus edge name in mutations.
	EdgeServerTaskToStatus = "ServerTaskToStatus"
	// EdgeServerTaskToEnvironment holds the string denoting the servertasktoenvironment edge name in mutations.
	EdgeServerTaskToEnvironment = "ServerTaskToEnvironment"
	// EdgeServerTaskToBuild holds the string denoting the servertasktobuild edge name in mutations.
	EdgeServerTaskToBuild = "ServerTaskToBuild"
	// EdgeServerTaskToBuildCommit holds the string denoting the servertasktobuildcommit edge name in mutations.
	EdgeServerTaskToBuildCommit = "ServerTaskToBuildCommit"
	// EdgeServerTaskToGinFileMiddleware holds the string denoting the servertasktoginfilemiddleware edge name in mutations.
	EdgeServerTaskToGinFileMiddleware = "ServerTaskToGinFileMiddleware"
	// Table holds the table name of the servertask in the database.
	Table = "server_tasks"
	// ServerTaskToAuthUserTable is the table that holds the ServerTaskToAuthUser relation/edge.
	ServerTaskToAuthUserTable = "server_tasks"
	// ServerTaskToAuthUserInverseTable is the table name for the AuthUser entity.
	// It exists in this package in order to avoid circular dependency with the "authuser" package.
	ServerTaskToAuthUserInverseTable = "auth_users"
	// ServerTaskToAuthUserColumn is the table column denoting the ServerTaskToAuthUser relation/edge.
	ServerTaskToAuthUserColumn = "server_task_server_task_to_auth_user"
	// ServerTaskToStatusTable is the table that holds the ServerTaskToStatus relation/edge.
	ServerTaskToStatusTable = "status"
	// ServerTaskToStatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	ServerTaskToStatusInverseTable = "status"
	// ServerTaskToStatusColumn is the table column denoting the ServerTaskToStatus relation/edge.
	ServerTaskToStatusColumn = "server_task_server_task_to_status"
	// ServerTaskToEnvironmentTable is the table that holds the ServerTaskToEnvironment relation/edge.
	ServerTaskToEnvironmentTable = "server_tasks"
	// ServerTaskToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	ServerTaskToEnvironmentInverseTable = "environments"
	// ServerTaskToEnvironmentColumn is the table column denoting the ServerTaskToEnvironment relation/edge.
	ServerTaskToEnvironmentColumn = "server_task_server_task_to_environment"
	// ServerTaskToBuildTable is the table that holds the ServerTaskToBuild relation/edge.
	ServerTaskToBuildTable = "server_tasks"
	// ServerTaskToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	ServerTaskToBuildInverseTable = "builds"
	// ServerTaskToBuildColumn is the table column denoting the ServerTaskToBuild relation/edge.
	ServerTaskToBuildColumn = "server_task_server_task_to_build"
	// ServerTaskToBuildCommitTable is the table that holds the ServerTaskToBuildCommit relation/edge.
	ServerTaskToBuildCommitTable = "server_tasks"
	// ServerTaskToBuildCommitInverseTable is the table name for the BuildCommit entity.
	// It exists in this package in order to avoid circular dependency with the "buildcommit" package.
	ServerTaskToBuildCommitInverseTable = "build_commits"
	// ServerTaskToBuildCommitColumn is the table column denoting the ServerTaskToBuildCommit relation/edge.
	ServerTaskToBuildCommitColumn = "server_task_server_task_to_build_commit"
	// ServerTaskToGinFileMiddlewareTable is the table that holds the ServerTaskToGinFileMiddleware relation/edge.
	ServerTaskToGinFileMiddlewareTable = "gin_file_middlewares"
	// ServerTaskToGinFileMiddlewareInverseTable is the table name for the GinFileMiddleware entity.
	// It exists in this package in order to avoid circular dependency with the "ginfilemiddleware" package.
	ServerTaskToGinFileMiddlewareInverseTable = "gin_file_middlewares"
	// ServerTaskToGinFileMiddlewareColumn is the table column denoting the ServerTaskToGinFileMiddleware relation/edge.
	ServerTaskToGinFileMiddlewareColumn = "server_task_server_task_to_gin_file_middleware"
)

// Columns holds all SQL columns for servertask fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldStartTime,
	FieldEndTime,
	FieldErrors,
	FieldLogFilePath,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "server_tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"server_task_server_task_to_auth_user",
	"server_task_server_task_to_environment",
	"server_task_server_task_to_build",
	"server_task_server_task_to_build_commit",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeLOADENV      Type = "LOADENV"
	TypeCREATEBUILD  Type = "CREATEBUILD"
	TypeRENDERFILES  Type = "RENDERFILES"
	TypeDELETEBUILD  Type = "DELETEBUILD"
	TypeREBUILD      Type = "REBUILD"
	TypeEXECUTEBUILD Type = "EXECUTEBUILD"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeLOADENV, TypeCREATEBUILD, TypeRENDERFILES, TypeDELETEBUILD, TypeREBUILD, TypeEXECUTEBUILD:
		return nil
	default:
		return fmt.Errorf("servertask: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ServerTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByLogFilePath orders the results by the log_file_path field.
func ByLogFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogFilePath, opts...).ToFunc()
}

// ByServerTaskToAuthUserField orders the results by ServerTaskToAuthUser field.
func ByServerTaskToAuthUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTaskToAuthUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTaskToStatusField orders the results by ServerTaskToStatus field.
func ByServerTaskToStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTaskToStatusStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTaskToEnvironmentField orders the results by ServerTaskToEnvironment field.
func ByServerTaskToEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTaskToEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTaskToBuildField orders the results by ServerTaskToBuild field.
func ByServerTaskToBuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTaskToBuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTaskToBuildCommitField orders the results by ServerTaskToBuildCommit field.
func ByServerTaskToBuildCommitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTaskToBuildCommitStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTaskToGinFileMiddlewareCount orders the results by ServerTaskToGinFileMiddleware count.
func ByServerTaskToGinFileMiddlewareCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServerTaskToGinFileMiddlewareStep(), opts...)
	}
}

// ByServerTaskToGinFileMiddleware orders the results by ServerTaskToGinFileMiddleware terms.
func ByServerTaskToGinFileMiddleware(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTaskToGinFileMiddlewareStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newServerTaskToAuthUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTaskToAuthUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToAuthUserTable, ServerTaskToAuthUserColumn),
	)
}
func newServerTaskToStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTaskToStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ServerTaskToStatusTable, ServerTaskToStatusColumn),
	)
}
func newServerTaskToEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTaskToEnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToEnvironmentTable, ServerTaskToEnvironmentColumn),
	)
}
func newServerTaskToBuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTaskToBuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToBuildTable, ServerTaskToBuildColumn),
	)
}
func newServerTaskToBuildCommitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTaskToBuildCommitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ServerTaskToBuildCommitTable, ServerTaskToBuildCommitColumn),
	)
}
func newServerTaskToGinFileMiddlewareStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTaskToGinFileMiddlewareInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServerTaskToGinFileMiddlewareTable, ServerTaskToGinFileMiddlewareColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
