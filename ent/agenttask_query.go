// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/google/uuid"
)

// AgentTaskQuery is the builder for querying AgentTask entities.
type AgentTaskQuery struct {
	config
	ctx                           *QueryContext
	order                         []agenttask.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.AgentTask
	withProvisioningStep          *ProvisioningStepQuery
	withProvisioningScheduledStep *ProvisioningScheduledStepQuery
	withProvisionedHost           *ProvisionedHostQuery
	withAdhocPlans                *AdhocPlanQuery
	withFKs                       bool
	modifiers                     []func(*sql.Selector)
	loadTotal                     []func(context.Context, []*AgentTask) error
	withNamedAdhocPlans           map[string]*AdhocPlanQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AgentTaskQuery builder.
func (atq *AgentTaskQuery) Where(ps ...predicate.AgentTask) *AgentTaskQuery {
	atq.predicates = append(atq.predicates, ps...)
	return atq
}

// Limit the number of records to be returned by this query.
func (atq *AgentTaskQuery) Limit(limit int) *AgentTaskQuery {
	atq.ctx.Limit = &limit
	return atq
}

// Offset to start from.
func (atq *AgentTaskQuery) Offset(offset int) *AgentTaskQuery {
	atq.ctx.Offset = &offset
	return atq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (atq *AgentTaskQuery) Unique(unique bool) *AgentTaskQuery {
	atq.ctx.Unique = &unique
	return atq
}

// Order specifies how the records should be ordered.
func (atq *AgentTaskQuery) Order(o ...agenttask.OrderOption) *AgentTaskQuery {
	atq.order = append(atq.order, o...)
	return atq
}

// QueryProvisioningStep chains the current query on the "ProvisioningStep" edge.
func (atq *AgentTaskQuery) QueryProvisioningStep() *ProvisioningStepQuery {
	query := (&ProvisioningStepClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agenttask.Table, agenttask.FieldID, selector),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, agenttask.ProvisioningStepTable, agenttask.ProvisioningStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStep chains the current query on the "ProvisioningScheduledStep" edge.
func (atq *AgentTaskQuery) QueryProvisioningScheduledStep() *ProvisioningScheduledStepQuery {
	query := (&ProvisioningScheduledStepClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agenttask.Table, agenttask.FieldID, selector),
			sqlgraph.To(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, agenttask.ProvisioningScheduledStepTable, agenttask.ProvisioningScheduledStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHost chains the current query on the "ProvisionedHost" edge.
func (atq *AgentTaskQuery) QueryProvisionedHost() *ProvisionedHostQuery {
	query := (&ProvisionedHostClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agenttask.Table, agenttask.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, agenttask.ProvisionedHostTable, agenttask.ProvisionedHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdhocPlans chains the current query on the "AdhocPlans" edge.
func (atq *AgentTaskQuery) QueryAdhocPlans() *AdhocPlanQuery {
	query := (&AdhocPlanClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agenttask.Table, agenttask.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, agenttask.AdhocPlansTable, agenttask.AdhocPlansColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AgentTask entity from the query.
// Returns a *NotFoundError when no AgentTask was found.
func (atq *AgentTaskQuery) First(ctx context.Context) (*AgentTask, error) {
	nodes, err := atq.Limit(1).All(setContextOp(ctx, atq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{agenttask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (atq *AgentTaskQuery) FirstX(ctx context.Context) *AgentTask {
	node, err := atq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AgentTask ID from the query.
// Returns a *NotFoundError when no AgentTask ID was found.
func (atq *AgentTaskQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = atq.Limit(1).IDs(setContextOp(ctx, atq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{agenttask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (atq *AgentTaskQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := atq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AgentTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AgentTask entity is found.
// Returns a *NotFoundError when no AgentTask entities are found.
func (atq *AgentTaskQuery) Only(ctx context.Context) (*AgentTask, error) {
	nodes, err := atq.Limit(2).All(setContextOp(ctx, atq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{agenttask.Label}
	default:
		return nil, &NotSingularError{agenttask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (atq *AgentTaskQuery) OnlyX(ctx context.Context) *AgentTask {
	node, err := atq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AgentTask ID in the query.
// Returns a *NotSingularError when more than one AgentTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (atq *AgentTaskQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = atq.Limit(2).IDs(setContextOp(ctx, atq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{agenttask.Label}
	default:
		err = &NotSingularError{agenttask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (atq *AgentTaskQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := atq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AgentTasks.
func (atq *AgentTaskQuery) All(ctx context.Context) ([]*AgentTask, error) {
	ctx = setContextOp(ctx, atq.ctx, "All")
	if err := atq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AgentTask, *AgentTaskQuery]()
	return withInterceptors[[]*AgentTask](ctx, atq, qr, atq.inters)
}

// AllX is like All, but panics if an error occurs.
func (atq *AgentTaskQuery) AllX(ctx context.Context) []*AgentTask {
	nodes, err := atq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AgentTask IDs.
func (atq *AgentTaskQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if atq.ctx.Unique == nil && atq.path != nil {
		atq.Unique(true)
	}
	ctx = setContextOp(ctx, atq.ctx, "IDs")
	if err = atq.Select(agenttask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (atq *AgentTaskQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := atq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (atq *AgentTaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, atq.ctx, "Count")
	if err := atq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, atq, querierCount[*AgentTaskQuery](), atq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (atq *AgentTaskQuery) CountX(ctx context.Context) int {
	count, err := atq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (atq *AgentTaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, atq.ctx, "Exist")
	switch _, err := atq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (atq *AgentTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := atq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AgentTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (atq *AgentTaskQuery) Clone() *AgentTaskQuery {
	if atq == nil {
		return nil
	}
	return &AgentTaskQuery{
		config:                        atq.config,
		ctx:                           atq.ctx.Clone(),
		order:                         append([]agenttask.OrderOption{}, atq.order...),
		inters:                        append([]Interceptor{}, atq.inters...),
		predicates:                    append([]predicate.AgentTask{}, atq.predicates...),
		withProvisioningStep:          atq.withProvisioningStep.Clone(),
		withProvisioningScheduledStep: atq.withProvisioningScheduledStep.Clone(),
		withProvisionedHost:           atq.withProvisionedHost.Clone(),
		withAdhocPlans:                atq.withAdhocPlans.Clone(),
		// clone intermediate query.
		sql:  atq.sql.Clone(),
		path: atq.path,
	}
}

// WithProvisioningStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStep" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AgentTaskQuery) WithProvisioningStep(opts ...func(*ProvisioningStepQuery)) *AgentTaskQuery {
	query := (&ProvisioningStepClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withProvisioningStep = query
	return atq
}

// WithProvisioningScheduledStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStep" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AgentTaskQuery) WithProvisioningScheduledStep(opts ...func(*ProvisioningScheduledStepQuery)) *AgentTaskQuery {
	query := (&ProvisioningScheduledStepClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withProvisioningScheduledStep = query
	return atq
}

// WithProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AgentTaskQuery) WithProvisionedHost(opts ...func(*ProvisionedHostQuery)) *AgentTaskQuery {
	query := (&ProvisionedHostClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withProvisionedHost = query
	return atq
}

// WithAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "AdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AgentTaskQuery) WithAdhocPlans(opts ...func(*AdhocPlanQuery)) *AgentTaskQuery {
	query := (&AdhocPlanClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withAdhocPlans = query
	return atq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Command agenttask.Command `json:"command,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AgentTask.Query().
//		GroupBy(agenttask.FieldCommand).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (atq *AgentTaskQuery) GroupBy(field string, fields ...string) *AgentTaskGroupBy {
	atq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AgentTaskGroupBy{build: atq}
	grbuild.flds = &atq.ctx.Fields
	grbuild.label = agenttask.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Command agenttask.Command `json:"command,omitempty"`
//	}
//
//	client.AgentTask.Query().
//		Select(agenttask.FieldCommand).
//		Scan(ctx, &v)
func (atq *AgentTaskQuery) Select(fields ...string) *AgentTaskSelect {
	atq.ctx.Fields = append(atq.ctx.Fields, fields...)
	sbuild := &AgentTaskSelect{AgentTaskQuery: atq}
	sbuild.label = agenttask.Label
	sbuild.flds, sbuild.scan = &atq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AgentTaskSelect configured with the given aggregations.
func (atq *AgentTaskQuery) Aggregate(fns ...AggregateFunc) *AgentTaskSelect {
	return atq.Select().Aggregate(fns...)
}

func (atq *AgentTaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range atq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, atq); err != nil {
				return err
			}
		}
	}
	for _, f := range atq.ctx.Fields {
		if !agenttask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if atq.path != nil {
		prev, err := atq.path(ctx)
		if err != nil {
			return err
		}
		atq.sql = prev
	}
	return nil
}

func (atq *AgentTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AgentTask, error) {
	var (
		nodes       = []*AgentTask{}
		withFKs     = atq.withFKs
		_spec       = atq.querySpec()
		loadedTypes = [4]bool{
			atq.withProvisioningStep != nil,
			atq.withProvisioningScheduledStep != nil,
			atq.withProvisionedHost != nil,
			atq.withAdhocPlans != nil,
		}
	)
	if atq.withProvisioningStep != nil || atq.withProvisioningScheduledStep != nil || atq.withProvisionedHost != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, agenttask.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AgentTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AgentTask{config: atq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(atq.modifiers) > 0 {
		_spec.Modifiers = atq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, atq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := atq.withProvisioningStep; query != nil {
		if err := atq.loadProvisioningStep(ctx, query, nodes, nil,
			func(n *AgentTask, e *ProvisioningStep) { n.Edges.ProvisioningStep = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withProvisioningScheduledStep; query != nil {
		if err := atq.loadProvisioningScheduledStep(ctx, query, nodes, nil,
			func(n *AgentTask, e *ProvisioningScheduledStep) { n.Edges.ProvisioningScheduledStep = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withProvisionedHost; query != nil {
		if err := atq.loadProvisionedHost(ctx, query, nodes, nil,
			func(n *AgentTask, e *ProvisionedHost) { n.Edges.ProvisionedHost = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withAdhocPlans; query != nil {
		if err := atq.loadAdhocPlans(ctx, query, nodes,
			func(n *AgentTask) { n.Edges.AdhocPlans = []*AdhocPlan{} },
			func(n *AgentTask, e *AdhocPlan) { n.Edges.AdhocPlans = append(n.Edges.AdhocPlans, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range atq.withNamedAdhocPlans {
		if err := atq.loadAdhocPlans(ctx, query, nodes,
			func(n *AgentTask) { n.appendNamedAdhocPlans(name) },
			func(n *AgentTask, e *AdhocPlan) { n.appendNamedAdhocPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range atq.loadTotal {
		if err := atq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (atq *AgentTaskQuery) loadProvisioningStep(ctx context.Context, query *ProvisioningStepQuery, nodes []*AgentTask, init func(*AgentTask), assign func(*AgentTask, *ProvisioningStep)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AgentTask)
	for i := range nodes {
		if nodes[i].agent_task_provisioning_step == nil {
			continue
		}
		fk := *nodes[i].agent_task_provisioning_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(provisioningstep.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_task_provisioning_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AgentTaskQuery) loadProvisioningScheduledStep(ctx context.Context, query *ProvisioningScheduledStepQuery, nodes []*AgentTask, init func(*AgentTask), assign func(*AgentTask, *ProvisioningScheduledStep)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AgentTask)
	for i := range nodes {
		if nodes[i].agent_task_provisioning_scheduled_step == nil {
			continue
		}
		fk := *nodes[i].agent_task_provisioning_scheduled_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(provisioningscheduledstep.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_task_provisioning_scheduled_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AgentTaskQuery) loadProvisionedHost(ctx context.Context, query *ProvisionedHostQuery, nodes []*AgentTask, init func(*AgentTask), assign func(*AgentTask, *ProvisionedHost)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AgentTask)
	for i := range nodes {
		if nodes[i].agent_task_provisioned_host == nil {
			continue
		}
		fk := *nodes[i].agent_task_provisioned_host
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(provisionedhost.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_task_provisioned_host" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AgentTaskQuery) loadAdhocPlans(ctx context.Context, query *AdhocPlanQuery, nodes []*AgentTask, init func(*AgentTask), assign func(*AgentTask, *AdhocPlan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*AgentTask)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AdhocPlan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agenttask.AdhocPlansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.adhoc_plan_agent_task
		if fk == nil {
			return fmt.Errorf(`foreign-key "adhoc_plan_agent_task" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "adhoc_plan_agent_task" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (atq *AgentTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := atq.querySpec()
	if len(atq.modifiers) > 0 {
		_spec.Modifiers = atq.modifiers
	}
	_spec.Node.Columns = atq.ctx.Fields
	if len(atq.ctx.Fields) > 0 {
		_spec.Unique = atq.ctx.Unique != nil && *atq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, atq.driver, _spec)
}

func (atq *AgentTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(agenttask.Table, agenttask.Columns, sqlgraph.NewFieldSpec(agenttask.FieldID, field.TypeUUID))
	_spec.From = atq.sql
	if unique := atq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if atq.path != nil {
		_spec.Unique = true
	}
	if fields := atq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agenttask.FieldID)
		for i := range fields {
			if fields[i] != agenttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := atq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := atq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := atq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := atq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (atq *AgentTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(atq.driver.Dialect())
	t1 := builder.Table(agenttask.Table)
	columns := atq.ctx.Fields
	if len(columns) == 0 {
		columns = agenttask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if atq.sql != nil {
		selector = atq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if atq.ctx.Unique != nil && *atq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range atq.predicates {
		p(selector)
	}
	for _, p := range atq.order {
		p(selector)
	}
	if offset := atq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := atq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAdhocPlans tells the query-builder to eager-load the nodes that are connected to the "AdhocPlans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (atq *AgentTaskQuery) WithNamedAdhocPlans(name string, opts ...func(*AdhocPlanQuery)) *AgentTaskQuery {
	query := (&AdhocPlanClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if atq.withNamedAdhocPlans == nil {
		atq.withNamedAdhocPlans = make(map[string]*AdhocPlanQuery)
	}
	atq.withNamedAdhocPlans[name] = query
	return atq
}

// AgentTaskGroupBy is the group-by builder for AgentTask entities.
type AgentTaskGroupBy struct {
	selector
	build *AgentTaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (atgb *AgentTaskGroupBy) Aggregate(fns ...AggregateFunc) *AgentTaskGroupBy {
	atgb.fns = append(atgb.fns, fns...)
	return atgb
}

// Scan applies the selector query and scans the result into the given value.
func (atgb *AgentTaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, atgb.build.ctx, "GroupBy")
	if err := atgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AgentTaskQuery, *AgentTaskGroupBy](ctx, atgb.build, atgb, atgb.build.inters, v)
}

func (atgb *AgentTaskGroupBy) sqlScan(ctx context.Context, root *AgentTaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(atgb.fns))
	for _, fn := range atgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*atgb.flds)+len(atgb.fns))
		for _, f := range *atgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*atgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AgentTaskSelect is the builder for selecting fields of AgentTask entities.
type AgentTaskSelect struct {
	*AgentTaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ats *AgentTaskSelect) Aggregate(fns ...AggregateFunc) *AgentTaskSelect {
	ats.fns = append(ats.fns, fns...)
	return ats
}

// Scan applies the selector query and scans the result into the given value.
func (ats *AgentTaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ats.ctx, "Select")
	if err := ats.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AgentTaskQuery, *AgentTaskSelect](ctx, ats.AgentTaskQuery, ats, ats.inters, v)
}

func (ats *AgentTaskSelect) sqlScan(ctx context.Context, root *AgentTaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ats.fns))
	for _, fn := range ats.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ats.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
