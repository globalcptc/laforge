// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/google/uuid"
)

// GinFileMiddlewareQuery is the builder for querying GinFileMiddleware entities.
type GinFileMiddlewareQuery struct {
	config
	ctx                           *QueryContext
	order                         []ginfilemiddleware.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.GinFileMiddleware
	withProvisionedHost           *ProvisionedHostQuery
	withProvisioningStep          *ProvisioningStepQuery
	withProvisioningScheduledStep *ProvisioningScheduledStepQuery
	withFKs                       bool
	modifiers                     []func(*sql.Selector)
	loadTotal                     []func(context.Context, []*GinFileMiddleware) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GinFileMiddlewareQuery builder.
func (gfmq *GinFileMiddlewareQuery) Where(ps ...predicate.GinFileMiddleware) *GinFileMiddlewareQuery {
	gfmq.predicates = append(gfmq.predicates, ps...)
	return gfmq
}

// Limit the number of records to be returned by this query.
func (gfmq *GinFileMiddlewareQuery) Limit(limit int) *GinFileMiddlewareQuery {
	gfmq.ctx.Limit = &limit
	return gfmq
}

// Offset to start from.
func (gfmq *GinFileMiddlewareQuery) Offset(offset int) *GinFileMiddlewareQuery {
	gfmq.ctx.Offset = &offset
	return gfmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gfmq *GinFileMiddlewareQuery) Unique(unique bool) *GinFileMiddlewareQuery {
	gfmq.ctx.Unique = &unique
	return gfmq
}

// Order specifies how the records should be ordered.
func (gfmq *GinFileMiddlewareQuery) Order(o ...ginfilemiddleware.OrderOption) *GinFileMiddlewareQuery {
	gfmq.order = append(gfmq.order, o...)
	return gfmq
}

// QueryProvisionedHost chains the current query on the "ProvisionedHost" edge.
func (gfmq *GinFileMiddlewareQuery) QueryProvisionedHost() *ProvisionedHostQuery {
	query := (&ProvisionedHostClient{config: gfmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gfmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gfmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ginfilemiddleware.Table, ginfilemiddleware.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ginfilemiddleware.ProvisionedHostTable, ginfilemiddleware.ProvisionedHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(gfmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStep chains the current query on the "ProvisioningStep" edge.
func (gfmq *GinFileMiddlewareQuery) QueryProvisioningStep() *ProvisioningStepQuery {
	query := (&ProvisioningStepClient{config: gfmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gfmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gfmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ginfilemiddleware.Table, ginfilemiddleware.FieldID, selector),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ginfilemiddleware.ProvisioningStepTable, ginfilemiddleware.ProvisioningStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(gfmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStep chains the current query on the "ProvisioningScheduledStep" edge.
func (gfmq *GinFileMiddlewareQuery) QueryProvisioningScheduledStep() *ProvisioningScheduledStepQuery {
	query := (&ProvisioningScheduledStepClient{config: gfmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gfmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gfmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ginfilemiddleware.Table, ginfilemiddleware.FieldID, selector),
			sqlgraph.To(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ginfilemiddleware.ProvisioningScheduledStepTable, ginfilemiddleware.ProvisioningScheduledStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(gfmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GinFileMiddleware entity from the query.
// Returns a *NotFoundError when no GinFileMiddleware was found.
func (gfmq *GinFileMiddlewareQuery) First(ctx context.Context) (*GinFileMiddleware, error) {
	nodes, err := gfmq.Limit(1).All(setContextOp(ctx, gfmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ginfilemiddleware.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) FirstX(ctx context.Context) *GinFileMiddleware {
	node, err := gfmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GinFileMiddleware ID from the query.
// Returns a *NotFoundError when no GinFileMiddleware ID was found.
func (gfmq *GinFileMiddlewareQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gfmq.Limit(1).IDs(setContextOp(ctx, gfmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ginfilemiddleware.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := gfmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GinFileMiddleware entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GinFileMiddleware entity is found.
// Returns a *NotFoundError when no GinFileMiddleware entities are found.
func (gfmq *GinFileMiddlewareQuery) Only(ctx context.Context) (*GinFileMiddleware, error) {
	nodes, err := gfmq.Limit(2).All(setContextOp(ctx, gfmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ginfilemiddleware.Label}
	default:
		return nil, &NotSingularError{ginfilemiddleware.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) OnlyX(ctx context.Context) *GinFileMiddleware {
	node, err := gfmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GinFileMiddleware ID in the query.
// Returns a *NotSingularError when more than one GinFileMiddleware ID is found.
// Returns a *NotFoundError when no entities are found.
func (gfmq *GinFileMiddlewareQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gfmq.Limit(2).IDs(setContextOp(ctx, gfmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ginfilemiddleware.Label}
	default:
		err = &NotSingularError{ginfilemiddleware.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := gfmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GinFileMiddlewares.
func (gfmq *GinFileMiddlewareQuery) All(ctx context.Context) ([]*GinFileMiddleware, error) {
	ctx = setContextOp(ctx, gfmq.ctx, "All")
	if err := gfmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GinFileMiddleware, *GinFileMiddlewareQuery]()
	return withInterceptors[[]*GinFileMiddleware](ctx, gfmq, qr, gfmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) AllX(ctx context.Context) []*GinFileMiddleware {
	nodes, err := gfmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GinFileMiddleware IDs.
func (gfmq *GinFileMiddlewareQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if gfmq.ctx.Unique == nil && gfmq.path != nil {
		gfmq.Unique(true)
	}
	ctx = setContextOp(ctx, gfmq.ctx, "IDs")
	if err = gfmq.Select(ginfilemiddleware.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := gfmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gfmq *GinFileMiddlewareQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gfmq.ctx, "Count")
	if err := gfmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gfmq, querierCount[*GinFileMiddlewareQuery](), gfmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) CountX(ctx context.Context) int {
	count, err := gfmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gfmq *GinFileMiddlewareQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gfmq.ctx, "Exist")
	switch _, err := gfmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gfmq *GinFileMiddlewareQuery) ExistX(ctx context.Context) bool {
	exist, err := gfmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GinFileMiddlewareQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gfmq *GinFileMiddlewareQuery) Clone() *GinFileMiddlewareQuery {
	if gfmq == nil {
		return nil
	}
	return &GinFileMiddlewareQuery{
		config:                        gfmq.config,
		ctx:                           gfmq.ctx.Clone(),
		order:                         append([]ginfilemiddleware.OrderOption{}, gfmq.order...),
		inters:                        append([]Interceptor{}, gfmq.inters...),
		predicates:                    append([]predicate.GinFileMiddleware{}, gfmq.predicates...),
		withProvisionedHost:           gfmq.withProvisionedHost.Clone(),
		withProvisioningStep:          gfmq.withProvisioningStep.Clone(),
		withProvisioningScheduledStep: gfmq.withProvisioningScheduledStep.Clone(),
		// clone intermediate query.
		sql:  gfmq.sql.Clone(),
		path: gfmq.path,
	}
}

// WithProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (gfmq *GinFileMiddlewareQuery) WithProvisionedHost(opts ...func(*ProvisionedHostQuery)) *GinFileMiddlewareQuery {
	query := (&ProvisionedHostClient{config: gfmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gfmq.withProvisionedHost = query
	return gfmq
}

// WithProvisioningStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStep" edge. The optional arguments are used to configure the query builder of the edge.
func (gfmq *GinFileMiddlewareQuery) WithProvisioningStep(opts ...func(*ProvisioningStepQuery)) *GinFileMiddlewareQuery {
	query := (&ProvisioningStepClient{config: gfmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gfmq.withProvisioningStep = query
	return gfmq
}

// WithProvisioningScheduledStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStep" edge. The optional arguments are used to configure the query builder of the edge.
func (gfmq *GinFileMiddlewareQuery) WithProvisioningScheduledStep(opts ...func(*ProvisioningScheduledStepQuery)) *GinFileMiddlewareQuery {
	query := (&ProvisioningScheduledStepClient{config: gfmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gfmq.withProvisioningScheduledStep = query
	return gfmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		URLID string `json:"url_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GinFileMiddleware.Query().
//		GroupBy(ginfilemiddleware.FieldURLID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gfmq *GinFileMiddlewareQuery) GroupBy(field string, fields ...string) *GinFileMiddlewareGroupBy {
	gfmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GinFileMiddlewareGroupBy{build: gfmq}
	grbuild.flds = &gfmq.ctx.Fields
	grbuild.label = ginfilemiddleware.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		URLID string `json:"url_id,omitempty"`
//	}
//
//	client.GinFileMiddleware.Query().
//		Select(ginfilemiddleware.FieldURLID).
//		Scan(ctx, &v)
func (gfmq *GinFileMiddlewareQuery) Select(fields ...string) *GinFileMiddlewareSelect {
	gfmq.ctx.Fields = append(gfmq.ctx.Fields, fields...)
	sbuild := &GinFileMiddlewareSelect{GinFileMiddlewareQuery: gfmq}
	sbuild.label = ginfilemiddleware.Label
	sbuild.flds, sbuild.scan = &gfmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GinFileMiddlewareSelect configured with the given aggregations.
func (gfmq *GinFileMiddlewareQuery) Aggregate(fns ...AggregateFunc) *GinFileMiddlewareSelect {
	return gfmq.Select().Aggregate(fns...)
}

func (gfmq *GinFileMiddlewareQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gfmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gfmq); err != nil {
				return err
			}
		}
	}
	for _, f := range gfmq.ctx.Fields {
		if !ginfilemiddleware.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gfmq.path != nil {
		prev, err := gfmq.path(ctx)
		if err != nil {
			return err
		}
		gfmq.sql = prev
	}
	return nil
}

func (gfmq *GinFileMiddlewareQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GinFileMiddleware, error) {
	var (
		nodes       = []*GinFileMiddleware{}
		withFKs     = gfmq.withFKs
		_spec       = gfmq.querySpec()
		loadedTypes = [3]bool{
			gfmq.withProvisionedHost != nil,
			gfmq.withProvisioningStep != nil,
			gfmq.withProvisioningScheduledStep != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, ginfilemiddleware.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GinFileMiddleware).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GinFileMiddleware{config: gfmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(gfmq.modifiers) > 0 {
		_spec.Modifiers = gfmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gfmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gfmq.withProvisionedHost; query != nil {
		if err := gfmq.loadProvisionedHost(ctx, query, nodes, nil,
			func(n *GinFileMiddleware, e *ProvisionedHost) { n.Edges.ProvisionedHost = e }); err != nil {
			return nil, err
		}
	}
	if query := gfmq.withProvisioningStep; query != nil {
		if err := gfmq.loadProvisioningStep(ctx, query, nodes, nil,
			func(n *GinFileMiddleware, e *ProvisioningStep) { n.Edges.ProvisioningStep = e }); err != nil {
			return nil, err
		}
	}
	if query := gfmq.withProvisioningScheduledStep; query != nil {
		if err := gfmq.loadProvisioningScheduledStep(ctx, query, nodes, nil,
			func(n *GinFileMiddleware, e *ProvisioningScheduledStep) { n.Edges.ProvisioningScheduledStep = e }); err != nil {
			return nil, err
		}
	}
	for i := range gfmq.loadTotal {
		if err := gfmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gfmq *GinFileMiddlewareQuery) loadProvisionedHost(ctx context.Context, query *ProvisionedHostQuery, nodes []*GinFileMiddleware, init func(*GinFileMiddleware), assign func(*GinFileMiddleware, *ProvisionedHost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*GinFileMiddleware)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ginfilemiddleware.ProvisionedHostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.gin_file_middleware_provisioned_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "gin_file_middleware_provisioned_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "gin_file_middleware_provisioned_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gfmq *GinFileMiddlewareQuery) loadProvisioningStep(ctx context.Context, query *ProvisioningStepQuery, nodes []*GinFileMiddleware, init func(*GinFileMiddleware), assign func(*GinFileMiddleware, *ProvisioningStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*GinFileMiddleware)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisioningStep(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ginfilemiddleware.ProvisioningStepColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.gin_file_middleware_provisioning_step
		if fk == nil {
			return fmt.Errorf(`foreign-key "gin_file_middleware_provisioning_step" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "gin_file_middleware_provisioning_step" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gfmq *GinFileMiddlewareQuery) loadProvisioningScheduledStep(ctx context.Context, query *ProvisioningScheduledStepQuery, nodes []*GinFileMiddleware, init func(*GinFileMiddleware), assign func(*GinFileMiddleware, *ProvisioningScheduledStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*GinFileMiddleware)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ginfilemiddleware.ProvisioningScheduledStepColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.gin_file_middleware_provisioning_scheduled_step
		if fk == nil {
			return fmt.Errorf(`foreign-key "gin_file_middleware_provisioning_scheduled_step" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "gin_file_middleware_provisioning_scheduled_step" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gfmq *GinFileMiddlewareQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gfmq.querySpec()
	if len(gfmq.modifiers) > 0 {
		_spec.Modifiers = gfmq.modifiers
	}
	_spec.Node.Columns = gfmq.ctx.Fields
	if len(gfmq.ctx.Fields) > 0 {
		_spec.Unique = gfmq.ctx.Unique != nil && *gfmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gfmq.driver, _spec)
}

func (gfmq *GinFileMiddlewareQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ginfilemiddleware.Table, ginfilemiddleware.Columns, sqlgraph.NewFieldSpec(ginfilemiddleware.FieldID, field.TypeUUID))
	_spec.From = gfmq.sql
	if unique := gfmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gfmq.path != nil {
		_spec.Unique = true
	}
	if fields := gfmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ginfilemiddleware.FieldID)
		for i := range fields {
			if fields[i] != ginfilemiddleware.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gfmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gfmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gfmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gfmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gfmq *GinFileMiddlewareQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gfmq.driver.Dialect())
	t1 := builder.Table(ginfilemiddleware.Table)
	columns := gfmq.ctx.Fields
	if len(columns) == 0 {
		columns = ginfilemiddleware.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gfmq.sql != nil {
		selector = gfmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gfmq.ctx.Unique != nil && *gfmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gfmq.predicates {
		p(selector)
	}
	for _, p := range gfmq.order {
		p(selector)
	}
	if offset := gfmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gfmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GinFileMiddlewareGroupBy is the group-by builder for GinFileMiddleware entities.
type GinFileMiddlewareGroupBy struct {
	selector
	build *GinFileMiddlewareQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gfmgb *GinFileMiddlewareGroupBy) Aggregate(fns ...AggregateFunc) *GinFileMiddlewareGroupBy {
	gfmgb.fns = append(gfmgb.fns, fns...)
	return gfmgb
}

// Scan applies the selector query and scans the result into the given value.
func (gfmgb *GinFileMiddlewareGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gfmgb.build.ctx, "GroupBy")
	if err := gfmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GinFileMiddlewareQuery, *GinFileMiddlewareGroupBy](ctx, gfmgb.build, gfmgb, gfmgb.build.inters, v)
}

func (gfmgb *GinFileMiddlewareGroupBy) sqlScan(ctx context.Context, root *GinFileMiddlewareQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gfmgb.fns))
	for _, fn := range gfmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gfmgb.flds)+len(gfmgb.fns))
		for _, f := range *gfmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gfmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gfmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GinFileMiddlewareSelect is the builder for selecting fields of GinFileMiddleware entities.
type GinFileMiddlewareSelect struct {
	*GinFileMiddlewareQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gfms *GinFileMiddlewareSelect) Aggregate(fns ...AggregateFunc) *GinFileMiddlewareSelect {
	gfms.fns = append(gfms.fns, fns...)
	return gfms
}

// Scan applies the selector query and scans the result into the given value.
func (gfms *GinFileMiddlewareSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gfms.ctx, "Select")
	if err := gfms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GinFileMiddlewareQuery, *GinFileMiddlewareSelect](ctx, gfms.GinFileMiddlewareQuery, gfms, gfms.inters, v)
}

func (gfms *GinFileMiddlewareSelect) sqlScan(ctx context.Context, root *GinFileMiddlewareQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gfms.fns))
	for _, fn := range gfms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gfms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gfms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
