// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/google/uuid"
)

// FileDeleteCreate is the builder for creating a FileDelete entity.
type FileDeleteCreate struct {
	config
	mutation *FileDeleteMutation
	hooks    []Hook
}

// SetHCLID sets the "hcl_id" field.
func (fdc *FileDeleteCreate) SetHCLID(s string) *FileDeleteCreate {
	fdc.mutation.SetHCLID(s)
	return fdc
}

// SetPath sets the "path" field.
func (fdc *FileDeleteCreate) SetPath(s string) *FileDeleteCreate {
	fdc.mutation.SetPath(s)
	return fdc
}

// SetTags sets the "tags" field.
func (fdc *FileDeleteCreate) SetTags(m map[string]string) *FileDeleteCreate {
	fdc.mutation.SetTags(m)
	return fdc
}

// SetID sets the "id" field.
func (fdc *FileDeleteCreate) SetID(u uuid.UUID) *FileDeleteCreate {
	fdc.mutation.SetID(u)
	return fdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fdc *FileDeleteCreate) SetNillableID(u *uuid.UUID) *FileDeleteCreate {
	if u != nil {
		fdc.SetID(*u)
	}
	return fdc
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (fdc *FileDeleteCreate) SetEnvironmentID(id uuid.UUID) *FileDeleteCreate {
	fdc.mutation.SetEnvironmentID(id)
	return fdc
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (fdc *FileDeleteCreate) SetNillableEnvironmentID(id *uuid.UUID) *FileDeleteCreate {
	if id != nil {
		fdc = fdc.SetEnvironmentID(*id)
	}
	return fdc
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (fdc *FileDeleteCreate) SetEnvironment(e *Environment) *FileDeleteCreate {
	return fdc.SetEnvironmentID(e.ID)
}

// Mutation returns the FileDeleteMutation object of the builder.
func (fdc *FileDeleteCreate) Mutation() *FileDeleteMutation {
	return fdc.mutation
}

// Save creates the FileDelete in the database.
func (fdc *FileDeleteCreate) Save(ctx context.Context) (*FileDelete, error) {
	fdc.defaults()
	return withHooks(ctx, fdc.sqlSave, fdc.mutation, fdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FileDeleteCreate) SaveX(ctx context.Context) *FileDelete {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdc *FileDeleteCreate) Exec(ctx context.Context) error {
	_, err := fdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdc *FileDeleteCreate) ExecX(ctx context.Context) {
	if err := fdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdc *FileDeleteCreate) defaults() {
	if _, ok := fdc.mutation.ID(); !ok {
		v := filedelete.DefaultID()
		fdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdc *FileDeleteCreate) check() error {
	if _, ok := fdc.mutation.HCLID(); !ok {
		return &ValidationError{Name: "hcl_id", err: errors.New(`ent: missing required field "FileDelete.hcl_id"`)}
	}
	if _, ok := fdc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "FileDelete.path"`)}
	}
	if _, ok := fdc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "FileDelete.tags"`)}
	}
	return nil
}

func (fdc *FileDeleteCreate) sqlSave(ctx context.Context) (*FileDelete, error) {
	if err := fdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fdc.mutation.id = &_node.ID
	fdc.mutation.done = true
	return _node, nil
}

func (fdc *FileDeleteCreate) createSpec() (*FileDelete, *sqlgraph.CreateSpec) {
	var (
		_node = &FileDelete{config: fdc.config}
		_spec = sqlgraph.NewCreateSpec(filedelete.Table, sqlgraph.NewFieldSpec(filedelete.FieldID, field.TypeUUID))
	)
	if id, ok := fdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fdc.mutation.HCLID(); ok {
		_spec.SetField(filedelete.FieldHCLID, field.TypeString, value)
		_node.HCLID = value
	}
	if value, ok := fdc.mutation.Path(); ok {
		_spec.SetField(filedelete.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := fdc.mutation.Tags(); ok {
		_spec.SetField(filedelete.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := fdc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedelete.EnvironmentTable,
			Columns: []string{filedelete.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.environment_file_deletes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileDeleteCreateBulk is the builder for creating many FileDelete entities in bulk.
type FileDeleteCreateBulk struct {
	config
	err      error
	builders []*FileDeleteCreate
}

// Save creates the FileDelete entities in the database.
func (fdcb *FileDeleteCreateBulk) Save(ctx context.Context) ([]*FileDelete, error) {
	if fdcb.err != nil {
		return nil, fdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fdcb.builders))
	nodes := make([]*FileDelete, len(fdcb.builders))
	mutators := make([]Mutator, len(fdcb.builders))
	for i := range fdcb.builders {
		func(i int, root context.Context) {
			builder := fdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileDeleteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdcb *FileDeleteCreateBulk) SaveX(ctx context.Context) []*FileDelete {
	v, err := fdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdcb *FileDeleteCreateBulk) Exec(ctx context.Context) error {
	_, err := fdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdcb *FileDeleteCreateBulk) ExecX(ctx context.Context) {
	if err := fdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
