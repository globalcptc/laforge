// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// ProvisionedNetworkCreate is the builder for creating a ProvisionedNetwork entity.
type ProvisionedNetworkCreate struct {
	config
	mutation *ProvisionedNetworkMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pnc *ProvisionedNetworkCreate) SetName(s string) *ProvisionedNetworkCreate {
	pnc.mutation.SetName(s)
	return pnc
}

// SetCidr sets the "cidr" field.
func (pnc *ProvisionedNetworkCreate) SetCidr(s string) *ProvisionedNetworkCreate {
	pnc.mutation.SetCidr(s)
	return pnc
}

// SetVars sets the "vars" field.
func (pnc *ProvisionedNetworkCreate) SetVars(m map[string]string) *ProvisionedNetworkCreate {
	pnc.mutation.SetVars(m)
	return pnc
}

// SetID sets the "id" field.
func (pnc *ProvisionedNetworkCreate) SetID(u uuid.UUID) *ProvisionedNetworkCreate {
	pnc.mutation.SetID(u)
	return pnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pnc *ProvisionedNetworkCreate) SetNillableID(u *uuid.UUID) *ProvisionedNetworkCreate {
	if u != nil {
		pnc.SetID(*u)
	}
	return pnc
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (pnc *ProvisionedNetworkCreate) SetStatusID(id uuid.UUID) *ProvisionedNetworkCreate {
	pnc.mutation.SetStatusID(id)
	return pnc
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (pnc *ProvisionedNetworkCreate) SetNillableStatusID(id *uuid.UUID) *ProvisionedNetworkCreate {
	if id != nil {
		pnc = pnc.SetStatusID(*id)
	}
	return pnc
}

// SetStatus sets the "Status" edge to the Status entity.
func (pnc *ProvisionedNetworkCreate) SetStatus(s *Status) *ProvisionedNetworkCreate {
	return pnc.SetStatusID(s.ID)
}

// SetNetworkID sets the "Network" edge to the Network entity by ID.
func (pnc *ProvisionedNetworkCreate) SetNetworkID(id uuid.UUID) *ProvisionedNetworkCreate {
	pnc.mutation.SetNetworkID(id)
	return pnc
}

// SetNillableNetworkID sets the "Network" edge to the Network entity by ID if the given value is not nil.
func (pnc *ProvisionedNetworkCreate) SetNillableNetworkID(id *uuid.UUID) *ProvisionedNetworkCreate {
	if id != nil {
		pnc = pnc.SetNetworkID(*id)
	}
	return pnc
}

// SetNetwork sets the "Network" edge to the Network entity.
func (pnc *ProvisionedNetworkCreate) SetNetwork(n *Network) *ProvisionedNetworkCreate {
	return pnc.SetNetworkID(n.ID)
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (pnc *ProvisionedNetworkCreate) SetBuildID(id uuid.UUID) *ProvisionedNetworkCreate {
	pnc.mutation.SetBuildID(id)
	return pnc
}

// SetNillableBuildID sets the "Build" edge to the Build entity by ID if the given value is not nil.
func (pnc *ProvisionedNetworkCreate) SetNillableBuildID(id *uuid.UUID) *ProvisionedNetworkCreate {
	if id != nil {
		pnc = pnc.SetBuildID(*id)
	}
	return pnc
}

// SetBuild sets the "Build" edge to the Build entity.
func (pnc *ProvisionedNetworkCreate) SetBuild(b *Build) *ProvisionedNetworkCreate {
	return pnc.SetBuildID(b.ID)
}

// SetTeamID sets the "Team" edge to the Team entity by ID.
func (pnc *ProvisionedNetworkCreate) SetTeamID(id uuid.UUID) *ProvisionedNetworkCreate {
	pnc.mutation.SetTeamID(id)
	return pnc
}

// SetNillableTeamID sets the "Team" edge to the Team entity by ID if the given value is not nil.
func (pnc *ProvisionedNetworkCreate) SetNillableTeamID(id *uuid.UUID) *ProvisionedNetworkCreate {
	if id != nil {
		pnc = pnc.SetTeamID(*id)
	}
	return pnc
}

// SetTeam sets the "Team" edge to the Team entity.
func (pnc *ProvisionedNetworkCreate) SetTeam(t *Team) *ProvisionedNetworkCreate {
	return pnc.SetTeamID(t.ID)
}

// AddProvisionedHostIDs adds the "ProvisionedHosts" edge to the ProvisionedHost entity by IDs.
func (pnc *ProvisionedNetworkCreate) AddProvisionedHostIDs(ids ...uuid.UUID) *ProvisionedNetworkCreate {
	pnc.mutation.AddProvisionedHostIDs(ids...)
	return pnc
}

// AddProvisionedHosts adds the "ProvisionedHosts" edges to the ProvisionedHost entity.
func (pnc *ProvisionedNetworkCreate) AddProvisionedHosts(p ...*ProvisionedHost) *ProvisionedNetworkCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnc.AddProvisionedHostIDs(ids...)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (pnc *ProvisionedNetworkCreate) SetPlanID(id uuid.UUID) *ProvisionedNetworkCreate {
	pnc.mutation.SetPlanID(id)
	return pnc
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (pnc *ProvisionedNetworkCreate) SetNillablePlanID(id *uuid.UUID) *ProvisionedNetworkCreate {
	if id != nil {
		pnc = pnc.SetPlanID(*id)
	}
	return pnc
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (pnc *ProvisionedNetworkCreate) SetPlan(p *Plan) *ProvisionedNetworkCreate {
	return pnc.SetPlanID(p.ID)
}

// Mutation returns the ProvisionedNetworkMutation object of the builder.
func (pnc *ProvisionedNetworkCreate) Mutation() *ProvisionedNetworkMutation {
	return pnc.mutation
}

// Save creates the ProvisionedNetwork in the database.
func (pnc *ProvisionedNetworkCreate) Save(ctx context.Context) (*ProvisionedNetwork, error) {
	var (
		err  error
		node *ProvisionedNetwork
	)
	pnc.defaults()
	if len(pnc.hooks) == 0 {
		if err = pnc.check(); err != nil {
			return nil, err
		}
		node, err = pnc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedNetworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pnc.check(); err != nil {
				return nil, err
			}
			pnc.mutation = mutation
			if node, err = pnc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pnc.hooks) - 1; i >= 0; i-- {
			if pnc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pnc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pnc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProvisionedNetwork)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProvisionedNetworkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pnc *ProvisionedNetworkCreate) SaveX(ctx context.Context) *ProvisionedNetwork {
	v, err := pnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pnc *ProvisionedNetworkCreate) Exec(ctx context.Context) error {
	_, err := pnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnc *ProvisionedNetworkCreate) ExecX(ctx context.Context) {
	if err := pnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnc *ProvisionedNetworkCreate) defaults() {
	if _, ok := pnc.mutation.ID(); !ok {
		v := provisionednetwork.DefaultID()
		pnc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnc *ProvisionedNetworkCreate) check() error {
	if _, ok := pnc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProvisionedNetwork.name"`)}
	}
	if _, ok := pnc.mutation.Cidr(); !ok {
		return &ValidationError{Name: "cidr", err: errors.New(`ent: missing required field "ProvisionedNetwork.cidr"`)}
	}
	if _, ok := pnc.mutation.Vars(); !ok {
		return &ValidationError{Name: "vars", err: errors.New(`ent: missing required field "ProvisionedNetwork.vars"`)}
	}
	return nil
}

func (pnc *ProvisionedNetworkCreate) sqlSave(ctx context.Context) (*ProvisionedNetwork, error) {
	_node, _spec := pnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pnc *ProvisionedNetworkCreate) createSpec() (*ProvisionedNetwork, *sqlgraph.CreateSpec) {
	var (
		_node = &ProvisionedNetwork{config: pnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: provisionednetwork.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionednetwork.FieldID,
			},
		}
	)
	if id, ok := pnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pnc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisionednetwork.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pnc.mutation.Cidr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisionednetwork.FieldCidr,
		})
		_node.Cidr = value
	}
	if value, ok := pnc.mutation.Vars(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: provisionednetwork.FieldVars,
		})
		_node.Vars = value
	}
	if nodes := pnc.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionednetwork.StatusTable,
			Columns: []string{provisionednetwork.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionednetwork.NetworkTable,
			Columns: []string{provisionednetwork.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioned_network_network = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionednetwork.BuildTable,
			Columns: []string{provisionednetwork.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioned_network_build = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionednetwork.TeamTable,
			Columns: []string{provisionednetwork.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioned_network_team = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.ProvisionedHostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionednetwork.ProvisionedHostsTable,
			Columns: []string{provisionednetwork.ProvisionedHostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionednetwork.PlanTable,
			Columns: []string{provisionednetwork.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plan_provisioned_network = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProvisionedNetworkCreateBulk is the builder for creating many ProvisionedNetwork entities in bulk.
type ProvisionedNetworkCreateBulk struct {
	config
	builders []*ProvisionedNetworkCreate
}

// Save creates the ProvisionedNetwork entities in the database.
func (pncb *ProvisionedNetworkCreateBulk) Save(ctx context.Context) ([]*ProvisionedNetwork, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pncb.builders))
	nodes := make([]*ProvisionedNetwork, len(pncb.builders))
	mutators := make([]Mutator, len(pncb.builders))
	for i := range pncb.builders {
		func(i int, root context.Context) {
			builder := pncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProvisionedNetworkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pncb *ProvisionedNetworkCreateBulk) SaveX(ctx context.Context) []*ProvisionedNetwork {
	v, err := pncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pncb *ProvisionedNetworkCreateBulk) Exec(ctx context.Context) error {
	_, err := pncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pncb *ProvisionedNetworkCreateBulk) ExecX(ctx context.Context) {
	if err := pncb.Exec(ctx); err != nil {
		panic(err)
	}
}
