// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/google/uuid"
)

// Repository is the model entity for the Repository schema.
type Repository struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RepoURL holds the value of the "repo_url" field.
	RepoURL string `json:"repo_url,omitempty"`
	// BranchName holds the value of the "branch_name" field.
	BranchName string `json:"branch_name,omitempty"`
	// EnviromentFilepath holds the value of the "enviroment_filepath" field.
	EnviromentFilepath string `json:"enviroment_filepath,omitempty"`
	// FolderPath holds the value of the "folder_path" field.
	FolderPath string `json:"folder_path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryQuery when eager-loading is set.
	Edges RepositoryEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// RepositoryToEnvironment holds the value of the RepositoryToEnvironment edge.
	HCLRepositoryToEnvironment []*Environment `json:"RepositoryToEnvironment,omitempty"`
	// RepositoryToRepoCommit holds the value of the RepositoryToRepoCommit edge.
	HCLRepositoryToRepoCommit []*RepoCommit `json:"RepositoryToRepoCommit,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	selectValues sql.SelectValues
}

// RepositoryEdges holds the relations/edges for other nodes in the graph.
type RepositoryEdges struct {
	// RepositoryToEnvironment holds the value of the RepositoryToEnvironment edge.
	RepositoryToEnvironment []*Environment `json:"RepositoryToEnvironment,omitempty"`
	// RepositoryToRepoCommit holds the value of the RepositoryToRepoCommit edge.
	RepositoryToRepoCommit []*RepoCommit `json:"RepositoryToRepoCommit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedRepositoryToEnvironment map[string][]*Environment
	namedRepositoryToRepoCommit  map[string][]*RepoCommit
}

// RepositoryToEnvironmentOrErr returns the RepositoryToEnvironment value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) RepositoryToEnvironmentOrErr() ([]*Environment, error) {
	if e.loadedTypes[0] {
		return e.RepositoryToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "RepositoryToEnvironment"}
}

// RepositoryToRepoCommitOrErr returns the RepositoryToRepoCommit value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) RepositoryToRepoCommitOrErr() ([]*RepoCommit, error) {
	if e.loadedTypes[1] {
		return e.RepositoryToRepoCommit, nil
	}
	return nil, &NotLoadedError{edge: "RepositoryToRepoCommit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repository.FieldRepoURL, repository.FieldBranchName, repository.FieldEnviromentFilepath, repository.FieldFolderPath:
			values[i] = new(sql.NullString)
		case repository.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repository fields.
func (r *Repository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case repository.FieldRepoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_url", values[i])
			} else if value.Valid {
				r.RepoURL = value.String
			}
		case repository.FieldBranchName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch_name", values[i])
			} else if value.Valid {
				r.BranchName = value.String
			}
		case repository.FieldEnviromentFilepath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enviroment_filepath", values[i])
			} else if value.Valid {
				r.EnviromentFilepath = value.String
			}
		case repository.FieldFolderPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_path", values[i])
			} else if value.Valid {
				r.FolderPath = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Repository.
// This includes values selected through modifiers, order, etc.
func (r *Repository) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRepositoryToEnvironment queries the "RepositoryToEnvironment" edge of the Repository entity.
func (r *Repository) QueryRepositoryToEnvironment() *EnvironmentQuery {
	return NewRepositoryClient(r.config).QueryRepositoryToEnvironment(r)
}

// QueryRepositoryToRepoCommit queries the "RepositoryToRepoCommit" edge of the Repository entity.
func (r *Repository) QueryRepositoryToRepoCommit() *RepoCommitQuery {
	return NewRepositoryClient(r.config).QueryRepositoryToRepoCommit(r)
}

// Update returns a builder for updating this Repository.
// Note that you need to call Repository.Unwrap() before calling this method if this Repository
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repository) Update() *RepositoryUpdateOne {
	return NewRepositoryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Repository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repository) Unwrap() *Repository {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repository is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repository) String() string {
	var builder strings.Builder
	builder.WriteString("Repository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("repo_url=")
	builder.WriteString(r.RepoURL)
	builder.WriteString(", ")
	builder.WriteString("branch_name=")
	builder.WriteString(r.BranchName)
	builder.WriteString(", ")
	builder.WriteString("enviroment_filepath=")
	builder.WriteString(r.EnviromentFilepath)
	builder.WriteString(", ")
	builder.WriteString("folder_path=")
	builder.WriteString(r.FolderPath)
	builder.WriteByte(')')
	return builder.String()
}

// NamedRepositoryToEnvironment returns the RepositoryToEnvironment named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Repository) NamedRepositoryToEnvironment(name string) ([]*Environment, error) {
	if r.Edges.namedRepositoryToEnvironment == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRepositoryToEnvironment[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Repository) appendNamedRepositoryToEnvironment(name string, edges ...*Environment) {
	if r.Edges.namedRepositoryToEnvironment == nil {
		r.Edges.namedRepositoryToEnvironment = make(map[string][]*Environment)
	}
	if len(edges) == 0 {
		r.Edges.namedRepositoryToEnvironment[name] = []*Environment{}
	} else {
		r.Edges.namedRepositoryToEnvironment[name] = append(r.Edges.namedRepositoryToEnvironment[name], edges...)
	}
}

// NamedRepositoryToRepoCommit returns the RepositoryToRepoCommit named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Repository) NamedRepositoryToRepoCommit(name string) ([]*RepoCommit, error) {
	if r.Edges.namedRepositoryToRepoCommit == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRepositoryToRepoCommit[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Repository) appendNamedRepositoryToRepoCommit(name string, edges ...*RepoCommit) {
	if r.Edges.namedRepositoryToRepoCommit == nil {
		r.Edges.namedRepositoryToRepoCommit = make(map[string][]*RepoCommit)
	}
	if len(edges) == 0 {
		r.Edges.namedRepositoryToRepoCommit[name] = []*RepoCommit{}
	} else {
		r.Edges.namedRepositoryToRepoCommit[name] = append(r.Edges.namedRepositoryToRepoCommit[name], edges...)
	}
}

// Repositories is a parsable slice of Repository.
type Repositories []*Repository
