// Code generated by ent, DO NOT EDIT.

package filedelete

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldLTE(FieldID, id))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEQ(FieldHCLID, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEQ(FieldPath, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldContainsFold(FieldHCLID, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.FileDelete {
	return predicate.FileDelete(sql.FieldContainsFold(FieldPath, v))
}

// HasFileDeleteToEnvironment applies the HasEdge predicate on the "FileDeleteToEnvironment" edge.
func HasFileDeleteToEnvironment() predicate.FileDelete {
	return predicate.FileDelete(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileDeleteToEnvironmentTable, FileDeleteToEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileDeleteToEnvironmentWith applies the HasEdge predicate on the "FileDeleteToEnvironment" edge with a given conditions (other predicates).
func HasFileDeleteToEnvironmentWith(preds ...predicate.Environment) predicate.FileDelete {
	return predicate.FileDelete(func(s *sql.Selector) {
		step := newFileDeleteToEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileDelete) predicate.FileDelete {
	return predicate.FileDelete(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileDelete) predicate.FileDelete {
	return predicate.FileDelete(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileDelete) predicate.FileDelete {
	return predicate.FileDelete(sql.NotPredicates(p))
}
