// Code generated by ent, DO NOT EDIT.

package ginfilemiddleware

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ginfilemiddleware type in the database.
	Label = "gin_file_middleware"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURLID holds the string denoting the url_id field in the database.
	FieldURLID = "url_id"
	// FieldFilePath holds the string denoting the file_path field in the database.
	FieldFilePath = "file_path"
	// FieldAccessed holds the string denoting the accessed field in the database.
	FieldAccessed = "accessed"
	// EdgeProvisionedHost holds the string denoting the provisionedhost edge name in mutations.
	EdgeProvisionedHost = "ProvisionedHost"
	// EdgeProvisioningStep holds the string denoting the provisioningstep edge name in mutations.
	EdgeProvisioningStep = "ProvisioningStep"
	// EdgeProvisioningScheduledStep holds the string denoting the provisioningscheduledstep edge name in mutations.
	EdgeProvisioningScheduledStep = "ProvisioningScheduledStep"
	// Table holds the table name of the ginfilemiddleware in the database.
	Table = "gin_file_middlewares"
	// ProvisionedHostTable is the table that holds the ProvisionedHost relation/edge.
	ProvisionedHostTable = "provisioned_hosts"
	// ProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisionedHostInverseTable = "provisioned_hosts"
	// ProvisionedHostColumn is the table column denoting the ProvisionedHost relation/edge.
	ProvisionedHostColumn = "gin_file_middleware_provisioned_host"
	// ProvisioningStepTable is the table that holds the ProvisioningStep relation/edge.
	ProvisioningStepTable = "provisioning_steps"
	// ProvisioningStepInverseTable is the table name for the ProvisioningStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisioningstep" package.
	ProvisioningStepInverseTable = "provisioning_steps"
	// ProvisioningStepColumn is the table column denoting the ProvisioningStep relation/edge.
	ProvisioningStepColumn = "gin_file_middleware_provisioning_step"
	// ProvisioningScheduledStepTable is the table that holds the ProvisioningScheduledStep relation/edge.
	ProvisioningScheduledStepTable = "provisioning_scheduled_steps"
	// ProvisioningScheduledStepInverseTable is the table name for the ProvisioningScheduledStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisioningscheduledstep" package.
	ProvisioningScheduledStepInverseTable = "provisioning_scheduled_steps"
	// ProvisioningScheduledStepColumn is the table column denoting the ProvisioningScheduledStep relation/edge.
	ProvisioningScheduledStepColumn = "gin_file_middleware_provisioning_scheduled_step"
)

// Columns holds all SQL columns for ginfilemiddleware fields.
var Columns = []string{
	FieldID,
	FieldURLID,
	FieldFilePath,
	FieldAccessed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "gin_file_middlewares"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"server_task_gin_file_middleware",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAccessed holds the default value on creation for the "accessed" field.
	DefaultAccessed bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the GinFileMiddleware queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURLID orders the results by the url_id field.
func ByURLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLID, opts...).ToFunc()
}

// ByFilePath orders the results by the file_path field.
func ByFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilePath, opts...).ToFunc()
}

// ByAccessed orders the results by the accessed field.
func ByAccessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessed, opts...).ToFunc()
}

// ByProvisionedHostField orders the results by ProvisionedHost field.
func ByProvisionedHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionedHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepField orders the results by ProvisioningStep field.
func ByProvisioningStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningScheduledStepField orders the results by ProvisioningScheduledStep field.
func ByProvisioningScheduledStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningScheduledStepStep(), sql.OrderByField(field, opts...))
	}
}
func newProvisionedHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionedHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedHostTable, ProvisionedHostColumn),
	)
}
func newProvisioningStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisioningStepTable, ProvisioningStepColumn),
	)
}
func newProvisioningScheduledStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningScheduledStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisioningScheduledStepTable, ProvisioningScheduledStepColumn),
	)
}
