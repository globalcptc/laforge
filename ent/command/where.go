// Code generated by ent, DO NOT EDIT.

package command

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldID, id))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldHCLID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldDescription, v))
}

// Program applies equality check predicate on the "program" field. It's identical to ProgramEQ.
func Program(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldProgram, v))
}

// IgnoreErrors applies equality check predicate on the "ignore_errors" field. It's identical to IgnoreErrorsEQ.
func IgnoreErrors(v bool) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldIgnoreErrors, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldDisabled, v))
}

// Cooldown applies equality check predicate on the "cooldown" field. It's identical to CooldownEQ.
func Cooldown(v int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldCooldown, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldTimeout, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldHCLID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldDescription, v))
}

// ProgramEQ applies the EQ predicate on the "program" field.
func ProgramEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldProgram, v))
}

// ProgramNEQ applies the NEQ predicate on the "program" field.
func ProgramNEQ(v string) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldProgram, v))
}

// ProgramIn applies the In predicate on the "program" field.
func ProgramIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldProgram, vs...))
}

// ProgramNotIn applies the NotIn predicate on the "program" field.
func ProgramNotIn(vs ...string) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldProgram, vs...))
}

// ProgramGT applies the GT predicate on the "program" field.
func ProgramGT(v string) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldProgram, v))
}

// ProgramGTE applies the GTE predicate on the "program" field.
func ProgramGTE(v string) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldProgram, v))
}

// ProgramLT applies the LT predicate on the "program" field.
func ProgramLT(v string) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldProgram, v))
}

// ProgramLTE applies the LTE predicate on the "program" field.
func ProgramLTE(v string) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldProgram, v))
}

// ProgramContains applies the Contains predicate on the "program" field.
func ProgramContains(v string) predicate.Command {
	return predicate.Command(sql.FieldContains(FieldProgram, v))
}

// ProgramHasPrefix applies the HasPrefix predicate on the "program" field.
func ProgramHasPrefix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasPrefix(FieldProgram, v))
}

// ProgramHasSuffix applies the HasSuffix predicate on the "program" field.
func ProgramHasSuffix(v string) predicate.Command {
	return predicate.Command(sql.FieldHasSuffix(FieldProgram, v))
}

// ProgramEqualFold applies the EqualFold predicate on the "program" field.
func ProgramEqualFold(v string) predicate.Command {
	return predicate.Command(sql.FieldEqualFold(FieldProgram, v))
}

// ProgramContainsFold applies the ContainsFold predicate on the "program" field.
func ProgramContainsFold(v string) predicate.Command {
	return predicate.Command(sql.FieldContainsFold(FieldProgram, v))
}

// IgnoreErrorsEQ applies the EQ predicate on the "ignore_errors" field.
func IgnoreErrorsEQ(v bool) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldIgnoreErrors, v))
}

// IgnoreErrorsNEQ applies the NEQ predicate on the "ignore_errors" field.
func IgnoreErrorsNEQ(v bool) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldIgnoreErrors, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldDisabled, v))
}

// CooldownEQ applies the EQ predicate on the "cooldown" field.
func CooldownEQ(v int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldCooldown, v))
}

// CooldownNEQ applies the NEQ predicate on the "cooldown" field.
func CooldownNEQ(v int) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldCooldown, v))
}

// CooldownIn applies the In predicate on the "cooldown" field.
func CooldownIn(vs ...int) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldCooldown, vs...))
}

// CooldownNotIn applies the NotIn predicate on the "cooldown" field.
func CooldownNotIn(vs ...int) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldCooldown, vs...))
}

// CooldownGT applies the GT predicate on the "cooldown" field.
func CooldownGT(v int) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldCooldown, v))
}

// CooldownGTE applies the GTE predicate on the "cooldown" field.
func CooldownGTE(v int) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldCooldown, v))
}

// CooldownLT applies the LT predicate on the "cooldown" field.
func CooldownLT(v int) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldCooldown, v))
}

// CooldownLTE applies the LTE predicate on the "cooldown" field.
func CooldownLTE(v int) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldCooldown, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.Command {
	return predicate.Command(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.Command {
	return predicate.Command(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.Command {
	return predicate.Command(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.Command {
	return predicate.Command(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.Command {
	return predicate.Command(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.Command {
	return predicate.Command(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.Command {
	return predicate.Command(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.Command {
	return predicate.Command(sql.FieldLTE(FieldTimeout, v))
}

// HasCommandToUser applies the HasEdge predicate on the "CommandToUser" edge.
func HasCommandToUser() predicate.Command {
	return predicate.Command(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommandToUserTable, CommandToUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommandToUserWith applies the HasEdge predicate on the "CommandToUser" edge with a given conditions (other predicates).
func HasCommandToUserWith(preds ...predicate.User) predicate.Command {
	return predicate.Command(func(s *sql.Selector) {
		step := newCommandToUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommandToEnvironment applies the HasEdge predicate on the "CommandToEnvironment" edge.
func HasCommandToEnvironment() predicate.Command {
	return predicate.Command(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommandToEnvironmentTable, CommandToEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommandToEnvironmentWith applies the HasEdge predicate on the "CommandToEnvironment" edge with a given conditions (other predicates).
func HasCommandToEnvironmentWith(preds ...predicate.Environment) predicate.Command {
	return predicate.Command(func(s *sql.Selector) {
		step := newCommandToEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Command) predicate.Command {
	return predicate.Command(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Command) predicate.Command {
	return predicate.Command(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Command) predicate.Command {
	return predicate.Command(sql.NotPredicates(p))
}
