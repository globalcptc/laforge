// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/google/uuid"
)

// Ansible is the model entity for the Ansible schema.
type Ansible struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,attr"`
	// HclID holds the value of the "hcl_id" field.
	HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty" hcl:"description,optional"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty" hcl:"source,attr"`
	// PlaybookName holds the value of the "playbook_name" field.
	PlaybookName string `json:"playbook_name,omitempty" hcl:"playbook_name,attr"`
	// Method holds the value of the "method" field.
	Method ansible.Method `json:"method,omitempty" hcl:"method,optional"`
	// Inventory holds the value of the "inventory" field.
	Inventory string `json:"inventory,omitempty" hcl:"inventory,optional"`
	// AbsPath holds the value of the "abs_path" field.
	AbsPath string `json:"abs_path,omitempty" hcl:"abs_path,optional"`
	// Tags holds the value of the "tags" field.
	Tags map[string]string `json:"tags,omitempty" hcl:"tags,optional"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnsibleQuery when eager-loading is set.
	Edges AnsibleEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Users holds the value of the Users edge.
	HCLUsers []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Environment holds the value of the Environment edge.
	HCLEnvironment *Environment `json:"Environment,omitempty"`
	//
	environment_ansibles *uuid.UUID
}

// AnsibleEdges holds the relations/edges for other nodes in the graph.
type AnsibleEdges struct {
	// Users holds the value of the Users edge.
	Users []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Environment holds the value of the Environment edge.
	Environment *Environment `json:"Environment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AnsibleEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "Users"}
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnsibleEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[1] {
		if e.Environment == nil {
			// The edge Environment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "Environment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ansible) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ansible.FieldTags:
			values[i] = new([]byte)
		case ansible.FieldName, ansible.FieldHclID, ansible.FieldDescription, ansible.FieldSource, ansible.FieldPlaybookName, ansible.FieldMethod, ansible.FieldInventory, ansible.FieldAbsPath:
			values[i] = new(sql.NullString)
		case ansible.FieldID:
			values[i] = new(uuid.UUID)
		case ansible.ForeignKeys[0]: // environment_ansibles
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ansible", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ansible fields.
func (a *Ansible) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ansible.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case ansible.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case ansible.FieldHclID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hcl_id", values[i])
			} else if value.Valid {
				a.HclID = value.String
			}
		case ansible.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case ansible.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				a.Source = value.String
			}
		case ansible.FieldPlaybookName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field playbook_name", values[i])
			} else if value.Valid {
				a.PlaybookName = value.String
			}
		case ansible.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				a.Method = ansible.Method(value.String)
			}
		case ansible.FieldInventory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inventory", values[i])
			} else if value.Valid {
				a.Inventory = value.String
			}
		case ansible.FieldAbsPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abs_path", values[i])
			} else if value.Valid {
				a.AbsPath = value.String
			}
		case ansible.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case ansible.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field environment_ansibles", values[i])
			} else if value.Valid {
				a.environment_ansibles = new(uuid.UUID)
				*a.environment_ansibles = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUsers queries the "Users" edge of the Ansible entity.
func (a *Ansible) QueryUsers() *UserQuery {
	return (&AnsibleClient{config: a.config}).QueryUsers(a)
}

// QueryEnvironment queries the "Environment" edge of the Ansible entity.
func (a *Ansible) QueryEnvironment() *EnvironmentQuery {
	return (&AnsibleClient{config: a.config}).QueryEnvironment(a)
}

// Update returns a builder for updating this Ansible.
// Note that you need to call Ansible.Unwrap() before calling this method if this Ansible
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Ansible) Update() *AnsibleUpdateOne {
	return (&AnsibleClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Ansible entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Ansible) Unwrap() *Ansible {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ansible is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Ansible) String() string {
	var builder strings.Builder
	builder.WriteString("Ansible(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", hcl_id=")
	builder.WriteString(a.HclID)
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteString(", source=")
	builder.WriteString(a.Source)
	builder.WriteString(", playbook_name=")
	builder.WriteString(a.PlaybookName)
	builder.WriteString(", method=")
	builder.WriteString(fmt.Sprintf("%v", a.Method))
	builder.WriteString(", inventory=")
	builder.WriteString(a.Inventory)
	builder.WriteString(", abs_path=")
	builder.WriteString(a.AbsPath)
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", a.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Ansibles is a parsable slice of Ansible.
type Ansibles []*Ansible

func (a Ansibles) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
