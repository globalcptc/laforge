// Code generated by ent, DO NOT EDIT.

package dnsrecord

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLTE(FieldID, id))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldHCLID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldType, v))
}

// Zone applies equality check predicate on the "zone" field. It's identical to ZoneEQ.
func Zone(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldZone, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldDisabled, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContainsFold(FieldHCLID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContainsFold(FieldType, v))
}

// ZoneEQ applies the EQ predicate on the "zone" field.
func ZoneEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldZone, v))
}

// ZoneNEQ applies the NEQ predicate on the "zone" field.
func ZoneNEQ(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNEQ(FieldZone, v))
}

// ZoneIn applies the In predicate on the "zone" field.
func ZoneIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldIn(FieldZone, vs...))
}

// ZoneNotIn applies the NotIn predicate on the "zone" field.
func ZoneNotIn(vs ...string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNotIn(FieldZone, vs...))
}

// ZoneGT applies the GT predicate on the "zone" field.
func ZoneGT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGT(FieldZone, v))
}

// ZoneGTE applies the GTE predicate on the "zone" field.
func ZoneGTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldGTE(FieldZone, v))
}

// ZoneLT applies the LT predicate on the "zone" field.
func ZoneLT(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLT(FieldZone, v))
}

// ZoneLTE applies the LTE predicate on the "zone" field.
func ZoneLTE(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldLTE(FieldZone, v))
}

// ZoneContains applies the Contains predicate on the "zone" field.
func ZoneContains(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContains(FieldZone, v))
}

// ZoneHasPrefix applies the HasPrefix predicate on the "zone" field.
func ZoneHasPrefix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasPrefix(FieldZone, v))
}

// ZoneHasSuffix applies the HasSuffix predicate on the "zone" field.
func ZoneHasSuffix(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldHasSuffix(FieldZone, v))
}

// ZoneEqualFold applies the EqualFold predicate on the "zone" field.
func ZoneEqualFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEqualFold(FieldZone, v))
}

// ZoneContainsFold applies the ContainsFold predicate on the "zone" field.
func ZoneContainsFold(v string) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldContainsFold(FieldZone, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.DNSRecord {
	return predicate.DNSRecord(sql.FieldNEQ(FieldDisabled, v))
}

// HasDNSRecordToEnvironment applies the HasEdge predicate on the "DNSRecordToEnvironment" edge.
func HasDNSRecordToEnvironment() predicate.DNSRecord {
	return predicate.DNSRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DNSRecordToEnvironmentTable, DNSRecordToEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDNSRecordToEnvironmentWith applies the HasEdge predicate on the "DNSRecordToEnvironment" edge with a given conditions (other predicates).
func HasDNSRecordToEnvironmentWith(preds ...predicate.Environment) predicate.DNSRecord {
	return predicate.DNSRecord(func(s *sql.Selector) {
		step := newDNSRecordToEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DNSRecord) predicate.DNSRecord {
	return predicate.DNSRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DNSRecord) predicate.DNSRecord {
	return predicate.DNSRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DNSRecord) predicate.DNSRecord {
	return predicate.DNSRecord(sql.NotPredicates(p))
}
