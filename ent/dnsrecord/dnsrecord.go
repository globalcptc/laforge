// Code generated by ent, DO NOT EDIT.

package dnsrecord

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dnsrecord type in the database.
	Label = "dns_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHclID holds the string denoting the hcl_id field in the database.
	FieldHclID = "hcl_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValues holds the string denoting the values field in the database.
	FieldValues = "values"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldZone holds the string denoting the zone field in the database.
	FieldZone = "zone"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// Table holds the table name of the dnsrecord in the database.
	Table = "dns_records"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "dns_records"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "environment_dns_records"
)

// Columns holds all SQL columns for dnsrecord fields.
var Columns = []string{
	FieldID,
	FieldHclID,
	FieldName,
	FieldValues,
	FieldType,
	FieldZone,
	FieldVars,
	FieldDisabled,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dns_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_dns_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
