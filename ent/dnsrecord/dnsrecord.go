// Code generated by ent, DO NOT EDIT.

package dnsrecord

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dnsrecord type in the database.
	Label = "dns_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValues holds the string denoting the values field in the database.
	FieldValues = "values"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldZone holds the string denoting the zone field in the database.
	FieldZone = "zone"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeDNSRecordToEnvironment holds the string denoting the dnsrecordtoenvironment edge name in mutations.
	EdgeDNSRecordToEnvironment = "DNSRecordToEnvironment"
	// Table holds the table name of the dnsrecord in the database.
	Table = "dns_records"
	// DNSRecordToEnvironmentTable is the table that holds the DNSRecordToEnvironment relation/edge.
	DNSRecordToEnvironmentTable = "dns_records"
	// DNSRecordToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	DNSRecordToEnvironmentInverseTable = "environments"
	// DNSRecordToEnvironmentColumn is the table column denoting the DNSRecordToEnvironment relation/edge.
	DNSRecordToEnvironmentColumn = "environment_environment_to_dns_record"
)

// Columns holds all SQL columns for dnsrecord fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldName,
	FieldValues,
	FieldType,
	FieldZone,
	FieldVars,
	FieldDisabled,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dns_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_environment_to_dns_record",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DNSRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByZone orders the results by the zone field.
func ByZone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZone, opts...).ToFunc()
}

// ByDisabled orders the results by the disabled field.
func ByDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabled, opts...).ToFunc()
}

// ByDNSRecordToEnvironmentField orders the results by DNSRecordToEnvironment field.
func ByDNSRecordToEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDNSRecordToEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}
func newDNSRecordToEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DNSRecordToEnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DNSRecordToEnvironmentTable, DNSRecordToEnvironmentColumn),
	)
}
