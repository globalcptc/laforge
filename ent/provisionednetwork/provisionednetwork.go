// Code generated by ent, DO NOT EDIT.

package provisionednetwork

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the provisionednetwork type in the database.
	Label = "provisioned_network"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCidr holds the string denoting the cidr field in the database.
	FieldCidr = "cidr"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "Status"
	// EdgeNetwork holds the string denoting the network edge name in mutations.
	EdgeNetwork = "Network"
	// EdgeBuild holds the string denoting the build edge name in mutations.
	EdgeBuild = "Build"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "Team"
	// EdgeProvisionedHosts holds the string denoting the provisionedhosts edge name in mutations.
	EdgeProvisionedHosts = "ProvisionedHosts"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "Plan"
	// Table holds the table name of the provisionednetwork in the database.
	Table = "provisioned_networks"
	// StatusTable is the table that holds the Status relation/edge.
	StatusTable = "status"
	// StatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	StatusInverseTable = "status"
	// StatusColumn is the table column denoting the Status relation/edge.
	StatusColumn = "provisioned_network_status"
	// NetworkTable is the table that holds the Network relation/edge.
	NetworkTable = "provisioned_networks"
	// NetworkInverseTable is the table name for the Network entity.
	// It exists in this package in order to avoid circular dependency with the "network" package.
	NetworkInverseTable = "networks"
	// NetworkColumn is the table column denoting the Network relation/edge.
	NetworkColumn = "provisioned_network_network"
	// BuildTable is the table that holds the Build relation/edge.
	BuildTable = "provisioned_networks"
	// BuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	BuildInverseTable = "builds"
	// BuildColumn is the table column denoting the Build relation/edge.
	BuildColumn = "provisioned_network_build"
	// TeamTable is the table that holds the Team relation/edge.
	TeamTable = "provisioned_networks"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the Team relation/edge.
	TeamColumn = "provisioned_network_team"
	// ProvisionedHostsTable is the table that holds the ProvisionedHosts relation/edge.
	ProvisionedHostsTable = "provisioned_hosts"
	// ProvisionedHostsInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisionedHostsInverseTable = "provisioned_hosts"
	// ProvisionedHostsColumn is the table column denoting the ProvisionedHosts relation/edge.
	ProvisionedHostsColumn = "provisioned_host_provisioned_network"
	// PlanTable is the table that holds the Plan relation/edge.
	PlanTable = "provisioned_networks"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plans"
	// PlanColumn is the table column denoting the Plan relation/edge.
	PlanColumn = "plan_provisioned_network"
)

// Columns holds all SQL columns for provisionednetwork fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCidr,
	FieldVars,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provisioned_networks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_provisioned_network",
	"provisioned_network_network",
	"provisioned_network_build",
	"provisioned_network_team",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
