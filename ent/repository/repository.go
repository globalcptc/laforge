// Code generated by ent, DO NOT EDIT.

package repository

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRepoURL holds the string denoting the repo_url field in the database.
	FieldRepoURL = "repo_url"
	// FieldBranchName holds the string denoting the branch_name field in the database.
	FieldBranchName = "branch_name"
	// FieldEnviromentFilepath holds the string denoting the enviroment_filepath field in the database.
	FieldEnviromentFilepath = "enviroment_filepath"
	// FieldFolderPath holds the string denoting the folder_path field in the database.
	FieldFolderPath = "folder_path"
	// EdgeEnvironments holds the string denoting the environments edge name in mutations.
	EdgeEnvironments = "Environments"
	// EdgeRepoCommits holds the string denoting the repocommits edge name in mutations.
	EdgeRepoCommits = "RepoCommits"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
	// EnvironmentsTable is the table that holds the Environments relation/edge. The primary key declared below.
	EnvironmentsTable = "repository_Environments"
	// EnvironmentsInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentsInverseTable = "environments"
	// RepoCommitsTable is the table that holds the RepoCommits relation/edge.
	RepoCommitsTable = "repo_commits"
	// RepoCommitsInverseTable is the table name for the RepoCommit entity.
	// It exists in this package in order to avoid circular dependency with the "repocommit" package.
	RepoCommitsInverseTable = "repo_commits"
	// RepoCommitsColumn is the table column denoting the RepoCommits relation/edge.
	RepoCommitsColumn = "repository_repo_commits"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldRepoURL,
	FieldBranchName,
	FieldEnviromentFilepath,
	FieldFolderPath,
}

var (
	// EnvironmentsPrimaryKey and EnvironmentsColumn2 are the table columns denoting the
	// primary key for the Environments relation (M2M).
	EnvironmentsPrimaryKey = []string{"repository_id", "environment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBranchName holds the default value on creation for the "branch_name" field.
	DefaultBranchName string
	// DefaultFolderPath holds the default value on creation for the "folder_path" field.
	DefaultFolderPath string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Repository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRepoURL orders the results by the repo_url field.
func ByRepoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoURL, opts...).ToFunc()
}

// ByBranchName orders the results by the branch_name field.
func ByBranchName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchName, opts...).ToFunc()
}

// ByEnviromentFilepath orders the results by the enviroment_filepath field.
func ByEnviromentFilepath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnviromentFilepath, opts...).ToFunc()
}

// ByFolderPath orders the results by the folder_path field.
func ByFolderPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolderPath, opts...).ToFunc()
}

// ByEnvironmentsCount orders the results by Environments count.
func ByEnvironmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEnvironmentsStep(), opts...)
	}
}

// ByEnvironments orders the results by Environments terms.
func ByEnvironments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvironmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepoCommitsCount orders the results by RepoCommits count.
func ByRepoCommitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepoCommitsStep(), opts...)
	}
}

// ByRepoCommits orders the results by RepoCommits terms.
func ByRepoCommits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepoCommitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEnvironmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvironmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EnvironmentsTable, EnvironmentsPrimaryKey...),
	)
}
func newRepoCommitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepoCommitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepoCommitsTable, RepoCommitsColumn),
	)
}
