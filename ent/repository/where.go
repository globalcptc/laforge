// Code generated by ent, DO NOT EDIT.

package repository

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RepoURL applies equality check predicate on the "repo_url" field. It's identical to RepoURLEQ.
func RepoURL(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoURL), v))
	})
}

// BranchName applies equality check predicate on the "branch_name" field. It's identical to BranchNameEQ.
func BranchName(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBranchName), v))
	})
}

// EnviromentFilepath applies equality check predicate on the "enviroment_filepath" field. It's identical to EnviromentFilepathEQ.
func EnviromentFilepath(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnviromentFilepath), v))
	})
}

// FolderPath applies equality check predicate on the "folder_path" field. It's identical to FolderPathEQ.
func FolderPath(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolderPath), v))
	})
}

// RepoURLEQ applies the EQ predicate on the "repo_url" field.
func RepoURLEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoURL), v))
	})
}

// RepoURLNEQ applies the NEQ predicate on the "repo_url" field.
func RepoURLNEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepoURL), v))
	})
}

// RepoURLIn applies the In predicate on the "repo_url" field.
func RepoURLIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRepoURL), v...))
	})
}

// RepoURLNotIn applies the NotIn predicate on the "repo_url" field.
func RepoURLNotIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRepoURL), v...))
	})
}

// RepoURLGT applies the GT predicate on the "repo_url" field.
func RepoURLGT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepoURL), v))
	})
}

// RepoURLGTE applies the GTE predicate on the "repo_url" field.
func RepoURLGTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepoURL), v))
	})
}

// RepoURLLT applies the LT predicate on the "repo_url" field.
func RepoURLLT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepoURL), v))
	})
}

// RepoURLLTE applies the LTE predicate on the "repo_url" field.
func RepoURLLTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepoURL), v))
	})
}

// RepoURLContains applies the Contains predicate on the "repo_url" field.
func RepoURLContains(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRepoURL), v))
	})
}

// RepoURLHasPrefix applies the HasPrefix predicate on the "repo_url" field.
func RepoURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRepoURL), v))
	})
}

// RepoURLHasSuffix applies the HasSuffix predicate on the "repo_url" field.
func RepoURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRepoURL), v))
	})
}

// RepoURLEqualFold applies the EqualFold predicate on the "repo_url" field.
func RepoURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRepoURL), v))
	})
}

// RepoURLContainsFold applies the ContainsFold predicate on the "repo_url" field.
func RepoURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRepoURL), v))
	})
}

// BranchNameEQ applies the EQ predicate on the "branch_name" field.
func BranchNameEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBranchName), v))
	})
}

// BranchNameNEQ applies the NEQ predicate on the "branch_name" field.
func BranchNameNEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBranchName), v))
	})
}

// BranchNameIn applies the In predicate on the "branch_name" field.
func BranchNameIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBranchName), v...))
	})
}

// BranchNameNotIn applies the NotIn predicate on the "branch_name" field.
func BranchNameNotIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBranchName), v...))
	})
}

// BranchNameGT applies the GT predicate on the "branch_name" field.
func BranchNameGT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBranchName), v))
	})
}

// BranchNameGTE applies the GTE predicate on the "branch_name" field.
func BranchNameGTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBranchName), v))
	})
}

// BranchNameLT applies the LT predicate on the "branch_name" field.
func BranchNameLT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBranchName), v))
	})
}

// BranchNameLTE applies the LTE predicate on the "branch_name" field.
func BranchNameLTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBranchName), v))
	})
}

// BranchNameContains applies the Contains predicate on the "branch_name" field.
func BranchNameContains(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBranchName), v))
	})
}

// BranchNameHasPrefix applies the HasPrefix predicate on the "branch_name" field.
func BranchNameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBranchName), v))
	})
}

// BranchNameHasSuffix applies the HasSuffix predicate on the "branch_name" field.
func BranchNameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBranchName), v))
	})
}

// BranchNameEqualFold applies the EqualFold predicate on the "branch_name" field.
func BranchNameEqualFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBranchName), v))
	})
}

// BranchNameContainsFold applies the ContainsFold predicate on the "branch_name" field.
func BranchNameContainsFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBranchName), v))
	})
}

// EnviromentFilepathEQ applies the EQ predicate on the "enviroment_filepath" field.
func EnviromentFilepathEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathNEQ applies the NEQ predicate on the "enviroment_filepath" field.
func EnviromentFilepathNEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathIn applies the In predicate on the "enviroment_filepath" field.
func EnviromentFilepathIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnviromentFilepath), v...))
	})
}

// EnviromentFilepathNotIn applies the NotIn predicate on the "enviroment_filepath" field.
func EnviromentFilepathNotIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnviromentFilepath), v...))
	})
}

// EnviromentFilepathGT applies the GT predicate on the "enviroment_filepath" field.
func EnviromentFilepathGT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathGTE applies the GTE predicate on the "enviroment_filepath" field.
func EnviromentFilepathGTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathLT applies the LT predicate on the "enviroment_filepath" field.
func EnviromentFilepathLT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathLTE applies the LTE predicate on the "enviroment_filepath" field.
func EnviromentFilepathLTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathContains applies the Contains predicate on the "enviroment_filepath" field.
func EnviromentFilepathContains(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathHasPrefix applies the HasPrefix predicate on the "enviroment_filepath" field.
func EnviromentFilepathHasPrefix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathHasSuffix applies the HasSuffix predicate on the "enviroment_filepath" field.
func EnviromentFilepathHasSuffix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathEqualFold applies the EqualFold predicate on the "enviroment_filepath" field.
func EnviromentFilepathEqualFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnviromentFilepath), v))
	})
}

// EnviromentFilepathContainsFold applies the ContainsFold predicate on the "enviroment_filepath" field.
func EnviromentFilepathContainsFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnviromentFilepath), v))
	})
}

// FolderPathEQ applies the EQ predicate on the "folder_path" field.
func FolderPathEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolderPath), v))
	})
}

// FolderPathNEQ applies the NEQ predicate on the "folder_path" field.
func FolderPathNEQ(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFolderPath), v))
	})
}

// FolderPathIn applies the In predicate on the "folder_path" field.
func FolderPathIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFolderPath), v...))
	})
}

// FolderPathNotIn applies the NotIn predicate on the "folder_path" field.
func FolderPathNotIn(vs ...string) predicate.Repository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFolderPath), v...))
	})
}

// FolderPathGT applies the GT predicate on the "folder_path" field.
func FolderPathGT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFolderPath), v))
	})
}

// FolderPathGTE applies the GTE predicate on the "folder_path" field.
func FolderPathGTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFolderPath), v))
	})
}

// FolderPathLT applies the LT predicate on the "folder_path" field.
func FolderPathLT(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFolderPath), v))
	})
}

// FolderPathLTE applies the LTE predicate on the "folder_path" field.
func FolderPathLTE(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFolderPath), v))
	})
}

// FolderPathContains applies the Contains predicate on the "folder_path" field.
func FolderPathContains(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFolderPath), v))
	})
}

// FolderPathHasPrefix applies the HasPrefix predicate on the "folder_path" field.
func FolderPathHasPrefix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFolderPath), v))
	})
}

// FolderPathHasSuffix applies the HasSuffix predicate on the "folder_path" field.
func FolderPathHasSuffix(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFolderPath), v))
	})
}

// FolderPathEqualFold applies the EqualFold predicate on the "folder_path" field.
func FolderPathEqualFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFolderPath), v))
	})
}

// FolderPathContainsFold applies the ContainsFold predicate on the "folder_path" field.
func FolderPathContainsFold(v string) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFolderPath), v))
	})
}

// HasEnvironments applies the HasEdge predicate on the "Environments" edge.
func HasEnvironments() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EnvironmentsTable, EnvironmentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentsWith applies the HasEdge predicate on the "Environments" edge with a given conditions (other predicates).
func HasEnvironmentsWith(preds ...predicate.Environment) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnvironmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EnvironmentsTable, EnvironmentsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRepoCommits applies the HasEdge predicate on the "RepoCommits" edge.
func HasRepoCommits() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepoCommitsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepoCommitsTable, RepoCommitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepoCommitsWith applies the HasEdge predicate on the "RepoCommits" edge with a given conditions (other predicates).
func HasRepoCommitsWith(preds ...predicate.RepoCommit) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepoCommitsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepoCommitsTable, RepoCommitsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repository) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		p(s.Not())
	})
}
