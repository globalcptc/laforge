// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/plandiff"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// PlanQuery is the builder for querying Plan entities.
type PlanQuery struct {
	config
	ctx                          *QueryContext
	order                        []plan.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.Plan
	withPrevPlan                 *PlanQuery
	withNextPlan                 *PlanQuery
	withPlanToBuild              *BuildQuery
	withPlanToTeam               *TeamQuery
	withPlanToProvisionedNetwork *ProvisionedNetworkQuery
	withPlanToProvisionedHost    *ProvisionedHostQuery
	withPlanToProvisioningStep   *ProvisioningStepQuery
	withPlanToStatus             *StatusQuery
	withPlanToPlanDiffs          *PlanDiffQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*Plan) error
	withNamedPrevPlan            map[string]*PlanQuery
	withNamedNextPlan            map[string]*PlanQuery
	withNamedPlanToPlanDiffs     map[string]*PlanDiffQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlanQuery builder.
func (pq *PlanQuery) Where(ps ...predicate.Plan) *PlanQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PlanQuery) Limit(limit int) *PlanQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PlanQuery) Offset(offset int) *PlanQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PlanQuery) Unique(unique bool) *PlanQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PlanQuery) Order(o ...plan.OrderOption) *PlanQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryPrevPlan chains the current query on the "PrevPlan" edge.
func (pq *PlanQuery) QueryPrevPlan() *PlanQuery {
	query := (&PlanClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, plan.PrevPlanTable, plan.PrevPlanPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNextPlan chains the current query on the "NextPlan" edge.
func (pq *PlanQuery) QueryNextPlan() *PlanQuery {
	query := (&PlanClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.NextPlanTable, plan.NextPlanPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanToBuild chains the current query on the "PlanToBuild" edge.
func (pq *PlanQuery) QueryPlanToBuild() *BuildQuery {
	query := (&BuildClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, plan.PlanToBuildTable, plan.PlanToBuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanToTeam chains the current query on the "PlanToTeam" edge.
func (pq *PlanQuery) QueryPlanToTeam() *TeamQuery {
	query := (&TeamClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.PlanToTeamTable, plan.PlanToTeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanToProvisionedNetwork chains the current query on the "PlanToProvisionedNetwork" edge.
func (pq *PlanQuery) QueryPlanToProvisionedNetwork() *ProvisionedNetworkQuery {
	query := (&ProvisionedNetworkClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.PlanToProvisionedNetworkTable, plan.PlanToProvisionedNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanToProvisionedHost chains the current query on the "PlanToProvisionedHost" edge.
func (pq *PlanQuery) QueryPlanToProvisionedHost() *ProvisionedHostQuery {
	query := (&ProvisionedHostClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.PlanToProvisionedHostTable, plan.PlanToProvisionedHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanToProvisioningStep chains the current query on the "PlanToProvisioningStep" edge.
func (pq *PlanQuery) QueryPlanToProvisioningStep() *ProvisioningStepQuery {
	query := (&ProvisioningStepClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.PlanToProvisioningStepTable, plan.PlanToProvisioningStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanToStatus chains the current query on the "PlanToStatus" edge.
func (pq *PlanQuery) QueryPlanToStatus() *StatusQuery {
	query := (&StatusClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.PlanToStatusTable, plan.PlanToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanToPlanDiffs chains the current query on the "PlanToPlanDiffs" edge.
func (pq *PlanQuery) QueryPlanToPlanDiffs() *PlanDiffQuery {
	query := (&PlanDiffClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(plandiff.Table, plandiff.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, plan.PlanToPlanDiffsTable, plan.PlanToPlanDiffsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Plan entity from the query.
// Returns a *NotFoundError when no Plan was found.
func (pq *PlanQuery) First(ctx context.Context) (*Plan, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{plan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PlanQuery) FirstX(ctx context.Context) *Plan {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Plan ID from the query.
// Returns a *NotFoundError when no Plan ID was found.
func (pq *PlanQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{plan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PlanQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Plan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Plan entity is found.
// Returns a *NotFoundError when no Plan entities are found.
func (pq *PlanQuery) Only(ctx context.Context) (*Plan, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{plan.Label}
	default:
		return nil, &NotSingularError{plan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PlanQuery) OnlyX(ctx context.Context) *Plan {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Plan ID in the query.
// Returns a *NotSingularError when more than one Plan ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PlanQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{plan.Label}
	default:
		err = &NotSingularError{plan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PlanQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Plans.
func (pq *PlanQuery) All(ctx context.Context) ([]*Plan, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Plan, *PlanQuery]()
	return withInterceptors[[]*Plan](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PlanQuery) AllX(ctx context.Context) []*Plan {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Plan IDs.
func (pq *PlanQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(plan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PlanQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PlanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PlanQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PlanQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PlanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PlanQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PlanQuery) Clone() *PlanQuery {
	if pq == nil {
		return nil
	}
	return &PlanQuery{
		config:                       pq.config,
		ctx:                          pq.ctx.Clone(),
		order:                        append([]plan.OrderOption{}, pq.order...),
		inters:                       append([]Interceptor{}, pq.inters...),
		predicates:                   append([]predicate.Plan{}, pq.predicates...),
		withPrevPlan:                 pq.withPrevPlan.Clone(),
		withNextPlan:                 pq.withNextPlan.Clone(),
		withPlanToBuild:              pq.withPlanToBuild.Clone(),
		withPlanToTeam:               pq.withPlanToTeam.Clone(),
		withPlanToProvisionedNetwork: pq.withPlanToProvisionedNetwork.Clone(),
		withPlanToProvisionedHost:    pq.withPlanToProvisionedHost.Clone(),
		withPlanToProvisioningStep:   pq.withPlanToProvisioningStep.Clone(),
		withPlanToStatus:             pq.withPlanToStatus.Clone(),
		withPlanToPlanDiffs:          pq.withPlanToPlanDiffs.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithPrevPlan tells the query-builder to eager-load the nodes that are connected to
// the "PrevPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPrevPlan(opts ...func(*PlanQuery)) *PlanQuery {
	query := (&PlanClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPrevPlan = query
	return pq
}

// WithNextPlan tells the query-builder to eager-load the nodes that are connected to
// the "NextPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithNextPlan(opts ...func(*PlanQuery)) *PlanQuery {
	query := (&PlanClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withNextPlan = query
	return pq
}

// WithPlanToBuild tells the query-builder to eager-load the nodes that are connected to
// the "PlanToBuild" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanToBuild(opts ...func(*BuildQuery)) *PlanQuery {
	query := (&BuildClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanToBuild = query
	return pq
}

// WithPlanToTeam tells the query-builder to eager-load the nodes that are connected to
// the "PlanToTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanToTeam(opts ...func(*TeamQuery)) *PlanQuery {
	query := (&TeamClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanToTeam = query
	return pq
}

// WithPlanToProvisionedNetwork tells the query-builder to eager-load the nodes that are connected to
// the "PlanToProvisionedNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanToProvisionedNetwork(opts ...func(*ProvisionedNetworkQuery)) *PlanQuery {
	query := (&ProvisionedNetworkClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanToProvisionedNetwork = query
	return pq
}

// WithPlanToProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "PlanToProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanToProvisionedHost(opts ...func(*ProvisionedHostQuery)) *PlanQuery {
	query := (&ProvisionedHostClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanToProvisionedHost = query
	return pq
}

// WithPlanToProvisioningStep tells the query-builder to eager-load the nodes that are connected to
// the "PlanToProvisioningStep" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanToProvisioningStep(opts ...func(*ProvisioningStepQuery)) *PlanQuery {
	query := (&ProvisioningStepClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanToProvisioningStep = query
	return pq
}

// WithPlanToStatus tells the query-builder to eager-load the nodes that are connected to
// the "PlanToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanToStatus(opts ...func(*StatusQuery)) *PlanQuery {
	query := (&StatusClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanToStatus = query
	return pq
}

// WithPlanToPlanDiffs tells the query-builder to eager-load the nodes that are connected to
// the "PlanToPlanDiffs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanToPlanDiffs(opts ...func(*PlanDiffQuery)) *PlanQuery {
	query := (&PlanDiffClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanToPlanDiffs = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StepNumber int `json:"step_number,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Plan.Query().
//		GroupBy(plan.FieldStepNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PlanQuery) GroupBy(field string, fields ...string) *PlanGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlanGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = plan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StepNumber int `json:"step_number,omitempty"`
//	}
//
//	client.Plan.Query().
//		Select(plan.FieldStepNumber).
//		Scan(ctx, &v)
func (pq *PlanQuery) Select(fields ...string) *PlanSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PlanSelect{PlanQuery: pq}
	sbuild.label = plan.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlanSelect configured with the given aggregations.
func (pq *PlanQuery) Aggregate(fns ...AggregateFunc) *PlanSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PlanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !plan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Plan, error) {
	var (
		nodes       = []*Plan{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [9]bool{
			pq.withPrevPlan != nil,
			pq.withNextPlan != nil,
			pq.withPlanToBuild != nil,
			pq.withPlanToTeam != nil,
			pq.withPlanToProvisionedNetwork != nil,
			pq.withPlanToProvisionedHost != nil,
			pq.withPlanToProvisioningStep != nil,
			pq.withPlanToStatus != nil,
			pq.withPlanToPlanDiffs != nil,
		}
	)
	if pq.withPlanToBuild != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, plan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Plan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Plan{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withPrevPlan; query != nil {
		if err := pq.loadPrevPlan(ctx, query, nodes,
			func(n *Plan) { n.Edges.PrevPlan = []*Plan{} },
			func(n *Plan, e *Plan) { n.Edges.PrevPlan = append(n.Edges.PrevPlan, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withNextPlan; query != nil {
		if err := pq.loadNextPlan(ctx, query, nodes,
			func(n *Plan) { n.Edges.NextPlan = []*Plan{} },
			func(n *Plan, e *Plan) { n.Edges.NextPlan = append(n.Edges.NextPlan, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanToBuild; query != nil {
		if err := pq.loadPlanToBuild(ctx, query, nodes, nil,
			func(n *Plan, e *Build) { n.Edges.PlanToBuild = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanToTeam; query != nil {
		if err := pq.loadPlanToTeam(ctx, query, nodes, nil,
			func(n *Plan, e *Team) { n.Edges.PlanToTeam = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanToProvisionedNetwork; query != nil {
		if err := pq.loadPlanToProvisionedNetwork(ctx, query, nodes, nil,
			func(n *Plan, e *ProvisionedNetwork) { n.Edges.PlanToProvisionedNetwork = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanToProvisionedHost; query != nil {
		if err := pq.loadPlanToProvisionedHost(ctx, query, nodes, nil,
			func(n *Plan, e *ProvisionedHost) { n.Edges.PlanToProvisionedHost = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanToProvisioningStep; query != nil {
		if err := pq.loadPlanToProvisioningStep(ctx, query, nodes, nil,
			func(n *Plan, e *ProvisioningStep) { n.Edges.PlanToProvisioningStep = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanToStatus; query != nil {
		if err := pq.loadPlanToStatus(ctx, query, nodes, nil,
			func(n *Plan, e *Status) { n.Edges.PlanToStatus = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanToPlanDiffs; query != nil {
		if err := pq.loadPlanToPlanDiffs(ctx, query, nodes,
			func(n *Plan) { n.Edges.PlanToPlanDiffs = []*PlanDiff{} },
			func(n *Plan, e *PlanDiff) { n.Edges.PlanToPlanDiffs = append(n.Edges.PlanToPlanDiffs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedPrevPlan {
		if err := pq.loadPrevPlan(ctx, query, nodes,
			func(n *Plan) { n.appendNamedPrevPlan(name) },
			func(n *Plan, e *Plan) { n.appendNamedPrevPlan(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedNextPlan {
		if err := pq.loadNextPlan(ctx, query, nodes,
			func(n *Plan) { n.appendNamedNextPlan(name) },
			func(n *Plan, e *Plan) { n.appendNamedNextPlan(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedPlanToPlanDiffs {
		if err := pq.loadPlanToPlanDiffs(ctx, query, nodes,
			func(n *Plan) { n.appendNamedPlanToPlanDiffs(name) },
			func(n *Plan, e *PlanDiff) { n.appendNamedPlanToPlanDiffs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PlanQuery) loadPrevPlan(ctx context.Context, query *PlanQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Plan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Plan)
	nids := make(map[uuid.UUID]map[*Plan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(plan.PrevPlanTable)
		s.Join(joinT).On(s.C(plan.FieldID), joinT.C(plan.PrevPlanPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(plan.PrevPlanPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(plan.PrevPlanPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Plan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Plan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "PrevPlan" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadNextPlan(ctx context.Context, query *PlanQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Plan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Plan)
	nids := make(map[uuid.UUID]map[*Plan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(plan.NextPlanTable)
		s.Join(joinT).On(s.C(plan.FieldID), joinT.C(plan.NextPlanPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(plan.NextPlanPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(plan.NextPlanPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Plan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Plan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "NextPlan" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadPlanToBuild(ctx context.Context, query *BuildQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Build)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Plan)
	for i := range nodes {
		if nodes[i].plan_plan_to_build == nil {
			continue
		}
		fk := *nodes[i].plan_plan_to_build
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(build.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_plan_to_build" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadPlanToTeam(ctx context.Context, query *TeamQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Team)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Team(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.PlanToTeamColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_plan_to_team
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_plan_to_team" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_plan_to_team" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadPlanToProvisionedNetwork(ctx context.Context, query *ProvisionedNetworkQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *ProvisionedNetwork)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.PlanToProvisionedNetworkColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_plan_to_provisioned_network
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_plan_to_provisioned_network" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_plan_to_provisioned_network" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadPlanToProvisionedHost(ctx context.Context, query *ProvisionedHostQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *ProvisionedHost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.PlanToProvisionedHostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_plan_to_provisioned_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_plan_to_provisioned_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_plan_to_provisioned_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadPlanToProvisioningStep(ctx context.Context, query *ProvisioningStepQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *ProvisioningStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisioningStep(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.PlanToProvisioningStepColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_plan_to_provisioning_step
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_plan_to_provisioning_step" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_plan_to_provisioning_step" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadPlanToStatus(ctx context.Context, query *StatusQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.PlanToStatusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_plan_to_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_plan_to_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_plan_to_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadPlanToPlanDiffs(ctx context.Context, query *PlanDiffQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *PlanDiff)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.PlanToPlanDiffsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_diff_plan_diff_to_plan
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_diff_plan_diff_to_plan" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_diff_plan_diff_to_plan" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *PlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for i := range fields {
			if fields[i] != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(plan.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = plan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPrevPlan tells the query-builder to eager-load the nodes that are connected to the "PrevPlan"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithNamedPrevPlan(name string, opts ...func(*PlanQuery)) *PlanQuery {
	query := (&PlanClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedPrevPlan == nil {
		pq.withNamedPrevPlan = make(map[string]*PlanQuery)
	}
	pq.withNamedPrevPlan[name] = query
	return pq
}

// WithNamedNextPlan tells the query-builder to eager-load the nodes that are connected to the "NextPlan"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithNamedNextPlan(name string, opts ...func(*PlanQuery)) *PlanQuery {
	query := (&PlanClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedNextPlan == nil {
		pq.withNamedNextPlan = make(map[string]*PlanQuery)
	}
	pq.withNamedNextPlan[name] = query
	return pq
}

// WithNamedPlanToPlanDiffs tells the query-builder to eager-load the nodes that are connected to the "PlanToPlanDiffs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithNamedPlanToPlanDiffs(name string, opts ...func(*PlanDiffQuery)) *PlanQuery {
	query := (&PlanDiffClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedPlanToPlanDiffs == nil {
		pq.withNamedPlanToPlanDiffs = make(map[string]*PlanDiffQuery)
	}
	pq.withNamedPlanToPlanDiffs[name] = query
	return pq
}

// PlanGroupBy is the group-by builder for Plan entities.
type PlanGroupBy struct {
	selector
	build *PlanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PlanGroupBy) Aggregate(fns ...AggregateFunc) *PlanGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PlanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlanQuery, *PlanGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PlanGroupBy) sqlScan(ctx context.Context, root *PlanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlanSelect is the builder for selecting fields of Plan entities.
type PlanSelect struct {
	*PlanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PlanSelect) Aggregate(fns ...AggregateFunc) *PlanSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PlanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlanQuery, *PlanSelect](ctx, ps.PlanQuery, ps, ps.inters, v)
}

func (ps *PlanSelect) sqlScan(ctx context.Context, root *PlanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
