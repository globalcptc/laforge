// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/plandiff"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// PlanQuery is the builder for querying Plan entities.
type PlanQuery struct {
	config
	limit                         *int
	offset                        *int
	unique                        *bool
	order                         []OrderFunc
	fields                        []string
	predicates                    []predicate.Plan
	withPrevPlans                 *PlanQuery
	withNextPlans                 *PlanQuery
	withBuild                     *BuildQuery
	withTeam                      *TeamQuery
	withProvisionedNetwork        *ProvisionedNetworkQuery
	withProvisionedHost           *ProvisionedHostQuery
	withProvisioningStep          *ProvisioningStepQuery
	withProvisioningScheduledStep *ProvisioningScheduledStepQuery
	withStatus                    *StatusQuery
	withPlanDiffs                 *PlanDiffQuery
	withFKs                       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlanQuery builder.
func (pq *PlanQuery) Where(ps ...predicate.Plan) *PlanQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit adds a limit step to the query.
func (pq *PlanQuery) Limit(limit int) *PlanQuery {
	pq.limit = &limit
	return pq
}

// Offset adds an offset step to the query.
func (pq *PlanQuery) Offset(offset int) *PlanQuery {
	pq.offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PlanQuery) Unique(unique bool) *PlanQuery {
	pq.unique = &unique
	return pq
}

// Order adds an order step to the query.
func (pq *PlanQuery) Order(o ...OrderFunc) *PlanQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryPrevPlans chains the current query on the "PrevPlans" edge.
func (pq *PlanQuery) QueryPrevPlans() *PlanQuery {
	query := &PlanQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, plan.PrevPlansTable, plan.PrevPlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNextPlans chains the current query on the "NextPlans" edge.
func (pq *PlanQuery) QueryNextPlans() *PlanQuery {
	query := &PlanQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.NextPlansTable, plan.NextPlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuild chains the current query on the "Build" edge.
func (pq *PlanQuery) QueryBuild() *BuildQuery {
	query := &BuildQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, plan.BuildTable, plan.BuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeam chains the current query on the "Team" edge.
func (pq *PlanQuery) QueryTeam() *TeamQuery {
	query := &TeamQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.TeamTable, plan.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetwork chains the current query on the "ProvisionedNetwork" edge.
func (pq *PlanQuery) QueryProvisionedNetwork() *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.ProvisionedNetworkTable, plan.ProvisionedNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHost chains the current query on the "ProvisionedHost" edge.
func (pq *PlanQuery) QueryProvisionedHost() *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.ProvisionedHostTable, plan.ProvisionedHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStep chains the current query on the "ProvisioningStep" edge.
func (pq *PlanQuery) QueryProvisioningStep() *ProvisioningStepQuery {
	query := &ProvisioningStepQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.ProvisioningStepTable, plan.ProvisioningStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStep chains the current query on the "ProvisioningScheduledStep" edge.
func (pq *PlanQuery) QueryProvisioningScheduledStep() *ProvisioningScheduledStepQuery {
	query := &ProvisioningScheduledStepQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.ProvisioningScheduledStepTable, plan.ProvisioningScheduledStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatus chains the current query on the "Status" edge.
func (pq *PlanQuery) QueryStatus() *StatusQuery {
	query := &StatusQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plan.StatusTable, plan.StatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanDiffs chains the current query on the "PlanDiffs" edge.
func (pq *PlanQuery) QueryPlanDiffs() *PlanDiffQuery {
	query := &PlanDiffQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(plandiff.Table, plandiff.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, plan.PlanDiffsTable, plan.PlanDiffsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Plan entity from the query.
// Returns a *NotFoundError when no Plan was found.
func (pq *PlanQuery) First(ctx context.Context) (*Plan, error) {
	nodes, err := pq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{plan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PlanQuery) FirstX(ctx context.Context) *Plan {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Plan ID from the query.
// Returns a *NotFoundError when no Plan ID was found.
func (pq *PlanQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{plan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PlanQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Plan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Plan entity is found.
// Returns a *NotFoundError when no Plan entities are found.
func (pq *PlanQuery) Only(ctx context.Context) (*Plan, error) {
	nodes, err := pq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{plan.Label}
	default:
		return nil, &NotSingularError{plan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PlanQuery) OnlyX(ctx context.Context) *Plan {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Plan ID in the query.
// Returns a *NotSingularError when more than one Plan ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PlanQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{plan.Label}
	default:
		err = &NotSingularError{plan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PlanQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Plans.
func (pq *PlanQuery) All(ctx context.Context) ([]*Plan, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pq *PlanQuery) AllX(ctx context.Context) []*Plan {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Plan IDs.
func (pq *PlanQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := pq.Select(plan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PlanQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PlanQuery) Count(ctx context.Context) (int, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PlanQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PlanQuery) Exist(ctx context.Context) (bool, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PlanQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PlanQuery) Clone() *PlanQuery {
	if pq == nil {
		return nil
	}
	return &PlanQuery{
		config:                        pq.config,
		limit:                         pq.limit,
		offset:                        pq.offset,
		order:                         append([]OrderFunc{}, pq.order...),
		predicates:                    append([]predicate.Plan{}, pq.predicates...),
		withPrevPlans:                 pq.withPrevPlans.Clone(),
		withNextPlans:                 pq.withNextPlans.Clone(),
		withBuild:                     pq.withBuild.Clone(),
		withTeam:                      pq.withTeam.Clone(),
		withProvisionedNetwork:        pq.withProvisionedNetwork.Clone(),
		withProvisionedHost:           pq.withProvisionedHost.Clone(),
		withProvisioningStep:          pq.withProvisioningStep.Clone(),
		withProvisioningScheduledStep: pq.withProvisioningScheduledStep.Clone(),
		withStatus:                    pq.withStatus.Clone(),
		withPlanDiffs:                 pq.withPlanDiffs.Clone(),
		// clone intermediate query.
		sql:    pq.sql.Clone(),
		path:   pq.path,
		unique: pq.unique,
	}
}

// WithPrevPlans tells the query-builder to eager-load the nodes that are connected to
// the "PrevPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPrevPlans(opts ...func(*PlanQuery)) *PlanQuery {
	query := &PlanQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPrevPlans = query
	return pq
}

// WithNextPlans tells the query-builder to eager-load the nodes that are connected to
// the "NextPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithNextPlans(opts ...func(*PlanQuery)) *PlanQuery {
	query := &PlanQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withNextPlans = query
	return pq
}

// WithBuild tells the query-builder to eager-load the nodes that are connected to
// the "Build" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithBuild(opts ...func(*BuildQuery)) *PlanQuery {
	query := &BuildQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withBuild = query
	return pq
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "Team" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithTeam(opts ...func(*TeamQuery)) *PlanQuery {
	query := &TeamQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withTeam = query
	return pq
}

// WithProvisionedNetwork tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithProvisionedNetwork(opts ...func(*ProvisionedNetworkQuery)) *PlanQuery {
	query := &ProvisionedNetworkQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withProvisionedNetwork = query
	return pq
}

// WithProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithProvisionedHost(opts ...func(*ProvisionedHostQuery)) *PlanQuery {
	query := &ProvisionedHostQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withProvisionedHost = query
	return pq
}

// WithProvisioningStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStep" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithProvisioningStep(opts ...func(*ProvisioningStepQuery)) *PlanQuery {
	query := &ProvisioningStepQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withProvisioningStep = query
	return pq
}

// WithProvisioningScheduledStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStep" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithProvisioningScheduledStep(opts ...func(*ProvisioningScheduledStepQuery)) *PlanQuery {
	query := &ProvisioningScheduledStepQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withProvisioningScheduledStep = query
	return pq
}

// WithStatus tells the query-builder to eager-load the nodes that are connected to
// the "Status" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithStatus(opts ...func(*StatusQuery)) *PlanQuery {
	query := &StatusQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withStatus = query
	return pq
}

// WithPlanDiffs tells the query-builder to eager-load the nodes that are connected to
// the "PlanDiffs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlanDiffs(opts ...func(*PlanDiffQuery)) *PlanQuery {
	query := &PlanDiffQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlanDiffs = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StepNumber int `json:"step_number,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Plan.Query().
//		GroupBy(plan.FieldStepNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PlanQuery) GroupBy(field string, fields ...string) *PlanGroupBy {
	grbuild := &PlanGroupBy{config: pq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pq.sqlQuery(ctx), nil
	}
	grbuild.label = plan.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StepNumber int `json:"step_number,omitempty"`
//	}
//
//	client.Plan.Query().
//		Select(plan.FieldStepNumber).
//		Scan(ctx, &v)
func (pq *PlanQuery) Select(fields ...string) *PlanSelect {
	pq.fields = append(pq.fields, fields...)
	selbuild := &PlanSelect{PlanQuery: pq}
	selbuild.label = plan.Label
	selbuild.flds, selbuild.scan = &pq.fields, selbuild.Scan
	return selbuild
}

func (pq *PlanQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pq.fields {
		if !plan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Plan, error) {
	var (
		nodes       = []*Plan{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [10]bool{
			pq.withPrevPlans != nil,
			pq.withNextPlans != nil,
			pq.withBuild != nil,
			pq.withTeam != nil,
			pq.withProvisionedNetwork != nil,
			pq.withProvisionedHost != nil,
			pq.withProvisioningStep != nil,
			pq.withProvisioningScheduledStep != nil,
			pq.withStatus != nil,
			pq.withPlanDiffs != nil,
		}
	)
	if pq.withBuild != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, plan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Plan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Plan{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withPrevPlans; query != nil {
		if err := pq.loadPrevPlans(ctx, query, nodes,
			func(n *Plan) { n.Edges.PrevPlans = []*Plan{} },
			func(n *Plan, e *Plan) { n.Edges.PrevPlans = append(n.Edges.PrevPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withNextPlans; query != nil {
		if err := pq.loadNextPlans(ctx, query, nodes,
			func(n *Plan) { n.Edges.NextPlans = []*Plan{} },
			func(n *Plan, e *Plan) { n.Edges.NextPlans = append(n.Edges.NextPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withBuild; query != nil {
		if err := pq.loadBuild(ctx, query, nodes, nil,
			func(n *Plan, e *Build) { n.Edges.Build = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTeam; query != nil {
		if err := pq.loadTeam(ctx, query, nodes, nil,
			func(n *Plan, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProvisionedNetwork; query != nil {
		if err := pq.loadProvisionedNetwork(ctx, query, nodes, nil,
			func(n *Plan, e *ProvisionedNetwork) { n.Edges.ProvisionedNetwork = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProvisionedHost; query != nil {
		if err := pq.loadProvisionedHost(ctx, query, nodes, nil,
			func(n *Plan, e *ProvisionedHost) { n.Edges.ProvisionedHost = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProvisioningStep; query != nil {
		if err := pq.loadProvisioningStep(ctx, query, nodes, nil,
			func(n *Plan, e *ProvisioningStep) { n.Edges.ProvisioningStep = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProvisioningScheduledStep; query != nil {
		if err := pq.loadProvisioningScheduledStep(ctx, query, nodes, nil,
			func(n *Plan, e *ProvisioningScheduledStep) { n.Edges.ProvisioningScheduledStep = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withStatus; query != nil {
		if err := pq.loadStatus(ctx, query, nodes, nil,
			func(n *Plan, e *Status) { n.Edges.Status = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlanDiffs; query != nil {
		if err := pq.loadPlanDiffs(ctx, query, nodes,
			func(n *Plan) { n.Edges.PlanDiffs = []*PlanDiff{} },
			func(n *Plan, e *PlanDiff) { n.Edges.PlanDiffs = append(n.Edges.PlanDiffs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PlanQuery) loadPrevPlans(ctx context.Context, query *PlanQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Plan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Plan)
	nids := make(map[uuid.UUID]map[*Plan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(plan.PrevPlansTable)
		s.Join(joinT).On(s.C(plan.FieldID), joinT.C(plan.PrevPlansPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(plan.PrevPlansPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(plan.PrevPlansPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Plan]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "PrevPlans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadNextPlans(ctx context.Context, query *PlanQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Plan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Plan)
	nids := make(map[uuid.UUID]map[*Plan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(plan.NextPlansTable)
		s.Join(joinT).On(s.C(plan.FieldID), joinT.C(plan.NextPlansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(plan.NextPlansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(plan.NextPlansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Plan]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "NextPlans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadBuild(ctx context.Context, query *BuildQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Build)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Plan)
	for i := range nodes {
		if nodes[i].plan_build == nil {
			continue
		}
		fk := *nodes[i].plan_build
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(build.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_build" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Team)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Team(func(s *sql.Selector) {
		s.Where(sql.InValues(plan.TeamColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_team
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_team" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_team" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadProvisionedNetwork(ctx context.Context, query *ProvisionedNetworkQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *ProvisionedNetwork)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.InValues(plan.ProvisionedNetworkColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_provisioned_network
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_provisioned_network" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_provisioned_network" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadProvisionedHost(ctx context.Context, query *ProvisionedHostQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *ProvisionedHost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.InValues(plan.ProvisionedHostColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_provisioned_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_provisioned_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_provisioned_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadProvisioningStep(ctx context.Context, query *ProvisioningStepQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *ProvisioningStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisioningStep(func(s *sql.Selector) {
		s.Where(sql.InValues(plan.ProvisioningStepColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_provisioning_step
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_provisioning_step" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_provisioning_step" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadProvisioningScheduledStep(ctx context.Context, query *ProvisioningScheduledStepQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *ProvisioningScheduledStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.InValues(plan.ProvisioningScheduledStepColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_provisioning_scheduled_step
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_provisioning_scheduled_step" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_provisioning_scheduled_step" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadStatus(ctx context.Context, query *StatusQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(plan.StatusColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadPlanDiffs(ctx context.Context, query *PlanDiffQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *PlanDiff)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlanDiff(func(s *sql.Selector) {
		s.Where(sql.InValues(plan.PlanDiffsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_diff_plan
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_diff_plan" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_diff_plan" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *PlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.fields
	if len(pq.fields) > 0 {
		_spec.Unique = pq.unique != nil && *pq.unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PlanQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pq *PlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: plan.FieldID,
			},
		},
		From:   pq.sql,
		Unique: true,
	}
	if unique := pq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for i := range fields {
			if fields[i] != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(plan.Table)
	columns := pq.fields
	if len(columns) == 0 {
		columns = plan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.unique != nil && *pq.unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlanGroupBy is the group-by builder for Plan entities.
type PlanGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PlanGroupBy) Aggregate(fns ...AggregateFunc) *PlanGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pgb *PlanGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pgb.path(ctx)
	if err != nil {
		return err
	}
	pgb.sql = query
	return pgb.sqlScan(ctx, v)
}

func (pgb *PlanGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pgb.fields {
		if !plan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pgb *PlanGroupBy) sqlQuery() *sql.Selector {
	selector := pgb.sql.Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pgb.fields)+len(pgb.fns))
		for _, f := range pgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pgb.fields...)...)
}

// PlanSelect is the builder for selecting fields of Plan entities.
type PlanSelect struct {
	*PlanQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PlanSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	ps.sql = ps.PlanQuery.sqlQuery(ctx)
	return ps.sqlScan(ctx, v)
}

func (ps *PlanSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ps.sql.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
