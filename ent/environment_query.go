// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// EnvironmentQuery is the builder for querying Environment entities.
type EnvironmentQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.Environment
	withUsers            *UserQuery
	withHosts            *HostQuery
	withCompetitions     *CompetitionQuery
	withIdentities       *IdentityQuery
	withCommands         *CommandQuery
	withScripts          *ScriptQuery
	withFileDownloads    *FileDownloadQuery
	withFileDeletes      *FileDeleteQuery
	withFileExtracts     *FileExtractQuery
	withIncludedNetworks *IncludedNetworkQuery
	withFindings         *FindingQuery
	withDNSRecords       *DNSRecordQuery
	withDNS              *DNSQuery
	withNetworks         *NetworkQuery
	withHostDependencies *HostDependencyQuery
	withAnsibles         *AnsibleQuery
	withScheduledSteps   *ScheduledStepQuery
	withBuilds           *BuildQuery
	withRepositories     *RepositoryQuery
	withServerTasks      *ServerTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnvironmentQuery builder.
func (eq *EnvironmentQuery) Where(ps ...predicate.Environment) *EnvironmentQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *EnvironmentQuery) Limit(limit int) *EnvironmentQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *EnvironmentQuery) Offset(offset int) *EnvironmentQuery {
	eq.offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EnvironmentQuery) Unique(unique bool) *EnvironmentQuery {
	eq.unique = &unique
	return eq
}

// Order adds an order step to the query.
func (eq *EnvironmentQuery) Order(o ...OrderFunc) *EnvironmentQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryUsers chains the current query on the "Users" edge.
func (eq *EnvironmentQuery) QueryUsers() *UserQuery {
	query := &UserQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.UsersTable, environment.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHosts chains the current query on the "Hosts" edge.
func (eq *EnvironmentQuery) QueryHosts() *HostQuery {
	query := &HostQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.HostsTable, environment.HostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompetitions chains the current query on the "Competitions" edge.
func (eq *EnvironmentQuery) QueryCompetitions() *CompetitionQuery {
	query := &CompetitionQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.CompetitionsTable, environment.CompetitionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIdentities chains the current query on the "Identities" edge.
func (eq *EnvironmentQuery) QueryIdentities() *IdentityQuery {
	query := &IdentityQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(identity.Table, identity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.IdentitiesTable, environment.IdentitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommands chains the current query on the "Commands" edge.
func (eq *EnvironmentQuery) QueryCommands() *CommandQuery {
	query := &CommandQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.CommandsTable, environment.CommandsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScripts chains the current query on the "Scripts" edge.
func (eq *EnvironmentQuery) QueryScripts() *ScriptQuery {
	query := &ScriptQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.ScriptsTable, environment.ScriptsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFileDownloads chains the current query on the "FileDownloads" edge.
func (eq *EnvironmentQuery) QueryFileDownloads() *FileDownloadQuery {
	query := &FileDownloadQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(filedownload.Table, filedownload.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.FileDownloadsTable, environment.FileDownloadsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFileDeletes chains the current query on the "FileDeletes" edge.
func (eq *EnvironmentQuery) QueryFileDeletes() *FileDeleteQuery {
	query := &FileDeleteQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(filedelete.Table, filedelete.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.FileDeletesTable, environment.FileDeletesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFileExtracts chains the current query on the "FileExtracts" edge.
func (eq *EnvironmentQuery) QueryFileExtracts() *FileExtractQuery {
	query := &FileExtractQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(fileextract.Table, fileextract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.FileExtractsTable, environment.FileExtractsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncludedNetworks chains the current query on the "IncludedNetworks" edge.
func (eq *EnvironmentQuery) QueryIncludedNetworks() *IncludedNetworkQuery {
	query := &IncludedNetworkQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(includednetwork.Table, includednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.IncludedNetworksTable, environment.IncludedNetworksPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFindings chains the current query on the "Findings" edge.
func (eq *EnvironmentQuery) QueryFindings() *FindingQuery {
	query := &FindingQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(finding.Table, finding.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.FindingsTable, environment.FindingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDNSRecords chains the current query on the "DNSRecords" edge.
func (eq *EnvironmentQuery) QueryDNSRecords() *DNSRecordQuery {
	query := &DNSRecordQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(dnsrecord.Table, dnsrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.DNSRecordsTable, environment.DNSRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDNS chains the current query on the "DNS" edge.
func (eq *EnvironmentQuery) QueryDNS() *DNSQuery {
	query := &DNSQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(dns.Table, dns.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.DNSTable, environment.DNSPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNetworks chains the current query on the "Networks" edge.
func (eq *EnvironmentQuery) QueryNetworks() *NetworkQuery {
	query := &NetworkQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.NetworksTable, environment.NetworksColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostDependencies chains the current query on the "HostDependencies" edge.
func (eq *EnvironmentQuery) QueryHostDependencies() *HostDependencyQuery {
	query := &HostDependencyQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(hostdependency.Table, hostdependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.HostDependenciesTable, environment.HostDependenciesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnsibles chains the current query on the "Ansibles" edge.
func (eq *EnvironmentQuery) QueryAnsibles() *AnsibleQuery {
	query := &AnsibleQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(ansible.Table, ansible.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.AnsiblesTable, environment.AnsiblesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduledSteps chains the current query on the "ScheduledSteps" edge.
func (eq *EnvironmentQuery) QueryScheduledSteps() *ScheduledStepQuery {
	query := &ScheduledStepQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(scheduledstep.Table, scheduledstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.ScheduledStepsTable, environment.ScheduledStepsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuilds chains the current query on the "Builds" edge.
func (eq *EnvironmentQuery) QueryBuilds() *BuildQuery {
	query := &BuildQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, environment.BuildsTable, environment.BuildsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRepositories chains the current query on the "Repositories" edge.
func (eq *EnvironmentQuery) QueryRepositories() *RepositoryQuery {
	query := &RepositoryQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, environment.RepositoriesTable, environment.RepositoriesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTasks chains the current query on the "ServerTasks" edge.
func (eq *EnvironmentQuery) QueryServerTasks() *ServerTaskQuery {
	query := &ServerTaskQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(servertask.Table, servertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, environment.ServerTasksTable, environment.ServerTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Environment entity from the query.
// Returns a *NotFoundError when no Environment was found.
func (eq *EnvironmentQuery) First(ctx context.Context) (*Environment, error) {
	nodes, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{environment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EnvironmentQuery) FirstX(ctx context.Context) *Environment {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Environment ID from the query.
// Returns a *NotFoundError when no Environment ID was found.
func (eq *EnvironmentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{environment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EnvironmentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Environment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Environment entity is found.
// Returns a *NotFoundError when no Environment entities are found.
func (eq *EnvironmentQuery) Only(ctx context.Context) (*Environment, error) {
	nodes, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{environment.Label}
	default:
		return nil, &NotSingularError{environment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EnvironmentQuery) OnlyX(ctx context.Context) *Environment {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Environment ID in the query.
// Returns a *NotSingularError when more than one Environment ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EnvironmentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = &NotSingularError{environment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EnvironmentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Environments.
func (eq *EnvironmentQuery) All(ctx context.Context) ([]*Environment, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *EnvironmentQuery) AllX(ctx context.Context) []*Environment {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Environment IDs.
func (eq *EnvironmentQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := eq.Select(environment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EnvironmentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EnvironmentQuery) Count(ctx context.Context) (int, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EnvironmentQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EnvironmentQuery) Exist(ctx context.Context) (bool, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EnvironmentQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnvironmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EnvironmentQuery) Clone() *EnvironmentQuery {
	if eq == nil {
		return nil
	}
	return &EnvironmentQuery{
		config:               eq.config,
		limit:                eq.limit,
		offset:               eq.offset,
		order:                append([]OrderFunc{}, eq.order...),
		predicates:           append([]predicate.Environment{}, eq.predicates...),
		withUsers:            eq.withUsers.Clone(),
		withHosts:            eq.withHosts.Clone(),
		withCompetitions:     eq.withCompetitions.Clone(),
		withIdentities:       eq.withIdentities.Clone(),
		withCommands:         eq.withCommands.Clone(),
		withScripts:          eq.withScripts.Clone(),
		withFileDownloads:    eq.withFileDownloads.Clone(),
		withFileDeletes:      eq.withFileDeletes.Clone(),
		withFileExtracts:     eq.withFileExtracts.Clone(),
		withIncludedNetworks: eq.withIncludedNetworks.Clone(),
		withFindings:         eq.withFindings.Clone(),
		withDNSRecords:       eq.withDNSRecords.Clone(),
		withDNS:              eq.withDNS.Clone(),
		withNetworks:         eq.withNetworks.Clone(),
		withHostDependencies: eq.withHostDependencies.Clone(),
		withAnsibles:         eq.withAnsibles.Clone(),
		withScheduledSteps:   eq.withScheduledSteps.Clone(),
		withBuilds:           eq.withBuilds.Clone(),
		withRepositories:     eq.withRepositories.Clone(),
		withServerTasks:      eq.withServerTasks.Clone(),
		// clone intermediate query.
		sql:    eq.sql.Clone(),
		path:   eq.path,
		unique: eq.unique,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "Users" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithUsers(opts ...func(*UserQuery)) *EnvironmentQuery {
	query := &UserQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withUsers = query
	return eq
}

// WithHosts tells the query-builder to eager-load the nodes that are connected to
// the "Hosts" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithHosts(opts ...func(*HostQuery)) *EnvironmentQuery {
	query := &HostQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withHosts = query
	return eq
}

// WithCompetitions tells the query-builder to eager-load the nodes that are connected to
// the "Competitions" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithCompetitions(opts ...func(*CompetitionQuery)) *EnvironmentQuery {
	query := &CompetitionQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withCompetitions = query
	return eq
}

// WithIdentities tells the query-builder to eager-load the nodes that are connected to
// the "Identities" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithIdentities(opts ...func(*IdentityQuery)) *EnvironmentQuery {
	query := &IdentityQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withIdentities = query
	return eq
}

// WithCommands tells the query-builder to eager-load the nodes that are connected to
// the "Commands" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithCommands(opts ...func(*CommandQuery)) *EnvironmentQuery {
	query := &CommandQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withCommands = query
	return eq
}

// WithScripts tells the query-builder to eager-load the nodes that are connected to
// the "Scripts" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithScripts(opts ...func(*ScriptQuery)) *EnvironmentQuery {
	query := &ScriptQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withScripts = query
	return eq
}

// WithFileDownloads tells the query-builder to eager-load the nodes that are connected to
// the "FileDownloads" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithFileDownloads(opts ...func(*FileDownloadQuery)) *EnvironmentQuery {
	query := &FileDownloadQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withFileDownloads = query
	return eq
}

// WithFileDeletes tells the query-builder to eager-load the nodes that are connected to
// the "FileDeletes" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithFileDeletes(opts ...func(*FileDeleteQuery)) *EnvironmentQuery {
	query := &FileDeleteQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withFileDeletes = query
	return eq
}

// WithFileExtracts tells the query-builder to eager-load the nodes that are connected to
// the "FileExtracts" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithFileExtracts(opts ...func(*FileExtractQuery)) *EnvironmentQuery {
	query := &FileExtractQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withFileExtracts = query
	return eq
}

// WithIncludedNetworks tells the query-builder to eager-load the nodes that are connected to
// the "IncludedNetworks" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithIncludedNetworks(opts ...func(*IncludedNetworkQuery)) *EnvironmentQuery {
	query := &IncludedNetworkQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withIncludedNetworks = query
	return eq
}

// WithFindings tells the query-builder to eager-load the nodes that are connected to
// the "Findings" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithFindings(opts ...func(*FindingQuery)) *EnvironmentQuery {
	query := &FindingQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withFindings = query
	return eq
}

// WithDNSRecords tells the query-builder to eager-load the nodes that are connected to
// the "DNSRecords" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithDNSRecords(opts ...func(*DNSRecordQuery)) *EnvironmentQuery {
	query := &DNSRecordQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withDNSRecords = query
	return eq
}

// WithDNS tells the query-builder to eager-load the nodes that are connected to
// the "DNS" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithDNS(opts ...func(*DNSQuery)) *EnvironmentQuery {
	query := &DNSQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withDNS = query
	return eq
}

// WithNetworks tells the query-builder to eager-load the nodes that are connected to
// the "Networks" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNetworks(opts ...func(*NetworkQuery)) *EnvironmentQuery {
	query := &NetworkQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withNetworks = query
	return eq
}

// WithHostDependencies tells the query-builder to eager-load the nodes that are connected to
// the "HostDependencies" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithHostDependencies(opts ...func(*HostDependencyQuery)) *EnvironmentQuery {
	query := &HostDependencyQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withHostDependencies = query
	return eq
}

// WithAnsibles tells the query-builder to eager-load the nodes that are connected to
// the "Ansibles" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithAnsibles(opts ...func(*AnsibleQuery)) *EnvironmentQuery {
	query := &AnsibleQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withAnsibles = query
	return eq
}

// WithScheduledSteps tells the query-builder to eager-load the nodes that are connected to
// the "ScheduledSteps" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithScheduledSteps(opts ...func(*ScheduledStepQuery)) *EnvironmentQuery {
	query := &ScheduledStepQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withScheduledSteps = query
	return eq
}

// WithBuilds tells the query-builder to eager-load the nodes that are connected to
// the "Builds" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithBuilds(opts ...func(*BuildQuery)) *EnvironmentQuery {
	query := &BuildQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withBuilds = query
	return eq
}

// WithRepositories tells the query-builder to eager-load the nodes that are connected to
// the "Repositories" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithRepositories(opts ...func(*RepositoryQuery)) *EnvironmentQuery {
	query := &RepositoryQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withRepositories = query
	return eq
}

// WithServerTasks tells the query-builder to eager-load the nodes that are connected to
// the "ServerTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithServerTasks(opts ...func(*ServerTaskQuery)) *EnvironmentQuery {
	query := &ServerTaskQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withServerTasks = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Environment.Query().
//		GroupBy(environment.FieldHclID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EnvironmentQuery) GroupBy(field string, fields ...string) *EnvironmentGroupBy {
	grbuild := &EnvironmentGroupBy{config: eq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(ctx), nil
	}
	grbuild.label = environment.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
//	}
//
//	client.Environment.Query().
//		Select(environment.FieldHclID).
//		Scan(ctx, &v)
func (eq *EnvironmentQuery) Select(fields ...string) *EnvironmentSelect {
	eq.fields = append(eq.fields, fields...)
	selbuild := &EnvironmentSelect{EnvironmentQuery: eq}
	selbuild.label = environment.Label
	selbuild.flds, selbuild.scan = &eq.fields, selbuild.Scan
	return selbuild
}

func (eq *EnvironmentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eq.fields {
		if !environment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EnvironmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Environment, error) {
	var (
		nodes       = []*Environment{}
		_spec       = eq.querySpec()
		loadedTypes = [20]bool{
			eq.withUsers != nil,
			eq.withHosts != nil,
			eq.withCompetitions != nil,
			eq.withIdentities != nil,
			eq.withCommands != nil,
			eq.withScripts != nil,
			eq.withFileDownloads != nil,
			eq.withFileDeletes != nil,
			eq.withFileExtracts != nil,
			eq.withIncludedNetworks != nil,
			eq.withFindings != nil,
			eq.withDNSRecords != nil,
			eq.withDNS != nil,
			eq.withNetworks != nil,
			eq.withHostDependencies != nil,
			eq.withAnsibles != nil,
			eq.withScheduledSteps != nil,
			eq.withBuilds != nil,
			eq.withRepositories != nil,
			eq.withServerTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Environment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Environment{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withUsers; query != nil {
		if err := eq.loadUsers(ctx, query, nodes,
			func(n *Environment) { n.Edges.Users = []*User{} },
			func(n *Environment, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withHosts; query != nil {
		if err := eq.loadHosts(ctx, query, nodes,
			func(n *Environment) { n.Edges.Hosts = []*Host{} },
			func(n *Environment, e *Host) { n.Edges.Hosts = append(n.Edges.Hosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCompetitions; query != nil {
		if err := eq.loadCompetitions(ctx, query, nodes,
			func(n *Environment) { n.Edges.Competitions = []*Competition{} },
			func(n *Environment, e *Competition) { n.Edges.Competitions = append(n.Edges.Competitions, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withIdentities; query != nil {
		if err := eq.loadIdentities(ctx, query, nodes,
			func(n *Environment) { n.Edges.Identities = []*Identity{} },
			func(n *Environment, e *Identity) { n.Edges.Identities = append(n.Edges.Identities, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCommands; query != nil {
		if err := eq.loadCommands(ctx, query, nodes,
			func(n *Environment) { n.Edges.Commands = []*Command{} },
			func(n *Environment, e *Command) { n.Edges.Commands = append(n.Edges.Commands, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withScripts; query != nil {
		if err := eq.loadScripts(ctx, query, nodes,
			func(n *Environment) { n.Edges.Scripts = []*Script{} },
			func(n *Environment, e *Script) { n.Edges.Scripts = append(n.Edges.Scripts, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withFileDownloads; query != nil {
		if err := eq.loadFileDownloads(ctx, query, nodes,
			func(n *Environment) { n.Edges.FileDownloads = []*FileDownload{} },
			func(n *Environment, e *FileDownload) { n.Edges.FileDownloads = append(n.Edges.FileDownloads, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withFileDeletes; query != nil {
		if err := eq.loadFileDeletes(ctx, query, nodes,
			func(n *Environment) { n.Edges.FileDeletes = []*FileDelete{} },
			func(n *Environment, e *FileDelete) { n.Edges.FileDeletes = append(n.Edges.FileDeletes, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withFileExtracts; query != nil {
		if err := eq.loadFileExtracts(ctx, query, nodes,
			func(n *Environment) { n.Edges.FileExtracts = []*FileExtract{} },
			func(n *Environment, e *FileExtract) { n.Edges.FileExtracts = append(n.Edges.FileExtracts, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withIncludedNetworks; query != nil {
		if err := eq.loadIncludedNetworks(ctx, query, nodes,
			func(n *Environment) { n.Edges.IncludedNetworks = []*IncludedNetwork{} },
			func(n *Environment, e *IncludedNetwork) {
				n.Edges.IncludedNetworks = append(n.Edges.IncludedNetworks, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withFindings; query != nil {
		if err := eq.loadFindings(ctx, query, nodes,
			func(n *Environment) { n.Edges.Findings = []*Finding{} },
			func(n *Environment, e *Finding) { n.Edges.Findings = append(n.Edges.Findings, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withDNSRecords; query != nil {
		if err := eq.loadDNSRecords(ctx, query, nodes,
			func(n *Environment) { n.Edges.DNSRecords = []*DNSRecord{} },
			func(n *Environment, e *DNSRecord) { n.Edges.DNSRecords = append(n.Edges.DNSRecords, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withDNS; query != nil {
		if err := eq.loadDNS(ctx, query, nodes,
			func(n *Environment) { n.Edges.DNS = []*DNS{} },
			func(n *Environment, e *DNS) { n.Edges.DNS = append(n.Edges.DNS, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withNetworks; query != nil {
		if err := eq.loadNetworks(ctx, query, nodes,
			func(n *Environment) { n.Edges.Networks = []*Network{} },
			func(n *Environment, e *Network) { n.Edges.Networks = append(n.Edges.Networks, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withHostDependencies; query != nil {
		if err := eq.loadHostDependencies(ctx, query, nodes,
			func(n *Environment) { n.Edges.HostDependencies = []*HostDependency{} },
			func(n *Environment, e *HostDependency) {
				n.Edges.HostDependencies = append(n.Edges.HostDependencies, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withAnsibles; query != nil {
		if err := eq.loadAnsibles(ctx, query, nodes,
			func(n *Environment) { n.Edges.Ansibles = []*Ansible{} },
			func(n *Environment, e *Ansible) { n.Edges.Ansibles = append(n.Edges.Ansibles, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withScheduledSteps; query != nil {
		if err := eq.loadScheduledSteps(ctx, query, nodes,
			func(n *Environment) { n.Edges.ScheduledSteps = []*ScheduledStep{} },
			func(n *Environment, e *ScheduledStep) { n.Edges.ScheduledSteps = append(n.Edges.ScheduledSteps, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withBuilds; query != nil {
		if err := eq.loadBuilds(ctx, query, nodes,
			func(n *Environment) { n.Edges.Builds = []*Build{} },
			func(n *Environment, e *Build) { n.Edges.Builds = append(n.Edges.Builds, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withRepositories; query != nil {
		if err := eq.loadRepositories(ctx, query, nodes,
			func(n *Environment) { n.Edges.Repositories = []*Repository{} },
			func(n *Environment, e *Repository) { n.Edges.Repositories = append(n.Edges.Repositories, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withServerTasks; query != nil {
		if err := eq.loadServerTasks(ctx, query, nodes,
			func(n *Environment) { n.Edges.ServerTasks = []*ServerTask{} },
			func(n *Environment, e *ServerTask) { n.Edges.ServerTasks = append(n.Edges.ServerTasks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EnvironmentQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.UsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(environment.UsersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(environment.UsersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.UsersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Environment]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "Users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadHosts(ctx context.Context, query *HostQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Host)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Host(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.HostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_hosts
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_hosts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_hosts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadCompetitions(ctx context.Context, query *CompetitionQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Competition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Competition(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.CompetitionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_competitions
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_competitions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_competitions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadIdentities(ctx context.Context, query *IdentityQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Identity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Identity(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.IdentitiesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_identities
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_identities" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_identities" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadCommands(ctx context.Context, query *CommandQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Command)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Command(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.CommandsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_commands
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_commands" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_commands" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadScripts(ctx context.Context, query *ScriptQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Script)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Script(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.ScriptsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_scripts
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_scripts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_scripts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadFileDownloads(ctx context.Context, query *FileDownloadQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *FileDownload)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.FileDownloadsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_file_downloads
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_file_downloads" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_file_downloads" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadFileDeletes(ctx context.Context, query *FileDeleteQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *FileDelete)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FileDelete(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.FileDeletesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_file_deletes
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_file_deletes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_file_deletes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadFileExtracts(ctx context.Context, query *FileExtractQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *FileExtract)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FileExtract(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.FileExtractsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_file_extracts
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_file_extracts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_file_extracts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadIncludedNetworks(ctx context.Context, query *IncludedNetworkQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *IncludedNetwork)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.IncludedNetworksTable)
		s.Join(joinT).On(s.C(includednetwork.FieldID), joinT.C(environment.IncludedNetworksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(environment.IncludedNetworksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.IncludedNetworksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Environment]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "IncludedNetworks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadFindings(ctx context.Context, query *FindingQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Finding)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Finding(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.FindingsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_findings
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_findings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_findings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadDNSRecords(ctx context.Context, query *DNSRecordQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *DNSRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DNSRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.DNSRecordsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_dns_records
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_dns_records" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_dns_records" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadDNS(ctx context.Context, query *DNSQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *DNS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.DNSTable)
		s.Join(joinT).On(s.C(dns.FieldID), joinT.C(environment.DNSPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(environment.DNSPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.DNSPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Environment]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "DNS" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadNetworks(ctx context.Context, query *NetworkQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Network)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Network(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.NetworksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_networks
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_networks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_networks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadHostDependencies(ctx context.Context, query *HostDependencyQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *HostDependency)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HostDependency(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.HostDependenciesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_host_dependencies
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_host_dependencies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_host_dependencies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadAnsibles(ctx context.Context, query *AnsibleQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Ansible)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.AnsiblesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_ansibles
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_ansibles" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_ansibles" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadScheduledSteps(ctx context.Context, query *ScheduledStepQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *ScheduledStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ScheduledStep(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.ScheduledStepsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_scheduled_steps
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_scheduled_steps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_scheduled_steps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadBuilds(ctx context.Context, query *BuildQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Build)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Build(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.BuildsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.build_environment
		if fk == nil {
			return fmt.Errorf(`foreign-key "build_environment" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "build_environment" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadRepositories(ctx context.Context, query *RepositoryQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Repository)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.RepositoriesTable)
		s.Join(joinT).On(s.C(repository.FieldID), joinT.C(environment.RepositoriesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(environment.RepositoriesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.RepositoriesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Environment]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "Repositories" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadServerTasks(ctx context.Context, query *ServerTaskQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *ServerTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.InValues(environment.ServerTasksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_environment
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_environment" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_task_environment" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *EnvironmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.fields
	if len(eq.fields) > 0 {
		_spec.Unique = eq.unique != nil && *eq.unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EnvironmentQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := eq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (eq *EnvironmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: environment.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if unique := eq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, environment.FieldID)
		for i := range fields {
			if fields[i] != environment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EnvironmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(environment.Table)
	columns := eq.fields
	if len(columns) == 0 {
		columns = environment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.unique != nil && *eq.unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EnvironmentGroupBy is the group-by builder for Environment entities.
type EnvironmentGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EnvironmentGroupBy) Aggregate(fns ...AggregateFunc) *EnvironmentGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scans the result into the given value.
func (egb *EnvironmentGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := egb.path(ctx)
	if err != nil {
		return err
	}
	egb.sql = query
	return egb.sqlScan(ctx, v)
}

func (egb *EnvironmentGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range egb.fields {
		if !environment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := egb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *EnvironmentGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql.Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(egb.fields)+len(egb.fns))
		for _, f := range egb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(egb.fields...)...)
}

// EnvironmentSelect is the builder for selecting fields of Environment entities.
type EnvironmentSelect struct {
	*EnvironmentQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (es *EnvironmentSelect) Scan(ctx context.Context, v interface{}) error {
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	es.sql = es.EnvironmentQuery.sqlQuery(ctx)
	return es.sqlScan(ctx, v)
}

func (es *EnvironmentSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := es.sql.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
