// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// EnvironmentQuery is the builder for querying Environment entities.
type EnvironmentQuery struct {
	config
	ctx                                   *QueryContext
	order                                 []environment.OrderOption
	inters                                []Interceptor
	predicates                            []predicate.Environment
	withEnvironmentToUser                 *UserQuery
	withEnvironmentToHost                 *HostQuery
	withEnvironmentToCompetition          *CompetitionQuery
	withEnvironmentToIdentity             *IdentityQuery
	withEnvironmentToCommand              *CommandQuery
	withEnvironmentToScript               *ScriptQuery
	withEnvironmentToFileDownload         *FileDownloadQuery
	withEnvironmentToFileDelete           *FileDeleteQuery
	withEnvironmentToFileExtract          *FileExtractQuery
	withEnvironmentToIncludedNetwork      *IncludedNetworkQuery
	withEnvironmentToFinding              *FindingQuery
	withEnvironmentToDNSRecord            *DNSRecordQuery
	withEnvironmentToDNS                  *DNSQuery
	withEnvironmentToNetwork              *NetworkQuery
	withEnvironmentToHostDependency       *HostDependencyQuery
	withEnvironmentToAnsible              *AnsibleQuery
	withEnvironmentToBuild                *BuildQuery
	withEnvironmentToRepository           *RepositoryQuery
	withEnvironmentToServerTask           *ServerTaskQuery
	modifiers                             []func(*sql.Selector)
	loadTotal                             []func(context.Context, []*Environment) error
	withNamedEnvironmentToUser            map[string]*UserQuery
	withNamedEnvironmentToHost            map[string]*HostQuery
	withNamedEnvironmentToCompetition     map[string]*CompetitionQuery
	withNamedEnvironmentToIdentity        map[string]*IdentityQuery
	withNamedEnvironmentToCommand         map[string]*CommandQuery
	withNamedEnvironmentToScript          map[string]*ScriptQuery
	withNamedEnvironmentToFileDownload    map[string]*FileDownloadQuery
	withNamedEnvironmentToFileDelete      map[string]*FileDeleteQuery
	withNamedEnvironmentToFileExtract     map[string]*FileExtractQuery
	withNamedEnvironmentToIncludedNetwork map[string]*IncludedNetworkQuery
	withNamedEnvironmentToFinding         map[string]*FindingQuery
	withNamedEnvironmentToDNSRecord       map[string]*DNSRecordQuery
	withNamedEnvironmentToDNS             map[string]*DNSQuery
	withNamedEnvironmentToNetwork         map[string]*NetworkQuery
	withNamedEnvironmentToHostDependency  map[string]*HostDependencyQuery
	withNamedEnvironmentToAnsible         map[string]*AnsibleQuery
	withNamedEnvironmentToBuild           map[string]*BuildQuery
	withNamedEnvironmentToRepository      map[string]*RepositoryQuery
	withNamedEnvironmentToServerTask      map[string]*ServerTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnvironmentQuery builder.
func (eq *EnvironmentQuery) Where(ps ...predicate.Environment) *EnvironmentQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EnvironmentQuery) Limit(limit int) *EnvironmentQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EnvironmentQuery) Offset(offset int) *EnvironmentQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EnvironmentQuery) Unique(unique bool) *EnvironmentQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EnvironmentQuery) Order(o ...environment.OrderOption) *EnvironmentQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryEnvironmentToUser chains the current query on the "EnvironmentToUser" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToUser() *UserQuery {
	query := (&UserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToUserTable, environment.EnvironmentToUserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToHost chains the current query on the "EnvironmentToHost" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToHost() *HostQuery {
	query := (&HostClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToHostTable, environment.EnvironmentToHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToCompetition chains the current query on the "EnvironmentToCompetition" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToCompetition() *CompetitionQuery {
	query := (&CompetitionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToCompetitionTable, environment.EnvironmentToCompetitionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToIdentity chains the current query on the "EnvironmentToIdentity" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToIdentity() *IdentityQuery {
	query := (&IdentityClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(identity.Table, identity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToIdentityTable, environment.EnvironmentToIdentityColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToCommand chains the current query on the "EnvironmentToCommand" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToCommand() *CommandQuery {
	query := (&CommandClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToCommandTable, environment.EnvironmentToCommandColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToScript chains the current query on the "EnvironmentToScript" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToScript() *ScriptQuery {
	query := (&ScriptClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToScriptTable, environment.EnvironmentToScriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToFileDownload chains the current query on the "EnvironmentToFileDownload" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToFileDownload() *FileDownloadQuery {
	query := (&FileDownloadClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(filedownload.Table, filedownload.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToFileDownloadTable, environment.EnvironmentToFileDownloadColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToFileDelete chains the current query on the "EnvironmentToFileDelete" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToFileDelete() *FileDeleteQuery {
	query := (&FileDeleteClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(filedelete.Table, filedelete.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToFileDeleteTable, environment.EnvironmentToFileDeleteColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToFileExtract chains the current query on the "EnvironmentToFileExtract" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToFileExtract() *FileExtractQuery {
	query := (&FileExtractClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(fileextract.Table, fileextract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToFileExtractTable, environment.EnvironmentToFileExtractColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToIncludedNetwork chains the current query on the "EnvironmentToIncludedNetwork" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToIncludedNetwork() *IncludedNetworkQuery {
	query := (&IncludedNetworkClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(includednetwork.Table, includednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToIncludedNetworkTable, environment.EnvironmentToIncludedNetworkPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToFinding chains the current query on the "EnvironmentToFinding" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToFinding() *FindingQuery {
	query := (&FindingClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(finding.Table, finding.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToFindingTable, environment.EnvironmentToFindingColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToDNSRecord chains the current query on the "EnvironmentToDNSRecord" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToDNSRecord() *DNSRecordQuery {
	query := (&DNSRecordClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(dnsrecord.Table, dnsrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToDNSRecordTable, environment.EnvironmentToDNSRecordColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToDNS chains the current query on the "EnvironmentToDNS" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToDNS() *DNSQuery {
	query := (&DNSClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(dns.Table, dns.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToDNSTable, environment.EnvironmentToDNSPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToNetwork chains the current query on the "EnvironmentToNetwork" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToNetwork() *NetworkQuery {
	query := (&NetworkClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToNetworkTable, environment.EnvironmentToNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToHostDependency chains the current query on the "EnvironmentToHostDependency" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToHostDependency() *HostDependencyQuery {
	query := (&HostDependencyClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(hostdependency.Table, hostdependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToHostDependencyTable, environment.EnvironmentToHostDependencyColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToAnsible chains the current query on the "EnvironmentToAnsible" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToAnsible() *AnsibleQuery {
	query := (&AnsibleClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(ansible.Table, ansible.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToAnsibleTable, environment.EnvironmentToAnsibleColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToBuild chains the current query on the "EnvironmentToBuild" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToBuild() *BuildQuery {
	query := (&BuildClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, environment.EnvironmentToBuildTable, environment.EnvironmentToBuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToRepository chains the current query on the "EnvironmentToRepository" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToRepository() *RepositoryQuery {
	query := (&RepositoryClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, environment.EnvironmentToRepositoryTable, environment.EnvironmentToRepositoryPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToServerTask chains the current query on the "EnvironmentToServerTask" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToServerTask() *ServerTaskQuery {
	query := (&ServerTaskClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(servertask.Table, servertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, environment.EnvironmentToServerTaskTable, environment.EnvironmentToServerTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Environment entity from the query.
// Returns a *NotFoundError when no Environment was found.
func (eq *EnvironmentQuery) First(ctx context.Context) (*Environment, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{environment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EnvironmentQuery) FirstX(ctx context.Context) *Environment {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Environment ID from the query.
// Returns a *NotFoundError when no Environment ID was found.
func (eq *EnvironmentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{environment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EnvironmentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Environment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Environment entity is found.
// Returns a *NotFoundError when no Environment entities are found.
func (eq *EnvironmentQuery) Only(ctx context.Context) (*Environment, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{environment.Label}
	default:
		return nil, &NotSingularError{environment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EnvironmentQuery) OnlyX(ctx context.Context) *Environment {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Environment ID in the query.
// Returns a *NotSingularError when more than one Environment ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EnvironmentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = &NotSingularError{environment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EnvironmentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Environments.
func (eq *EnvironmentQuery) All(ctx context.Context) ([]*Environment, error) {
	ctx = setContextOp(ctx, eq.ctx, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Environment, *EnvironmentQuery]()
	return withInterceptors[[]*Environment](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EnvironmentQuery) AllX(ctx context.Context) []*Environment {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Environment IDs.
func (eq *EnvironmentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, "IDs")
	if err = eq.Select(environment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EnvironmentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EnvironmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EnvironmentQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EnvironmentQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EnvironmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EnvironmentQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnvironmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EnvironmentQuery) Clone() *EnvironmentQuery {
	if eq == nil {
		return nil
	}
	return &EnvironmentQuery{
		config:                           eq.config,
		ctx:                              eq.ctx.Clone(),
		order:                            append([]environment.OrderOption{}, eq.order...),
		inters:                           append([]Interceptor{}, eq.inters...),
		predicates:                       append([]predicate.Environment{}, eq.predicates...),
		withEnvironmentToUser:            eq.withEnvironmentToUser.Clone(),
		withEnvironmentToHost:            eq.withEnvironmentToHost.Clone(),
		withEnvironmentToCompetition:     eq.withEnvironmentToCompetition.Clone(),
		withEnvironmentToIdentity:        eq.withEnvironmentToIdentity.Clone(),
		withEnvironmentToCommand:         eq.withEnvironmentToCommand.Clone(),
		withEnvironmentToScript:          eq.withEnvironmentToScript.Clone(),
		withEnvironmentToFileDownload:    eq.withEnvironmentToFileDownload.Clone(),
		withEnvironmentToFileDelete:      eq.withEnvironmentToFileDelete.Clone(),
		withEnvironmentToFileExtract:     eq.withEnvironmentToFileExtract.Clone(),
		withEnvironmentToIncludedNetwork: eq.withEnvironmentToIncludedNetwork.Clone(),
		withEnvironmentToFinding:         eq.withEnvironmentToFinding.Clone(),
		withEnvironmentToDNSRecord:       eq.withEnvironmentToDNSRecord.Clone(),
		withEnvironmentToDNS:             eq.withEnvironmentToDNS.Clone(),
		withEnvironmentToNetwork:         eq.withEnvironmentToNetwork.Clone(),
		withEnvironmentToHostDependency:  eq.withEnvironmentToHostDependency.Clone(),
		withEnvironmentToAnsible:         eq.withEnvironmentToAnsible.Clone(),
		withEnvironmentToBuild:           eq.withEnvironmentToBuild.Clone(),
		withEnvironmentToRepository:      eq.withEnvironmentToRepository.Clone(),
		withEnvironmentToServerTask:      eq.withEnvironmentToServerTask.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithEnvironmentToUser tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToUser" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToUser(opts ...func(*UserQuery)) *EnvironmentQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToUser = query
	return eq
}

// WithEnvironmentToHost tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToHost" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToHost(opts ...func(*HostQuery)) *EnvironmentQuery {
	query := (&HostClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToHost = query
	return eq
}

// WithEnvironmentToCompetition tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToCompetition" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToCompetition(opts ...func(*CompetitionQuery)) *EnvironmentQuery {
	query := (&CompetitionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToCompetition = query
	return eq
}

// WithEnvironmentToIdentity tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToIdentity" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToIdentity(opts ...func(*IdentityQuery)) *EnvironmentQuery {
	query := (&IdentityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToIdentity = query
	return eq
}

// WithEnvironmentToCommand tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToCommand" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToCommand(opts ...func(*CommandQuery)) *EnvironmentQuery {
	query := (&CommandClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToCommand = query
	return eq
}

// WithEnvironmentToScript tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToScript" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToScript(opts ...func(*ScriptQuery)) *EnvironmentQuery {
	query := (&ScriptClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToScript = query
	return eq
}

// WithEnvironmentToFileDownload tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToFileDownload" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToFileDownload(opts ...func(*FileDownloadQuery)) *EnvironmentQuery {
	query := (&FileDownloadClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToFileDownload = query
	return eq
}

// WithEnvironmentToFileDelete tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToFileDelete" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToFileDelete(opts ...func(*FileDeleteQuery)) *EnvironmentQuery {
	query := (&FileDeleteClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToFileDelete = query
	return eq
}

// WithEnvironmentToFileExtract tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToFileExtract" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToFileExtract(opts ...func(*FileExtractQuery)) *EnvironmentQuery {
	query := (&FileExtractClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToFileExtract = query
	return eq
}

// WithEnvironmentToIncludedNetwork tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToIncludedNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToIncludedNetwork(opts ...func(*IncludedNetworkQuery)) *EnvironmentQuery {
	query := (&IncludedNetworkClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToIncludedNetwork = query
	return eq
}

// WithEnvironmentToFinding tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToFinding" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToFinding(opts ...func(*FindingQuery)) *EnvironmentQuery {
	query := (&FindingClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToFinding = query
	return eq
}

// WithEnvironmentToDNSRecord tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToDNSRecord" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToDNSRecord(opts ...func(*DNSRecordQuery)) *EnvironmentQuery {
	query := (&DNSRecordClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToDNSRecord = query
	return eq
}

// WithEnvironmentToDNS tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToDNS" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToDNS(opts ...func(*DNSQuery)) *EnvironmentQuery {
	query := (&DNSClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToDNS = query
	return eq
}

// WithEnvironmentToNetwork tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToNetwork(opts ...func(*NetworkQuery)) *EnvironmentQuery {
	query := (&NetworkClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToNetwork = query
	return eq
}

// WithEnvironmentToHostDependency tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToHostDependency" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToHostDependency(opts ...func(*HostDependencyQuery)) *EnvironmentQuery {
	query := (&HostDependencyClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToHostDependency = query
	return eq
}

// WithEnvironmentToAnsible tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToAnsible" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToAnsible(opts ...func(*AnsibleQuery)) *EnvironmentQuery {
	query := (&AnsibleClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToAnsible = query
	return eq
}

// WithEnvironmentToBuild tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToBuild" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToBuild(opts ...func(*BuildQuery)) *EnvironmentQuery {
	query := (&BuildClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToBuild = query
	return eq
}

// WithEnvironmentToRepository tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToRepository" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToRepository(opts ...func(*RepositoryQuery)) *EnvironmentQuery {
	query := (&RepositoryClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToRepository = query
	return eq
}

// WithEnvironmentToServerTask tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToServerTask" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToServerTask(opts ...func(*ServerTaskQuery)) *EnvironmentQuery {
	query := (&ServerTaskClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToServerTask = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HCLID string `json:"hcl_id,omitempty" hcl:"id,label"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Environment.Query().
//		GroupBy(environment.FieldHCLID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EnvironmentQuery) GroupBy(field string, fields ...string) *EnvironmentGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EnvironmentGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = environment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HCLID string `json:"hcl_id,omitempty" hcl:"id,label"`
//	}
//
//	client.Environment.Query().
//		Select(environment.FieldHCLID).
//		Scan(ctx, &v)
func (eq *EnvironmentQuery) Select(fields ...string) *EnvironmentSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EnvironmentSelect{EnvironmentQuery: eq}
	sbuild.label = environment.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EnvironmentSelect configured with the given aggregations.
func (eq *EnvironmentQuery) Aggregate(fns ...AggregateFunc) *EnvironmentSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EnvironmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !environment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EnvironmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Environment, error) {
	var (
		nodes       = []*Environment{}
		_spec       = eq.querySpec()
		loadedTypes = [19]bool{
			eq.withEnvironmentToUser != nil,
			eq.withEnvironmentToHost != nil,
			eq.withEnvironmentToCompetition != nil,
			eq.withEnvironmentToIdentity != nil,
			eq.withEnvironmentToCommand != nil,
			eq.withEnvironmentToScript != nil,
			eq.withEnvironmentToFileDownload != nil,
			eq.withEnvironmentToFileDelete != nil,
			eq.withEnvironmentToFileExtract != nil,
			eq.withEnvironmentToIncludedNetwork != nil,
			eq.withEnvironmentToFinding != nil,
			eq.withEnvironmentToDNSRecord != nil,
			eq.withEnvironmentToDNS != nil,
			eq.withEnvironmentToNetwork != nil,
			eq.withEnvironmentToHostDependency != nil,
			eq.withEnvironmentToAnsible != nil,
			eq.withEnvironmentToBuild != nil,
			eq.withEnvironmentToRepository != nil,
			eq.withEnvironmentToServerTask != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Environment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Environment{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withEnvironmentToUser; query != nil {
		if err := eq.loadEnvironmentToUser(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToUser = []*User{} },
			func(n *Environment, e *User) { n.Edges.EnvironmentToUser = append(n.Edges.EnvironmentToUser, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToHost; query != nil {
		if err := eq.loadEnvironmentToHost(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToHost = []*Host{} },
			func(n *Environment, e *Host) { n.Edges.EnvironmentToHost = append(n.Edges.EnvironmentToHost, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToCompetition; query != nil {
		if err := eq.loadEnvironmentToCompetition(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToCompetition = []*Competition{} },
			func(n *Environment, e *Competition) {
				n.Edges.EnvironmentToCompetition = append(n.Edges.EnvironmentToCompetition, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToIdentity; query != nil {
		if err := eq.loadEnvironmentToIdentity(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToIdentity = []*Identity{} },
			func(n *Environment, e *Identity) {
				n.Edges.EnvironmentToIdentity = append(n.Edges.EnvironmentToIdentity, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToCommand; query != nil {
		if err := eq.loadEnvironmentToCommand(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToCommand = []*Command{} },
			func(n *Environment, e *Command) {
				n.Edges.EnvironmentToCommand = append(n.Edges.EnvironmentToCommand, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToScript; query != nil {
		if err := eq.loadEnvironmentToScript(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToScript = []*Script{} },
			func(n *Environment, e *Script) { n.Edges.EnvironmentToScript = append(n.Edges.EnvironmentToScript, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToFileDownload; query != nil {
		if err := eq.loadEnvironmentToFileDownload(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToFileDownload = []*FileDownload{} },
			func(n *Environment, e *FileDownload) {
				n.Edges.EnvironmentToFileDownload = append(n.Edges.EnvironmentToFileDownload, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToFileDelete; query != nil {
		if err := eq.loadEnvironmentToFileDelete(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToFileDelete = []*FileDelete{} },
			func(n *Environment, e *FileDelete) {
				n.Edges.EnvironmentToFileDelete = append(n.Edges.EnvironmentToFileDelete, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToFileExtract; query != nil {
		if err := eq.loadEnvironmentToFileExtract(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToFileExtract = []*FileExtract{} },
			func(n *Environment, e *FileExtract) {
				n.Edges.EnvironmentToFileExtract = append(n.Edges.EnvironmentToFileExtract, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToIncludedNetwork; query != nil {
		if err := eq.loadEnvironmentToIncludedNetwork(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToIncludedNetwork = []*IncludedNetwork{} },
			func(n *Environment, e *IncludedNetwork) {
				n.Edges.EnvironmentToIncludedNetwork = append(n.Edges.EnvironmentToIncludedNetwork, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToFinding; query != nil {
		if err := eq.loadEnvironmentToFinding(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToFinding = []*Finding{} },
			func(n *Environment, e *Finding) {
				n.Edges.EnvironmentToFinding = append(n.Edges.EnvironmentToFinding, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToDNSRecord; query != nil {
		if err := eq.loadEnvironmentToDNSRecord(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToDNSRecord = []*DNSRecord{} },
			func(n *Environment, e *DNSRecord) {
				n.Edges.EnvironmentToDNSRecord = append(n.Edges.EnvironmentToDNSRecord, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToDNS; query != nil {
		if err := eq.loadEnvironmentToDNS(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToDNS = []*DNS{} },
			func(n *Environment, e *DNS) { n.Edges.EnvironmentToDNS = append(n.Edges.EnvironmentToDNS, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToNetwork; query != nil {
		if err := eq.loadEnvironmentToNetwork(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToNetwork = []*Network{} },
			func(n *Environment, e *Network) {
				n.Edges.EnvironmentToNetwork = append(n.Edges.EnvironmentToNetwork, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToHostDependency; query != nil {
		if err := eq.loadEnvironmentToHostDependency(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToHostDependency = []*HostDependency{} },
			func(n *Environment, e *HostDependency) {
				n.Edges.EnvironmentToHostDependency = append(n.Edges.EnvironmentToHostDependency, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToAnsible; query != nil {
		if err := eq.loadEnvironmentToAnsible(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToAnsible = []*Ansible{} },
			func(n *Environment, e *Ansible) {
				n.Edges.EnvironmentToAnsible = append(n.Edges.EnvironmentToAnsible, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToBuild; query != nil {
		if err := eq.loadEnvironmentToBuild(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToBuild = []*Build{} },
			func(n *Environment, e *Build) { n.Edges.EnvironmentToBuild = append(n.Edges.EnvironmentToBuild, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToRepository; query != nil {
		if err := eq.loadEnvironmentToRepository(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToRepository = []*Repository{} },
			func(n *Environment, e *Repository) {
				n.Edges.EnvironmentToRepository = append(n.Edges.EnvironmentToRepository, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnvironmentToServerTask; query != nil {
		if err := eq.loadEnvironmentToServerTask(ctx, query, nodes,
			func(n *Environment) { n.Edges.EnvironmentToServerTask = []*ServerTask{} },
			func(n *Environment, e *ServerTask) {
				n.Edges.EnvironmentToServerTask = append(n.Edges.EnvironmentToServerTask, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToUser {
		if err := eq.loadEnvironmentToUser(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToUser(name) },
			func(n *Environment, e *User) { n.appendNamedEnvironmentToUser(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToHost {
		if err := eq.loadEnvironmentToHost(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToHost(name) },
			func(n *Environment, e *Host) { n.appendNamedEnvironmentToHost(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToCompetition {
		if err := eq.loadEnvironmentToCompetition(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToCompetition(name) },
			func(n *Environment, e *Competition) { n.appendNamedEnvironmentToCompetition(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToIdentity {
		if err := eq.loadEnvironmentToIdentity(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToIdentity(name) },
			func(n *Environment, e *Identity) { n.appendNamedEnvironmentToIdentity(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToCommand {
		if err := eq.loadEnvironmentToCommand(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToCommand(name) },
			func(n *Environment, e *Command) { n.appendNamedEnvironmentToCommand(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToScript {
		if err := eq.loadEnvironmentToScript(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToScript(name) },
			func(n *Environment, e *Script) { n.appendNamedEnvironmentToScript(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToFileDownload {
		if err := eq.loadEnvironmentToFileDownload(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToFileDownload(name) },
			func(n *Environment, e *FileDownload) { n.appendNamedEnvironmentToFileDownload(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToFileDelete {
		if err := eq.loadEnvironmentToFileDelete(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToFileDelete(name) },
			func(n *Environment, e *FileDelete) { n.appendNamedEnvironmentToFileDelete(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToFileExtract {
		if err := eq.loadEnvironmentToFileExtract(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToFileExtract(name) },
			func(n *Environment, e *FileExtract) { n.appendNamedEnvironmentToFileExtract(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToIncludedNetwork {
		if err := eq.loadEnvironmentToIncludedNetwork(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToIncludedNetwork(name) },
			func(n *Environment, e *IncludedNetwork) { n.appendNamedEnvironmentToIncludedNetwork(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToFinding {
		if err := eq.loadEnvironmentToFinding(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToFinding(name) },
			func(n *Environment, e *Finding) { n.appendNamedEnvironmentToFinding(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToDNSRecord {
		if err := eq.loadEnvironmentToDNSRecord(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToDNSRecord(name) },
			func(n *Environment, e *DNSRecord) { n.appendNamedEnvironmentToDNSRecord(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToDNS {
		if err := eq.loadEnvironmentToDNS(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToDNS(name) },
			func(n *Environment, e *DNS) { n.appendNamedEnvironmentToDNS(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToNetwork {
		if err := eq.loadEnvironmentToNetwork(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToNetwork(name) },
			func(n *Environment, e *Network) { n.appendNamedEnvironmentToNetwork(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToHostDependency {
		if err := eq.loadEnvironmentToHostDependency(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToHostDependency(name) },
			func(n *Environment, e *HostDependency) { n.appendNamedEnvironmentToHostDependency(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToAnsible {
		if err := eq.loadEnvironmentToAnsible(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToAnsible(name) },
			func(n *Environment, e *Ansible) { n.appendNamedEnvironmentToAnsible(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToBuild {
		if err := eq.loadEnvironmentToBuild(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToBuild(name) },
			func(n *Environment, e *Build) { n.appendNamedEnvironmentToBuild(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToRepository {
		if err := eq.loadEnvironmentToRepository(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToRepository(name) },
			func(n *Environment, e *Repository) { n.appendNamedEnvironmentToRepository(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedEnvironmentToServerTask {
		if err := eq.loadEnvironmentToServerTask(ctx, query, nodes,
			func(n *Environment) { n.appendNamedEnvironmentToServerTask(name) },
			func(n *Environment, e *ServerTask) { n.appendNamedEnvironmentToServerTask(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range eq.loadTotal {
		if err := eq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EnvironmentQuery) loadEnvironmentToUser(ctx context.Context, query *UserQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.EnvironmentToUserTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(environment.EnvironmentToUserPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(environment.EnvironmentToUserPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.EnvironmentToUserPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Environment]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "EnvironmentToUser" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToHost(ctx context.Context, query *HostQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Host)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Host(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToHostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToCompetition(ctx context.Context, query *CompetitionQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Competition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Competition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToCompetitionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_competition
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_competition" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_competition" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToIdentity(ctx context.Context, query *IdentityQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Identity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Identity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToIdentityColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_identity
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_identity" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_identity" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToCommand(ctx context.Context, query *CommandQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Command)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Command(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToCommandColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_command
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_command" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_command" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToScript(ctx context.Context, query *ScriptQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Script)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Script(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToScriptColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_script
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_script" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_script" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToFileDownload(ctx context.Context, query *FileDownloadQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *FileDownload)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FileDownload(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToFileDownloadColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_file_download
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_file_download" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_file_download" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToFileDelete(ctx context.Context, query *FileDeleteQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *FileDelete)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FileDelete(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToFileDeleteColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_file_delete
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_file_delete" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_file_delete" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToFileExtract(ctx context.Context, query *FileExtractQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *FileExtract)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FileExtract(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToFileExtractColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_file_extract
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_file_extract" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_file_extract" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToIncludedNetwork(ctx context.Context, query *IncludedNetworkQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *IncludedNetwork)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.EnvironmentToIncludedNetworkTable)
		s.Join(joinT).On(s.C(includednetwork.FieldID), joinT.C(environment.EnvironmentToIncludedNetworkPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(environment.EnvironmentToIncludedNetworkPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.EnvironmentToIncludedNetworkPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Environment]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncludedNetwork](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "EnvironmentToIncludedNetwork" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToFinding(ctx context.Context, query *FindingQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Finding)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Finding(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToFindingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_finding
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_finding" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_finding" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToDNSRecord(ctx context.Context, query *DNSRecordQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *DNSRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DNSRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToDNSRecordColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_dns_record
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_dns_record" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_dns_record" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToDNS(ctx context.Context, query *DNSQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *DNS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.EnvironmentToDNSTable)
		s.Join(joinT).On(s.C(dns.FieldID), joinT.C(environment.EnvironmentToDNSPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(environment.EnvironmentToDNSPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.EnvironmentToDNSPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Environment]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DNS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "EnvironmentToDNS" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToNetwork(ctx context.Context, query *NetworkQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Network)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Network(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToNetworkColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_network
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_network" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_network" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToHostDependency(ctx context.Context, query *HostDependencyQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *HostDependency)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HostDependency(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToHostDependencyColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_host_dependency
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_host_dependency" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_host_dependency" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToAnsible(ctx context.Context, query *AnsibleQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Ansible)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToAnsibleColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.environment_environment_to_ansible
		if fk == nil {
			return fmt.Errorf(`foreign-key "environment_environment_to_ansible" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "environment_environment_to_ansible" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToBuild(ctx context.Context, query *BuildQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Build)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Build(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToBuildColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.build_build_to_environment
		if fk == nil {
			return fmt.Errorf(`foreign-key "build_build_to_environment" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "build_build_to_environment" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToRepository(ctx context.Context, query *RepositoryQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *Repository)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Environment)
	nids := make(map[uuid.UUID]map[*Environment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(environment.EnvironmentToRepositoryTable)
		s.Join(joinT).On(s.C(repository.FieldID), joinT.C(environment.EnvironmentToRepositoryPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(environment.EnvironmentToRepositoryPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(environment.EnvironmentToRepositoryPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Environment]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Repository](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "EnvironmentToRepository" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EnvironmentQuery) loadEnvironmentToServerTask(ctx context.Context, query *ServerTaskQuery, nodes []*Environment, init func(*Environment), assign func(*Environment, *ServerTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Environment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServerTask(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(environment.EnvironmentToServerTaskColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.server_task_server_task_to_environment
		if fk == nil {
			return fmt.Errorf(`foreign-key "server_task_server_task_to_environment" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "server_task_server_task_to_environment" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *EnvironmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EnvironmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(environment.Table, environment.Columns, sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, environment.FieldID)
		for i := range fields {
			if fields[i] != environment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EnvironmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(environment.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = environment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedEnvironmentToUser tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToUser"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToUser(name string, opts ...func(*UserQuery)) *EnvironmentQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToUser == nil {
		eq.withNamedEnvironmentToUser = make(map[string]*UserQuery)
	}
	eq.withNamedEnvironmentToUser[name] = query
	return eq
}

// WithNamedEnvironmentToHost tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToHost"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToHost(name string, opts ...func(*HostQuery)) *EnvironmentQuery {
	query := (&HostClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToHost == nil {
		eq.withNamedEnvironmentToHost = make(map[string]*HostQuery)
	}
	eq.withNamedEnvironmentToHost[name] = query
	return eq
}

// WithNamedEnvironmentToCompetition tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToCompetition"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToCompetition(name string, opts ...func(*CompetitionQuery)) *EnvironmentQuery {
	query := (&CompetitionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToCompetition == nil {
		eq.withNamedEnvironmentToCompetition = make(map[string]*CompetitionQuery)
	}
	eq.withNamedEnvironmentToCompetition[name] = query
	return eq
}

// WithNamedEnvironmentToIdentity tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToIdentity"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToIdentity(name string, opts ...func(*IdentityQuery)) *EnvironmentQuery {
	query := (&IdentityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToIdentity == nil {
		eq.withNamedEnvironmentToIdentity = make(map[string]*IdentityQuery)
	}
	eq.withNamedEnvironmentToIdentity[name] = query
	return eq
}

// WithNamedEnvironmentToCommand tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToCommand"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToCommand(name string, opts ...func(*CommandQuery)) *EnvironmentQuery {
	query := (&CommandClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToCommand == nil {
		eq.withNamedEnvironmentToCommand = make(map[string]*CommandQuery)
	}
	eq.withNamedEnvironmentToCommand[name] = query
	return eq
}

// WithNamedEnvironmentToScript tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToScript"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToScript(name string, opts ...func(*ScriptQuery)) *EnvironmentQuery {
	query := (&ScriptClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToScript == nil {
		eq.withNamedEnvironmentToScript = make(map[string]*ScriptQuery)
	}
	eq.withNamedEnvironmentToScript[name] = query
	return eq
}

// WithNamedEnvironmentToFileDownload tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToFileDownload"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToFileDownload(name string, opts ...func(*FileDownloadQuery)) *EnvironmentQuery {
	query := (&FileDownloadClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToFileDownload == nil {
		eq.withNamedEnvironmentToFileDownload = make(map[string]*FileDownloadQuery)
	}
	eq.withNamedEnvironmentToFileDownload[name] = query
	return eq
}

// WithNamedEnvironmentToFileDelete tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToFileDelete"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToFileDelete(name string, opts ...func(*FileDeleteQuery)) *EnvironmentQuery {
	query := (&FileDeleteClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToFileDelete == nil {
		eq.withNamedEnvironmentToFileDelete = make(map[string]*FileDeleteQuery)
	}
	eq.withNamedEnvironmentToFileDelete[name] = query
	return eq
}

// WithNamedEnvironmentToFileExtract tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToFileExtract"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToFileExtract(name string, opts ...func(*FileExtractQuery)) *EnvironmentQuery {
	query := (&FileExtractClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToFileExtract == nil {
		eq.withNamedEnvironmentToFileExtract = make(map[string]*FileExtractQuery)
	}
	eq.withNamedEnvironmentToFileExtract[name] = query
	return eq
}

// WithNamedEnvironmentToIncludedNetwork tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToIncludedNetwork"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToIncludedNetwork(name string, opts ...func(*IncludedNetworkQuery)) *EnvironmentQuery {
	query := (&IncludedNetworkClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToIncludedNetwork == nil {
		eq.withNamedEnvironmentToIncludedNetwork = make(map[string]*IncludedNetworkQuery)
	}
	eq.withNamedEnvironmentToIncludedNetwork[name] = query
	return eq
}

// WithNamedEnvironmentToFinding tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToFinding"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToFinding(name string, opts ...func(*FindingQuery)) *EnvironmentQuery {
	query := (&FindingClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToFinding == nil {
		eq.withNamedEnvironmentToFinding = make(map[string]*FindingQuery)
	}
	eq.withNamedEnvironmentToFinding[name] = query
	return eq
}

// WithNamedEnvironmentToDNSRecord tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToDNSRecord"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToDNSRecord(name string, opts ...func(*DNSRecordQuery)) *EnvironmentQuery {
	query := (&DNSRecordClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToDNSRecord == nil {
		eq.withNamedEnvironmentToDNSRecord = make(map[string]*DNSRecordQuery)
	}
	eq.withNamedEnvironmentToDNSRecord[name] = query
	return eq
}

// WithNamedEnvironmentToDNS tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToDNS"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToDNS(name string, opts ...func(*DNSQuery)) *EnvironmentQuery {
	query := (&DNSClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToDNS == nil {
		eq.withNamedEnvironmentToDNS = make(map[string]*DNSQuery)
	}
	eq.withNamedEnvironmentToDNS[name] = query
	return eq
}

// WithNamedEnvironmentToNetwork tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToNetwork"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToNetwork(name string, opts ...func(*NetworkQuery)) *EnvironmentQuery {
	query := (&NetworkClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToNetwork == nil {
		eq.withNamedEnvironmentToNetwork = make(map[string]*NetworkQuery)
	}
	eq.withNamedEnvironmentToNetwork[name] = query
	return eq
}

// WithNamedEnvironmentToHostDependency tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToHostDependency"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToHostDependency(name string, opts ...func(*HostDependencyQuery)) *EnvironmentQuery {
	query := (&HostDependencyClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToHostDependency == nil {
		eq.withNamedEnvironmentToHostDependency = make(map[string]*HostDependencyQuery)
	}
	eq.withNamedEnvironmentToHostDependency[name] = query
	return eq
}

// WithNamedEnvironmentToAnsible tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToAnsible"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToAnsible(name string, opts ...func(*AnsibleQuery)) *EnvironmentQuery {
	query := (&AnsibleClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToAnsible == nil {
		eq.withNamedEnvironmentToAnsible = make(map[string]*AnsibleQuery)
	}
	eq.withNamedEnvironmentToAnsible[name] = query
	return eq
}

// WithNamedEnvironmentToBuild tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToBuild"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToBuild(name string, opts ...func(*BuildQuery)) *EnvironmentQuery {
	query := (&BuildClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToBuild == nil {
		eq.withNamedEnvironmentToBuild = make(map[string]*BuildQuery)
	}
	eq.withNamedEnvironmentToBuild[name] = query
	return eq
}

// WithNamedEnvironmentToRepository tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToRepository"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToRepository(name string, opts ...func(*RepositoryQuery)) *EnvironmentQuery {
	query := (&RepositoryClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToRepository == nil {
		eq.withNamedEnvironmentToRepository = make(map[string]*RepositoryQuery)
	}
	eq.withNamedEnvironmentToRepository[name] = query
	return eq
}

// WithNamedEnvironmentToServerTask tells the query-builder to eager-load the nodes that are connected to the "EnvironmentToServerTask"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithNamedEnvironmentToServerTask(name string, opts ...func(*ServerTaskQuery)) *EnvironmentQuery {
	query := (&ServerTaskClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedEnvironmentToServerTask == nil {
		eq.withNamedEnvironmentToServerTask = make(map[string]*ServerTaskQuery)
	}
	eq.withNamedEnvironmentToServerTask[name] = query
	return eq
}

// EnvironmentGroupBy is the group-by builder for Environment entities.
type EnvironmentGroupBy struct {
	selector
	build *EnvironmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EnvironmentGroupBy) Aggregate(fns ...AggregateFunc) *EnvironmentGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EnvironmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnvironmentQuery, *EnvironmentGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EnvironmentGroupBy) sqlScan(ctx context.Context, root *EnvironmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EnvironmentSelect is the builder for selecting fields of Environment entities.
type EnvironmentSelect struct {
	*EnvironmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EnvironmentSelect) Aggregate(fns ...AggregateFunc) *EnvironmentSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EnvironmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnvironmentQuery, *EnvironmentSelect](ctx, es.EnvironmentQuery, es, es.inters, v)
}

func (es *EnvironmentSelect) sqlScan(ctx context.Context, root *EnvironmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
