// Code generated by ent, DO NOT EDIT.

package environment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldID, id))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldHCLID, v))
}

// CompetitionID applies equality check predicate on the "competition_id" field. It's identical to CompetitionIDEQ.
func CompetitionID(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldCompetitionID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldDescription, v))
}

// Builder applies equality check predicate on the "builder" field. It's identical to BuilderEQ.
func Builder(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldBuilder, v))
}

// TeamCount applies equality check predicate on the "team_count" field. It's identical to TeamCountEQ.
func TeamCount(v int) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldTeamCount, v))
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v int) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldRevision, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContainsFold(FieldHCLID, v))
}

// CompetitionIDEQ applies the EQ predicate on the "competition_id" field.
func CompetitionIDEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldCompetitionID, v))
}

// CompetitionIDNEQ applies the NEQ predicate on the "competition_id" field.
func CompetitionIDNEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldCompetitionID, v))
}

// CompetitionIDIn applies the In predicate on the "competition_id" field.
func CompetitionIDIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldCompetitionID, vs...))
}

// CompetitionIDNotIn applies the NotIn predicate on the "competition_id" field.
func CompetitionIDNotIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldCompetitionID, vs...))
}

// CompetitionIDGT applies the GT predicate on the "competition_id" field.
func CompetitionIDGT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldCompetitionID, v))
}

// CompetitionIDGTE applies the GTE predicate on the "competition_id" field.
func CompetitionIDGTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldCompetitionID, v))
}

// CompetitionIDLT applies the LT predicate on the "competition_id" field.
func CompetitionIDLT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldCompetitionID, v))
}

// CompetitionIDLTE applies the LTE predicate on the "competition_id" field.
func CompetitionIDLTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldCompetitionID, v))
}

// CompetitionIDContains applies the Contains predicate on the "competition_id" field.
func CompetitionIDContains(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContains(FieldCompetitionID, v))
}

// CompetitionIDHasPrefix applies the HasPrefix predicate on the "competition_id" field.
func CompetitionIDHasPrefix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasPrefix(FieldCompetitionID, v))
}

// CompetitionIDHasSuffix applies the HasSuffix predicate on the "competition_id" field.
func CompetitionIDHasSuffix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasSuffix(FieldCompetitionID, v))
}

// CompetitionIDEqualFold applies the EqualFold predicate on the "competition_id" field.
func CompetitionIDEqualFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEqualFold(FieldCompetitionID, v))
}

// CompetitionIDContainsFold applies the ContainsFold predicate on the "competition_id" field.
func CompetitionIDContainsFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContainsFold(FieldCompetitionID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContainsFold(FieldDescription, v))
}

// BuilderEQ applies the EQ predicate on the "builder" field.
func BuilderEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldBuilder, v))
}

// BuilderNEQ applies the NEQ predicate on the "builder" field.
func BuilderNEQ(v string) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldBuilder, v))
}

// BuilderIn applies the In predicate on the "builder" field.
func BuilderIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldBuilder, vs...))
}

// BuilderNotIn applies the NotIn predicate on the "builder" field.
func BuilderNotIn(vs ...string) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldBuilder, vs...))
}

// BuilderGT applies the GT predicate on the "builder" field.
func BuilderGT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldBuilder, v))
}

// BuilderGTE applies the GTE predicate on the "builder" field.
func BuilderGTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldBuilder, v))
}

// BuilderLT applies the LT predicate on the "builder" field.
func BuilderLT(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldBuilder, v))
}

// BuilderLTE applies the LTE predicate on the "builder" field.
func BuilderLTE(v string) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldBuilder, v))
}

// BuilderContains applies the Contains predicate on the "builder" field.
func BuilderContains(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContains(FieldBuilder, v))
}

// BuilderHasPrefix applies the HasPrefix predicate on the "builder" field.
func BuilderHasPrefix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasPrefix(FieldBuilder, v))
}

// BuilderHasSuffix applies the HasSuffix predicate on the "builder" field.
func BuilderHasSuffix(v string) predicate.Environment {
	return predicate.Environment(sql.FieldHasSuffix(FieldBuilder, v))
}

// BuilderEqualFold applies the EqualFold predicate on the "builder" field.
func BuilderEqualFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldEqualFold(FieldBuilder, v))
}

// BuilderContainsFold applies the ContainsFold predicate on the "builder" field.
func BuilderContainsFold(v string) predicate.Environment {
	return predicate.Environment(sql.FieldContainsFold(FieldBuilder, v))
}

// TeamCountEQ applies the EQ predicate on the "team_count" field.
func TeamCountEQ(v int) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldTeamCount, v))
}

// TeamCountNEQ applies the NEQ predicate on the "team_count" field.
func TeamCountNEQ(v int) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldTeamCount, v))
}

// TeamCountIn applies the In predicate on the "team_count" field.
func TeamCountIn(vs ...int) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldTeamCount, vs...))
}

// TeamCountNotIn applies the NotIn predicate on the "team_count" field.
func TeamCountNotIn(vs ...int) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldTeamCount, vs...))
}

// TeamCountGT applies the GT predicate on the "team_count" field.
func TeamCountGT(v int) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldTeamCount, v))
}

// TeamCountGTE applies the GTE predicate on the "team_count" field.
func TeamCountGTE(v int) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldTeamCount, v))
}

// TeamCountLT applies the LT predicate on the "team_count" field.
func TeamCountLT(v int) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldTeamCount, v))
}

// TeamCountLTE applies the LTE predicate on the "team_count" field.
func TeamCountLTE(v int) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldTeamCount, v))
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v int) predicate.Environment {
	return predicate.Environment(sql.FieldEQ(FieldRevision, v))
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v int) predicate.Environment {
	return predicate.Environment(sql.FieldNEQ(FieldRevision, v))
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...int) predicate.Environment {
	return predicate.Environment(sql.FieldIn(FieldRevision, vs...))
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...int) predicate.Environment {
	return predicate.Environment(sql.FieldNotIn(FieldRevision, vs...))
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v int) predicate.Environment {
	return predicate.Environment(sql.FieldGT(FieldRevision, v))
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v int) predicate.Environment {
	return predicate.Environment(sql.FieldGTE(FieldRevision, v))
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v int) predicate.Environment {
	return predicate.Environment(sql.FieldLT(FieldRevision, v))
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v int) predicate.Environment {
	return predicate.Environment(sql.FieldLTE(FieldRevision, v))
}

// HasEnvironmentToUser applies the HasEdge predicate on the "EnvironmentToUser" edge.
func HasEnvironmentToUser() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EnvironmentToUserTable, EnvironmentToUserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToUserWith applies the HasEdge predicate on the "EnvironmentToUser" edge with a given conditions (other predicates).
func HasEnvironmentToUserWith(preds ...predicate.User) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToHost applies the HasEdge predicate on the "EnvironmentToHost" edge.
func HasEnvironmentToHost() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToHostTable, EnvironmentToHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToHostWith applies the HasEdge predicate on the "EnvironmentToHost" edge with a given conditions (other predicates).
func HasEnvironmentToHostWith(preds ...predicate.Host) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToCompetition applies the HasEdge predicate on the "EnvironmentToCompetition" edge.
func HasEnvironmentToCompetition() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToCompetitionTable, EnvironmentToCompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToCompetitionWith applies the HasEdge predicate on the "EnvironmentToCompetition" edge with a given conditions (other predicates).
func HasEnvironmentToCompetitionWith(preds ...predicate.Competition) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToIdentity applies the HasEdge predicate on the "EnvironmentToIdentity" edge.
func HasEnvironmentToIdentity() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToIdentityTable, EnvironmentToIdentityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToIdentityWith applies the HasEdge predicate on the "EnvironmentToIdentity" edge with a given conditions (other predicates).
func HasEnvironmentToIdentityWith(preds ...predicate.Identity) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToIdentityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToCommand applies the HasEdge predicate on the "EnvironmentToCommand" edge.
func HasEnvironmentToCommand() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToCommandTable, EnvironmentToCommandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToCommandWith applies the HasEdge predicate on the "EnvironmentToCommand" edge with a given conditions (other predicates).
func HasEnvironmentToCommandWith(preds ...predicate.Command) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToCommandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToScript applies the HasEdge predicate on the "EnvironmentToScript" edge.
func HasEnvironmentToScript() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToScriptTable, EnvironmentToScriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToScriptWith applies the HasEdge predicate on the "EnvironmentToScript" edge with a given conditions (other predicates).
func HasEnvironmentToScriptWith(preds ...predicate.Script) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToScriptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToFileDownload applies the HasEdge predicate on the "EnvironmentToFileDownload" edge.
func HasEnvironmentToFileDownload() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToFileDownloadTable, EnvironmentToFileDownloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToFileDownloadWith applies the HasEdge predicate on the "EnvironmentToFileDownload" edge with a given conditions (other predicates).
func HasEnvironmentToFileDownloadWith(preds ...predicate.FileDownload) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToFileDownloadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToFileDelete applies the HasEdge predicate on the "EnvironmentToFileDelete" edge.
func HasEnvironmentToFileDelete() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToFileDeleteTable, EnvironmentToFileDeleteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToFileDeleteWith applies the HasEdge predicate on the "EnvironmentToFileDelete" edge with a given conditions (other predicates).
func HasEnvironmentToFileDeleteWith(preds ...predicate.FileDelete) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToFileDeleteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToFileExtract applies the HasEdge predicate on the "EnvironmentToFileExtract" edge.
func HasEnvironmentToFileExtract() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToFileExtractTable, EnvironmentToFileExtractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToFileExtractWith applies the HasEdge predicate on the "EnvironmentToFileExtract" edge with a given conditions (other predicates).
func HasEnvironmentToFileExtractWith(preds ...predicate.FileExtract) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToFileExtractStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToIncludedNetwork applies the HasEdge predicate on the "EnvironmentToIncludedNetwork" edge.
func HasEnvironmentToIncludedNetwork() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EnvironmentToIncludedNetworkTable, EnvironmentToIncludedNetworkPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToIncludedNetworkWith applies the HasEdge predicate on the "EnvironmentToIncludedNetwork" edge with a given conditions (other predicates).
func HasEnvironmentToIncludedNetworkWith(preds ...predicate.IncludedNetwork) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToIncludedNetworkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToFinding applies the HasEdge predicate on the "EnvironmentToFinding" edge.
func HasEnvironmentToFinding() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToFindingTable, EnvironmentToFindingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToFindingWith applies the HasEdge predicate on the "EnvironmentToFinding" edge with a given conditions (other predicates).
func HasEnvironmentToFindingWith(preds ...predicate.Finding) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToFindingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToDNSRecord applies the HasEdge predicate on the "EnvironmentToDNSRecord" edge.
func HasEnvironmentToDNSRecord() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToDNSRecordTable, EnvironmentToDNSRecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToDNSRecordWith applies the HasEdge predicate on the "EnvironmentToDNSRecord" edge with a given conditions (other predicates).
func HasEnvironmentToDNSRecordWith(preds ...predicate.DNSRecord) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToDNSRecordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToDNS applies the HasEdge predicate on the "EnvironmentToDNS" edge.
func HasEnvironmentToDNS() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EnvironmentToDNSTable, EnvironmentToDNSPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToDNSWith applies the HasEdge predicate on the "EnvironmentToDNS" edge with a given conditions (other predicates).
func HasEnvironmentToDNSWith(preds ...predicate.DNS) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToDNSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToNetwork applies the HasEdge predicate on the "EnvironmentToNetwork" edge.
func HasEnvironmentToNetwork() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToNetworkTable, EnvironmentToNetworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToNetworkWith applies the HasEdge predicate on the "EnvironmentToNetwork" edge with a given conditions (other predicates).
func HasEnvironmentToNetworkWith(preds ...predicate.Network) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToNetworkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToHostDependency applies the HasEdge predicate on the "EnvironmentToHostDependency" edge.
func HasEnvironmentToHostDependency() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToHostDependencyTable, EnvironmentToHostDependencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToHostDependencyWith applies the HasEdge predicate on the "EnvironmentToHostDependency" edge with a given conditions (other predicates).
func HasEnvironmentToHostDependencyWith(preds ...predicate.HostDependency) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToHostDependencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToAnsible applies the HasEdge predicate on the "EnvironmentToAnsible" edge.
func HasEnvironmentToAnsible() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentToAnsibleTable, EnvironmentToAnsibleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToAnsibleWith applies the HasEdge predicate on the "EnvironmentToAnsible" edge with a given conditions (other predicates).
func HasEnvironmentToAnsibleWith(preds ...predicate.Ansible) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToAnsibleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToBuild applies the HasEdge predicate on the "EnvironmentToBuild" edge.
func HasEnvironmentToBuild() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EnvironmentToBuildTable, EnvironmentToBuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToBuildWith applies the HasEdge predicate on the "EnvironmentToBuild" edge with a given conditions (other predicates).
func HasEnvironmentToBuildWith(preds ...predicate.Build) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToBuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToRepository applies the HasEdge predicate on the "EnvironmentToRepository" edge.
func HasEnvironmentToRepository() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EnvironmentToRepositoryTable, EnvironmentToRepositoryPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToRepositoryWith applies the HasEdge predicate on the "EnvironmentToRepository" edge with a given conditions (other predicates).
func HasEnvironmentToRepositoryWith(preds ...predicate.Repository) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironmentToServerTask applies the HasEdge predicate on the "EnvironmentToServerTask" edge.
func HasEnvironmentToServerTask() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EnvironmentToServerTaskTable, EnvironmentToServerTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentToServerTaskWith applies the HasEdge predicate on the "EnvironmentToServerTask" edge with a given conditions (other predicates).
func HasEnvironmentToServerTaskWith(preds ...predicate.ServerTask) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := newEnvironmentToServerTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Environment) predicate.Environment {
	return predicate.Environment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Environment) predicate.Environment {
	return predicate.Environment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Environment) predicate.Environment {
	return predicate.Environment(sql.NotPredicates(p))
}
