// Code generated by ent, DO NOT EDIT.

package environment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the environment type in the database.
	Label = "environment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldCompetitionID holds the string denoting the competition_id field in the database.
	FieldCompetitionID = "competition_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBuilder holds the string denoting the builder field in the database.
	FieldBuilder = "builder"
	// FieldTeamCount holds the string denoting the team_count field in the database.
	FieldTeamCount = "team_count"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldAdminCidrs holds the string denoting the admin_cidrs field in the database.
	FieldAdminCidrs = "admin_cidrs"
	// FieldExposedVdiPorts holds the string denoting the exposed_vdi_ports field in the database.
	FieldExposedVdiPorts = "exposed_vdi_ports"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "Users"
	// EdgeHosts holds the string denoting the hosts edge name in mutations.
	EdgeHosts = "Hosts"
	// EdgeCompetitions holds the string denoting the competitions edge name in mutations.
	EdgeCompetitions = "Competitions"
	// EdgeIdentities holds the string denoting the identities edge name in mutations.
	EdgeIdentities = "Identities"
	// EdgeCommands holds the string denoting the commands edge name in mutations.
	EdgeCommands = "Commands"
	// EdgeScripts holds the string denoting the scripts edge name in mutations.
	EdgeScripts = "Scripts"
	// EdgeFileDownloads holds the string denoting the filedownloads edge name in mutations.
	EdgeFileDownloads = "FileDownloads"
	// EdgeFileDeletes holds the string denoting the filedeletes edge name in mutations.
	EdgeFileDeletes = "FileDeletes"
	// EdgeFileExtracts holds the string denoting the fileextracts edge name in mutations.
	EdgeFileExtracts = "FileExtracts"
	// EdgeIncludedNetworks holds the string denoting the includednetworks edge name in mutations.
	EdgeIncludedNetworks = "IncludedNetworks"
	// EdgeFindings holds the string denoting the findings edge name in mutations.
	EdgeFindings = "Findings"
	// EdgeDNSRecords holds the string denoting the dnsrecords edge name in mutations.
	EdgeDNSRecords = "DNSRecords"
	// EdgeDNS holds the string denoting the dns edge name in mutations.
	EdgeDNS = "DNS"
	// EdgeNetworks holds the string denoting the networks edge name in mutations.
	EdgeNetworks = "Networks"
	// EdgeHostDependencies holds the string denoting the hostdependencies edge name in mutations.
	EdgeHostDependencies = "HostDependencies"
	// EdgeAnsibles holds the string denoting the ansibles edge name in mutations.
	EdgeAnsibles = "Ansibles"
	// EdgeScheduledSteps holds the string denoting the scheduledsteps edge name in mutations.
	EdgeScheduledSteps = "ScheduledSteps"
	// EdgeBuilds holds the string denoting the builds edge name in mutations.
	EdgeBuilds = "Builds"
	// EdgeRepositories holds the string denoting the repositories edge name in mutations.
	EdgeRepositories = "Repositories"
	// EdgeServerTasks holds the string denoting the servertasks edge name in mutations.
	EdgeServerTasks = "ServerTasks"
	// Table holds the table name of the environment in the database.
	Table = "environments"
	// UsersTable is the table that holds the Users relation/edge. The primary key declared below.
	UsersTable = "environment_Users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// HostsTable is the table that holds the Hosts relation/edge.
	HostsTable = "hosts"
	// HostsInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostsInverseTable = "hosts"
	// HostsColumn is the table column denoting the Hosts relation/edge.
	HostsColumn = "environment_hosts"
	// CompetitionsTable is the table that holds the Competitions relation/edge.
	CompetitionsTable = "competitions"
	// CompetitionsInverseTable is the table name for the Competition entity.
	// It exists in this package in order to avoid circular dependency with the "competition" package.
	CompetitionsInverseTable = "competitions"
	// CompetitionsColumn is the table column denoting the Competitions relation/edge.
	CompetitionsColumn = "environment_competitions"
	// IdentitiesTable is the table that holds the Identities relation/edge.
	IdentitiesTable = "identities"
	// IdentitiesInverseTable is the table name for the Identity entity.
	// It exists in this package in order to avoid circular dependency with the "identity" package.
	IdentitiesInverseTable = "identities"
	// IdentitiesColumn is the table column denoting the Identities relation/edge.
	IdentitiesColumn = "environment_identities"
	// CommandsTable is the table that holds the Commands relation/edge.
	CommandsTable = "commands"
	// CommandsInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	CommandsInverseTable = "commands"
	// CommandsColumn is the table column denoting the Commands relation/edge.
	CommandsColumn = "environment_commands"
	// ScriptsTable is the table that holds the Scripts relation/edge.
	ScriptsTable = "scripts"
	// ScriptsInverseTable is the table name for the Script entity.
	// It exists in this package in order to avoid circular dependency with the "script" package.
	ScriptsInverseTable = "scripts"
	// ScriptsColumn is the table column denoting the Scripts relation/edge.
	ScriptsColumn = "environment_scripts"
	// FileDownloadsTable is the table that holds the FileDownloads relation/edge.
	FileDownloadsTable = "file_downloads"
	// FileDownloadsInverseTable is the table name for the FileDownload entity.
	// It exists in this package in order to avoid circular dependency with the "filedownload" package.
	FileDownloadsInverseTable = "file_downloads"
	// FileDownloadsColumn is the table column denoting the FileDownloads relation/edge.
	FileDownloadsColumn = "environment_file_downloads"
	// FileDeletesTable is the table that holds the FileDeletes relation/edge.
	FileDeletesTable = "file_deletes"
	// FileDeletesInverseTable is the table name for the FileDelete entity.
	// It exists in this package in order to avoid circular dependency with the "filedelete" package.
	FileDeletesInverseTable = "file_deletes"
	// FileDeletesColumn is the table column denoting the FileDeletes relation/edge.
	FileDeletesColumn = "environment_file_deletes"
	// FileExtractsTable is the table that holds the FileExtracts relation/edge.
	FileExtractsTable = "file_extracts"
	// FileExtractsInverseTable is the table name for the FileExtract entity.
	// It exists in this package in order to avoid circular dependency with the "fileextract" package.
	FileExtractsInverseTable = "file_extracts"
	// FileExtractsColumn is the table column denoting the FileExtracts relation/edge.
	FileExtractsColumn = "environment_file_extracts"
	// IncludedNetworksTable is the table that holds the IncludedNetworks relation/edge. The primary key declared below.
	IncludedNetworksTable = "environment_IncludedNetworks"
	// IncludedNetworksInverseTable is the table name for the IncludedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "includednetwork" package.
	IncludedNetworksInverseTable = "included_networks"
	// FindingsTable is the table that holds the Findings relation/edge.
	FindingsTable = "findings"
	// FindingsInverseTable is the table name for the Finding entity.
	// It exists in this package in order to avoid circular dependency with the "finding" package.
	FindingsInverseTable = "findings"
	// FindingsColumn is the table column denoting the Findings relation/edge.
	FindingsColumn = "environment_findings"
	// DNSRecordsTable is the table that holds the DNSRecords relation/edge.
	DNSRecordsTable = "dns_records"
	// DNSRecordsInverseTable is the table name for the DNSRecord entity.
	// It exists in this package in order to avoid circular dependency with the "dnsrecord" package.
	DNSRecordsInverseTable = "dns_records"
	// DNSRecordsColumn is the table column denoting the DNSRecords relation/edge.
	DNSRecordsColumn = "environment_dns_records"
	// DNSTable is the table that holds the DNS relation/edge. The primary key declared below.
	DNSTable = "environment_DNS"
	// DNSInverseTable is the table name for the DNS entity.
	// It exists in this package in order to avoid circular dependency with the "dns" package.
	DNSInverseTable = "dn_ss"
	// NetworksTable is the table that holds the Networks relation/edge.
	NetworksTable = "networks"
	// NetworksInverseTable is the table name for the Network entity.
	// It exists in this package in order to avoid circular dependency with the "network" package.
	NetworksInverseTable = "networks"
	// NetworksColumn is the table column denoting the Networks relation/edge.
	NetworksColumn = "environment_networks"
	// HostDependenciesTable is the table that holds the HostDependencies relation/edge.
	HostDependenciesTable = "host_dependencies"
	// HostDependenciesInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	HostDependenciesInverseTable = "host_dependencies"
	// HostDependenciesColumn is the table column denoting the HostDependencies relation/edge.
	HostDependenciesColumn = "environment_host_dependencies"
	// AnsiblesTable is the table that holds the Ansibles relation/edge.
	AnsiblesTable = "ansibles"
	// AnsiblesInverseTable is the table name for the Ansible entity.
	// It exists in this package in order to avoid circular dependency with the "ansible" package.
	AnsiblesInverseTable = "ansibles"
	// AnsiblesColumn is the table column denoting the Ansibles relation/edge.
	AnsiblesColumn = "environment_ansibles"
	// ScheduledStepsTable is the table that holds the ScheduledSteps relation/edge.
	ScheduledStepsTable = "scheduled_steps"
	// ScheduledStepsInverseTable is the table name for the ScheduledStep entity.
	// It exists in this package in order to avoid circular dependency with the "scheduledstep" package.
	ScheduledStepsInverseTable = "scheduled_steps"
	// ScheduledStepsColumn is the table column denoting the ScheduledSteps relation/edge.
	ScheduledStepsColumn = "environment_scheduled_steps"
	// BuildsTable is the table that holds the Builds relation/edge.
	BuildsTable = "builds"
	// BuildsInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	BuildsInverseTable = "builds"
	// BuildsColumn is the table column denoting the Builds relation/edge.
	BuildsColumn = "build_environment"
	// RepositoriesTable is the table that holds the Repositories relation/edge. The primary key declared below.
	RepositoriesTable = "repository_Environments"
	// RepositoriesInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoriesInverseTable = "repositories"
	// ServerTasksTable is the table that holds the ServerTasks relation/edge.
	ServerTasksTable = "server_tasks"
	// ServerTasksInverseTable is the table name for the ServerTask entity.
	// It exists in this package in order to avoid circular dependency with the "servertask" package.
	ServerTasksInverseTable = "server_tasks"
	// ServerTasksColumn is the table column denoting the ServerTasks relation/edge.
	ServerTasksColumn = "server_task_environment"
)

// Columns holds all SQL columns for environment fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldCompetitionID,
	FieldName,
	FieldDescription,
	FieldBuilder,
	FieldTeamCount,
	FieldRevision,
	FieldAdminCidrs,
	FieldExposedVdiPorts,
	FieldConfig,
	FieldTags,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the Users relation (M2M).
	UsersPrimaryKey = []string{"environment_id", "user_id"}
	// IncludedNetworksPrimaryKey and IncludedNetworksColumn2 are the table columns denoting the
	// primary key for the IncludedNetworks relation (M2M).
	IncludedNetworksPrimaryKey = []string{"environment_id", "included_network_id"}
	// DNSPrimaryKey and DNSColumn2 are the table columns denoting the
	// primary key for the DNS relation (M2M).
	DNSPrimaryKey = []string{"environment_id", "dns_id"}
	// RepositoriesPrimaryKey and RepositoriesColumn2 are the table columns denoting the
	// primary key for the Repositories relation (M2M).
	RepositoriesPrimaryKey = []string{"repository_id", "environment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Environment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByCompetitionID orders the results by the competition_id field.
func ByCompetitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitionID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBuilder orders the results by the builder field.
func ByBuilder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuilder, opts...).ToFunc()
}

// ByTeamCount orders the results by the team_count field.
func ByTeamCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeamCount, opts...).ToFunc()
}

// ByRevision orders the results by the revision field.
func ByRevision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevision, opts...).ToFunc()
}

// ByUsersCount orders the results by Users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by Users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHostsCount orders the results by Hosts count.
func ByHostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostsStep(), opts...)
	}
}

// ByHosts orders the results by Hosts terms.
func ByHosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompetitionsCount orders the results by Competitions count.
func ByCompetitionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompetitionsStep(), opts...)
	}
}

// ByCompetitions orders the results by Competitions terms.
func ByCompetitions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompetitionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIdentitiesCount orders the results by Identities count.
func ByIdentitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdentitiesStep(), opts...)
	}
}

// ByIdentities orders the results by Identities terms.
func ByIdentities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommandsCount orders the results by Commands count.
func ByCommandsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommandsStep(), opts...)
	}
}

// ByCommands orders the results by Commands terms.
func ByCommands(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommandsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScriptsCount orders the results by Scripts count.
func ByScriptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScriptsStep(), opts...)
	}
}

// ByScripts orders the results by Scripts terms.
func ByScripts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScriptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFileDownloadsCount orders the results by FileDownloads count.
func ByFileDownloadsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFileDownloadsStep(), opts...)
	}
}

// ByFileDownloads orders the results by FileDownloads terms.
func ByFileDownloads(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileDownloadsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFileDeletesCount orders the results by FileDeletes count.
func ByFileDeletesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFileDeletesStep(), opts...)
	}
}

// ByFileDeletes orders the results by FileDeletes terms.
func ByFileDeletes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileDeletesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFileExtractsCount orders the results by FileExtracts count.
func ByFileExtractsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFileExtractsStep(), opts...)
	}
}

// ByFileExtracts orders the results by FileExtracts terms.
func ByFileExtracts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileExtractsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedNetworksCount orders the results by IncludedNetworks count.
func ByIncludedNetworksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedNetworksStep(), opts...)
	}
}

// ByIncludedNetworks orders the results by IncludedNetworks terms.
func ByIncludedNetworks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedNetworksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFindingsCount orders the results by Findings count.
func ByFindingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFindingsStep(), opts...)
	}
}

// ByFindings orders the results by Findings terms.
func ByFindings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFindingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDNSRecordsCount orders the results by DNSRecords count.
func ByDNSRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDNSRecordsStep(), opts...)
	}
}

// ByDNSRecords orders the results by DNSRecords terms.
func ByDNSRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDNSRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDNSCount orders the results by DNS count.
func ByDNSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDNSStep(), opts...)
	}
}

// ByDNS orders the results by DNS terms.
func ByDNS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDNSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNetworksCount orders the results by Networks count.
func ByNetworksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNetworksStep(), opts...)
	}
}

// ByNetworks orders the results by Networks terms.
func ByNetworks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNetworksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHostDependenciesCount orders the results by HostDependencies count.
func ByHostDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostDependenciesStep(), opts...)
	}
}

// ByHostDependencies orders the results by HostDependencies terms.
func ByHostDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnsiblesCount orders the results by Ansibles count.
func ByAnsiblesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnsiblesStep(), opts...)
	}
}

// ByAnsibles orders the results by Ansibles terms.
func ByAnsibles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnsiblesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheduledStepsCount orders the results by ScheduledSteps count.
func ByScheduledStepsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScheduledStepsStep(), opts...)
	}
}

// ByScheduledSteps orders the results by ScheduledSteps terms.
func ByScheduledSteps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduledStepsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBuildsCount orders the results by Builds count.
func ByBuildsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBuildsStep(), opts...)
	}
}

// ByBuilds orders the results by Builds terms.
func ByBuilds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuildsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepositoriesCount orders the results by Repositories count.
func ByRepositoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepositoriesStep(), opts...)
	}
}

// ByRepositories orders the results by Repositories terms.
func ByRepositories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServerTasksCount orders the results by ServerTasks count.
func ByServerTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServerTasksStep(), opts...)
	}
}

// ByServerTasks orders the results by ServerTasks terms.
func ByServerTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
	)
}
func newHostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HostsTable, HostsColumn),
	)
}
func newCompetitionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompetitionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompetitionsTable, CompetitionsColumn),
	)
}
func newIdentitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdentitiesTable, IdentitiesColumn),
	)
}
func newCommandsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommandsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommandsTable, CommandsColumn),
	)
}
func newScriptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScriptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScriptsTable, ScriptsColumn),
	)
}
func newFileDownloadsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileDownloadsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FileDownloadsTable, FileDownloadsColumn),
	)
}
func newFileDeletesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileDeletesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FileDeletesTable, FileDeletesColumn),
	)
}
func newFileExtractsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileExtractsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FileExtractsTable, FileExtractsColumn),
	)
}
func newIncludedNetworksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedNetworksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncludedNetworksTable, IncludedNetworksPrimaryKey...),
	)
}
func newFindingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FindingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FindingsTable, FindingsColumn),
	)
}
func newDNSRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DNSRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DNSRecordsTable, DNSRecordsColumn),
	)
}
func newDNSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DNSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DNSTable, DNSPrimaryKey...),
	)
}
func newNetworksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NetworksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NetworksTable, NetworksColumn),
	)
}
func newHostDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostDependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HostDependenciesTable, HostDependenciesColumn),
	)
}
func newAnsiblesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnsiblesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnsiblesTable, AnsiblesColumn),
	)
}
func newScheduledStepsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduledStepsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScheduledStepsTable, ScheduledStepsColumn),
	)
}
func newBuildsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuildsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BuildsTable, BuildsColumn),
	)
}
func newRepositoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RepositoriesTable, RepositoriesPrimaryKey...),
	)
}
func newServerTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ServerTasksTable, ServerTasksColumn),
	)
}
