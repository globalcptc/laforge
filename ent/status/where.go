// Code generated by ent, DO NOT EDIT.

package status

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Status {
	return predicate.Status(sql.FieldLTE(FieldID, id))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldStartedAt, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldEndedAt, v))
}

// Failed applies equality check predicate on the "failed" field. It's identical to FailedEQ.
func Failed(v bool) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldFailed, v))
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v bool) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldCompleted, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldError, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Status {
	return predicate.Status(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Status {
	return predicate.Status(sql.FieldNotIn(FieldState, vs...))
}

// StatusForEQ applies the EQ predicate on the "status_for" field.
func StatusForEQ(v StatusFor) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldStatusFor, v))
}

// StatusForNEQ applies the NEQ predicate on the "status_for" field.
func StatusForNEQ(v StatusFor) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldStatusFor, v))
}

// StatusForIn applies the In predicate on the "status_for" field.
func StatusForIn(vs ...StatusFor) predicate.Status {
	return predicate.Status(sql.FieldIn(FieldStatusFor, vs...))
}

// StatusForNotIn applies the NotIn predicate on the "status_for" field.
func StatusForNotIn(vs ...StatusFor) predicate.Status {
	return predicate.Status(sql.FieldNotIn(FieldStatusFor, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Status {
	return predicate.Status(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Status {
	return predicate.Status(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Status {
	return predicate.Status(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Status {
	return predicate.Status(sql.FieldNotNull(FieldStartedAt))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...time.Time) predicate.Status {
	return predicate.Status(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...time.Time) predicate.Status {
	return predicate.Status(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v time.Time) predicate.Status {
	return predicate.Status(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.Status {
	return predicate.Status(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.Status {
	return predicate.Status(sql.FieldNotNull(FieldEndedAt))
}

// FailedEQ applies the EQ predicate on the "failed" field.
func FailedEQ(v bool) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldFailed, v))
}

// FailedNEQ applies the NEQ predicate on the "failed" field.
func FailedNEQ(v bool) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldFailed, v))
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v bool) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldCompleted, v))
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v bool) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldCompleted, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Status {
	return predicate.Status(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Status {
	return predicate.Status(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Status {
	return predicate.Status(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Status {
	return predicate.Status(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Status {
	return predicate.Status(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Status {
	return predicate.Status(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Status {
	return predicate.Status(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Status {
	return predicate.Status(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Status {
	return predicate.Status(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Status {
	return predicate.Status(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Status {
	return predicate.Status(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.Status {
	return predicate.Status(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.Status {
	return predicate.Status(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Status {
	return predicate.Status(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Status {
	return predicate.Status(sql.FieldContainsFold(FieldError, v))
}

// HasStatusToBuild applies the HasEdge predicate on the "StatusToBuild" edge.
func HasStatusToBuild() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToBuildTable, StatusToBuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToBuildWith applies the HasEdge predicate on the "StatusToBuild" edge with a given conditions (other predicates).
func HasStatusToBuildWith(preds ...predicate.Build) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToBuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusToProvisionedNetwork applies the HasEdge predicate on the "StatusToProvisionedNetwork" edge.
func HasStatusToProvisionedNetwork() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToProvisionedNetworkTable, StatusToProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToProvisionedNetworkWith applies the HasEdge predicate on the "StatusToProvisionedNetwork" edge with a given conditions (other predicates).
func HasStatusToProvisionedNetworkWith(preds ...predicate.ProvisionedNetwork) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToProvisionedNetworkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusToProvisionedHost applies the HasEdge predicate on the "StatusToProvisionedHost" edge.
func HasStatusToProvisionedHost() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToProvisionedHostTable, StatusToProvisionedHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToProvisionedHostWith applies the HasEdge predicate on the "StatusToProvisionedHost" edge with a given conditions (other predicates).
func HasStatusToProvisionedHostWith(preds ...predicate.ProvisionedHost) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToProvisionedHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusToProvisioningStep applies the HasEdge predicate on the "StatusToProvisioningStep" edge.
func HasStatusToProvisioningStep() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToProvisioningStepTable, StatusToProvisioningStepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToProvisioningStepWith applies the HasEdge predicate on the "StatusToProvisioningStep" edge with a given conditions (other predicates).
func HasStatusToProvisioningStepWith(preds ...predicate.ProvisioningStep) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToProvisioningStepStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusToTeam applies the HasEdge predicate on the "StatusToTeam" edge.
func HasStatusToTeam() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToTeamTable, StatusToTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToTeamWith applies the HasEdge predicate on the "StatusToTeam" edge with a given conditions (other predicates).
func HasStatusToTeamWith(preds ...predicate.Team) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusToPlan applies the HasEdge predicate on the "StatusToPlan" edge.
func HasStatusToPlan() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToPlanTable, StatusToPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToPlanWith applies the HasEdge predicate on the "StatusToPlan" edge with a given conditions (other predicates).
func HasStatusToPlanWith(preds ...predicate.Plan) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusToServerTask applies the HasEdge predicate on the "StatusToServerTask" edge.
func HasStatusToServerTask() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToServerTaskTable, StatusToServerTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToServerTaskWith applies the HasEdge predicate on the "StatusToServerTask" edge with a given conditions (other predicates).
func HasStatusToServerTaskWith(preds ...predicate.ServerTask) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToServerTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusToAdhocPlan applies the HasEdge predicate on the "StatusToAdhocPlan" edge.
func HasStatusToAdhocPlan() predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatusToAdhocPlanTable, StatusToAdhocPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusToAdhocPlanWith applies the HasEdge predicate on the "StatusToAdhocPlan" edge with a given conditions (other predicates).
func HasStatusToAdhocPlanWith(preds ...predicate.AdhocPlan) predicate.Status {
	return predicate.Status(func(s *sql.Selector) {
		step := newStatusToAdhocPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Status) predicate.Status {
	return predicate.Status(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Status) predicate.Status {
	return predicate.Status(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Status) predicate.Status {
	return predicate.Status(sql.NotPredicates(p))
}
