// Code generated by ent, DO NOT EDIT.

package status

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the status type in the database.
	Label = "status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldStatusFor holds the string denoting the status_for field in the database.
	FieldStatusFor = "status_for"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldEndedAt holds the string denoting the ended_at field in the database.
	FieldEndedAt = "ended_at"
	// FieldFailed holds the string denoting the failed field in the database.
	FieldFailed = "failed"
	// FieldCompleted holds the string denoting the completed field in the database.
	FieldCompleted = "completed"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// EdgeBuild holds the string denoting the build edge name in mutations.
	EdgeBuild = "Build"
	// EdgeProvisionedNetwork holds the string denoting the provisionednetwork edge name in mutations.
	EdgeProvisionedNetwork = "ProvisionedNetwork"
	// EdgeProvisionedHost holds the string denoting the provisionedhost edge name in mutations.
	EdgeProvisionedHost = "ProvisionedHost"
	// EdgeProvisioningStep holds the string denoting the provisioningstep edge name in mutations.
	EdgeProvisioningStep = "ProvisioningStep"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "Team"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "Plan"
	// EdgeServerTask holds the string denoting the servertask edge name in mutations.
	EdgeServerTask = "ServerTask"
	// EdgeAdhocPlan holds the string denoting the adhocplan edge name in mutations.
	EdgeAdhocPlan = "AdhocPlan"
	// EdgeProvisioningScheduledStep holds the string denoting the provisioningscheduledstep edge name in mutations.
	EdgeProvisioningScheduledStep = "ProvisioningScheduledStep"
	// Table holds the table name of the status in the database.
	Table = "status"
	// BuildTable is the table that holds the Build relation/edge.
	BuildTable = "status"
	// BuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	BuildInverseTable = "builds"
	// BuildColumn is the table column denoting the Build relation/edge.
	BuildColumn = "build_status"
	// ProvisionedNetworkTable is the table that holds the ProvisionedNetwork relation/edge.
	ProvisionedNetworkTable = "status"
	// ProvisionedNetworkInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	ProvisionedNetworkInverseTable = "provisioned_networks"
	// ProvisionedNetworkColumn is the table column denoting the ProvisionedNetwork relation/edge.
	ProvisionedNetworkColumn = "provisioned_network_status"
	// ProvisionedHostTable is the table that holds the ProvisionedHost relation/edge.
	ProvisionedHostTable = "status"
	// ProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisionedHostInverseTable = "provisioned_hosts"
	// ProvisionedHostColumn is the table column denoting the ProvisionedHost relation/edge.
	ProvisionedHostColumn = "provisioned_host_status"
	// ProvisioningStepTable is the table that holds the ProvisioningStep relation/edge.
	ProvisioningStepTable = "status"
	// ProvisioningStepInverseTable is the table name for the ProvisioningStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisioningstep" package.
	ProvisioningStepInverseTable = "provisioning_steps"
	// ProvisioningStepColumn is the table column denoting the ProvisioningStep relation/edge.
	ProvisioningStepColumn = "provisioning_step_status"
	// TeamTable is the table that holds the Team relation/edge.
	TeamTable = "status"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the Team relation/edge.
	TeamColumn = "team_status"
	// PlanTable is the table that holds the Plan relation/edge.
	PlanTable = "status"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plans"
	// PlanColumn is the table column denoting the Plan relation/edge.
	PlanColumn = "plan_status"
	// ServerTaskTable is the table that holds the ServerTask relation/edge.
	ServerTaskTable = "status"
	// ServerTaskInverseTable is the table name for the ServerTask entity.
	// It exists in this package in order to avoid circular dependency with the "servertask" package.
	ServerTaskInverseTable = "server_tasks"
	// ServerTaskColumn is the table column denoting the ServerTask relation/edge.
	ServerTaskColumn = "server_task_status"
	// AdhocPlanTable is the table that holds the AdhocPlan relation/edge.
	AdhocPlanTable = "status"
	// AdhocPlanInverseTable is the table name for the AdhocPlan entity.
	// It exists in this package in order to avoid circular dependency with the "adhocplan" package.
	AdhocPlanInverseTable = "adhoc_plans"
	// AdhocPlanColumn is the table column denoting the AdhocPlan relation/edge.
	AdhocPlanColumn = "adhoc_plan_status"
	// ProvisioningScheduledStepTable is the table that holds the ProvisioningScheduledStep relation/edge.
	ProvisioningScheduledStepTable = "status"
	// ProvisioningScheduledStepInverseTable is the table name for the ProvisioningScheduledStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisioningscheduledstep" package.
	ProvisioningScheduledStepInverseTable = "provisioning_scheduled_steps"
	// ProvisioningScheduledStepColumn is the table column denoting the ProvisioningScheduledStep relation/edge.
	ProvisioningScheduledStepColumn = "provisioning_scheduled_step_status"
)

// Columns holds all SQL columns for status fields.
var Columns = []string{
	FieldID,
	FieldState,
	FieldStatusFor,
	FieldStartedAt,
	FieldEndedAt,
	FieldFailed,
	FieldCompleted,
	FieldError,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "status"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"adhoc_plan_status",
	"build_status",
	"plan_status",
	"provisioned_host_status",
	"provisioned_network_status",
	"provisioning_scheduled_step_status",
	"provisioning_step_status",
	"server_task_status",
	"team_status",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFailed holds the default value on creation for the "failed" field.
	DefaultFailed bool
	// DefaultCompleted holds the default value on creation for the "completed" field.
	DefaultCompleted bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StatePLANNING         State = "PLANNING"
	StateAWAITING         State = "AWAITING"
	StatePARENTAWAITING   State = "PARENTAWAITING"
	StateINPROGRESS       State = "INPROGRESS"
	StateFAILED           State = "FAILED"
	StateCOMPLETE         State = "COMPLETE"
	StateTAINTED          State = "TAINTED"
	StateTODELETE         State = "TODELETE"
	StateDELETEINPROGRESS State = "DELETEINPROGRESS"
	StateDELETED          State = "DELETED"
	StateTOREBUILD        State = "TOREBUILD"
	StateCANCELLED        State = "CANCELLED"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StatePLANNING, StateAWAITING, StatePARENTAWAITING, StateINPROGRESS, StateFAILED, StateCOMPLETE, StateTAINTED, StateTODELETE, StateDELETEINPROGRESS, StateDELETED, StateTOREBUILD, StateCANCELLED:
		return nil
	default:
		return fmt.Errorf("status: invalid enum value for state field: %q", s)
	}
}

// StatusFor defines the type for the "status_for" enum field.
type StatusFor string

// StatusFor values.
const (
	StatusForBuild                     StatusFor = "Build"
	StatusForTeam                      StatusFor = "Team"
	StatusForPlan                      StatusFor = "Plan"
	StatusForProvisionedNetwork        StatusFor = "ProvisionedNetwork"
	StatusForProvisionedHost           StatusFor = "ProvisionedHost"
	StatusForProvisioningStep          StatusFor = "ProvisioningStep"
	StatusForProvisioningScheduledStep StatusFor = "ProvisioningScheduledStep"
	StatusForServerTask                StatusFor = "ServerTask"
)

func (sf StatusFor) String() string {
	return string(sf)
}

// StatusForValidator is a validator for the "status_for" field enum values. It is called by the builders before save.
func StatusForValidator(sf StatusFor) error {
	switch sf {
	case StatusForBuild, StatusForTeam, StatusForPlan, StatusForProvisionedNetwork, StatusForProvisionedHost, StatusForProvisioningStep, StatusForProvisioningScheduledStep, StatusForServerTask:
		return nil
	default:
		return fmt.Errorf("status: invalid enum value for status_for field: %q", sf)
	}
}

// OrderOption defines the ordering options for the Status queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByStatusFor orders the results by the status_for field.
func ByStatusFor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusFor, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByEndedAt orders the results by the ended_at field.
func ByEndedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndedAt, opts...).ToFunc()
}

// ByFailed orders the results by the failed field.
func ByFailed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailed, opts...).ToFunc()
}

// ByCompleted orders the results by the completed field.
func ByCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompleted, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByBuildField orders the results by Build field.
func ByBuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisionedNetworkField orders the results by ProvisionedNetwork field.
func ByProvisionedNetworkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionedNetworkStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisionedHostField orders the results by ProvisionedHost field.
func ByProvisionedHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionedHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepField orders the results by ProvisioningStep field.
func ByProvisioningStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by Team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanField orders the results by Plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTaskField orders the results by ServerTask field.
func ByServerTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByAdhocPlanField orders the results by AdhocPlan field.
func ByAdhocPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdhocPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningScheduledStepField orders the results by ProvisioningScheduledStep field.
func ByProvisioningScheduledStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningScheduledStepStep(), sql.OrderByField(field, opts...))
	}
}
func newBuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BuildTable, BuildColumn),
	)
}
func newProvisionedNetworkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionedNetworkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedNetworkTable, ProvisionedNetworkColumn),
	)
}
func newProvisionedHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionedHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedHostTable, ProvisionedHostColumn),
	)
}
func newProvisioningStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProvisioningStepTable, ProvisioningStepColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TeamTable, TeamColumn),
	)
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PlanTable, PlanColumn),
	)
}
func newServerTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ServerTaskTable, ServerTaskColumn),
	)
}
func newAdhocPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdhocPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AdhocPlanTable, AdhocPlanColumn),
	)
}
func newProvisioningScheduledStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningScheduledStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProvisioningScheduledStepTable, ProvisioningScheduledStepColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e State) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *State) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = State(str)
	if err := StateValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e StatusFor) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *StatusFor) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = StatusFor(str)
	if err := StatusForValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid StatusFor", str)
	}
	return nil
}
