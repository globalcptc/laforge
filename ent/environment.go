// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/google/uuid"
)

// Environment is the model entity for the Environment schema.
type Environment struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HclID holds the value of the "hcl_id" field.
	HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
	// CompetitionID holds the value of the "competition_id" field.
	CompetitionID string `json:"competition_id,omitempty" hcl:"competition_id,attr"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,attr"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty" hcl:"description,attr"`
	// Builder holds the value of the "builder" field.
	Builder string `json:"builder,omitempty" hcl:"builder,attr"`
	// TeamCount holds the value of the "team_count" field.
	TeamCount int `json:"team_count,omitempty" hcl:"team_count,attr"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty" hcl:"revision,optional"`
	// AdminCidrs holds the value of the "admin_cidrs" field.
	AdminCidrs []string `json:"admin_cidrs,omitempty" hcl:"admin_ranges,attr"`
	// ExposedVdiPorts holds the value of the "exposed_vdi_ports" field.
	ExposedVdiPorts []string `json:"exposed_vdi_ports,omitempty" hcl:"vdi_allowed_tcp_ports"`
	// Config holds the value of the "config" field.
	Config map[string]string `json:"config,omitempty" hcl:"config,optional"`
	// Tags holds the value of the "tags" field.
	Tags map[string]string `json:"tags,omitempty" hcl:"tags,optional"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnvironmentQuery when eager-loading is set.
	Edges EnvironmentEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Users holds the value of the Users edge.
	HCLUsers []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Hosts holds the value of the Hosts edge.
	HCLHosts []*Host `json:"Hosts,omitempty"`
	// Competitions holds the value of the Competitions edge.
	HCLCompetitions []*Competition `json:"Competitions,omitempty"`
	// Identities holds the value of the Identities edge.
	HCLIdentities []*Identity `json:"Identities,omitempty"`
	// Commands holds the value of the Commands edge.
	HCLCommands []*Command `json:"Commands,omitempty"`
	// Scripts holds the value of the Scripts edge.
	HCLScripts []*Script `json:"Scripts,omitempty"`
	// FileDownloads holds the value of the FileDownloads edge.
	HCLFileDownloads []*FileDownload `json:"FileDownloads,omitempty"`
	// FileDeletes holds the value of the FileDeletes edge.
	HCLFileDeletes []*FileDelete `json:"FileDeletes,omitempty"`
	// FileExtracts holds the value of the FileExtracts edge.
	HCLFileExtracts []*FileExtract `json:"FileExtracts,omitempty"`
	// IncludedNetworks holds the value of the IncludedNetworks edge.
	HCLIncludedNetworks []*IncludedNetwork `json:"IncludedNetworks,omitempty" hcl:"included_network,block"`
	// Findings holds the value of the Findings edge.
	HCLFindings []*Finding `json:"Findings,omitempty"`
	// DNSRecords holds the value of the DNSRecords edge.
	HCLDNSRecords []*DNSRecord `json:"DNSRecords,omitempty"`
	// DNS holds the value of the DNS edge.
	HCLDNS []*DNS `json:"DNS,omitempty"`
	// Networks holds the value of the Networks edge.
	HCLNetworks []*Network `json:"Networks,omitempty"`
	// HostDependencies holds the value of the HostDependencies edge.
	HCLHostDependencies []*HostDependency `json:"HostDependencies,omitempty"`
	// Ansibles holds the value of the Ansibles edge.
	HCLAnsibles []*Ansible `json:"Ansibles,omitempty"`
	// ScheduledSteps holds the value of the ScheduledSteps edge.
	HCLScheduledSteps []*ScheduledStep `json:"ScheduledSteps,omitempty"`
	// Builds holds the value of the Builds edge.
	HCLBuilds []*Build `json:"Builds,omitempty"`
	// Repositories holds the value of the Repositories edge.
	HCLRepositories []*Repository `json:"Repositories,omitempty"`
	// ServerTasks holds the value of the ServerTasks edge.
	HCLServerTasks []*ServerTask `json:"ServerTasks,omitempty"`
	//

}

// EnvironmentEdges holds the relations/edges for other nodes in the graph.
type EnvironmentEdges struct {
	// Users holds the value of the Users edge.
	Users []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Hosts holds the value of the Hosts edge.
	Hosts []*Host `json:"Hosts,omitempty"`
	// Competitions holds the value of the Competitions edge.
	Competitions []*Competition `json:"Competitions,omitempty"`
	// Identities holds the value of the Identities edge.
	Identities []*Identity `json:"Identities,omitempty"`
	// Commands holds the value of the Commands edge.
	Commands []*Command `json:"Commands,omitempty"`
	// Scripts holds the value of the Scripts edge.
	Scripts []*Script `json:"Scripts,omitempty"`
	// FileDownloads holds the value of the FileDownloads edge.
	FileDownloads []*FileDownload `json:"FileDownloads,omitempty"`
	// FileDeletes holds the value of the FileDeletes edge.
	FileDeletes []*FileDelete `json:"FileDeletes,omitempty"`
	// FileExtracts holds the value of the FileExtracts edge.
	FileExtracts []*FileExtract `json:"FileExtracts,omitempty"`
	// IncludedNetworks holds the value of the IncludedNetworks edge.
	IncludedNetworks []*IncludedNetwork `json:"IncludedNetworks,omitempty" hcl:"included_network,block"`
	// Findings holds the value of the Findings edge.
	Findings []*Finding `json:"Findings,omitempty"`
	// DNSRecords holds the value of the DNSRecords edge.
	DNSRecords []*DNSRecord `json:"DNSRecords,omitempty"`
	// DNS holds the value of the DNS edge.
	DNS []*DNS `json:"DNS,omitempty"`
	// Networks holds the value of the Networks edge.
	Networks []*Network `json:"Networks,omitempty"`
	// HostDependencies holds the value of the HostDependencies edge.
	HostDependencies []*HostDependency `json:"HostDependencies,omitempty"`
	// Ansibles holds the value of the Ansibles edge.
	Ansibles []*Ansible `json:"Ansibles,omitempty"`
	// ScheduledSteps holds the value of the ScheduledSteps edge.
	ScheduledSteps []*ScheduledStep `json:"ScheduledSteps,omitempty"`
	// Builds holds the value of the Builds edge.
	Builds []*Build `json:"Builds,omitempty"`
	// Repositories holds the value of the Repositories edge.
	Repositories []*Repository `json:"Repositories,omitempty"`
	// ServerTasks holds the value of the ServerTasks edge.
	ServerTasks []*ServerTask `json:"ServerTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [20]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "Users"}
}

// HostsOrErr returns the Hosts value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) HostsOrErr() ([]*Host, error) {
	if e.loadedTypes[1] {
		return e.Hosts, nil
	}
	return nil, &NotLoadedError{edge: "Hosts"}
}

// CompetitionsOrErr returns the Competitions value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) CompetitionsOrErr() ([]*Competition, error) {
	if e.loadedTypes[2] {
		return e.Competitions, nil
	}
	return nil, &NotLoadedError{edge: "Competitions"}
}

// IdentitiesOrErr returns the Identities value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) IdentitiesOrErr() ([]*Identity, error) {
	if e.loadedTypes[3] {
		return e.Identities, nil
	}
	return nil, &NotLoadedError{edge: "Identities"}
}

// CommandsOrErr returns the Commands value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) CommandsOrErr() ([]*Command, error) {
	if e.loadedTypes[4] {
		return e.Commands, nil
	}
	return nil, &NotLoadedError{edge: "Commands"}
}

// ScriptsOrErr returns the Scripts value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) ScriptsOrErr() ([]*Script, error) {
	if e.loadedTypes[5] {
		return e.Scripts, nil
	}
	return nil, &NotLoadedError{edge: "Scripts"}
}

// FileDownloadsOrErr returns the FileDownloads value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) FileDownloadsOrErr() ([]*FileDownload, error) {
	if e.loadedTypes[6] {
		return e.FileDownloads, nil
	}
	return nil, &NotLoadedError{edge: "FileDownloads"}
}

// FileDeletesOrErr returns the FileDeletes value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) FileDeletesOrErr() ([]*FileDelete, error) {
	if e.loadedTypes[7] {
		return e.FileDeletes, nil
	}
	return nil, &NotLoadedError{edge: "FileDeletes"}
}

// FileExtractsOrErr returns the FileExtracts value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) FileExtractsOrErr() ([]*FileExtract, error) {
	if e.loadedTypes[8] {
		return e.FileExtracts, nil
	}
	return nil, &NotLoadedError{edge: "FileExtracts"}
}

// IncludedNetworksOrErr returns the IncludedNetworks value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) IncludedNetworksOrErr() ([]*IncludedNetwork, error) {
	if e.loadedTypes[9] {
		return e.IncludedNetworks, nil
	}
	return nil, &NotLoadedError{edge: "IncludedNetworks"}
}

// FindingsOrErr returns the Findings value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) FindingsOrErr() ([]*Finding, error) {
	if e.loadedTypes[10] {
		return e.Findings, nil
	}
	return nil, &NotLoadedError{edge: "Findings"}
}

// DNSRecordsOrErr returns the DNSRecords value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) DNSRecordsOrErr() ([]*DNSRecord, error) {
	if e.loadedTypes[11] {
		return e.DNSRecords, nil
	}
	return nil, &NotLoadedError{edge: "DNSRecords"}
}

// DNSOrErr returns the DNS value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) DNSOrErr() ([]*DNS, error) {
	if e.loadedTypes[12] {
		return e.DNS, nil
	}
	return nil, &NotLoadedError{edge: "DNS"}
}

// NetworksOrErr returns the Networks value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) NetworksOrErr() ([]*Network, error) {
	if e.loadedTypes[13] {
		return e.Networks, nil
	}
	return nil, &NotLoadedError{edge: "Networks"}
}

// HostDependenciesOrErr returns the HostDependencies value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) HostDependenciesOrErr() ([]*HostDependency, error) {
	if e.loadedTypes[14] {
		return e.HostDependencies, nil
	}
	return nil, &NotLoadedError{edge: "HostDependencies"}
}

// AnsiblesOrErr returns the Ansibles value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) AnsiblesOrErr() ([]*Ansible, error) {
	if e.loadedTypes[15] {
		return e.Ansibles, nil
	}
	return nil, &NotLoadedError{edge: "Ansibles"}
}

// ScheduledStepsOrErr returns the ScheduledSteps value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) ScheduledStepsOrErr() ([]*ScheduledStep, error) {
	if e.loadedTypes[16] {
		return e.ScheduledSteps, nil
	}
	return nil, &NotLoadedError{edge: "ScheduledSteps"}
}

// BuildsOrErr returns the Builds value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) BuildsOrErr() ([]*Build, error) {
	if e.loadedTypes[17] {
		return e.Builds, nil
	}
	return nil, &NotLoadedError{edge: "Builds"}
}

// RepositoriesOrErr returns the Repositories value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) RepositoriesOrErr() ([]*Repository, error) {
	if e.loadedTypes[18] {
		return e.Repositories, nil
	}
	return nil, &NotLoadedError{edge: "Repositories"}
}

// ServerTasksOrErr returns the ServerTasks value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) ServerTasksOrErr() ([]*ServerTask, error) {
	if e.loadedTypes[19] {
		return e.ServerTasks, nil
	}
	return nil, &NotLoadedError{edge: "ServerTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Environment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case environment.FieldAdminCidrs, environment.FieldExposedVdiPorts, environment.FieldConfig, environment.FieldTags:
			values[i] = new([]byte)
		case environment.FieldTeamCount, environment.FieldRevision:
			values[i] = new(sql.NullInt64)
		case environment.FieldHclID, environment.FieldCompetitionID, environment.FieldName, environment.FieldDescription, environment.FieldBuilder:
			values[i] = new(sql.NullString)
		case environment.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Environment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Environment fields.
func (e *Environment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case environment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case environment.FieldHclID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hcl_id", values[i])
			} else if value.Valid {
				e.HclID = value.String
			}
		case environment.FieldCompetitionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competition_id", values[i])
			} else if value.Valid {
				e.CompetitionID = value.String
			}
		case environment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case environment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case environment.FieldBuilder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field builder", values[i])
			} else if value.Valid {
				e.Builder = value.String
			}
		case environment.FieldTeamCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field team_count", values[i])
			} else if value.Valid {
				e.TeamCount = int(value.Int64)
			}
		case environment.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				e.Revision = int(value.Int64)
			}
		case environment.FieldAdminCidrs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field admin_cidrs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.AdminCidrs); err != nil {
					return fmt.Errorf("unmarshal field admin_cidrs: %w", err)
				}
			}
		case environment.FieldExposedVdiPorts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field exposed_vdi_ports", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.ExposedVdiPorts); err != nil {
					return fmt.Errorf("unmarshal field exposed_vdi_ports: %w", err)
				}
			}
		case environment.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case environment.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryUsers queries the "Users" edge of the Environment entity.
func (e *Environment) QueryUsers() *UserQuery {
	return (&EnvironmentClient{config: e.config}).QueryUsers(e)
}

// QueryHosts queries the "Hosts" edge of the Environment entity.
func (e *Environment) QueryHosts() *HostQuery {
	return (&EnvironmentClient{config: e.config}).QueryHosts(e)
}

// QueryCompetitions queries the "Competitions" edge of the Environment entity.
func (e *Environment) QueryCompetitions() *CompetitionQuery {
	return (&EnvironmentClient{config: e.config}).QueryCompetitions(e)
}

// QueryIdentities queries the "Identities" edge of the Environment entity.
func (e *Environment) QueryIdentities() *IdentityQuery {
	return (&EnvironmentClient{config: e.config}).QueryIdentities(e)
}

// QueryCommands queries the "Commands" edge of the Environment entity.
func (e *Environment) QueryCommands() *CommandQuery {
	return (&EnvironmentClient{config: e.config}).QueryCommands(e)
}

// QueryScripts queries the "Scripts" edge of the Environment entity.
func (e *Environment) QueryScripts() *ScriptQuery {
	return (&EnvironmentClient{config: e.config}).QueryScripts(e)
}

// QueryFileDownloads queries the "FileDownloads" edge of the Environment entity.
func (e *Environment) QueryFileDownloads() *FileDownloadQuery {
	return (&EnvironmentClient{config: e.config}).QueryFileDownloads(e)
}

// QueryFileDeletes queries the "FileDeletes" edge of the Environment entity.
func (e *Environment) QueryFileDeletes() *FileDeleteQuery {
	return (&EnvironmentClient{config: e.config}).QueryFileDeletes(e)
}

// QueryFileExtracts queries the "FileExtracts" edge of the Environment entity.
func (e *Environment) QueryFileExtracts() *FileExtractQuery {
	return (&EnvironmentClient{config: e.config}).QueryFileExtracts(e)
}

// QueryIncludedNetworks queries the "IncludedNetworks" edge of the Environment entity.
func (e *Environment) QueryIncludedNetworks() *IncludedNetworkQuery {
	return (&EnvironmentClient{config: e.config}).QueryIncludedNetworks(e)
}

// QueryFindings queries the "Findings" edge of the Environment entity.
func (e *Environment) QueryFindings() *FindingQuery {
	return (&EnvironmentClient{config: e.config}).QueryFindings(e)
}

// QueryDNSRecords queries the "DNSRecords" edge of the Environment entity.
func (e *Environment) QueryDNSRecords() *DNSRecordQuery {
	return (&EnvironmentClient{config: e.config}).QueryDNSRecords(e)
}

// QueryDNS queries the "DNS" edge of the Environment entity.
func (e *Environment) QueryDNS() *DNSQuery {
	return (&EnvironmentClient{config: e.config}).QueryDNS(e)
}

// QueryNetworks queries the "Networks" edge of the Environment entity.
func (e *Environment) QueryNetworks() *NetworkQuery {
	return (&EnvironmentClient{config: e.config}).QueryNetworks(e)
}

// QueryHostDependencies queries the "HostDependencies" edge of the Environment entity.
func (e *Environment) QueryHostDependencies() *HostDependencyQuery {
	return (&EnvironmentClient{config: e.config}).QueryHostDependencies(e)
}

// QueryAnsibles queries the "Ansibles" edge of the Environment entity.
func (e *Environment) QueryAnsibles() *AnsibleQuery {
	return (&EnvironmentClient{config: e.config}).QueryAnsibles(e)
}

// QueryScheduledSteps queries the "ScheduledSteps" edge of the Environment entity.
func (e *Environment) QueryScheduledSteps() *ScheduledStepQuery {
	return (&EnvironmentClient{config: e.config}).QueryScheduledSteps(e)
}

// QueryBuilds queries the "Builds" edge of the Environment entity.
func (e *Environment) QueryBuilds() *BuildQuery {
	return (&EnvironmentClient{config: e.config}).QueryBuilds(e)
}

// QueryRepositories queries the "Repositories" edge of the Environment entity.
func (e *Environment) QueryRepositories() *RepositoryQuery {
	return (&EnvironmentClient{config: e.config}).QueryRepositories(e)
}

// QueryServerTasks queries the "ServerTasks" edge of the Environment entity.
func (e *Environment) QueryServerTasks() *ServerTaskQuery {
	return (&EnvironmentClient{config: e.config}).QueryServerTasks(e)
}

// Update returns a builder for updating this Environment.
// Note that you need to call Environment.Unwrap() before calling this method if this Environment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Environment) Update() *EnvironmentUpdateOne {
	return (&EnvironmentClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Environment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Environment) Unwrap() *Environment {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Environment is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Environment) String() string {
	var builder strings.Builder
	builder.WriteString("Environment(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", hcl_id=")
	builder.WriteString(e.HclID)
	builder.WriteString(", competition_id=")
	builder.WriteString(e.CompetitionID)
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", description=")
	builder.WriteString(e.Description)
	builder.WriteString(", builder=")
	builder.WriteString(e.Builder)
	builder.WriteString(", team_count=")
	builder.WriteString(fmt.Sprintf("%v", e.TeamCount))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", e.Revision))
	builder.WriteString(", admin_cidrs=")
	builder.WriteString(fmt.Sprintf("%v", e.AdminCidrs))
	builder.WriteString(", exposed_vdi_ports=")
	builder.WriteString(fmt.Sprintf("%v", e.ExposedVdiPorts))
	builder.WriteString(", config=")
	builder.WriteString(fmt.Sprintf("%v", e.Config))
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", e.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Environments is a parsable slice of Environment.
type Environments []*Environment

func (e Environments) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
