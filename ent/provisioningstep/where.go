// Code generated by ent, DO NOT EDIT.

package provisioningstep

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldLTE(FieldID, id))
}

// StepNumber applies equality check predicate on the "step_number" field. It's identical to StepNumberEQ.
func StepNumber(v int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldEQ(FieldStepNumber, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldNotIn(FieldType, vs...))
}

// StepNumberEQ applies the EQ predicate on the "step_number" field.
func StepNumberEQ(v int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldEQ(FieldStepNumber, v))
}

// StepNumberNEQ applies the NEQ predicate on the "step_number" field.
func StepNumberNEQ(v int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldNEQ(FieldStepNumber, v))
}

// StepNumberIn applies the In predicate on the "step_number" field.
func StepNumberIn(vs ...int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldIn(FieldStepNumber, vs...))
}

// StepNumberNotIn applies the NotIn predicate on the "step_number" field.
func StepNumberNotIn(vs ...int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldNotIn(FieldStepNumber, vs...))
}

// StepNumberGT applies the GT predicate on the "step_number" field.
func StepNumberGT(v int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldGT(FieldStepNumber, v))
}

// StepNumberGTE applies the GTE predicate on the "step_number" field.
func StepNumberGTE(v int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldGTE(FieldStepNumber, v))
}

// StepNumberLT applies the LT predicate on the "step_number" field.
func StepNumberLT(v int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldLT(FieldStepNumber, v))
}

// StepNumberLTE applies the LTE predicate on the "step_number" field.
func StepNumberLTE(v int) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.FieldLTE(FieldStepNumber, v))
}

// HasProvisioningStepToStatus applies the HasEdge predicate on the "ProvisioningStepToStatus" edge.
func HasProvisioningStepToStatus() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProvisioningStepToStatusTable, ProvisioningStepToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToStatusWith applies the HasEdge predicate on the "ProvisioningStepToStatus" edge with a given conditions (other predicates).
func HasProvisioningStepToStatusWith(preds ...predicate.Status) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToProvisionedHost applies the HasEdge predicate on the "ProvisioningStepToProvisionedHost" edge.
func HasProvisioningStepToProvisionedHost() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToProvisionedHostTable, ProvisioningStepToProvisionedHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToProvisionedHostWith applies the HasEdge predicate on the "ProvisioningStepToProvisionedHost" edge with a given conditions (other predicates).
func HasProvisioningStepToProvisionedHostWith(preds ...predicate.ProvisionedHost) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToProvisionedHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToScript applies the HasEdge predicate on the "ProvisioningStepToScript" edge.
func HasProvisioningStepToScript() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToScriptTable, ProvisioningStepToScriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToScriptWith applies the HasEdge predicate on the "ProvisioningStepToScript" edge with a given conditions (other predicates).
func HasProvisioningStepToScriptWith(preds ...predicate.Script) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToScriptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToCommand applies the HasEdge predicate on the "ProvisioningStepToCommand" edge.
func HasProvisioningStepToCommand() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToCommandTable, ProvisioningStepToCommandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToCommandWith applies the HasEdge predicate on the "ProvisioningStepToCommand" edge with a given conditions (other predicates).
func HasProvisioningStepToCommandWith(preds ...predicate.Command) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToCommandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToDNSRecord applies the HasEdge predicate on the "ProvisioningStepToDNSRecord" edge.
func HasProvisioningStepToDNSRecord() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToDNSRecordTable, ProvisioningStepToDNSRecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToDNSRecordWith applies the HasEdge predicate on the "ProvisioningStepToDNSRecord" edge with a given conditions (other predicates).
func HasProvisioningStepToDNSRecordWith(preds ...predicate.DNSRecord) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToDNSRecordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToFileDelete applies the HasEdge predicate on the "ProvisioningStepToFileDelete" edge.
func HasProvisioningStepToFileDelete() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToFileDeleteTable, ProvisioningStepToFileDeleteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToFileDeleteWith applies the HasEdge predicate on the "ProvisioningStepToFileDelete" edge with a given conditions (other predicates).
func HasProvisioningStepToFileDeleteWith(preds ...predicate.FileDelete) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToFileDeleteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToFileDownload applies the HasEdge predicate on the "ProvisioningStepToFileDownload" edge.
func HasProvisioningStepToFileDownload() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToFileDownloadTable, ProvisioningStepToFileDownloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToFileDownloadWith applies the HasEdge predicate on the "ProvisioningStepToFileDownload" edge with a given conditions (other predicates).
func HasProvisioningStepToFileDownloadWith(preds ...predicate.FileDownload) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToFileDownloadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToFileExtract applies the HasEdge predicate on the "ProvisioningStepToFileExtract" edge.
func HasProvisioningStepToFileExtract() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToFileExtractTable, ProvisioningStepToFileExtractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToFileExtractWith applies the HasEdge predicate on the "ProvisioningStepToFileExtract" edge with a given conditions (other predicates).
func HasProvisioningStepToFileExtractWith(preds ...predicate.FileExtract) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToFileExtractStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToAnsible applies the HasEdge predicate on the "ProvisioningStepToAnsible" edge.
func HasProvisioningStepToAnsible() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToAnsibleTable, ProvisioningStepToAnsibleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToAnsibleWith applies the HasEdge predicate on the "ProvisioningStepToAnsible" edge with a given conditions (other predicates).
func HasProvisioningStepToAnsibleWith(preds ...predicate.Ansible) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToAnsibleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToPlan applies the HasEdge predicate on the "ProvisioningStepToPlan" edge.
func HasProvisioningStepToPlan() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisioningStepToPlanTable, ProvisioningStepToPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToPlanWith applies the HasEdge predicate on the "ProvisioningStepToPlan" edge with a given conditions (other predicates).
func HasProvisioningStepToPlanWith(preds ...predicate.Plan) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToAgentTask applies the HasEdge predicate on the "ProvisioningStepToAgentTask" edge.
func HasProvisioningStepToAgentTask() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisioningStepToAgentTaskTable, ProvisioningStepToAgentTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToAgentTaskWith applies the HasEdge predicate on the "ProvisioningStepToAgentTask" edge with a given conditions (other predicates).
func HasProvisioningStepToAgentTaskWith(preds ...predicate.AgentTask) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToAgentTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisioningStepToGinFileMiddleware applies the HasEdge predicate on the "ProvisioningStepToGinFileMiddleware" edge.
func HasProvisioningStepToGinFileMiddleware() predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisioningStepToGinFileMiddlewareTable, ProvisioningStepToGinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisioningStepToGinFileMiddlewareWith applies the HasEdge predicate on the "ProvisioningStepToGinFileMiddleware" edge with a given conditions (other predicates).
func HasProvisioningStepToGinFileMiddlewareWith(preds ...predicate.GinFileMiddleware) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(func(s *sql.Selector) {
		step := newProvisioningStepToGinFileMiddlewareStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProvisioningStep) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProvisioningStep) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProvisioningStep) predicate.ProvisioningStep {
	return predicate.ProvisioningStep(sql.NotPredicates(p))
}
