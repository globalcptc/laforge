// Code generated by ent, DO NOT EDIT.

package provisioningstep

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the provisioningstep type in the database.
	Label = "provisioning_step"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStepNumber holds the string denoting the step_number field in the database.
	FieldStepNumber = "step_number"
	// EdgeProvisioningStepToStatus holds the string denoting the provisioningsteptostatus edge name in mutations.
	EdgeProvisioningStepToStatus = "ProvisioningStepToStatus"
	// EdgeProvisioningStepToProvisionedHost holds the string denoting the provisioningsteptoprovisionedhost edge name in mutations.
	EdgeProvisioningStepToProvisionedHost = "ProvisioningStepToProvisionedHost"
	// EdgeProvisioningStepToScript holds the string denoting the provisioningsteptoscript edge name in mutations.
	EdgeProvisioningStepToScript = "ProvisioningStepToScript"
	// EdgeProvisioningStepToCommand holds the string denoting the provisioningsteptocommand edge name in mutations.
	EdgeProvisioningStepToCommand = "ProvisioningStepToCommand"
	// EdgeProvisioningStepToDNSRecord holds the string denoting the provisioningsteptodnsrecord edge name in mutations.
	EdgeProvisioningStepToDNSRecord = "ProvisioningStepToDNSRecord"
	// EdgeProvisioningStepToFileDelete holds the string denoting the provisioningsteptofiledelete edge name in mutations.
	EdgeProvisioningStepToFileDelete = "ProvisioningStepToFileDelete"
	// EdgeProvisioningStepToFileDownload holds the string denoting the provisioningsteptofiledownload edge name in mutations.
	EdgeProvisioningStepToFileDownload = "ProvisioningStepToFileDownload"
	// EdgeProvisioningStepToFileExtract holds the string denoting the provisioningsteptofileextract edge name in mutations.
	EdgeProvisioningStepToFileExtract = "ProvisioningStepToFileExtract"
	// EdgeProvisioningStepToAnsible holds the string denoting the provisioningsteptoansible edge name in mutations.
	EdgeProvisioningStepToAnsible = "ProvisioningStepToAnsible"
	// EdgeProvisioningStepToPlan holds the string denoting the provisioningsteptoplan edge name in mutations.
	EdgeProvisioningStepToPlan = "ProvisioningStepToPlan"
	// EdgeProvisioningStepToAgentTask holds the string denoting the provisioningsteptoagenttask edge name in mutations.
	EdgeProvisioningStepToAgentTask = "ProvisioningStepToAgentTask"
	// EdgeProvisioningStepToGinFileMiddleware holds the string denoting the provisioningsteptoginfilemiddleware edge name in mutations.
	EdgeProvisioningStepToGinFileMiddleware = "ProvisioningStepToGinFileMiddleware"
	// Table holds the table name of the provisioningstep in the database.
	Table = "provisioning_steps"
	// ProvisioningStepToStatusTable is the table that holds the ProvisioningStepToStatus relation/edge.
	ProvisioningStepToStatusTable = "status"
	// ProvisioningStepToStatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	ProvisioningStepToStatusInverseTable = "status"
	// ProvisioningStepToStatusColumn is the table column denoting the ProvisioningStepToStatus relation/edge.
	ProvisioningStepToStatusColumn = "provisioning_step_provisioning_step_to_status"
	// ProvisioningStepToProvisionedHostTable is the table that holds the ProvisioningStepToProvisionedHost relation/edge.
	ProvisioningStepToProvisionedHostTable = "provisioning_steps"
	// ProvisioningStepToProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisioningStepToProvisionedHostInverseTable = "provisioned_hosts"
	// ProvisioningStepToProvisionedHostColumn is the table column denoting the ProvisioningStepToProvisionedHost relation/edge.
	ProvisioningStepToProvisionedHostColumn = "provisioning_step_provisioning_step_to_provisioned_host"
	// ProvisioningStepToScriptTable is the table that holds the ProvisioningStepToScript relation/edge.
	ProvisioningStepToScriptTable = "provisioning_steps"
	// ProvisioningStepToScriptInverseTable is the table name for the Script entity.
	// It exists in this package in order to avoid circular dependency with the "script" package.
	ProvisioningStepToScriptInverseTable = "scripts"
	// ProvisioningStepToScriptColumn is the table column denoting the ProvisioningStepToScript relation/edge.
	ProvisioningStepToScriptColumn = "provisioning_step_provisioning_step_to_script"
	// ProvisioningStepToCommandTable is the table that holds the ProvisioningStepToCommand relation/edge.
	ProvisioningStepToCommandTable = "provisioning_steps"
	// ProvisioningStepToCommandInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	ProvisioningStepToCommandInverseTable = "commands"
	// ProvisioningStepToCommandColumn is the table column denoting the ProvisioningStepToCommand relation/edge.
	ProvisioningStepToCommandColumn = "provisioning_step_provisioning_step_to_command"
	// ProvisioningStepToDNSRecordTable is the table that holds the ProvisioningStepToDNSRecord relation/edge.
	ProvisioningStepToDNSRecordTable = "provisioning_steps"
	// ProvisioningStepToDNSRecordInverseTable is the table name for the DNSRecord entity.
	// It exists in this package in order to avoid circular dependency with the "dnsrecord" package.
	ProvisioningStepToDNSRecordInverseTable = "dns_records"
	// ProvisioningStepToDNSRecordColumn is the table column denoting the ProvisioningStepToDNSRecord relation/edge.
	ProvisioningStepToDNSRecordColumn = "provisioning_step_provisioning_step_to_dns_record"
	// ProvisioningStepToFileDeleteTable is the table that holds the ProvisioningStepToFileDelete relation/edge.
	ProvisioningStepToFileDeleteTable = "provisioning_steps"
	// ProvisioningStepToFileDeleteInverseTable is the table name for the FileDelete entity.
	// It exists in this package in order to avoid circular dependency with the "filedelete" package.
	ProvisioningStepToFileDeleteInverseTable = "file_deletes"
	// ProvisioningStepToFileDeleteColumn is the table column denoting the ProvisioningStepToFileDelete relation/edge.
	ProvisioningStepToFileDeleteColumn = "provisioning_step_provisioning_step_to_file_delete"
	// ProvisioningStepToFileDownloadTable is the table that holds the ProvisioningStepToFileDownload relation/edge.
	ProvisioningStepToFileDownloadTable = "provisioning_steps"
	// ProvisioningStepToFileDownloadInverseTable is the table name for the FileDownload entity.
	// It exists in this package in order to avoid circular dependency with the "filedownload" package.
	ProvisioningStepToFileDownloadInverseTable = "file_downloads"
	// ProvisioningStepToFileDownloadColumn is the table column denoting the ProvisioningStepToFileDownload relation/edge.
	ProvisioningStepToFileDownloadColumn = "provisioning_step_provisioning_step_to_file_download"
	// ProvisioningStepToFileExtractTable is the table that holds the ProvisioningStepToFileExtract relation/edge.
	ProvisioningStepToFileExtractTable = "provisioning_steps"
	// ProvisioningStepToFileExtractInverseTable is the table name for the FileExtract entity.
	// It exists in this package in order to avoid circular dependency with the "fileextract" package.
	ProvisioningStepToFileExtractInverseTable = "file_extracts"
	// ProvisioningStepToFileExtractColumn is the table column denoting the ProvisioningStepToFileExtract relation/edge.
	ProvisioningStepToFileExtractColumn = "provisioning_step_provisioning_step_to_file_extract"
	// ProvisioningStepToAnsibleTable is the table that holds the ProvisioningStepToAnsible relation/edge.
	ProvisioningStepToAnsibleTable = "provisioning_steps"
	// ProvisioningStepToAnsibleInverseTable is the table name for the Ansible entity.
	// It exists in this package in order to avoid circular dependency with the "ansible" package.
	ProvisioningStepToAnsibleInverseTable = "ansibles"
	// ProvisioningStepToAnsibleColumn is the table column denoting the ProvisioningStepToAnsible relation/edge.
	ProvisioningStepToAnsibleColumn = "provisioning_step_provisioning_step_to_ansible"
	// ProvisioningStepToPlanTable is the table that holds the ProvisioningStepToPlan relation/edge.
	ProvisioningStepToPlanTable = "provisioning_steps"
	// ProvisioningStepToPlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	ProvisioningStepToPlanInverseTable = "plans"
	// ProvisioningStepToPlanColumn is the table column denoting the ProvisioningStepToPlan relation/edge.
	ProvisioningStepToPlanColumn = "plan_plan_to_provisioning_step"
	// ProvisioningStepToAgentTaskTable is the table that holds the ProvisioningStepToAgentTask relation/edge.
	ProvisioningStepToAgentTaskTable = "agent_tasks"
	// ProvisioningStepToAgentTaskInverseTable is the table name for the AgentTask entity.
	// It exists in this package in order to avoid circular dependency with the "agenttask" package.
	ProvisioningStepToAgentTaskInverseTable = "agent_tasks"
	// ProvisioningStepToAgentTaskColumn is the table column denoting the ProvisioningStepToAgentTask relation/edge.
	ProvisioningStepToAgentTaskColumn = "agent_task_agent_task_to_provisioning_step"
	// ProvisioningStepToGinFileMiddlewareTable is the table that holds the ProvisioningStepToGinFileMiddleware relation/edge.
	ProvisioningStepToGinFileMiddlewareTable = "provisioning_steps"
	// ProvisioningStepToGinFileMiddlewareInverseTable is the table name for the GinFileMiddleware entity.
	// It exists in this package in order to avoid circular dependency with the "ginfilemiddleware" package.
	ProvisioningStepToGinFileMiddlewareInverseTable = "gin_file_middlewares"
	// ProvisioningStepToGinFileMiddlewareColumn is the table column denoting the ProvisioningStepToGinFileMiddleware relation/edge.
	ProvisioningStepToGinFileMiddlewareColumn = "gin_file_middleware_gin_file_middleware_to_provisioning_step"
)

// Columns holds all SQL columns for provisioningstep fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldStepNumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provisioning_steps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"gin_file_middleware_gin_file_middleware_to_provisioning_step",
	"plan_plan_to_provisioning_step",
	"provisioning_step_provisioning_step_to_provisioned_host",
	"provisioning_step_provisioning_step_to_script",
	"provisioning_step_provisioning_step_to_command",
	"provisioning_step_provisioning_step_to_dns_record",
	"provisioning_step_provisioning_step_to_file_delete",
	"provisioning_step_provisioning_step_to_file_download",
	"provisioning_step_provisioning_step_to_file_extract",
	"provisioning_step_provisioning_step_to_ansible",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeScript       Type = "Script"
	TypeCommand      Type = "Command"
	TypeDNSRecord    Type = "DNSRecord"
	TypeFileDelete   Type = "FileDelete"
	TypeFileDownload Type = "FileDownload"
	TypeFileExtract  Type = "FileExtract"
	TypeAnsible      Type = "Ansible"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeScript, TypeCommand, TypeDNSRecord, TypeFileDelete, TypeFileDownload, TypeFileExtract, TypeAnsible:
		return nil
	default:
		return fmt.Errorf("provisioningstep: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ProvisioningStep queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStepNumber orders the results by the step_number field.
func ByStepNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepNumber, opts...).ToFunc()
}

// ByProvisioningStepToStatusField orders the results by ProvisioningStepToStatus field.
func ByProvisioningStepToStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToStatusStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToProvisionedHostField orders the results by ProvisioningStepToProvisionedHost field.
func ByProvisioningStepToProvisionedHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToProvisionedHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToScriptField orders the results by ProvisioningStepToScript field.
func ByProvisioningStepToScriptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToScriptStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToCommandField orders the results by ProvisioningStepToCommand field.
func ByProvisioningStepToCommandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToCommandStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToDNSRecordField orders the results by ProvisioningStepToDNSRecord field.
func ByProvisioningStepToDNSRecordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToDNSRecordStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToFileDeleteField orders the results by ProvisioningStepToFileDelete field.
func ByProvisioningStepToFileDeleteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToFileDeleteStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToFileDownloadField orders the results by ProvisioningStepToFileDownload field.
func ByProvisioningStepToFileDownloadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToFileDownloadStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToFileExtractField orders the results by ProvisioningStepToFileExtract field.
func ByProvisioningStepToFileExtractField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToFileExtractStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToAnsibleField orders the results by ProvisioningStepToAnsible field.
func ByProvisioningStepToAnsibleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToAnsibleStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToPlanField orders the results by ProvisioningStepToPlan field.
func ByProvisioningStepToPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepToAgentTaskCount orders the results by ProvisioningStepToAgentTask count.
func ByProvisioningStepToAgentTaskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProvisioningStepToAgentTaskStep(), opts...)
	}
}

// ByProvisioningStepToAgentTask orders the results by ProvisioningStepToAgentTask terms.
func ByProvisioningStepToAgentTask(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToAgentTaskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProvisioningStepToGinFileMiddlewareField orders the results by ProvisioningStepToGinFileMiddleware field.
func ByProvisioningStepToGinFileMiddlewareField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepToGinFileMiddlewareStep(), sql.OrderByField(field, opts...))
	}
}
func newProvisioningStepToStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisioningStepToStatusTable, ProvisioningStepToStatusColumn),
	)
}
func newProvisioningStepToProvisionedHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToProvisionedHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToProvisionedHostTable, ProvisioningStepToProvisionedHostColumn),
	)
}
func newProvisioningStepToScriptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToScriptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToScriptTable, ProvisioningStepToScriptColumn),
	)
}
func newProvisioningStepToCommandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToCommandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToCommandTable, ProvisioningStepToCommandColumn),
	)
}
func newProvisioningStepToDNSRecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToDNSRecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToDNSRecordTable, ProvisioningStepToDNSRecordColumn),
	)
}
func newProvisioningStepToFileDeleteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToFileDeleteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToFileDeleteTable, ProvisioningStepToFileDeleteColumn),
	)
}
func newProvisioningStepToFileDownloadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToFileDownloadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToFileDownloadTable, ProvisioningStepToFileDownloadColumn),
	)
}
func newProvisioningStepToFileExtractStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToFileExtractInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToFileExtractTable, ProvisioningStepToFileExtractColumn),
	)
}
func newProvisioningStepToAnsibleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToAnsibleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisioningStepToAnsibleTable, ProvisioningStepToAnsibleColumn),
	)
}
func newProvisioningStepToPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProvisioningStepToPlanTable, ProvisioningStepToPlanColumn),
	)
}
func newProvisioningStepToAgentTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToAgentTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProvisioningStepToAgentTaskTable, ProvisioningStepToAgentTaskColumn),
	)
}
func newProvisioningStepToGinFileMiddlewareStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepToGinFileMiddlewareInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProvisioningStepToGinFileMiddlewareTable, ProvisioningStepToGinFileMiddlewareColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
