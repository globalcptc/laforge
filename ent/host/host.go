// Code generated by ent, DO NOT EDIT.

package host

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the host type in the database.
	Label = "host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOS holds the string denoting the os field in the database.
	FieldOS = "os"
	// FieldLastOctet holds the string denoting the last_octet field in the database.
	FieldLastOctet = "last_octet"
	// FieldInstanceSize holds the string denoting the instance_size field in the database.
	FieldInstanceSize = "instance_size"
	// FieldAllowMACChanges holds the string denoting the allow_mac_changes field in the database.
	FieldAllowMACChanges = "allow_mac_changes"
	// FieldExposedTCPPorts holds the string denoting the exposed_tcp_ports field in the database.
	FieldExposedTCPPorts = "exposed_tcp_ports"
	// FieldExposedUDPPorts holds the string denoting the exposed_udp_ports field in the database.
	FieldExposedUDPPorts = "exposed_udp_ports"
	// FieldOverridePassword holds the string denoting the override_password field in the database.
	FieldOverridePassword = "override_password"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldUserGroups holds the string denoting the user_groups field in the database.
	FieldUserGroups = "user_groups"
	// FieldProvisionSteps holds the string denoting the provision_steps field in the database.
	FieldProvisionSteps = "provision_steps"
	// FieldScheduledSteps holds the string denoting the scheduled_steps field in the database.
	FieldScheduledSteps = "scheduled_steps"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeDisk holds the string denoting the disk edge name in mutations.
	EdgeDisk = "Disk"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "Users"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// EdgeIncludedNetworks holds the string denoting the includednetworks edge name in mutations.
	EdgeIncludedNetworks = "IncludedNetworks"
	// EdgeDependOnHostDependencies holds the string denoting the dependonhostdependencies edge name in mutations.
	EdgeDependOnHostDependencies = "DependOnHostDependencies"
	// EdgeRequiredByHostDependencies holds the string denoting the requiredbyhostdependencies edge name in mutations.
	EdgeRequiredByHostDependencies = "RequiredByHostDependencies"
	// Table holds the table name of the host in the database.
	Table = "hosts"
	// DiskTable is the table that holds the Disk relation/edge.
	DiskTable = "disks"
	// DiskInverseTable is the table name for the Disk entity.
	// It exists in this package in order to avoid circular dependency with the "disk" package.
	DiskInverseTable = "disks"
	// DiskColumn is the table column denoting the Disk relation/edge.
	DiskColumn = "host_disk"
	// UsersTable is the table that holds the Users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the Users relation/edge.
	UsersColumn = "host_users"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "hosts"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "environment_hosts"
	// IncludedNetworksTable is the table that holds the IncludedNetworks relation/edge. The primary key declared below.
	IncludedNetworksTable = "included_network_Hosts"
	// IncludedNetworksInverseTable is the table name for the IncludedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "includednetwork" package.
	IncludedNetworksInverseTable = "included_networks"
	// DependOnHostDependenciesTable is the table that holds the DependOnHostDependencies relation/edge.
	DependOnHostDependenciesTable = "host_dependencies"
	// DependOnHostDependenciesInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	DependOnHostDependenciesInverseTable = "host_dependencies"
	// DependOnHostDependenciesColumn is the table column denoting the DependOnHostDependencies relation/edge.
	DependOnHostDependenciesColumn = "host_dependency_depend_on_host"
	// RequiredByHostDependenciesTable is the table that holds the RequiredByHostDependencies relation/edge.
	RequiredByHostDependenciesTable = "host_dependencies"
	// RequiredByHostDependenciesInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	RequiredByHostDependenciesInverseTable = "host_dependencies"
	// RequiredByHostDependenciesColumn is the table column denoting the RequiredByHostDependencies relation/edge.
	RequiredByHostDependenciesColumn = "host_dependency_required_by"
)

// Columns holds all SQL columns for host fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldHostname,
	FieldDescription,
	FieldOS,
	FieldLastOctet,
	FieldInstanceSize,
	FieldAllowMACChanges,
	FieldExposedTCPPorts,
	FieldExposedUDPPorts,
	FieldOverridePassword,
	FieldVars,
	FieldUserGroups,
	FieldProvisionSteps,
	FieldScheduledSteps,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hosts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_hosts",
}

var (
	// IncludedNetworksPrimaryKey and IncludedNetworksColumn2 are the table columns denoting the
	// primary key for the IncludedNetworks relation (M2M).
	IncludedNetworksPrimaryKey = []string{"included_network_id", "host_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Host queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByOS orders the results by the OS field.
func ByOS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOS, opts...).ToFunc()
}

// ByLastOctet orders the results by the last_octet field.
func ByLastOctet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastOctet, opts...).ToFunc()
}

// ByInstanceSize orders the results by the instance_size field.
func ByInstanceSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceSize, opts...).ToFunc()
}

// ByAllowMACChanges orders the results by the allow_mac_changes field.
func ByAllowMACChanges(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowMACChanges, opts...).ToFunc()
}

// ByOverridePassword orders the results by the override_password field.
func ByOverridePassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverridePassword, opts...).ToFunc()
}

// ByDiskField orders the results by Disk field.
func ByDiskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiskStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsersCount orders the results by Users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by Users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEnvironmentField orders the results by Environment field.
func ByEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByIncludedNetworksCount orders the results by IncludedNetworks count.
func ByIncludedNetworksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedNetworksStep(), opts...)
	}
}

// ByIncludedNetworks orders the results by IncludedNetworks terms.
func ByIncludedNetworks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedNetworksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependOnHostDependenciesCount orders the results by DependOnHostDependencies count.
func ByDependOnHostDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependOnHostDependenciesStep(), opts...)
	}
}

// ByDependOnHostDependencies orders the results by DependOnHostDependencies terms.
func ByDependOnHostDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependOnHostDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequiredByHostDependenciesCount orders the results by RequiredByHostDependencies count.
func ByRequiredByHostDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequiredByHostDependenciesStep(), opts...)
	}
}

// ByRequiredByHostDependencies orders the results by RequiredByHostDependencies terms.
func ByRequiredByHostDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequiredByHostDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDiskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DiskTable, DiskColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
func newEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
	)
}
func newIncludedNetworksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedNetworksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IncludedNetworksTable, IncludedNetworksPrimaryKey...),
	)
}
func newDependOnHostDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependOnHostDependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependOnHostDependenciesTable, DependOnHostDependenciesColumn),
	)
}
func newRequiredByHostDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequiredByHostDependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RequiredByHostDependenciesTable, RequiredByHostDependenciesColumn),
	)
}
