// Code generated by ent, DO NOT EDIT.

package host

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the host type in the database.
	Label = "host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOS holds the string denoting the os field in the database.
	FieldOS = "os"
	// FieldLastOctet holds the string denoting the last_octet field in the database.
	FieldLastOctet = "last_octet"
	// FieldInstanceSize holds the string denoting the instance_size field in the database.
	FieldInstanceSize = "instance_size"
	// FieldAllowMACChanges holds the string denoting the allow_mac_changes field in the database.
	FieldAllowMACChanges = "allow_mac_changes"
	// FieldExposedTCPPorts holds the string denoting the exposed_tcp_ports field in the database.
	FieldExposedTCPPorts = "exposed_tcp_ports"
	// FieldExposedUDPPorts holds the string denoting the exposed_udp_ports field in the database.
	FieldExposedUDPPorts = "exposed_udp_ports"
	// FieldOverridePassword holds the string denoting the override_password field in the database.
	FieldOverridePassword = "override_password"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldUserGroups holds the string denoting the user_groups field in the database.
	FieldUserGroups = "user_groups"
	// FieldProvisionSteps holds the string denoting the provision_steps field in the database.
	FieldProvisionSteps = "provision_steps"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeHostToDisk holds the string denoting the hosttodisk edge name in mutations.
	EdgeHostToDisk = "HostToDisk"
	// EdgeHostToUser holds the string denoting the hosttouser edge name in mutations.
	EdgeHostToUser = "HostToUser"
	// EdgeHostToEnvironment holds the string denoting the hosttoenvironment edge name in mutations.
	EdgeHostToEnvironment = "HostToEnvironment"
	// EdgeHostToIncludedNetwork holds the string denoting the hosttoincludednetwork edge name in mutations.
	EdgeHostToIncludedNetwork = "HostToIncludedNetwork"
	// EdgeDependOnHostToHostDependency holds the string denoting the dependonhosttohostdependency edge name in mutations.
	EdgeDependOnHostToHostDependency = "DependOnHostToHostDependency"
	// EdgeDependByHostToHostDependency holds the string denoting the dependbyhosttohostdependency edge name in mutations.
	EdgeDependByHostToHostDependency = "DependByHostToHostDependency"
	// Table holds the table name of the host in the database.
	Table = "hosts"
	// HostToDiskTable is the table that holds the HostToDisk relation/edge.
	HostToDiskTable = "disks"
	// HostToDiskInverseTable is the table name for the Disk entity.
	// It exists in this package in order to avoid circular dependency with the "disk" package.
	HostToDiskInverseTable = "disks"
	// HostToDiskColumn is the table column denoting the HostToDisk relation/edge.
	HostToDiskColumn = "host_host_to_disk"
	// HostToUserTable is the table that holds the HostToUser relation/edge.
	HostToUserTable = "users"
	// HostToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	HostToUserInverseTable = "users"
	// HostToUserColumn is the table column denoting the HostToUser relation/edge.
	HostToUserColumn = "host_host_to_user"
	// HostToEnvironmentTable is the table that holds the HostToEnvironment relation/edge.
	HostToEnvironmentTable = "hosts"
	// HostToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	HostToEnvironmentInverseTable = "environments"
	// HostToEnvironmentColumn is the table column denoting the HostToEnvironment relation/edge.
	HostToEnvironmentColumn = "environment_environment_to_host"
	// HostToIncludedNetworkTable is the table that holds the HostToIncludedNetwork relation/edge. The primary key declared below.
	HostToIncludedNetworkTable = "included_network_IncludedNetworkToHost"
	// HostToIncludedNetworkInverseTable is the table name for the IncludedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "includednetwork" package.
	HostToIncludedNetworkInverseTable = "included_networks"
	// DependOnHostToHostDependencyTable is the table that holds the DependOnHostToHostDependency relation/edge.
	DependOnHostToHostDependencyTable = "host_dependencies"
	// DependOnHostToHostDependencyInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	DependOnHostToHostDependencyInverseTable = "host_dependencies"
	// DependOnHostToHostDependencyColumn is the table column denoting the DependOnHostToHostDependency relation/edge.
	DependOnHostToHostDependencyColumn = "host_dependency_host_dependency_to_depend_on_host"
	// DependByHostToHostDependencyTable is the table that holds the DependByHostToHostDependency relation/edge.
	DependByHostToHostDependencyTable = "host_dependencies"
	// DependByHostToHostDependencyInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	DependByHostToHostDependencyInverseTable = "host_dependencies"
	// DependByHostToHostDependencyColumn is the table column denoting the DependByHostToHostDependency relation/edge.
	DependByHostToHostDependencyColumn = "host_dependency_host_dependency_to_depend_by_host"
)

// Columns holds all SQL columns for host fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldHostname,
	FieldDescription,
	FieldOS,
	FieldLastOctet,
	FieldInstanceSize,
	FieldAllowMACChanges,
	FieldExposedTCPPorts,
	FieldExposedUDPPorts,
	FieldOverridePassword,
	FieldVars,
	FieldUserGroups,
	FieldProvisionSteps,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hosts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_environment_to_host",
}

var (
	// HostToIncludedNetworkPrimaryKey and HostToIncludedNetworkColumn2 are the table columns denoting the
	// primary key for the HostToIncludedNetwork relation (M2M).
	HostToIncludedNetworkPrimaryKey = []string{"included_network_id", "host_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Host queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByOS orders the results by the OS field.
func ByOS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOS, opts...).ToFunc()
}

// ByLastOctet orders the results by the last_octet field.
func ByLastOctet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastOctet, opts...).ToFunc()
}

// ByInstanceSize orders the results by the instance_size field.
func ByInstanceSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceSize, opts...).ToFunc()
}

// ByAllowMACChanges orders the results by the allow_mac_changes field.
func ByAllowMACChanges(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowMACChanges, opts...).ToFunc()
}

// ByOverridePassword orders the results by the override_password field.
func ByOverridePassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverridePassword, opts...).ToFunc()
}

// ByHostToDiskField orders the results by HostToDisk field.
func ByHostToDiskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostToDiskStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostToUserCount orders the results by HostToUser count.
func ByHostToUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostToUserStep(), opts...)
	}
}

// ByHostToUser orders the results by HostToUser terms.
func ByHostToUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostToUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHostToEnvironmentField orders the results by HostToEnvironment field.
func ByHostToEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostToEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostToIncludedNetworkCount orders the results by HostToIncludedNetwork count.
func ByHostToIncludedNetworkCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostToIncludedNetworkStep(), opts...)
	}
}

// ByHostToIncludedNetwork orders the results by HostToIncludedNetwork terms.
func ByHostToIncludedNetwork(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostToIncludedNetworkStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependOnHostToHostDependencyCount orders the results by DependOnHostToHostDependency count.
func ByDependOnHostToHostDependencyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependOnHostToHostDependencyStep(), opts...)
	}
}

// ByDependOnHostToHostDependency orders the results by DependOnHostToHostDependency terms.
func ByDependOnHostToHostDependency(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependOnHostToHostDependencyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependByHostToHostDependencyCount orders the results by DependByHostToHostDependency count.
func ByDependByHostToHostDependencyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependByHostToHostDependencyStep(), opts...)
	}
}

// ByDependByHostToHostDependency orders the results by DependByHostToHostDependency terms.
func ByDependByHostToHostDependency(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependByHostToHostDependencyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHostToDiskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostToDiskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HostToDiskTable, HostToDiskColumn),
	)
}
func newHostToUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostToUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HostToUserTable, HostToUserColumn),
	)
}
func newHostToEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostToEnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HostToEnvironmentTable, HostToEnvironmentColumn),
	)
}
func newHostToIncludedNetworkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostToIncludedNetworkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, HostToIncludedNetworkTable, HostToIncludedNetworkPrimaryKey...),
	)
}
func newDependOnHostToHostDependencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependOnHostToHostDependencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependOnHostToHostDependencyTable, DependOnHostToHostDependencyColumn),
	)
}
func newDependByHostToHostDependencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependByHostToHostDependencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependByHostToHostDependencyTable, DependByHostToHostDependencyColumn),
	)
}
