// Code generated by ent, DO NOT EDIT.

package build

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldLTE(FieldID, id))
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldRevision, v))
}

// EnvironmentRevision applies equality check predicate on the "environment_revision" field. It's identical to EnvironmentRevisionEQ.
func EnvironmentRevision(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldEnvironmentRevision, v))
}

// CompletedPlan applies equality check predicate on the "completed_plan" field. It's identical to CompletedPlanEQ.
func CompletedPlan(v bool) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldCompletedPlan, v))
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldRevision, v))
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldRevision, v))
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldIn(FieldRevision, vs...))
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldNotIn(FieldRevision, vs...))
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v int) predicate.Build {
	return predicate.Build(sql.FieldGT(FieldRevision, v))
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v int) predicate.Build {
	return predicate.Build(sql.FieldGTE(FieldRevision, v))
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v int) predicate.Build {
	return predicate.Build(sql.FieldLT(FieldRevision, v))
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v int) predicate.Build {
	return predicate.Build(sql.FieldLTE(FieldRevision, v))
}

// EnvironmentRevisionEQ applies the EQ predicate on the "environment_revision" field.
func EnvironmentRevisionEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionNEQ applies the NEQ predicate on the "environment_revision" field.
func EnvironmentRevisionNEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionIn applies the In predicate on the "environment_revision" field.
func EnvironmentRevisionIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldIn(FieldEnvironmentRevision, vs...))
}

// EnvironmentRevisionNotIn applies the NotIn predicate on the "environment_revision" field.
func EnvironmentRevisionNotIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldNotIn(FieldEnvironmentRevision, vs...))
}

// EnvironmentRevisionGT applies the GT predicate on the "environment_revision" field.
func EnvironmentRevisionGT(v int) predicate.Build {
	return predicate.Build(sql.FieldGT(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionGTE applies the GTE predicate on the "environment_revision" field.
func EnvironmentRevisionGTE(v int) predicate.Build {
	return predicate.Build(sql.FieldGTE(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionLT applies the LT predicate on the "environment_revision" field.
func EnvironmentRevisionLT(v int) predicate.Build {
	return predicate.Build(sql.FieldLT(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionLTE applies the LTE predicate on the "environment_revision" field.
func EnvironmentRevisionLTE(v int) predicate.Build {
	return predicate.Build(sql.FieldLTE(FieldEnvironmentRevision, v))
}

// CompletedPlanEQ applies the EQ predicate on the "completed_plan" field.
func CompletedPlanEQ(v bool) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldCompletedPlan, v))
}

// CompletedPlanNEQ applies the NEQ predicate on the "completed_plan" field.
func CompletedPlanNEQ(v bool) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldCompletedPlan, v))
}

// HasBuildToStatus applies the HasEdge predicate on the "BuildToStatus" edge.
func HasBuildToStatus() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BuildToStatusTable, BuildToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToStatusWith applies the HasEdge predicate on the "BuildToStatus" edge with a given conditions (other predicates).
func HasBuildToStatusWith(preds ...predicate.Status) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToEnvironment applies the HasEdge predicate on the "BuildToEnvironment" edge.
func HasBuildToEnvironment() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildToEnvironmentTable, BuildToEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToEnvironmentWith applies the HasEdge predicate on the "BuildToEnvironment" edge with a given conditions (other predicates).
func HasBuildToEnvironmentWith(preds ...predicate.Environment) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToCompetition applies the HasEdge predicate on the "BuildToCompetition" edge.
func HasBuildToCompetition() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildToCompetitionTable, BuildToCompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToCompetitionWith applies the HasEdge predicate on the "BuildToCompetition" edge with a given conditions (other predicates).
func HasBuildToCompetitionWith(preds ...predicate.Competition) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToLatestBuildCommit applies the HasEdge predicate on the "BuildToLatestBuildCommit" edge.
func HasBuildToLatestBuildCommit() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildToLatestBuildCommitTable, BuildToLatestBuildCommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToLatestBuildCommitWith applies the HasEdge predicate on the "BuildToLatestBuildCommit" edge with a given conditions (other predicates).
func HasBuildToLatestBuildCommitWith(preds ...predicate.BuildCommit) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToLatestBuildCommitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToRepoCommit applies the HasEdge predicate on the "BuildToRepoCommit" edge.
func HasBuildToRepoCommit() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildToRepoCommitTable, BuildToRepoCommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToRepoCommitWith applies the HasEdge predicate on the "BuildToRepoCommit" edge with a given conditions (other predicates).
func HasBuildToRepoCommitWith(preds ...predicate.RepoCommit) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToRepoCommitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToProvisionedNetwork applies the HasEdge predicate on the "BuildToProvisionedNetwork" edge.
func HasBuildToProvisionedNetwork() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildToProvisionedNetworkTable, BuildToProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToProvisionedNetworkWith applies the HasEdge predicate on the "BuildToProvisionedNetwork" edge with a given conditions (other predicates).
func HasBuildToProvisionedNetworkWith(preds ...predicate.ProvisionedNetwork) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToProvisionedNetworkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToTeam applies the HasEdge predicate on the "BuildToTeam" edge.
func HasBuildToTeam() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildToTeamTable, BuildToTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToTeamWith applies the HasEdge predicate on the "BuildToTeam" edge with a given conditions (other predicates).
func HasBuildToTeamWith(preds ...predicate.Team) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToPlan applies the HasEdge predicate on the "BuildToPlan" edge.
func HasBuildToPlan() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildToPlanTable, BuildToPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToPlanWith applies the HasEdge predicate on the "BuildToPlan" edge with a given conditions (other predicates).
func HasBuildToPlanWith(preds ...predicate.Plan) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToBuildCommits applies the HasEdge predicate on the "BuildToBuildCommits" edge.
func HasBuildToBuildCommits() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildToBuildCommitsTable, BuildToBuildCommitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToBuildCommitsWith applies the HasEdge predicate on the "BuildToBuildCommits" edge with a given conditions (other predicates).
func HasBuildToBuildCommitsWith(preds ...predicate.BuildCommit) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToBuildCommitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToAdhocPlans applies the HasEdge predicate on the "BuildToAdhocPlans" edge.
func HasBuildToAdhocPlans() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildToAdhocPlansTable, BuildToAdhocPlansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToAdhocPlansWith applies the HasEdge predicate on the "BuildToAdhocPlans" edge with a given conditions (other predicates).
func HasBuildToAdhocPlansWith(preds ...predicate.AdhocPlan) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToAdhocPlansStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToAgentStatuses applies the HasEdge predicate on the "BuildToAgentStatuses" edge.
func HasBuildToAgentStatuses() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildToAgentStatusesTable, BuildToAgentStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToAgentStatusesWith applies the HasEdge predicate on the "BuildToAgentStatuses" edge with a given conditions (other predicates).
func HasBuildToAgentStatusesWith(preds ...predicate.AgentStatus) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToAgentStatusesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildToServerTasks applies the HasEdge predicate on the "BuildToServerTasks" edge.
func HasBuildToServerTasks() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildToServerTasksTable, BuildToServerTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildToServerTasksWith applies the HasEdge predicate on the "BuildToServerTasks" edge with a given conditions (other predicates).
func HasBuildToServerTasksWith(preds ...predicate.ServerTask) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildToServerTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Build) predicate.Build {
	return predicate.Build(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Build) predicate.Build {
	return predicate.Build(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Build) predicate.Build {
	return predicate.Build(sql.NotPredicates(p))
}
