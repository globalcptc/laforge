// Code generated by ent, DO NOT EDIT.

package build

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Build {
	return predicate.Build(sql.FieldLTE(FieldID, id))
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldRevision, v))
}

// EnvironmentRevision applies equality check predicate on the "environment_revision" field. It's identical to EnvironmentRevisionEQ.
func EnvironmentRevision(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldEnvironmentRevision, v))
}

// CompletedPlan applies equality check predicate on the "completed_plan" field. It's identical to CompletedPlanEQ.
func CompletedPlan(v bool) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldCompletedPlan, v))
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldRevision, v))
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldRevision, v))
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldIn(FieldRevision, vs...))
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldNotIn(FieldRevision, vs...))
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v int) predicate.Build {
	return predicate.Build(sql.FieldGT(FieldRevision, v))
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v int) predicate.Build {
	return predicate.Build(sql.FieldGTE(FieldRevision, v))
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v int) predicate.Build {
	return predicate.Build(sql.FieldLT(FieldRevision, v))
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v int) predicate.Build {
	return predicate.Build(sql.FieldLTE(FieldRevision, v))
}

// EnvironmentRevisionEQ applies the EQ predicate on the "environment_revision" field.
func EnvironmentRevisionEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionNEQ applies the NEQ predicate on the "environment_revision" field.
func EnvironmentRevisionNEQ(v int) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionIn applies the In predicate on the "environment_revision" field.
func EnvironmentRevisionIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldIn(FieldEnvironmentRevision, vs...))
}

// EnvironmentRevisionNotIn applies the NotIn predicate on the "environment_revision" field.
func EnvironmentRevisionNotIn(vs ...int) predicate.Build {
	return predicate.Build(sql.FieldNotIn(FieldEnvironmentRevision, vs...))
}

// EnvironmentRevisionGT applies the GT predicate on the "environment_revision" field.
func EnvironmentRevisionGT(v int) predicate.Build {
	return predicate.Build(sql.FieldGT(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionGTE applies the GTE predicate on the "environment_revision" field.
func EnvironmentRevisionGTE(v int) predicate.Build {
	return predicate.Build(sql.FieldGTE(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionLT applies the LT predicate on the "environment_revision" field.
func EnvironmentRevisionLT(v int) predicate.Build {
	return predicate.Build(sql.FieldLT(FieldEnvironmentRevision, v))
}

// EnvironmentRevisionLTE applies the LTE predicate on the "environment_revision" field.
func EnvironmentRevisionLTE(v int) predicate.Build {
	return predicate.Build(sql.FieldLTE(FieldEnvironmentRevision, v))
}

// CompletedPlanEQ applies the EQ predicate on the "completed_plan" field.
func CompletedPlanEQ(v bool) predicate.Build {
	return predicate.Build(sql.FieldEQ(FieldCompletedPlan, v))
}

// CompletedPlanNEQ applies the NEQ predicate on the "completed_plan" field.
func CompletedPlanNEQ(v bool) predicate.Build {
	return predicate.Build(sql.FieldNEQ(FieldCompletedPlan, v))
}

// HasStatus applies the HasEdge predicate on the "Status" edge.
func HasStatus() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "Status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.Status) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironment applies the HasEdge predicate on the "Environment" edge.
func HasEnvironment() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "Environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompetition applies the HasEdge predicate on the "Competition" edge.
func HasCompetition() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "Competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLatestBuildCommit applies the HasEdge predicate on the "LatestBuildCommit" edge.
func HasLatestBuildCommit() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LatestBuildCommitTable, LatestBuildCommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLatestBuildCommitWith applies the HasEdge predicate on the "LatestBuildCommit" edge with a given conditions (other predicates).
func HasLatestBuildCommitWith(preds ...predicate.BuildCommit) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newLatestBuildCommitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRepoCommit applies the HasEdge predicate on the "RepoCommit" edge.
func HasRepoCommit() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RepoCommitTable, RepoCommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepoCommitWith applies the HasEdge predicate on the "RepoCommit" edge with a given conditions (other predicates).
func HasRepoCommitWith(preds ...predicate.RepoCommit) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newRepoCommitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedNetworks applies the HasEdge predicate on the "ProvisionedNetworks" edge.
func HasProvisionedNetworks() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedNetworksTable, ProvisionedNetworksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworksWith applies the HasEdge predicate on the "ProvisionedNetworks" edge with a given conditions (other predicates).
func HasProvisionedNetworksWith(preds ...predicate.ProvisionedNetwork) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newProvisionedNetworksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeams applies the HasEdge predicate on the "Teams" edge.
func HasTeams() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TeamsTable, TeamsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamsWith applies the HasEdge predicate on the "Teams" edge with a given conditions (other predicates).
func HasTeamsWith(preds ...predicate.Team) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newTeamsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlans applies the HasEdge predicate on the "Plans" edge.
func HasPlans() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PlansTable, PlansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlansWith applies the HasEdge predicate on the "Plans" edge with a given conditions (other predicates).
func HasPlansWith(preds ...predicate.Plan) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newPlansStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildCommits applies the HasEdge predicate on the "BuildCommits" edge.
func HasBuildCommits() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildCommitsTable, BuildCommitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildCommitsWith applies the HasEdge predicate on the "BuildCommits" edge with a given conditions (other predicates).
func HasBuildCommitsWith(preds ...predicate.BuildCommit) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newBuildCommitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdhocPlans applies the HasEdge predicate on the "AdhocPlans" edge.
func HasAdhocPlans() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AdhocPlansTable, AdhocPlansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdhocPlansWith applies the HasEdge predicate on the "AdhocPlans" edge with a given conditions (other predicates).
func HasAdhocPlansWith(preds ...predicate.AdhocPlan) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newAdhocPlansStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgentStatuses applies the HasEdge predicate on the "AgentStatuses" edge.
func HasAgentStatuses() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AgentStatusesTable, AgentStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentStatusesWith applies the HasEdge predicate on the "AgentStatuses" edge with a given conditions (other predicates).
func HasAgentStatusesWith(preds ...predicate.AgentStatus) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newAgentStatusesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTasks applies the HasEdge predicate on the "ServerTasks" edge.
func HasServerTasks() predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ServerTasksTable, ServerTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTasksWith applies the HasEdge predicate on the "ServerTasks" edge with a given conditions (other predicates).
func HasServerTasksWith(preds ...predicate.ServerTask) predicate.Build {
	return predicate.Build(func(s *sql.Selector) {
		step := newServerTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Build) predicate.Build {
	return predicate.Build(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Build) predicate.Build {
	return predicate.Build(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Build) predicate.Build {
	return predicate.Build(sql.NotPredicates(p))
}
