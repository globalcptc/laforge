// Code generated by ent, DO NOT EDIT.

package build

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the build type in the database.
	Label = "build"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldEnvironmentRevision holds the string denoting the environment_revision field in the database.
	FieldEnvironmentRevision = "environment_revision"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldCompletedPlan holds the string denoting the completed_plan field in the database.
	FieldCompletedPlan = "completed_plan"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "Status"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// EdgeCompetition holds the string denoting the competition edge name in mutations.
	EdgeCompetition = "Competition"
	// EdgeLatestBuildCommit holds the string denoting the latestbuildcommit edge name in mutations.
	EdgeLatestBuildCommit = "LatestBuildCommit"
	// EdgeRepoCommit holds the string denoting the repocommit edge name in mutations.
	EdgeRepoCommit = "RepoCommit"
	// EdgeProvisionedNetworks holds the string denoting the provisionednetworks edge name in mutations.
	EdgeProvisionedNetworks = "ProvisionedNetworks"
	// EdgeTeams holds the string denoting the teams edge name in mutations.
	EdgeTeams = "Teams"
	// EdgePlans holds the string denoting the plans edge name in mutations.
	EdgePlans = "Plans"
	// EdgeBuildCommits holds the string denoting the buildcommits edge name in mutations.
	EdgeBuildCommits = "BuildCommits"
	// EdgeAdhocPlans holds the string denoting the adhocplans edge name in mutations.
	EdgeAdhocPlans = "AdhocPlans"
	// EdgeAgentStatuses holds the string denoting the agentstatuses edge name in mutations.
	EdgeAgentStatuses = "AgentStatuses"
	// EdgeServerTasks holds the string denoting the servertasks edge name in mutations.
	EdgeServerTasks = "ServerTasks"
	// Table holds the table name of the build in the database.
	Table = "builds"
	// StatusTable is the table that holds the Status relation/edge.
	StatusTable = "status"
	// StatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	StatusInverseTable = "status"
	// StatusColumn is the table column denoting the Status relation/edge.
	StatusColumn = "build_status"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "builds"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "build_environment"
	// CompetitionTable is the table that holds the Competition relation/edge.
	CompetitionTable = "builds"
	// CompetitionInverseTable is the table name for the Competition entity.
	// It exists in this package in order to avoid circular dependency with the "competition" package.
	CompetitionInverseTable = "competitions"
	// CompetitionColumn is the table column denoting the Competition relation/edge.
	CompetitionColumn = "build_competition"
	// LatestBuildCommitTable is the table that holds the LatestBuildCommit relation/edge.
	LatestBuildCommitTable = "builds"
	// LatestBuildCommitInverseTable is the table name for the BuildCommit entity.
	// It exists in this package in order to avoid circular dependency with the "buildcommit" package.
	LatestBuildCommitInverseTable = "build_commits"
	// LatestBuildCommitColumn is the table column denoting the LatestBuildCommit relation/edge.
	LatestBuildCommitColumn = "build_latest_build_commit"
	// RepoCommitTable is the table that holds the RepoCommit relation/edge.
	RepoCommitTable = "builds"
	// RepoCommitInverseTable is the table name for the RepoCommit entity.
	// It exists in this package in order to avoid circular dependency with the "repocommit" package.
	RepoCommitInverseTable = "repo_commits"
	// RepoCommitColumn is the table column denoting the RepoCommit relation/edge.
	RepoCommitColumn = "build_repo_commit"
	// ProvisionedNetworksTable is the table that holds the ProvisionedNetworks relation/edge.
	ProvisionedNetworksTable = "provisioned_networks"
	// ProvisionedNetworksInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	ProvisionedNetworksInverseTable = "provisioned_networks"
	// ProvisionedNetworksColumn is the table column denoting the ProvisionedNetworks relation/edge.
	ProvisionedNetworksColumn = "provisioned_network_build"
	// TeamsTable is the table that holds the Teams relation/edge.
	TeamsTable = "teams"
	// TeamsInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamsInverseTable = "teams"
	// TeamsColumn is the table column denoting the Teams relation/edge.
	TeamsColumn = "team_build"
	// PlansTable is the table that holds the Plans relation/edge.
	PlansTable = "plans"
	// PlansInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlansInverseTable = "plans"
	// PlansColumn is the table column denoting the Plans relation/edge.
	PlansColumn = "plan_build"
	// BuildCommitsTable is the table that holds the BuildCommits relation/edge.
	BuildCommitsTable = "build_commits"
	// BuildCommitsInverseTable is the table name for the BuildCommit entity.
	// It exists in this package in order to avoid circular dependency with the "buildcommit" package.
	BuildCommitsInverseTable = "build_commits"
	// BuildCommitsColumn is the table column denoting the BuildCommits relation/edge.
	BuildCommitsColumn = "build_commit_build"
	// AdhocPlansTable is the table that holds the AdhocPlans relation/edge.
	AdhocPlansTable = "adhoc_plans"
	// AdhocPlansInverseTable is the table name for the AdhocPlan entity.
	// It exists in this package in order to avoid circular dependency with the "adhocplan" package.
	AdhocPlansInverseTable = "adhoc_plans"
	// AdhocPlansColumn is the table column denoting the AdhocPlans relation/edge.
	AdhocPlansColumn = "adhoc_plan_build"
	// AgentStatusesTable is the table that holds the AgentStatuses relation/edge.
	AgentStatusesTable = "agent_status"
	// AgentStatusesInverseTable is the table name for the AgentStatus entity.
	// It exists in this package in order to avoid circular dependency with the "agentstatus" package.
	AgentStatusesInverseTable = "agent_status"
	// AgentStatusesColumn is the table column denoting the AgentStatuses relation/edge.
	AgentStatusesColumn = "agent_status_build"
	// ServerTasksTable is the table that holds the ServerTasks relation/edge.
	ServerTasksTable = "server_tasks"
	// ServerTasksInverseTable is the table name for the ServerTask entity.
	// It exists in this package in order to avoid circular dependency with the "servertask" package.
	ServerTasksInverseTable = "server_tasks"
	// ServerTasksColumn is the table column denoting the ServerTasks relation/edge.
	ServerTasksColumn = "server_task_build"
)

// Columns holds all SQL columns for build fields.
var Columns = []string{
	FieldID,
	FieldRevision,
	FieldEnvironmentRevision,
	FieldVars,
	FieldCompletedPlan,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "builds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"build_environment",
	"build_competition",
	"build_latest_build_commit",
	"build_repo_commit",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCompletedPlan holds the default value on creation for the "completed_plan" field.
	DefaultCompletedPlan bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
