// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// AdhocPlan is the model entity for the AdhocPlan schema.
type AdhocPlan struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdhocPlanQuery when eager-loading is set.
	Edges AdhocPlanEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// PrevAdhocPlans holds the value of the PrevAdhocPlans edge.
	HCLPrevAdhocPlans []*AdhocPlan `json:"PrevAdhocPlans,omitempty"`
	// NextAdhocPlans holds the value of the NextAdhocPlans edge.
	HCLNextAdhocPlans []*AdhocPlan `json:"NextAdhocPlans,omitempty"`
	// Build holds the value of the Build edge.
	HCLBuild *Build `json:"Build,omitempty"`
	// Status holds the value of the Status edge.
	HCLStatus *Status `json:"Status,omitempty"`
	// AgentTask holds the value of the AgentTask edge.
	HCLAgentTask *AgentTask `json:"AgentTask,omitempty"`
	//
	adhoc_plan_build      *uuid.UUID
	adhoc_plan_agent_task *uuid.UUID
}

// AdhocPlanEdges holds the relations/edges for other nodes in the graph.
type AdhocPlanEdges struct {
	// PrevAdhocPlans holds the value of the PrevAdhocPlans edge.
	PrevAdhocPlans []*AdhocPlan `json:"PrevAdhocPlans,omitempty"`
	// NextAdhocPlans holds the value of the NextAdhocPlans edge.
	NextAdhocPlans []*AdhocPlan `json:"NextAdhocPlans,omitempty"`
	// Build holds the value of the Build edge.
	Build *Build `json:"Build,omitempty"`
	// Status holds the value of the Status edge.
	Status *Status `json:"Status,omitempty"`
	// AgentTask holds the value of the AgentTask edge.
	AgentTask *AgentTask `json:"AgentTask,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PrevAdhocPlansOrErr returns the PrevAdhocPlans value or an error if the edge
// was not loaded in eager-loading.
func (e AdhocPlanEdges) PrevAdhocPlansOrErr() ([]*AdhocPlan, error) {
	if e.loadedTypes[0] {
		return e.PrevAdhocPlans, nil
	}
	return nil, &NotLoadedError{edge: "PrevAdhocPlans"}
}

// NextAdhocPlansOrErr returns the NextAdhocPlans value or an error if the edge
// was not loaded in eager-loading.
func (e AdhocPlanEdges) NextAdhocPlansOrErr() ([]*AdhocPlan, error) {
	if e.loadedTypes[1] {
		return e.NextAdhocPlans, nil
	}
	return nil, &NotLoadedError{edge: "NextAdhocPlans"}
}

// BuildOrErr returns the Build value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdhocPlanEdges) BuildOrErr() (*Build, error) {
	if e.loadedTypes[2] {
		if e.Build == nil {
			// The edge Build was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.Build, nil
	}
	return nil, &NotLoadedError{edge: "Build"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdhocPlanEdges) StatusOrErr() (*Status, error) {
	if e.loadedTypes[3] {
		if e.Status == nil {
			// The edge Status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "Status"}
}

// AgentTaskOrErr returns the AgentTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdhocPlanEdges) AgentTaskOrErr() (*AgentTask, error) {
	if e.loadedTypes[4] {
		if e.AgentTask == nil {
			// The edge AgentTask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agenttask.Label}
		}
		return e.AgentTask, nil
	}
	return nil, &NotLoadedError{edge: "AgentTask"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdhocPlan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adhocplan.FieldID:
			values[i] = new(uuid.UUID)
		case adhocplan.ForeignKeys[0]: // adhoc_plan_build
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case adhocplan.ForeignKeys[1]: // adhoc_plan_agent_task
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdhocPlan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdhocPlan fields.
func (ap *AdhocPlan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adhocplan.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ap.ID = *value
			}
		case adhocplan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field adhoc_plan_build", values[i])
			} else if value.Valid {
				ap.adhoc_plan_build = new(uuid.UUID)
				*ap.adhoc_plan_build = *value.S.(*uuid.UUID)
			}
		case adhocplan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field adhoc_plan_agent_task", values[i])
			} else if value.Valid {
				ap.adhoc_plan_agent_task = new(uuid.UUID)
				*ap.adhoc_plan_agent_task = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryPrevAdhocPlans queries the "PrevAdhocPlans" edge of the AdhocPlan entity.
func (ap *AdhocPlan) QueryPrevAdhocPlans() *AdhocPlanQuery {
	return (&AdhocPlanClient{config: ap.config}).QueryPrevAdhocPlans(ap)
}

// QueryNextAdhocPlans queries the "NextAdhocPlans" edge of the AdhocPlan entity.
func (ap *AdhocPlan) QueryNextAdhocPlans() *AdhocPlanQuery {
	return (&AdhocPlanClient{config: ap.config}).QueryNextAdhocPlans(ap)
}

// QueryBuild queries the "Build" edge of the AdhocPlan entity.
func (ap *AdhocPlan) QueryBuild() *BuildQuery {
	return (&AdhocPlanClient{config: ap.config}).QueryBuild(ap)
}

// QueryStatus queries the "Status" edge of the AdhocPlan entity.
func (ap *AdhocPlan) QueryStatus() *StatusQuery {
	return (&AdhocPlanClient{config: ap.config}).QueryStatus(ap)
}

// QueryAgentTask queries the "AgentTask" edge of the AdhocPlan entity.
func (ap *AdhocPlan) QueryAgentTask() *AgentTaskQuery {
	return (&AdhocPlanClient{config: ap.config}).QueryAgentTask(ap)
}

// Update returns a builder for updating this AdhocPlan.
// Note that you need to call AdhocPlan.Unwrap() before calling this method if this AdhocPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AdhocPlan) Update() *AdhocPlanUpdateOne {
	return (&AdhocPlanClient{config: ap.config}).UpdateOne(ap)
}

// Unwrap unwraps the AdhocPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AdhocPlan) Unwrap() *AdhocPlan {
	tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdhocPlan is not a transactional entity")
	}
	ap.config.driver = tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AdhocPlan) String() string {
	var builder strings.Builder
	builder.WriteString("AdhocPlan(")
	builder.WriteString(fmt.Sprintf("id=%v", ap.ID))
	builder.WriteByte(')')
	return builder.String()
}

// AdhocPlans is a parsable slice of AdhocPlan.
type AdhocPlans []*AdhocPlan

func (ap AdhocPlans) config(cfg config) {
	for _i := range ap {
		ap[_i].config = cfg
	}
}
