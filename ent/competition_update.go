// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// CompetitionUpdate is the builder for updating Competition entities.
type CompetitionUpdate struct {
	config
	hooks    []Hook
	mutation *CompetitionMutation
}

// Where appends a list predicates to the CompetitionUpdate builder.
func (cu *CompetitionUpdate) Where(ps ...predicate.Competition) *CompetitionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetHCLID sets the "hcl_id" field.
func (cu *CompetitionUpdate) SetHCLID(s string) *CompetitionUpdate {
	cu.mutation.SetHCLID(s)
	return cu
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableHCLID(s *string) *CompetitionUpdate {
	if s != nil {
		cu.SetHCLID(*s)
	}
	return cu
}

// SetRootPassword sets the "root_password" field.
func (cu *CompetitionUpdate) SetRootPassword(s string) *CompetitionUpdate {
	cu.mutation.SetRootPassword(s)
	return cu
}

// SetNillableRootPassword sets the "root_password" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableRootPassword(s *string) *CompetitionUpdate {
	if s != nil {
		cu.SetRootPassword(*s)
	}
	return cu
}

// SetConfig sets the "config" field.
func (cu *CompetitionUpdate) SetConfig(m map[string]string) *CompetitionUpdate {
	cu.mutation.SetConfig(m)
	return cu
}

// SetTags sets the "tags" field.
func (cu *CompetitionUpdate) SetTags(m map[string]string) *CompetitionUpdate {
	cu.mutation.SetTags(m)
	return cu
}

// AddCompetitionToDNSIDs adds the "CompetitionToDNS" edge to the DNS entity by IDs.
func (cu *CompetitionUpdate) AddCompetitionToDNSIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddCompetitionToDNSIDs(ids...)
	return cu
}

// AddCompetitionToDNS adds the "CompetitionToDNS" edges to the DNS entity.
func (cu *CompetitionUpdate) AddCompetitionToDNS(d ...*DNS) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddCompetitionToDNSIDs(ids...)
}

// SetCompetitionToEnvironmentID sets the "CompetitionToEnvironment" edge to the Environment entity by ID.
func (cu *CompetitionUpdate) SetCompetitionToEnvironmentID(id uuid.UUID) *CompetitionUpdate {
	cu.mutation.SetCompetitionToEnvironmentID(id)
	return cu
}

// SetNillableCompetitionToEnvironmentID sets the "CompetitionToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableCompetitionToEnvironmentID(id *uuid.UUID) *CompetitionUpdate {
	if id != nil {
		cu = cu.SetCompetitionToEnvironmentID(*id)
	}
	return cu
}

// SetCompetitionToEnvironment sets the "CompetitionToEnvironment" edge to the Environment entity.
func (cu *CompetitionUpdate) SetCompetitionToEnvironment(e *Environment) *CompetitionUpdate {
	return cu.SetCompetitionToEnvironmentID(e.ID)
}

// AddCompetitionToBuildIDs adds the "CompetitionToBuild" edge to the Build entity by IDs.
func (cu *CompetitionUpdate) AddCompetitionToBuildIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddCompetitionToBuildIDs(ids...)
	return cu
}

// AddCompetitionToBuild adds the "CompetitionToBuild" edges to the Build entity.
func (cu *CompetitionUpdate) AddCompetitionToBuild(b ...*Build) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddCompetitionToBuildIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cu *CompetitionUpdate) Mutation() *CompetitionMutation {
	return cu.mutation
}

// ClearCompetitionToDNS clears all "CompetitionToDNS" edges to the DNS entity.
func (cu *CompetitionUpdate) ClearCompetitionToDNS() *CompetitionUpdate {
	cu.mutation.ClearCompetitionToDNS()
	return cu
}

// RemoveCompetitionToDNSIDs removes the "CompetitionToDNS" edge to DNS entities by IDs.
func (cu *CompetitionUpdate) RemoveCompetitionToDNSIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveCompetitionToDNSIDs(ids...)
	return cu
}

// RemoveCompetitionToDNS removes "CompetitionToDNS" edges to DNS entities.
func (cu *CompetitionUpdate) RemoveCompetitionToDNS(d ...*DNS) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveCompetitionToDNSIDs(ids...)
}

// ClearCompetitionToEnvironment clears the "CompetitionToEnvironment" edge to the Environment entity.
func (cu *CompetitionUpdate) ClearCompetitionToEnvironment() *CompetitionUpdate {
	cu.mutation.ClearCompetitionToEnvironment()
	return cu
}

// ClearCompetitionToBuild clears all "CompetitionToBuild" edges to the Build entity.
func (cu *CompetitionUpdate) ClearCompetitionToBuild() *CompetitionUpdate {
	cu.mutation.ClearCompetitionToBuild()
	return cu
}

// RemoveCompetitionToBuildIDs removes the "CompetitionToBuild" edge to Build entities by IDs.
func (cu *CompetitionUpdate) RemoveCompetitionToBuildIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveCompetitionToBuildIDs(ids...)
	return cu
}

// RemoveCompetitionToBuild removes "CompetitionToBuild" edges to Build entities.
func (cu *CompetitionUpdate) RemoveCompetitionToBuild(b ...*Build) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveCompetitionToBuildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompetitionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompetitionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompetitionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompetitionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CompetitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(competition.Table, competition.Columns, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.HCLID(); ok {
		_spec.SetField(competition.FieldHCLID, field.TypeString, value)
	}
	if value, ok := cu.mutation.RootPassword(); ok {
		_spec.SetField(competition.FieldRootPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.Config(); ok {
		_spec.SetField(competition.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.SetField(competition.FieldTags, field.TypeJSON, value)
	}
	if cu.mutation.CompetitionToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.CompetitionToDNSTable,
			Columns: competition.CompetitionToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dns.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCompetitionToDNSIDs(); len(nodes) > 0 && !cu.mutation.CompetitionToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.CompetitionToDNSTable,
			Columns: competition.CompetitionToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dns.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CompetitionToDNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.CompetitionToDNSTable,
			Columns: competition.CompetitionToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dns.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CompetitionToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.CompetitionToEnvironmentTable,
			Columns: []string{competition.CompetitionToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CompetitionToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.CompetitionToEnvironmentTable,
			Columns: []string{competition.CompetitionToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CompetitionToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.CompetitionToBuildTable,
			Columns: []string{competition.CompetitionToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCompetitionToBuildIDs(); len(nodes) > 0 && !cu.mutation.CompetitionToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.CompetitionToBuildTable,
			Columns: []string{competition.CompetitionToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CompetitionToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.CompetitionToBuildTable,
			Columns: []string{competition.CompetitionToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompetitionUpdateOne is the builder for updating a single Competition entity.
type CompetitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompetitionMutation
}

// SetHCLID sets the "hcl_id" field.
func (cuo *CompetitionUpdateOne) SetHCLID(s string) *CompetitionUpdateOne {
	cuo.mutation.SetHCLID(s)
	return cuo
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableHCLID(s *string) *CompetitionUpdateOne {
	if s != nil {
		cuo.SetHCLID(*s)
	}
	return cuo
}

// SetRootPassword sets the "root_password" field.
func (cuo *CompetitionUpdateOne) SetRootPassword(s string) *CompetitionUpdateOne {
	cuo.mutation.SetRootPassword(s)
	return cuo
}

// SetNillableRootPassword sets the "root_password" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableRootPassword(s *string) *CompetitionUpdateOne {
	if s != nil {
		cuo.SetRootPassword(*s)
	}
	return cuo
}

// SetConfig sets the "config" field.
func (cuo *CompetitionUpdateOne) SetConfig(m map[string]string) *CompetitionUpdateOne {
	cuo.mutation.SetConfig(m)
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *CompetitionUpdateOne) SetTags(m map[string]string) *CompetitionUpdateOne {
	cuo.mutation.SetTags(m)
	return cuo
}

// AddCompetitionToDNSIDs adds the "CompetitionToDNS" edge to the DNS entity by IDs.
func (cuo *CompetitionUpdateOne) AddCompetitionToDNSIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddCompetitionToDNSIDs(ids...)
	return cuo
}

// AddCompetitionToDNS adds the "CompetitionToDNS" edges to the DNS entity.
func (cuo *CompetitionUpdateOne) AddCompetitionToDNS(d ...*DNS) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddCompetitionToDNSIDs(ids...)
}

// SetCompetitionToEnvironmentID sets the "CompetitionToEnvironment" edge to the Environment entity by ID.
func (cuo *CompetitionUpdateOne) SetCompetitionToEnvironmentID(id uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.SetCompetitionToEnvironmentID(id)
	return cuo
}

// SetNillableCompetitionToEnvironmentID sets the "CompetitionToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableCompetitionToEnvironmentID(id *uuid.UUID) *CompetitionUpdateOne {
	if id != nil {
		cuo = cuo.SetCompetitionToEnvironmentID(*id)
	}
	return cuo
}

// SetCompetitionToEnvironment sets the "CompetitionToEnvironment" edge to the Environment entity.
func (cuo *CompetitionUpdateOne) SetCompetitionToEnvironment(e *Environment) *CompetitionUpdateOne {
	return cuo.SetCompetitionToEnvironmentID(e.ID)
}

// AddCompetitionToBuildIDs adds the "CompetitionToBuild" edge to the Build entity by IDs.
func (cuo *CompetitionUpdateOne) AddCompetitionToBuildIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddCompetitionToBuildIDs(ids...)
	return cuo
}

// AddCompetitionToBuild adds the "CompetitionToBuild" edges to the Build entity.
func (cuo *CompetitionUpdateOne) AddCompetitionToBuild(b ...*Build) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddCompetitionToBuildIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cuo *CompetitionUpdateOne) Mutation() *CompetitionMutation {
	return cuo.mutation
}

// ClearCompetitionToDNS clears all "CompetitionToDNS" edges to the DNS entity.
func (cuo *CompetitionUpdateOne) ClearCompetitionToDNS() *CompetitionUpdateOne {
	cuo.mutation.ClearCompetitionToDNS()
	return cuo
}

// RemoveCompetitionToDNSIDs removes the "CompetitionToDNS" edge to DNS entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveCompetitionToDNSIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveCompetitionToDNSIDs(ids...)
	return cuo
}

// RemoveCompetitionToDNS removes "CompetitionToDNS" edges to DNS entities.
func (cuo *CompetitionUpdateOne) RemoveCompetitionToDNS(d ...*DNS) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveCompetitionToDNSIDs(ids...)
}

// ClearCompetitionToEnvironment clears the "CompetitionToEnvironment" edge to the Environment entity.
func (cuo *CompetitionUpdateOne) ClearCompetitionToEnvironment() *CompetitionUpdateOne {
	cuo.mutation.ClearCompetitionToEnvironment()
	return cuo
}

// ClearCompetitionToBuild clears all "CompetitionToBuild" edges to the Build entity.
func (cuo *CompetitionUpdateOne) ClearCompetitionToBuild() *CompetitionUpdateOne {
	cuo.mutation.ClearCompetitionToBuild()
	return cuo
}

// RemoveCompetitionToBuildIDs removes the "CompetitionToBuild" edge to Build entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveCompetitionToBuildIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveCompetitionToBuildIDs(ids...)
	return cuo
}

// RemoveCompetitionToBuild removes "CompetitionToBuild" edges to Build entities.
func (cuo *CompetitionUpdateOne) RemoveCompetitionToBuild(b ...*Build) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveCompetitionToBuildIDs(ids...)
}

// Where appends a list predicates to the CompetitionUpdate builder.
func (cuo *CompetitionUpdateOne) Where(ps ...predicate.Competition) *CompetitionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompetitionUpdateOne) Select(field string, fields ...string) *CompetitionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Competition entity.
func (cuo *CompetitionUpdateOne) Save(ctx context.Context) (*Competition, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) SaveX(ctx context.Context) *Competition {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompetitionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CompetitionUpdateOne) sqlSave(ctx context.Context) (_node *Competition, err error) {
	_spec := sqlgraph.NewUpdateSpec(competition.Table, competition.Columns, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Competition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, competition.FieldID)
		for _, f := range fields {
			if !competition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != competition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.HCLID(); ok {
		_spec.SetField(competition.FieldHCLID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.RootPassword(); ok {
		_spec.SetField(competition.FieldRootPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Config(); ok {
		_spec.SetField(competition.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.SetField(competition.FieldTags, field.TypeJSON, value)
	}
	if cuo.mutation.CompetitionToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.CompetitionToDNSTable,
			Columns: competition.CompetitionToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dns.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCompetitionToDNSIDs(); len(nodes) > 0 && !cuo.mutation.CompetitionToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.CompetitionToDNSTable,
			Columns: competition.CompetitionToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dns.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CompetitionToDNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.CompetitionToDNSTable,
			Columns: competition.CompetitionToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dns.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CompetitionToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.CompetitionToEnvironmentTable,
			Columns: []string{competition.CompetitionToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CompetitionToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.CompetitionToEnvironmentTable,
			Columns: []string{competition.CompetitionToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CompetitionToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.CompetitionToBuildTable,
			Columns: []string{competition.CompetitionToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCompetitionToBuildIDs(); len(nodes) > 0 && !cuo.mutation.CompetitionToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.CompetitionToBuildTable,
			Columns: []string{competition.CompetitionToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CompetitionToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.CompetitionToBuildTable,
			Columns: []string{competition.CompetitionToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Competition{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
