// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// CompetitionUpdate is the builder for updating Competition entities.
type CompetitionUpdate struct {
	config
	hooks    []Hook
	mutation *CompetitionMutation
}

// Where appends a list predicates to the CompetitionUpdate builder.
func (cu *CompetitionUpdate) Where(ps ...predicate.Competition) *CompetitionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetHclID sets the "hcl_id" field.
func (cu *CompetitionUpdate) SetHclID(s string) *CompetitionUpdate {
	cu.mutation.SetHclID(s)
	return cu
}

// SetRootPassword sets the "root_password" field.
func (cu *CompetitionUpdate) SetRootPassword(s string) *CompetitionUpdate {
	cu.mutation.SetRootPassword(s)
	return cu
}

// SetStartTime sets the "start_time" field.
func (cu *CompetitionUpdate) SetStartTime(i int64) *CompetitionUpdate {
	cu.mutation.ResetStartTime()
	cu.mutation.SetStartTime(i)
	return cu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableStartTime(i *int64) *CompetitionUpdate {
	if i != nil {
		cu.SetStartTime(*i)
	}
	return cu
}

// AddStartTime adds i to the "start_time" field.
func (cu *CompetitionUpdate) AddStartTime(i int64) *CompetitionUpdate {
	cu.mutation.AddStartTime(i)
	return cu
}

// ClearStartTime clears the value of the "start_time" field.
func (cu *CompetitionUpdate) ClearStartTime() *CompetitionUpdate {
	cu.mutation.ClearStartTime()
	return cu
}

// SetStopTime sets the "stop_time" field.
func (cu *CompetitionUpdate) SetStopTime(i int64) *CompetitionUpdate {
	cu.mutation.ResetStopTime()
	cu.mutation.SetStopTime(i)
	return cu
}

// SetNillableStopTime sets the "stop_time" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableStopTime(i *int64) *CompetitionUpdate {
	if i != nil {
		cu.SetStopTime(*i)
	}
	return cu
}

// AddStopTime adds i to the "stop_time" field.
func (cu *CompetitionUpdate) AddStopTime(i int64) *CompetitionUpdate {
	cu.mutation.AddStopTime(i)
	return cu
}

// ClearStopTime clears the value of the "stop_time" field.
func (cu *CompetitionUpdate) ClearStopTime() *CompetitionUpdate {
	cu.mutation.ClearStopTime()
	return cu
}

// SetConfig sets the "config" field.
func (cu *CompetitionUpdate) SetConfig(m map[string]string) *CompetitionUpdate {
	cu.mutation.SetConfig(m)
	return cu
}

// SetTags sets the "tags" field.
func (cu *CompetitionUpdate) SetTags(m map[string]string) *CompetitionUpdate {
	cu.mutation.SetTags(m)
	return cu
}

// AddDNSIDs adds the "DNS" edge to the DNS entity by IDs.
func (cu *CompetitionUpdate) AddDNSIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddDNSIDs(ids...)
	return cu
}

// AddDNS adds the "DNS" edges to the DNS entity.
func (cu *CompetitionUpdate) AddDNS(d ...*DNS) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDNSIDs(ids...)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (cu *CompetitionUpdate) SetEnvironmentID(id uuid.UUID) *CompetitionUpdate {
	cu.mutation.SetEnvironmentID(id)
	return cu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableEnvironmentID(id *uuid.UUID) *CompetitionUpdate {
	if id != nil {
		cu = cu.SetEnvironmentID(*id)
	}
	return cu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (cu *CompetitionUpdate) SetEnvironment(e *Environment) *CompetitionUpdate {
	return cu.SetEnvironmentID(e.ID)
}

// AddBuildIDs adds the "Builds" edge to the Build entity by IDs.
func (cu *CompetitionUpdate) AddBuildIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddBuildIDs(ids...)
	return cu
}

// AddBuilds adds the "Builds" edges to the Build entity.
func (cu *CompetitionUpdate) AddBuilds(b ...*Build) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBuildIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cu *CompetitionUpdate) Mutation() *CompetitionMutation {
	return cu.mutation
}

// ClearDNS clears all "DNS" edges to the DNS entity.
func (cu *CompetitionUpdate) ClearDNS() *CompetitionUpdate {
	cu.mutation.ClearDNS()
	return cu
}

// RemoveDNSIDs removes the "DNS" edge to DNS entities by IDs.
func (cu *CompetitionUpdate) RemoveDNSIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveDNSIDs(ids...)
	return cu
}

// RemoveDNS removes "DNS" edges to DNS entities.
func (cu *CompetitionUpdate) RemoveDNS(d ...*DNS) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDNSIDs(ids...)
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (cu *CompetitionUpdate) ClearEnvironment() *CompetitionUpdate {
	cu.mutation.ClearEnvironment()
	return cu
}

// ClearBuilds clears all "Builds" edges to the Build entity.
func (cu *CompetitionUpdate) ClearBuilds() *CompetitionUpdate {
	cu.mutation.ClearBuilds()
	return cu
}

// RemoveBuildIDs removes the "Builds" edge to Build entities by IDs.
func (cu *CompetitionUpdate) RemoveBuildIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveBuildIDs(ids...)
	return cu
}

// RemoveBuilds removes "Builds" edges to Build entities.
func (cu *CompetitionUpdate) RemoveBuilds(b ...*Build) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBuildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompetitionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompetitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompetitionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompetitionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompetitionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CompetitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   competition.Table,
			Columns: competition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: competition.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: competition.FieldHclID,
		})
	}
	if value, ok := cu.mutation.RootPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: competition.FieldRootPassword,
		})
	}
	if value, ok := cu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStartTime,
		})
	}
	if value, ok := cu.mutation.AddedStartTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStartTime,
		})
	}
	if cu.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: competition.FieldStartTime,
		})
	}
	if value, ok := cu.mutation.StopTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStopTime,
		})
	}
	if value, ok := cu.mutation.AddedStopTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStopTime,
		})
	}
	if cu.mutation.StopTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: competition.FieldStopTime,
		})
	}
	if value, ok := cu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: competition.FieldConfig,
		})
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: competition.FieldTags,
		})
	}
	if cu.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.DNSTable,
			Columns: competition.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDNSIDs(); len(nodes) > 0 && !cu.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.DNSTable,
			Columns: competition.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.DNSTable,
			Columns: competition.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.EnvironmentTable,
			Columns: []string{competition.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.EnvironmentTable,
			Columns: []string{competition.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.BuildsTable,
			Columns: []string{competition.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBuildsIDs(); len(nodes) > 0 && !cu.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.BuildsTable,
			Columns: []string{competition.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.BuildsTable,
			Columns: []string{competition.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CompetitionUpdateOne is the builder for updating a single Competition entity.
type CompetitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompetitionMutation
}

// SetHclID sets the "hcl_id" field.
func (cuo *CompetitionUpdateOne) SetHclID(s string) *CompetitionUpdateOne {
	cuo.mutation.SetHclID(s)
	return cuo
}

// SetRootPassword sets the "root_password" field.
func (cuo *CompetitionUpdateOne) SetRootPassword(s string) *CompetitionUpdateOne {
	cuo.mutation.SetRootPassword(s)
	return cuo
}

// SetStartTime sets the "start_time" field.
func (cuo *CompetitionUpdateOne) SetStartTime(i int64) *CompetitionUpdateOne {
	cuo.mutation.ResetStartTime()
	cuo.mutation.SetStartTime(i)
	return cuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableStartTime(i *int64) *CompetitionUpdateOne {
	if i != nil {
		cuo.SetStartTime(*i)
	}
	return cuo
}

// AddStartTime adds i to the "start_time" field.
func (cuo *CompetitionUpdateOne) AddStartTime(i int64) *CompetitionUpdateOne {
	cuo.mutation.AddStartTime(i)
	return cuo
}

// ClearStartTime clears the value of the "start_time" field.
func (cuo *CompetitionUpdateOne) ClearStartTime() *CompetitionUpdateOne {
	cuo.mutation.ClearStartTime()
	return cuo
}

// SetStopTime sets the "stop_time" field.
func (cuo *CompetitionUpdateOne) SetStopTime(i int64) *CompetitionUpdateOne {
	cuo.mutation.ResetStopTime()
	cuo.mutation.SetStopTime(i)
	return cuo
}

// SetNillableStopTime sets the "stop_time" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableStopTime(i *int64) *CompetitionUpdateOne {
	if i != nil {
		cuo.SetStopTime(*i)
	}
	return cuo
}

// AddStopTime adds i to the "stop_time" field.
func (cuo *CompetitionUpdateOne) AddStopTime(i int64) *CompetitionUpdateOne {
	cuo.mutation.AddStopTime(i)
	return cuo
}

// ClearStopTime clears the value of the "stop_time" field.
func (cuo *CompetitionUpdateOne) ClearStopTime() *CompetitionUpdateOne {
	cuo.mutation.ClearStopTime()
	return cuo
}

// SetConfig sets the "config" field.
func (cuo *CompetitionUpdateOne) SetConfig(m map[string]string) *CompetitionUpdateOne {
	cuo.mutation.SetConfig(m)
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *CompetitionUpdateOne) SetTags(m map[string]string) *CompetitionUpdateOne {
	cuo.mutation.SetTags(m)
	return cuo
}

// AddDNSIDs adds the "DNS" edge to the DNS entity by IDs.
func (cuo *CompetitionUpdateOne) AddDNSIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddDNSIDs(ids...)
	return cuo
}

// AddDNS adds the "DNS" edges to the DNS entity.
func (cuo *CompetitionUpdateOne) AddDNS(d ...*DNS) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDNSIDs(ids...)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (cuo *CompetitionUpdateOne) SetEnvironmentID(id uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.SetEnvironmentID(id)
	return cuo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *CompetitionUpdateOne {
	if id != nil {
		cuo = cuo.SetEnvironmentID(*id)
	}
	return cuo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (cuo *CompetitionUpdateOne) SetEnvironment(e *Environment) *CompetitionUpdateOne {
	return cuo.SetEnvironmentID(e.ID)
}

// AddBuildIDs adds the "Builds" edge to the Build entity by IDs.
func (cuo *CompetitionUpdateOne) AddBuildIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddBuildIDs(ids...)
	return cuo
}

// AddBuilds adds the "Builds" edges to the Build entity.
func (cuo *CompetitionUpdateOne) AddBuilds(b ...*Build) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBuildIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cuo *CompetitionUpdateOne) Mutation() *CompetitionMutation {
	return cuo.mutation
}

// ClearDNS clears all "DNS" edges to the DNS entity.
func (cuo *CompetitionUpdateOne) ClearDNS() *CompetitionUpdateOne {
	cuo.mutation.ClearDNS()
	return cuo
}

// RemoveDNSIDs removes the "DNS" edge to DNS entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveDNSIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveDNSIDs(ids...)
	return cuo
}

// RemoveDNS removes "DNS" edges to DNS entities.
func (cuo *CompetitionUpdateOne) RemoveDNS(d ...*DNS) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDNSIDs(ids...)
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (cuo *CompetitionUpdateOne) ClearEnvironment() *CompetitionUpdateOne {
	cuo.mutation.ClearEnvironment()
	return cuo
}

// ClearBuilds clears all "Builds" edges to the Build entity.
func (cuo *CompetitionUpdateOne) ClearBuilds() *CompetitionUpdateOne {
	cuo.mutation.ClearBuilds()
	return cuo
}

// RemoveBuildIDs removes the "Builds" edge to Build entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveBuildIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveBuildIDs(ids...)
	return cuo
}

// RemoveBuilds removes "Builds" edges to Build entities.
func (cuo *CompetitionUpdateOne) RemoveBuilds(b ...*Build) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBuildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompetitionUpdateOne) Select(field string, fields ...string) *CompetitionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Competition entity.
func (cuo *CompetitionUpdateOne) Save(ctx context.Context) (*Competition, error) {
	var (
		err  error
		node *Competition
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompetitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Competition)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CompetitionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) SaveX(ctx context.Context) *Competition {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompetitionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CompetitionUpdateOne) sqlSave(ctx context.Context) (_node *Competition, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   competition.Table,
			Columns: competition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: competition.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Competition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, competition.FieldID)
		for _, f := range fields {
			if !competition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != competition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: competition.FieldHclID,
		})
	}
	if value, ok := cuo.mutation.RootPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: competition.FieldRootPassword,
		})
	}
	if value, ok := cuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStartTime,
		})
	}
	if value, ok := cuo.mutation.AddedStartTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStartTime,
		})
	}
	if cuo.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: competition.FieldStartTime,
		})
	}
	if value, ok := cuo.mutation.StopTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStopTime,
		})
	}
	if value, ok := cuo.mutation.AddedStopTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: competition.FieldStopTime,
		})
	}
	if cuo.mutation.StopTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: competition.FieldStopTime,
		})
	}
	if value, ok := cuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: competition.FieldConfig,
		})
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: competition.FieldTags,
		})
	}
	if cuo.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.DNSTable,
			Columns: competition.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDNSIDs(); len(nodes) > 0 && !cuo.mutation.DNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.DNSTable,
			Columns: competition.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.DNSTable,
			Columns: competition.DNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.EnvironmentTable,
			Columns: []string{competition.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competition.EnvironmentTable,
			Columns: []string{competition.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.BuildsTable,
			Columns: []string{competition.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBuildsIDs(); len(nodes) > 0 && !cuo.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.BuildsTable,
			Columns: []string{competition.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.BuildsTable,
			Columns: []string{competition.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Competition{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
