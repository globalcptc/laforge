// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
)

// ProvisioningScheduledStepDelete is the builder for deleting a ProvisioningScheduledStep entity.
type ProvisioningScheduledStepDelete struct {
	config
	hooks    []Hook
	mutation *ProvisioningScheduledStepMutation
}

// Where appends a list predicates to the ProvisioningScheduledStepDelete builder.
func (pssd *ProvisioningScheduledStepDelete) Where(ps ...predicate.ProvisioningScheduledStep) *ProvisioningScheduledStepDelete {
	pssd.mutation.Where(ps...)
	return pssd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pssd *ProvisioningScheduledStepDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pssd.sqlExec, pssd.mutation, pssd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pssd *ProvisioningScheduledStepDelete) ExecX(ctx context.Context) int {
	n, err := pssd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pssd *ProvisioningScheduledStepDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(provisioningscheduledstep.Table, sqlgraph.NewFieldSpec(provisioningscheduledstep.FieldID, field.TypeUUID))
	if ps := pssd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pssd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pssd.mutation.done = true
	return affected, err
}

// ProvisioningScheduledStepDeleteOne is the builder for deleting a single ProvisioningScheduledStep entity.
type ProvisioningScheduledStepDeleteOne struct {
	pssd *ProvisioningScheduledStepDelete
}

// Where appends a list predicates to the ProvisioningScheduledStepDelete builder.
func (pssdo *ProvisioningScheduledStepDeleteOne) Where(ps ...predicate.ProvisioningScheduledStep) *ProvisioningScheduledStepDeleteOne {
	pssdo.pssd.mutation.Where(ps...)
	return pssdo
}

// Exec executes the deletion query.
func (pssdo *ProvisioningScheduledStepDeleteOne) Exec(ctx context.Context) error {
	n, err := pssdo.pssd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{provisioningscheduledstep.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pssdo *ProvisioningScheduledStepDeleteOne) ExecX(ctx context.Context) {
	if err := pssdo.Exec(ctx); err != nil {
		panic(err)
	}
}
