// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// FileDownloadQuery is the builder for querying FileDownload entities.
type FileDownloadQuery struct {
	config
	ctx             *QueryContext
	order           []filedownload.OrderOption
	inters          []Interceptor
	predicates      []predicate.FileDownload
	withEnvironment *EnvironmentQuery
	withFKs         bool
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*FileDownload) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FileDownloadQuery builder.
func (fdq *FileDownloadQuery) Where(ps ...predicate.FileDownload) *FileDownloadQuery {
	fdq.predicates = append(fdq.predicates, ps...)
	return fdq
}

// Limit the number of records to be returned by this query.
func (fdq *FileDownloadQuery) Limit(limit int) *FileDownloadQuery {
	fdq.ctx.Limit = &limit
	return fdq
}

// Offset to start from.
func (fdq *FileDownloadQuery) Offset(offset int) *FileDownloadQuery {
	fdq.ctx.Offset = &offset
	return fdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fdq *FileDownloadQuery) Unique(unique bool) *FileDownloadQuery {
	fdq.ctx.Unique = &unique
	return fdq
}

// Order specifies how the records should be ordered.
func (fdq *FileDownloadQuery) Order(o ...filedownload.OrderOption) *FileDownloadQuery {
	fdq.order = append(fdq.order, o...)
	return fdq
}

// QueryEnvironment chains the current query on the "Environment" edge.
func (fdq *FileDownloadQuery) QueryEnvironment() *EnvironmentQuery {
	query := (&EnvironmentClient{config: fdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(filedownload.Table, filedownload.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, filedownload.EnvironmentTable, filedownload.EnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(fdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FileDownload entity from the query.
// Returns a *NotFoundError when no FileDownload was found.
func (fdq *FileDownloadQuery) First(ctx context.Context) (*FileDownload, error) {
	nodes, err := fdq.Limit(1).All(setContextOp(ctx, fdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{filedownload.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fdq *FileDownloadQuery) FirstX(ctx context.Context) *FileDownload {
	node, err := fdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FileDownload ID from the query.
// Returns a *NotFoundError when no FileDownload ID was found.
func (fdq *FileDownloadQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fdq.Limit(1).IDs(setContextOp(ctx, fdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{filedownload.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fdq *FileDownloadQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := fdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FileDownload entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FileDownload entity is found.
// Returns a *NotFoundError when no FileDownload entities are found.
func (fdq *FileDownloadQuery) Only(ctx context.Context) (*FileDownload, error) {
	nodes, err := fdq.Limit(2).All(setContextOp(ctx, fdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{filedownload.Label}
	default:
		return nil, &NotSingularError{filedownload.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fdq *FileDownloadQuery) OnlyX(ctx context.Context) *FileDownload {
	node, err := fdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FileDownload ID in the query.
// Returns a *NotSingularError when more than one FileDownload ID is found.
// Returns a *NotFoundError when no entities are found.
func (fdq *FileDownloadQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fdq.Limit(2).IDs(setContextOp(ctx, fdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{filedownload.Label}
	default:
		err = &NotSingularError{filedownload.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fdq *FileDownloadQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := fdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FileDownloads.
func (fdq *FileDownloadQuery) All(ctx context.Context) ([]*FileDownload, error) {
	ctx = setContextOp(ctx, fdq.ctx, "All")
	if err := fdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FileDownload, *FileDownloadQuery]()
	return withInterceptors[[]*FileDownload](ctx, fdq, qr, fdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fdq *FileDownloadQuery) AllX(ctx context.Context) []*FileDownload {
	nodes, err := fdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FileDownload IDs.
func (fdq *FileDownloadQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if fdq.ctx.Unique == nil && fdq.path != nil {
		fdq.Unique(true)
	}
	ctx = setContextOp(ctx, fdq.ctx, "IDs")
	if err = fdq.Select(filedownload.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fdq *FileDownloadQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := fdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fdq *FileDownloadQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fdq.ctx, "Count")
	if err := fdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fdq, querierCount[*FileDownloadQuery](), fdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fdq *FileDownloadQuery) CountX(ctx context.Context) int {
	count, err := fdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fdq *FileDownloadQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fdq.ctx, "Exist")
	switch _, err := fdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fdq *FileDownloadQuery) ExistX(ctx context.Context) bool {
	exist, err := fdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FileDownloadQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fdq *FileDownloadQuery) Clone() *FileDownloadQuery {
	if fdq == nil {
		return nil
	}
	return &FileDownloadQuery{
		config:          fdq.config,
		ctx:             fdq.ctx.Clone(),
		order:           append([]filedownload.OrderOption{}, fdq.order...),
		inters:          append([]Interceptor{}, fdq.inters...),
		predicates:      append([]predicate.FileDownload{}, fdq.predicates...),
		withEnvironment: fdq.withEnvironment.Clone(),
		// clone intermediate query.
		sql:  fdq.sql.Clone(),
		path: fdq.path,
	}
}

// WithEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "Environment" edge. The optional arguments are used to configure the query builder of the edge.
func (fdq *FileDownloadQuery) WithEnvironment(opts ...func(*EnvironmentQuery)) *FileDownloadQuery {
	query := (&EnvironmentClient{config: fdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fdq.withEnvironment = query
	return fdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HCLID string `json:"hcl_id,omitempty" hcl:"id,label"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FileDownload.Query().
//		GroupBy(filedownload.FieldHCLID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fdq *FileDownloadQuery) GroupBy(field string, fields ...string) *FileDownloadGroupBy {
	fdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FileDownloadGroupBy{build: fdq}
	grbuild.flds = &fdq.ctx.Fields
	grbuild.label = filedownload.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HCLID string `json:"hcl_id,omitempty" hcl:"id,label"`
//	}
//
//	client.FileDownload.Query().
//		Select(filedownload.FieldHCLID).
//		Scan(ctx, &v)
func (fdq *FileDownloadQuery) Select(fields ...string) *FileDownloadSelect {
	fdq.ctx.Fields = append(fdq.ctx.Fields, fields...)
	sbuild := &FileDownloadSelect{FileDownloadQuery: fdq}
	sbuild.label = filedownload.Label
	sbuild.flds, sbuild.scan = &fdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FileDownloadSelect configured with the given aggregations.
func (fdq *FileDownloadQuery) Aggregate(fns ...AggregateFunc) *FileDownloadSelect {
	return fdq.Select().Aggregate(fns...)
}

func (fdq *FileDownloadQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fdq); err != nil {
				return err
			}
		}
	}
	for _, f := range fdq.ctx.Fields {
		if !filedownload.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fdq.path != nil {
		prev, err := fdq.path(ctx)
		if err != nil {
			return err
		}
		fdq.sql = prev
	}
	return nil
}

func (fdq *FileDownloadQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FileDownload, error) {
	var (
		nodes       = []*FileDownload{}
		withFKs     = fdq.withFKs
		_spec       = fdq.querySpec()
		loadedTypes = [1]bool{
			fdq.withEnvironment != nil,
		}
	)
	if fdq.withEnvironment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, filedownload.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FileDownload).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FileDownload{config: fdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(fdq.modifiers) > 0 {
		_spec.Modifiers = fdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fdq.withEnvironment; query != nil {
		if err := fdq.loadEnvironment(ctx, query, nodes, nil,
			func(n *FileDownload, e *Environment) { n.Edges.Environment = e }); err != nil {
			return nil, err
		}
	}
	for i := range fdq.loadTotal {
		if err := fdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fdq *FileDownloadQuery) loadEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*FileDownload, init func(*FileDownload), assign func(*FileDownload, *Environment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FileDownload)
	for i := range nodes {
		if nodes[i].environment_file_downloads == nil {
			continue
		}
		fk := *nodes[i].environment_file_downloads
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_file_downloads" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fdq *FileDownloadQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fdq.querySpec()
	if len(fdq.modifiers) > 0 {
		_spec.Modifiers = fdq.modifiers
	}
	_spec.Node.Columns = fdq.ctx.Fields
	if len(fdq.ctx.Fields) > 0 {
		_spec.Unique = fdq.ctx.Unique != nil && *fdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fdq.driver, _spec)
}

func (fdq *FileDownloadQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(filedownload.Table, filedownload.Columns, sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID))
	_spec.From = fdq.sql
	if unique := fdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fdq.path != nil {
		_spec.Unique = true
	}
	if fields := fdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filedownload.FieldID)
		for i := range fields {
			if fields[i] != filedownload.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fdq *FileDownloadQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fdq.driver.Dialect())
	t1 := builder.Table(filedownload.Table)
	columns := fdq.ctx.Fields
	if len(columns) == 0 {
		columns = filedownload.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fdq.sql != nil {
		selector = fdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fdq.ctx.Unique != nil && *fdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fdq.predicates {
		p(selector)
	}
	for _, p := range fdq.order {
		p(selector)
	}
	if offset := fdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FileDownloadGroupBy is the group-by builder for FileDownload entities.
type FileDownloadGroupBy struct {
	selector
	build *FileDownloadQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fdgb *FileDownloadGroupBy) Aggregate(fns ...AggregateFunc) *FileDownloadGroupBy {
	fdgb.fns = append(fdgb.fns, fns...)
	return fdgb
}

// Scan applies the selector query and scans the result into the given value.
func (fdgb *FileDownloadGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fdgb.build.ctx, "GroupBy")
	if err := fdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FileDownloadQuery, *FileDownloadGroupBy](ctx, fdgb.build, fdgb, fdgb.build.inters, v)
}

func (fdgb *FileDownloadGroupBy) sqlScan(ctx context.Context, root *FileDownloadQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fdgb.fns))
	for _, fn := range fdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fdgb.flds)+len(fdgb.fns))
		for _, f := range *fdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FileDownloadSelect is the builder for selecting fields of FileDownload entities.
type FileDownloadSelect struct {
	*FileDownloadQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fds *FileDownloadSelect) Aggregate(fns ...AggregateFunc) *FileDownloadSelect {
	fds.fns = append(fds.fns, fns...)
	return fds
}

// Scan applies the selector query and scans the result into the given value.
func (fds *FileDownloadSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fds.ctx, "Select")
	if err := fds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FileDownloadQuery, *FileDownloadSelect](ctx, fds.FileDownloadQuery, fds, fds.inters, v)
}

func (fds *FileDownloadSelect) sqlScan(ctx context.Context, root *FileDownloadQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fds.fns))
	for _, fn := range fds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
