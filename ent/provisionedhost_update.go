// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisionedHostUpdate is the builder for updating ProvisionedHost entities.
type ProvisionedHostUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisionedHostMutation
}

// Where appends a list predicates to the ProvisionedHostUpdate builder.
func (phu *ProvisionedHostUpdate) Where(ps ...predicate.ProvisionedHost) *ProvisionedHostUpdate {
	phu.mutation.Where(ps...)
	return phu
}

// SetSubnetIP sets the "subnet_ip" field.
func (phu *ProvisionedHostUpdate) SetSubnetIP(s string) *ProvisionedHostUpdate {
	phu.mutation.SetSubnetIP(s)
	return phu
}

// SetAddonType sets the "addon_type" field.
func (phu *ProvisionedHostUpdate) SetAddonType(pt provisionedhost.AddonType) *ProvisionedHostUpdate {
	phu.mutation.SetAddonType(pt)
	return phu
}

// SetNillableAddonType sets the "addon_type" field if the given value is not nil.
func (phu *ProvisionedHostUpdate) SetNillableAddonType(pt *provisionedhost.AddonType) *ProvisionedHostUpdate {
	if pt != nil {
		phu.SetAddonType(*pt)
	}
	return phu
}

// ClearAddonType clears the value of the "addon_type" field.
func (phu *ProvisionedHostUpdate) ClearAddonType() *ProvisionedHostUpdate {
	phu.mutation.ClearAddonType()
	return phu
}

// SetVars sets the "vars" field.
func (phu *ProvisionedHostUpdate) SetVars(m map[string]string) *ProvisionedHostUpdate {
	phu.mutation.SetVars(m)
	return phu
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (phu *ProvisionedHostUpdate) SetStatusID(id uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.SetStatusID(id)
	return phu
}

// SetStatus sets the "Status" edge to the Status entity.
func (phu *ProvisionedHostUpdate) SetStatus(s *Status) *ProvisionedHostUpdate {
	return phu.SetStatusID(s.ID)
}

// SetProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (phu *ProvisionedHostUpdate) SetProvisionedNetworkID(id uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.SetProvisionedNetworkID(id)
	return phu
}

// SetProvisionedNetwork sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phu *ProvisionedHostUpdate) SetProvisionedNetwork(p *ProvisionedNetwork) *ProvisionedHostUpdate {
	return phu.SetProvisionedNetworkID(p.ID)
}

// SetHostID sets the "Host" edge to the Host entity by ID.
func (phu *ProvisionedHostUpdate) SetHostID(id uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.SetHostID(id)
	return phu
}

// SetHost sets the "Host" edge to the Host entity.
func (phu *ProvisionedHostUpdate) SetHost(h *Host) *ProvisionedHostUpdate {
	return phu.SetHostID(h.ID)
}

// SetEndStepPlanID sets the "EndStepPlan" edge to the Plan entity by ID.
func (phu *ProvisionedHostUpdate) SetEndStepPlanID(id uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.SetEndStepPlanID(id)
	return phu
}

// SetNillableEndStepPlanID sets the "EndStepPlan" edge to the Plan entity by ID if the given value is not nil.
func (phu *ProvisionedHostUpdate) SetNillableEndStepPlanID(id *uuid.UUID) *ProvisionedHostUpdate {
	if id != nil {
		phu = phu.SetEndStepPlanID(*id)
	}
	return phu
}

// SetEndStepPlan sets the "EndStepPlan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) SetEndStepPlan(p *Plan) *ProvisionedHostUpdate {
	return phu.SetEndStepPlanID(p.ID)
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (phu *ProvisionedHostUpdate) SetBuildID(id uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.SetBuildID(id)
	return phu
}

// SetBuild sets the "Build" edge to the Build entity.
func (phu *ProvisionedHostUpdate) SetBuild(b *Build) *ProvisionedHostUpdate {
	return phu.SetBuildID(b.ID)
}

// AddProvisioningStepIDs adds the "ProvisioningSteps" edge to the ProvisioningStep entity by IDs.
func (phu *ProvisionedHostUpdate) AddProvisioningStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.AddProvisioningStepIDs(ids...)
	return phu
}

// AddProvisioningSteps adds the "ProvisioningSteps" edges to the ProvisioningStep entity.
func (phu *ProvisionedHostUpdate) AddProvisioningSteps(p ...*ProvisioningStep) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phu.AddProvisioningStepIDs(ids...)
}

// AddProvisioningScheduledStepIDs adds the "ProvisioningScheduledSteps" edge to the ProvisioningScheduledStep entity by IDs.
func (phu *ProvisionedHostUpdate) AddProvisioningScheduledStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.AddProvisioningScheduledStepIDs(ids...)
	return phu
}

// AddProvisioningScheduledSteps adds the "ProvisioningScheduledSteps" edges to the ProvisioningScheduledStep entity.
func (phu *ProvisionedHostUpdate) AddProvisioningScheduledSteps(p ...*ProvisioningScheduledStep) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phu.AddProvisioningScheduledStepIDs(ids...)
}

// AddAgentStatuseIDs adds the "AgentStatuses" edge to the AgentStatus entity by IDs.
func (phu *ProvisionedHostUpdate) AddAgentStatuseIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.AddAgentStatuseIDs(ids...)
	return phu
}

// AddAgentStatuses adds the "AgentStatuses" edges to the AgentStatus entity.
func (phu *ProvisionedHostUpdate) AddAgentStatuses(a ...*AgentStatus) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phu.AddAgentStatuseIDs(ids...)
}

// AddAgentTaskIDs adds the "AgentTasks" edge to the AgentTask entity by IDs.
func (phu *ProvisionedHostUpdate) AddAgentTaskIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.AddAgentTaskIDs(ids...)
	return phu
}

// AddAgentTasks adds the "AgentTasks" edges to the AgentTask entity.
func (phu *ProvisionedHostUpdate) AddAgentTasks(a ...*AgentTask) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phu.AddAgentTaskIDs(ids...)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (phu *ProvisionedHostUpdate) SetPlanID(id uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.SetPlanID(id)
	return phu
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (phu *ProvisionedHostUpdate) SetNillablePlanID(id *uuid.UUID) *ProvisionedHostUpdate {
	if id != nil {
		phu = phu.SetPlanID(*id)
	}
	return phu
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) SetPlan(p *Plan) *ProvisionedHostUpdate {
	return phu.SetPlanID(p.ID)
}

// SetGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (phu *ProvisionedHostUpdate) SetGinFileMiddlewareID(id uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.SetGinFileMiddlewareID(id)
	return phu
}

// SetNillableGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (phu *ProvisionedHostUpdate) SetNillableGinFileMiddlewareID(id *uuid.UUID) *ProvisionedHostUpdate {
	if id != nil {
		phu = phu.SetGinFileMiddlewareID(*id)
	}
	return phu
}

// SetGinFileMiddleware sets the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (phu *ProvisionedHostUpdate) SetGinFileMiddleware(g *GinFileMiddleware) *ProvisionedHostUpdate {
	return phu.SetGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisionedHostMutation object of the builder.
func (phu *ProvisionedHostUpdate) Mutation() *ProvisionedHostMutation {
	return phu.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (phu *ProvisionedHostUpdate) ClearStatus() *ProvisionedHostUpdate {
	phu.mutation.ClearStatus()
	return phu
}

// ClearProvisionedNetwork clears the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedNetwork() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedNetwork()
	return phu
}

// ClearHost clears the "Host" edge to the Host entity.
func (phu *ProvisionedHostUpdate) ClearHost() *ProvisionedHostUpdate {
	phu.mutation.ClearHost()
	return phu
}

// ClearEndStepPlan clears the "EndStepPlan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) ClearEndStepPlan() *ProvisionedHostUpdate {
	phu.mutation.ClearEndStepPlan()
	return phu
}

// ClearBuild clears the "Build" edge to the Build entity.
func (phu *ProvisionedHostUpdate) ClearBuild() *ProvisionedHostUpdate {
	phu.mutation.ClearBuild()
	return phu
}

// ClearProvisioningSteps clears all "ProvisioningSteps" edges to the ProvisioningStep entity.
func (phu *ProvisionedHostUpdate) ClearProvisioningSteps() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisioningSteps()
	return phu
}

// RemoveProvisioningStepIDs removes the "ProvisioningSteps" edge to ProvisioningStep entities by IDs.
func (phu *ProvisionedHostUpdate) RemoveProvisioningStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.RemoveProvisioningStepIDs(ids...)
	return phu
}

// RemoveProvisioningSteps removes "ProvisioningSteps" edges to ProvisioningStep entities.
func (phu *ProvisionedHostUpdate) RemoveProvisioningSteps(p ...*ProvisioningStep) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phu.RemoveProvisioningStepIDs(ids...)
}

// ClearProvisioningScheduledSteps clears all "ProvisioningScheduledSteps" edges to the ProvisioningScheduledStep entity.
func (phu *ProvisionedHostUpdate) ClearProvisioningScheduledSteps() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisioningScheduledSteps()
	return phu
}

// RemoveProvisioningScheduledStepIDs removes the "ProvisioningScheduledSteps" edge to ProvisioningScheduledStep entities by IDs.
func (phu *ProvisionedHostUpdate) RemoveProvisioningScheduledStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.RemoveProvisioningScheduledStepIDs(ids...)
	return phu
}

// RemoveProvisioningScheduledSteps removes "ProvisioningScheduledSteps" edges to ProvisioningScheduledStep entities.
func (phu *ProvisionedHostUpdate) RemoveProvisioningScheduledSteps(p ...*ProvisioningScheduledStep) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phu.RemoveProvisioningScheduledStepIDs(ids...)
}

// ClearAgentStatuses clears all "AgentStatuses" edges to the AgentStatus entity.
func (phu *ProvisionedHostUpdate) ClearAgentStatuses() *ProvisionedHostUpdate {
	phu.mutation.ClearAgentStatuses()
	return phu
}

// RemoveAgentStatuseIDs removes the "AgentStatuses" edge to AgentStatus entities by IDs.
func (phu *ProvisionedHostUpdate) RemoveAgentStatuseIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.RemoveAgentStatuseIDs(ids...)
	return phu
}

// RemoveAgentStatuses removes "AgentStatuses" edges to AgentStatus entities.
func (phu *ProvisionedHostUpdate) RemoveAgentStatuses(a ...*AgentStatus) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phu.RemoveAgentStatuseIDs(ids...)
}

// ClearAgentTasks clears all "AgentTasks" edges to the AgentTask entity.
func (phu *ProvisionedHostUpdate) ClearAgentTasks() *ProvisionedHostUpdate {
	phu.mutation.ClearAgentTasks()
	return phu
}

// RemoveAgentTaskIDs removes the "AgentTasks" edge to AgentTask entities by IDs.
func (phu *ProvisionedHostUpdate) RemoveAgentTaskIDs(ids ...uuid.UUID) *ProvisionedHostUpdate {
	phu.mutation.RemoveAgentTaskIDs(ids...)
	return phu
}

// RemoveAgentTasks removes "AgentTasks" edges to AgentTask entities.
func (phu *ProvisionedHostUpdate) RemoveAgentTasks(a ...*AgentTask) *ProvisionedHostUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phu.RemoveAgentTaskIDs(ids...)
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) ClearPlan() *ProvisionedHostUpdate {
	phu.mutation.ClearPlan()
	return phu
}

// ClearGinFileMiddleware clears the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (phu *ProvisionedHostUpdate) ClearGinFileMiddleware() *ProvisionedHostUpdate {
	phu.mutation.ClearGinFileMiddleware()
	return phu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *ProvisionedHostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(phu.hooks) == 0 {
		if err = phu.check(); err != nil {
			return 0, err
		}
		affected, err = phu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedHostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = phu.check(); err != nil {
				return 0, err
			}
			phu.mutation = mutation
			affected, err = phu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(phu.hooks) - 1; i >= 0; i-- {
			if phu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = phu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, phu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (phu *ProvisionedHostUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *ProvisionedHostUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *ProvisionedHostUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phu *ProvisionedHostUpdate) check() error {
	if v, ok := phu.mutation.AddonType(); ok {
		if err := provisionedhost.AddonTypeValidator(v); err != nil {
			return &ValidationError{Name: "addon_type", err: fmt.Errorf(`ent: validator failed for field "ProvisionedHost.addon_type": %w`, err)}
		}
	}
	if _, ok := phu.mutation.StatusID(); phu.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.Status"`)
	}
	if _, ok := phu.mutation.ProvisionedNetworkID(); phu.mutation.ProvisionedNetworkCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.ProvisionedNetwork"`)
	}
	if _, ok := phu.mutation.HostID(); phu.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.Host"`)
	}
	if _, ok := phu.mutation.BuildID(); phu.mutation.BuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.Build"`)
	}
	return nil
}

func (phu *ProvisionedHostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedhost.Table,
			Columns: provisionedhost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionedhost.FieldID,
			},
		},
	}
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phu.mutation.SubnetIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisionedhost.FieldSubnetIP,
		})
	}
	if value, ok := phu.mutation.AddonType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisionedhost.FieldAddonType,
		})
	}
	if phu.mutation.AddonTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: provisionedhost.FieldAddonType,
		})
	}
	if value, ok := phu.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: provisionedhost.FieldVars,
		})
	}
	if phu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.StatusTable,
			Columns: []string{provisionedhost.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.StatusTable,
			Columns: []string{provisionedhost.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.HostTable,
			Columns: []string{provisionedhost.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.HostTable,
			Columns: []string{provisionedhost.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.EndStepPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.EndStepPlanTable,
			Columns: []string{provisionedhost.EndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.EndStepPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.EndStepPlanTable,
			Columns: []string{provisionedhost.EndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.BuildTable,
			Columns: []string{provisionedhost.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.BuildTable,
			Columns: []string{provisionedhost.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisioningStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningStepsTable,
			Columns: []string{provisionedhost.ProvisioningStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.RemovedProvisioningStepsIDs(); len(nodes) > 0 && !phu.mutation.ProvisioningStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningStepsTable,
			Columns: []string{provisionedhost.ProvisioningStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisioningStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningStepsTable,
			Columns: []string{provisionedhost.ProvisioningStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisioningScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningScheduledStepsTable,
			Columns: []string{provisionedhost.ProvisioningScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.RemovedProvisioningScheduledStepsIDs(); len(nodes) > 0 && !phu.mutation.ProvisioningScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningScheduledStepsTable,
			Columns: []string{provisionedhost.ProvisioningScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisioningScheduledStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningScheduledStepsTable,
			Columns: []string{provisionedhost.ProvisioningScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentStatusesTable,
			Columns: []string{provisionedhost.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.RemovedAgentStatusesIDs(); len(nodes) > 0 && !phu.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentStatusesTable,
			Columns: []string{provisionedhost.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.AgentStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentStatusesTable,
			Columns: []string{provisionedhost.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentTasksTable,
			Columns: []string{provisionedhost.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.RemovedAgentTasksIDs(); len(nodes) > 0 && !phu.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentTasksTable,
			Columns: []string{provisionedhost.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentTasksTable,
			Columns: []string{provisionedhost.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.PlanTable,
			Columns: []string{provisionedhost.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.PlanTable,
			Columns: []string{provisionedhost.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.GinFileMiddlewareTable,
			Columns: []string{provisionedhost.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.GinFileMiddlewareTable,
			Columns: []string{provisionedhost.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionedhost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProvisionedHostUpdateOne is the builder for updating a single ProvisionedHost entity.
type ProvisionedHostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvisionedHostMutation
}

// SetSubnetIP sets the "subnet_ip" field.
func (phuo *ProvisionedHostUpdateOne) SetSubnetIP(s string) *ProvisionedHostUpdateOne {
	phuo.mutation.SetSubnetIP(s)
	return phuo
}

// SetAddonType sets the "addon_type" field.
func (phuo *ProvisionedHostUpdateOne) SetAddonType(pt provisionedhost.AddonType) *ProvisionedHostUpdateOne {
	phuo.mutation.SetAddonType(pt)
	return phuo
}

// SetNillableAddonType sets the "addon_type" field if the given value is not nil.
func (phuo *ProvisionedHostUpdateOne) SetNillableAddonType(pt *provisionedhost.AddonType) *ProvisionedHostUpdateOne {
	if pt != nil {
		phuo.SetAddonType(*pt)
	}
	return phuo
}

// ClearAddonType clears the value of the "addon_type" field.
func (phuo *ProvisionedHostUpdateOne) ClearAddonType() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearAddonType()
	return phuo
}

// SetVars sets the "vars" field.
func (phuo *ProvisionedHostUpdateOne) SetVars(m map[string]string) *ProvisionedHostUpdateOne {
	phuo.mutation.SetVars(m)
	return phuo
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetStatusID(id uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.SetStatusID(id)
	return phuo
}

// SetStatus sets the "Status" edge to the Status entity.
func (phuo *ProvisionedHostUpdateOne) SetStatus(s *Status) *ProvisionedHostUpdateOne {
	return phuo.SetStatusID(s.ID)
}

// SetProvisionedNetworkID sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedNetworkID(id uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.SetProvisionedNetworkID(id)
	return phuo
}

// SetProvisionedNetwork sets the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedNetwork(p *ProvisionedNetwork) *ProvisionedHostUpdateOne {
	return phuo.SetProvisionedNetworkID(p.ID)
}

// SetHostID sets the "Host" edge to the Host entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetHostID(id uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.SetHostID(id)
	return phuo
}

// SetHost sets the "Host" edge to the Host entity.
func (phuo *ProvisionedHostUpdateOne) SetHost(h *Host) *ProvisionedHostUpdateOne {
	return phuo.SetHostID(h.ID)
}

// SetEndStepPlanID sets the "EndStepPlan" edge to the Plan entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetEndStepPlanID(id uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.SetEndStepPlanID(id)
	return phuo
}

// SetNillableEndStepPlanID sets the "EndStepPlan" edge to the Plan entity by ID if the given value is not nil.
func (phuo *ProvisionedHostUpdateOne) SetNillableEndStepPlanID(id *uuid.UUID) *ProvisionedHostUpdateOne {
	if id != nil {
		phuo = phuo.SetEndStepPlanID(*id)
	}
	return phuo
}

// SetEndStepPlan sets the "EndStepPlan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) SetEndStepPlan(p *Plan) *ProvisionedHostUpdateOne {
	return phuo.SetEndStepPlanID(p.ID)
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetBuildID(id uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.SetBuildID(id)
	return phuo
}

// SetBuild sets the "Build" edge to the Build entity.
func (phuo *ProvisionedHostUpdateOne) SetBuild(b *Build) *ProvisionedHostUpdateOne {
	return phuo.SetBuildID(b.ID)
}

// AddProvisioningStepIDs adds the "ProvisioningSteps" edge to the ProvisioningStep entity by IDs.
func (phuo *ProvisionedHostUpdateOne) AddProvisioningStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.AddProvisioningStepIDs(ids...)
	return phuo
}

// AddProvisioningSteps adds the "ProvisioningSteps" edges to the ProvisioningStep entity.
func (phuo *ProvisionedHostUpdateOne) AddProvisioningSteps(p ...*ProvisioningStep) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phuo.AddProvisioningStepIDs(ids...)
}

// AddProvisioningScheduledStepIDs adds the "ProvisioningScheduledSteps" edge to the ProvisioningScheduledStep entity by IDs.
func (phuo *ProvisionedHostUpdateOne) AddProvisioningScheduledStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.AddProvisioningScheduledStepIDs(ids...)
	return phuo
}

// AddProvisioningScheduledSteps adds the "ProvisioningScheduledSteps" edges to the ProvisioningScheduledStep entity.
func (phuo *ProvisionedHostUpdateOne) AddProvisioningScheduledSteps(p ...*ProvisioningScheduledStep) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phuo.AddProvisioningScheduledStepIDs(ids...)
}

// AddAgentStatuseIDs adds the "AgentStatuses" edge to the AgentStatus entity by IDs.
func (phuo *ProvisionedHostUpdateOne) AddAgentStatuseIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.AddAgentStatuseIDs(ids...)
	return phuo
}

// AddAgentStatuses adds the "AgentStatuses" edges to the AgentStatus entity.
func (phuo *ProvisionedHostUpdateOne) AddAgentStatuses(a ...*AgentStatus) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phuo.AddAgentStatuseIDs(ids...)
}

// AddAgentTaskIDs adds the "AgentTasks" edge to the AgentTask entity by IDs.
func (phuo *ProvisionedHostUpdateOne) AddAgentTaskIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.AddAgentTaskIDs(ids...)
	return phuo
}

// AddAgentTasks adds the "AgentTasks" edges to the AgentTask entity.
func (phuo *ProvisionedHostUpdateOne) AddAgentTasks(a ...*AgentTask) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phuo.AddAgentTaskIDs(ids...)
}

// SetPlanID sets the "Plan" edge to the Plan entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetPlanID(id uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.SetPlanID(id)
	return phuo
}

// SetNillablePlanID sets the "Plan" edge to the Plan entity by ID if the given value is not nil.
func (phuo *ProvisionedHostUpdateOne) SetNillablePlanID(id *uuid.UUID) *ProvisionedHostUpdateOne {
	if id != nil {
		phuo = phuo.SetPlanID(*id)
	}
	return phuo
}

// SetPlan sets the "Plan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) SetPlan(p *Plan) *ProvisionedHostUpdateOne {
	return phuo.SetPlanID(p.ID)
}

// SetGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetGinFileMiddlewareID(id uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.SetGinFileMiddlewareID(id)
	return phuo
}

// SetNillableGinFileMiddlewareID sets the "GinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (phuo *ProvisionedHostUpdateOne) SetNillableGinFileMiddlewareID(id *uuid.UUID) *ProvisionedHostUpdateOne {
	if id != nil {
		phuo = phuo.SetGinFileMiddlewareID(*id)
	}
	return phuo
}

// SetGinFileMiddleware sets the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (phuo *ProvisionedHostUpdateOne) SetGinFileMiddleware(g *GinFileMiddleware) *ProvisionedHostUpdateOne {
	return phuo.SetGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisionedHostMutation object of the builder.
func (phuo *ProvisionedHostUpdateOne) Mutation() *ProvisionedHostMutation {
	return phuo.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (phuo *ProvisionedHostUpdateOne) ClearStatus() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearStatus()
	return phuo
}

// ClearProvisionedNetwork clears the "ProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedNetwork() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedNetwork()
	return phuo
}

// ClearHost clears the "Host" edge to the Host entity.
func (phuo *ProvisionedHostUpdateOne) ClearHost() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearHost()
	return phuo
}

// ClearEndStepPlan clears the "EndStepPlan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) ClearEndStepPlan() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearEndStepPlan()
	return phuo
}

// ClearBuild clears the "Build" edge to the Build entity.
func (phuo *ProvisionedHostUpdateOne) ClearBuild() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearBuild()
	return phuo
}

// ClearProvisioningSteps clears all "ProvisioningSteps" edges to the ProvisioningStep entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisioningSteps() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisioningSteps()
	return phuo
}

// RemoveProvisioningStepIDs removes the "ProvisioningSteps" edge to ProvisioningStep entities by IDs.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisioningStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.RemoveProvisioningStepIDs(ids...)
	return phuo
}

// RemoveProvisioningSteps removes "ProvisioningSteps" edges to ProvisioningStep entities.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisioningSteps(p ...*ProvisioningStep) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phuo.RemoveProvisioningStepIDs(ids...)
}

// ClearProvisioningScheduledSteps clears all "ProvisioningScheduledSteps" edges to the ProvisioningScheduledStep entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisioningScheduledSteps() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisioningScheduledSteps()
	return phuo
}

// RemoveProvisioningScheduledStepIDs removes the "ProvisioningScheduledSteps" edge to ProvisioningScheduledStep entities by IDs.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisioningScheduledStepIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.RemoveProvisioningScheduledStepIDs(ids...)
	return phuo
}

// RemoveProvisioningScheduledSteps removes "ProvisioningScheduledSteps" edges to ProvisioningScheduledStep entities.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisioningScheduledSteps(p ...*ProvisioningScheduledStep) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phuo.RemoveProvisioningScheduledStepIDs(ids...)
}

// ClearAgentStatuses clears all "AgentStatuses" edges to the AgentStatus entity.
func (phuo *ProvisionedHostUpdateOne) ClearAgentStatuses() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearAgentStatuses()
	return phuo
}

// RemoveAgentStatuseIDs removes the "AgentStatuses" edge to AgentStatus entities by IDs.
func (phuo *ProvisionedHostUpdateOne) RemoveAgentStatuseIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.RemoveAgentStatuseIDs(ids...)
	return phuo
}

// RemoveAgentStatuses removes "AgentStatuses" edges to AgentStatus entities.
func (phuo *ProvisionedHostUpdateOne) RemoveAgentStatuses(a ...*AgentStatus) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phuo.RemoveAgentStatuseIDs(ids...)
}

// ClearAgentTasks clears all "AgentTasks" edges to the AgentTask entity.
func (phuo *ProvisionedHostUpdateOne) ClearAgentTasks() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearAgentTasks()
	return phuo
}

// RemoveAgentTaskIDs removes the "AgentTasks" edge to AgentTask entities by IDs.
func (phuo *ProvisionedHostUpdateOne) RemoveAgentTaskIDs(ids ...uuid.UUID) *ProvisionedHostUpdateOne {
	phuo.mutation.RemoveAgentTaskIDs(ids...)
	return phuo
}

// RemoveAgentTasks removes "AgentTasks" edges to AgentTask entities.
func (phuo *ProvisionedHostUpdateOne) RemoveAgentTasks(a ...*AgentTask) *ProvisionedHostUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phuo.RemoveAgentTaskIDs(ids...)
}

// ClearPlan clears the "Plan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) ClearPlan() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearPlan()
	return phuo
}

// ClearGinFileMiddleware clears the "GinFileMiddleware" edge to the GinFileMiddleware entity.
func (phuo *ProvisionedHostUpdateOne) ClearGinFileMiddleware() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearGinFileMiddleware()
	return phuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phuo *ProvisionedHostUpdateOne) Select(field string, fields ...string) *ProvisionedHostUpdateOne {
	phuo.fields = append([]string{field}, fields...)
	return phuo
}

// Save executes the query and returns the updated ProvisionedHost entity.
func (phuo *ProvisionedHostUpdateOne) Save(ctx context.Context) (*ProvisionedHost, error) {
	var (
		err  error
		node *ProvisionedHost
	)
	if len(phuo.hooks) == 0 {
		if err = phuo.check(); err != nil {
			return nil, err
		}
		node, err = phuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedHostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = phuo.check(); err != nil {
				return nil, err
			}
			phuo.mutation = mutation
			node, err = phuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(phuo.hooks) - 1; i >= 0; i-- {
			if phuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = phuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, phuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProvisionedHost)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProvisionedHostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *ProvisionedHostUpdateOne) SaveX(ctx context.Context) *ProvisionedHost {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *ProvisionedHostUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *ProvisionedHostUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phuo *ProvisionedHostUpdateOne) check() error {
	if v, ok := phuo.mutation.AddonType(); ok {
		if err := provisionedhost.AddonTypeValidator(v); err != nil {
			return &ValidationError{Name: "addon_type", err: fmt.Errorf(`ent: validator failed for field "ProvisionedHost.addon_type": %w`, err)}
		}
	}
	if _, ok := phuo.mutation.StatusID(); phuo.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.Status"`)
	}
	if _, ok := phuo.mutation.ProvisionedNetworkID(); phuo.mutation.ProvisionedNetworkCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.ProvisionedNetwork"`)
	}
	if _, ok := phuo.mutation.HostID(); phuo.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.Host"`)
	}
	if _, ok := phuo.mutation.BuildID(); phuo.mutation.BuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisionedHost.Build"`)
	}
	return nil
}

func (phuo *ProvisionedHostUpdateOne) sqlSave(ctx context.Context) (_node *ProvisionedHost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedhost.Table,
			Columns: provisionedhost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionedhost.FieldID,
			},
		},
	}
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProvisionedHost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisionedhost.FieldID)
		for _, f := range fields {
			if !provisionedhost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provisionedhost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phuo.mutation.SubnetIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisionedhost.FieldSubnetIP,
		})
	}
	if value, ok := phuo.mutation.AddonType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisionedhost.FieldAddonType,
		})
	}
	if phuo.mutation.AddonTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: provisionedhost.FieldAddonType,
		})
	}
	if value, ok := phuo.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: provisionedhost.FieldVars,
		})
	}
	if phuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.StatusTable,
			Columns: []string{provisionedhost.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.StatusTable,
			Columns: []string{provisionedhost.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.HostTable,
			Columns: []string{provisionedhost.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.HostTable,
			Columns: []string{provisionedhost.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.EndStepPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.EndStepPlanTable,
			Columns: []string{provisionedhost.EndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.EndStepPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.EndStepPlanTable,
			Columns: []string{provisionedhost.EndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.BuildTable,
			Columns: []string{provisionedhost.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.BuildTable,
			Columns: []string{provisionedhost.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisioningStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningStepsTable,
			Columns: []string{provisionedhost.ProvisioningStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.RemovedProvisioningStepsIDs(); len(nodes) > 0 && !phuo.mutation.ProvisioningStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningStepsTable,
			Columns: []string{provisionedhost.ProvisioningStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisioningStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningStepsTable,
			Columns: []string{provisionedhost.ProvisioningStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisioningScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningScheduledStepsTable,
			Columns: []string{provisionedhost.ProvisioningScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.RemovedProvisioningScheduledStepsIDs(); len(nodes) > 0 && !phuo.mutation.ProvisioningScheduledStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningScheduledStepsTable,
			Columns: []string{provisionedhost.ProvisioningScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisioningScheduledStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisioningScheduledStepsTable,
			Columns: []string{provisionedhost.ProvisioningScheduledStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentStatusesTable,
			Columns: []string{provisionedhost.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.RemovedAgentStatusesIDs(); len(nodes) > 0 && !phuo.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentStatusesTable,
			Columns: []string{provisionedhost.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.AgentStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentStatusesTable,
			Columns: []string{provisionedhost.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentTasksTable,
			Columns: []string{provisionedhost.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.RemovedAgentTasksIDs(); len(nodes) > 0 && !phuo.mutation.AgentTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentTasksTable,
			Columns: []string{provisionedhost.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.AgentTasksTable,
			Columns: []string{provisionedhost.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.PlanTable,
			Columns: []string{provisionedhost.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.PlanTable,
			Columns: []string{provisionedhost.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.GinFileMiddlewareTable,
			Columns: []string{provisionedhost.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.GinFileMiddlewareTable,
			Columns: []string{provisionedhost.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisionedHost{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionedhost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
