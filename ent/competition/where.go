// Code generated by ent, DO NOT EDIT.

package competition

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Competition {
	return predicate.Competition(sql.FieldLTE(FieldID, id))
}

// HCLID applies equality check predicate on the "hcl_id" field. It's identical to HCLIDEQ.
func HCLID(v string) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldHCLID, v))
}

// RootPassword applies equality check predicate on the "root_password" field. It's identical to RootPasswordEQ.
func RootPassword(v string) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldRootPassword, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldStartTime, v))
}

// StopTime applies equality check predicate on the "stop_time" field. It's identical to StopTimeEQ.
func StopTime(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldStopTime, v))
}

// HCLIDEQ applies the EQ predicate on the "hcl_id" field.
func HCLIDEQ(v string) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldHCLID, v))
}

// HCLIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HCLIDNEQ(v string) predicate.Competition {
	return predicate.Competition(sql.FieldNEQ(FieldHCLID, v))
}

// HCLIDIn applies the In predicate on the "hcl_id" field.
func HCLIDIn(vs ...string) predicate.Competition {
	return predicate.Competition(sql.FieldIn(FieldHCLID, vs...))
}

// HCLIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HCLIDNotIn(vs ...string) predicate.Competition {
	return predicate.Competition(sql.FieldNotIn(FieldHCLID, vs...))
}

// HCLIDGT applies the GT predicate on the "hcl_id" field.
func HCLIDGT(v string) predicate.Competition {
	return predicate.Competition(sql.FieldGT(FieldHCLID, v))
}

// HCLIDGTE applies the GTE predicate on the "hcl_id" field.
func HCLIDGTE(v string) predicate.Competition {
	return predicate.Competition(sql.FieldGTE(FieldHCLID, v))
}

// HCLIDLT applies the LT predicate on the "hcl_id" field.
func HCLIDLT(v string) predicate.Competition {
	return predicate.Competition(sql.FieldLT(FieldHCLID, v))
}

// HCLIDLTE applies the LTE predicate on the "hcl_id" field.
func HCLIDLTE(v string) predicate.Competition {
	return predicate.Competition(sql.FieldLTE(FieldHCLID, v))
}

// HCLIDContains applies the Contains predicate on the "hcl_id" field.
func HCLIDContains(v string) predicate.Competition {
	return predicate.Competition(sql.FieldContains(FieldHCLID, v))
}

// HCLIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HCLIDHasPrefix(v string) predicate.Competition {
	return predicate.Competition(sql.FieldHasPrefix(FieldHCLID, v))
}

// HCLIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HCLIDHasSuffix(v string) predicate.Competition {
	return predicate.Competition(sql.FieldHasSuffix(FieldHCLID, v))
}

// HCLIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HCLIDEqualFold(v string) predicate.Competition {
	return predicate.Competition(sql.FieldEqualFold(FieldHCLID, v))
}

// HCLIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HCLIDContainsFold(v string) predicate.Competition {
	return predicate.Competition(sql.FieldContainsFold(FieldHCLID, v))
}

// RootPasswordEQ applies the EQ predicate on the "root_password" field.
func RootPasswordEQ(v string) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldRootPassword, v))
}

// RootPasswordNEQ applies the NEQ predicate on the "root_password" field.
func RootPasswordNEQ(v string) predicate.Competition {
	return predicate.Competition(sql.FieldNEQ(FieldRootPassword, v))
}

// RootPasswordIn applies the In predicate on the "root_password" field.
func RootPasswordIn(vs ...string) predicate.Competition {
	return predicate.Competition(sql.FieldIn(FieldRootPassword, vs...))
}

// RootPasswordNotIn applies the NotIn predicate on the "root_password" field.
func RootPasswordNotIn(vs ...string) predicate.Competition {
	return predicate.Competition(sql.FieldNotIn(FieldRootPassword, vs...))
}

// RootPasswordGT applies the GT predicate on the "root_password" field.
func RootPasswordGT(v string) predicate.Competition {
	return predicate.Competition(sql.FieldGT(FieldRootPassword, v))
}

// RootPasswordGTE applies the GTE predicate on the "root_password" field.
func RootPasswordGTE(v string) predicate.Competition {
	return predicate.Competition(sql.FieldGTE(FieldRootPassword, v))
}

// RootPasswordLT applies the LT predicate on the "root_password" field.
func RootPasswordLT(v string) predicate.Competition {
	return predicate.Competition(sql.FieldLT(FieldRootPassword, v))
}

// RootPasswordLTE applies the LTE predicate on the "root_password" field.
func RootPasswordLTE(v string) predicate.Competition {
	return predicate.Competition(sql.FieldLTE(FieldRootPassword, v))
}

// RootPasswordContains applies the Contains predicate on the "root_password" field.
func RootPasswordContains(v string) predicate.Competition {
	return predicate.Competition(sql.FieldContains(FieldRootPassword, v))
}

// RootPasswordHasPrefix applies the HasPrefix predicate on the "root_password" field.
func RootPasswordHasPrefix(v string) predicate.Competition {
	return predicate.Competition(sql.FieldHasPrefix(FieldRootPassword, v))
}

// RootPasswordHasSuffix applies the HasSuffix predicate on the "root_password" field.
func RootPasswordHasSuffix(v string) predicate.Competition {
	return predicate.Competition(sql.FieldHasSuffix(FieldRootPassword, v))
}

// RootPasswordEqualFold applies the EqualFold predicate on the "root_password" field.
func RootPasswordEqualFold(v string) predicate.Competition {
	return predicate.Competition(sql.FieldEqualFold(FieldRootPassword, v))
}

// RootPasswordContainsFold applies the ContainsFold predicate on the "root_password" field.
func RootPasswordContainsFold(v string) predicate.Competition {
	return predicate.Competition(sql.FieldContainsFold(FieldRootPassword, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int64) predicate.Competition {
	return predicate.Competition(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int64) predicate.Competition {
	return predicate.Competition(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.Competition {
	return predicate.Competition(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.Competition {
	return predicate.Competition(sql.FieldNotNull(FieldStartTime))
}

// StopTimeEQ applies the EQ predicate on the "stop_time" field.
func StopTimeEQ(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldEQ(FieldStopTime, v))
}

// StopTimeNEQ applies the NEQ predicate on the "stop_time" field.
func StopTimeNEQ(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldNEQ(FieldStopTime, v))
}

// StopTimeIn applies the In predicate on the "stop_time" field.
func StopTimeIn(vs ...int64) predicate.Competition {
	return predicate.Competition(sql.FieldIn(FieldStopTime, vs...))
}

// StopTimeNotIn applies the NotIn predicate on the "stop_time" field.
func StopTimeNotIn(vs ...int64) predicate.Competition {
	return predicate.Competition(sql.FieldNotIn(FieldStopTime, vs...))
}

// StopTimeGT applies the GT predicate on the "stop_time" field.
func StopTimeGT(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldGT(FieldStopTime, v))
}

// StopTimeGTE applies the GTE predicate on the "stop_time" field.
func StopTimeGTE(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldGTE(FieldStopTime, v))
}

// StopTimeLT applies the LT predicate on the "stop_time" field.
func StopTimeLT(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldLT(FieldStopTime, v))
}

// StopTimeLTE applies the LTE predicate on the "stop_time" field.
func StopTimeLTE(v int64) predicate.Competition {
	return predicate.Competition(sql.FieldLTE(FieldStopTime, v))
}

// StopTimeIsNil applies the IsNil predicate on the "stop_time" field.
func StopTimeIsNil() predicate.Competition {
	return predicate.Competition(sql.FieldIsNull(FieldStopTime))
}

// StopTimeNotNil applies the NotNil predicate on the "stop_time" field.
func StopTimeNotNil() predicate.Competition {
	return predicate.Competition(sql.FieldNotNull(FieldStopTime))
}

// HasDNS applies the HasEdge predicate on the "DNS" edge.
func HasDNS() predicate.Competition {
	return predicate.Competition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DNSTable, DNSPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDNSWith applies the HasEdge predicate on the "DNS" edge with a given conditions (other predicates).
func HasDNSWith(preds ...predicate.DNS) predicate.Competition {
	return predicate.Competition(func(s *sql.Selector) {
		step := newDNSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironment applies the HasEdge predicate on the "Environment" edge.
func HasEnvironment() predicate.Competition {
	return predicate.Competition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "Environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.Competition {
	return predicate.Competition(func(s *sql.Selector) {
		step := newEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuilds applies the HasEdge predicate on the "Builds" edge.
func HasBuilds() predicate.Competition {
	return predicate.Competition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BuildsTable, BuildsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildsWith applies the HasEdge predicate on the "Builds" edge with a given conditions (other predicates).
func HasBuildsWith(preds ...predicate.Build) predicate.Competition {
	return predicate.Competition(func(s *sql.Selector) {
		step := newBuildsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Competition) predicate.Competition {
	return predicate.Competition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Competition) predicate.Competition {
	return predicate.Competition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Competition) predicate.Competition {
	return predicate.Competition(sql.NotPredicates(p))
}
