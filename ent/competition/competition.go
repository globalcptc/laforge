// Code generated by ent, DO NOT EDIT.

package competition

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the competition type in the database.
	Label = "competition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldRootPassword holds the string denoting the root_password field in the database.
	FieldRootPassword = "root_password"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeCompetitionToDNS holds the string denoting the competitiontodns edge name in mutations.
	EdgeCompetitionToDNS = "CompetitionToDNS"
	// EdgeCompetitionToEnvironment holds the string denoting the competitiontoenvironment edge name in mutations.
	EdgeCompetitionToEnvironment = "CompetitionToEnvironment"
	// EdgeCompetitionToBuild holds the string denoting the competitiontobuild edge name in mutations.
	EdgeCompetitionToBuild = "CompetitionToBuild"
	// Table holds the table name of the competition in the database.
	Table = "competitions"
	// CompetitionToDNSTable is the table that holds the CompetitionToDNS relation/edge. The primary key declared below.
	CompetitionToDNSTable = "competition_CompetitionToDNS"
	// CompetitionToDNSInverseTable is the table name for the DNS entity.
	// It exists in this package in order to avoid circular dependency with the "dns" package.
	CompetitionToDNSInverseTable = "dn_ss"
	// CompetitionToEnvironmentTable is the table that holds the CompetitionToEnvironment relation/edge.
	CompetitionToEnvironmentTable = "competitions"
	// CompetitionToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	CompetitionToEnvironmentInverseTable = "environments"
	// CompetitionToEnvironmentColumn is the table column denoting the CompetitionToEnvironment relation/edge.
	CompetitionToEnvironmentColumn = "environment_environment_to_competition"
	// CompetitionToBuildTable is the table that holds the CompetitionToBuild relation/edge.
	CompetitionToBuildTable = "builds"
	// CompetitionToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	CompetitionToBuildInverseTable = "builds"
	// CompetitionToBuildColumn is the table column denoting the CompetitionToBuild relation/edge.
	CompetitionToBuildColumn = "build_build_to_competition"
)

// Columns holds all SQL columns for competition fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldRootPassword,
	FieldConfig,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "competitions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_environment_to_competition",
}

var (
	// CompetitionToDNSPrimaryKey and CompetitionToDNSColumn2 are the table columns denoting the
	// primary key for the CompetitionToDNS relation (M2M).
	CompetitionToDNSPrimaryKey = []string{"competition_id", "dns_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Competition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByRootPassword orders the results by the root_password field.
func ByRootPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRootPassword, opts...).ToFunc()
}

// ByCompetitionToDNSCount orders the results by CompetitionToDNS count.
func ByCompetitionToDNSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompetitionToDNSStep(), opts...)
	}
}

// ByCompetitionToDNS orders the results by CompetitionToDNS terms.
func ByCompetitionToDNS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompetitionToDNSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompetitionToEnvironmentField orders the results by CompetitionToEnvironment field.
func ByCompetitionToEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompetitionToEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompetitionToBuildCount orders the results by CompetitionToBuild count.
func ByCompetitionToBuildCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompetitionToBuildStep(), opts...)
	}
}

// ByCompetitionToBuild orders the results by CompetitionToBuild terms.
func ByCompetitionToBuild(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompetitionToBuildStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompetitionToDNSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompetitionToDNSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CompetitionToDNSTable, CompetitionToDNSPrimaryKey...),
	)
}
func newCompetitionToEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompetitionToEnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompetitionToEnvironmentTable, CompetitionToEnvironmentColumn),
	)
}
func newCompetitionToBuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompetitionToBuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CompetitionToBuildTable, CompetitionToBuildColumn),
	)
}
