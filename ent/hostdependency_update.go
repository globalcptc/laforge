// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// HostDependencyUpdate is the builder for updating HostDependency entities.
type HostDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *HostDependencyMutation
}

// Where appends a list predicates to the HostDependencyUpdate builder.
func (hdu *HostDependencyUpdate) Where(ps ...predicate.HostDependency) *HostDependencyUpdate {
	hdu.mutation.Where(ps...)
	return hdu
}

// SetHostID sets the "host_id" field.
func (hdu *HostDependencyUpdate) SetHostID(s string) *HostDependencyUpdate {
	hdu.mutation.SetHostID(s)
	return hdu
}

// SetNillableHostID sets the "host_id" field if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableHostID(s *string) *HostDependencyUpdate {
	if s != nil {
		hdu.SetHostID(*s)
	}
	return hdu
}

// SetNetworkID sets the "network_id" field.
func (hdu *HostDependencyUpdate) SetNetworkID(s string) *HostDependencyUpdate {
	hdu.mutation.SetNetworkID(s)
	return hdu
}

// SetNillableNetworkID sets the "network_id" field if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableNetworkID(s *string) *HostDependencyUpdate {
	if s != nil {
		hdu.SetNetworkID(*s)
	}
	return hdu
}

// SetHostDependencyToDependOnHostID sets the "HostDependencyToDependOnHost" edge to the Host entity by ID.
func (hdu *HostDependencyUpdate) SetHostDependencyToDependOnHostID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetHostDependencyToDependOnHostID(id)
	return hdu
}

// SetNillableHostDependencyToDependOnHostID sets the "HostDependencyToDependOnHost" edge to the Host entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableHostDependencyToDependOnHostID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetHostDependencyToDependOnHostID(*id)
	}
	return hdu
}

// SetHostDependencyToDependOnHost sets the "HostDependencyToDependOnHost" edge to the Host entity.
func (hdu *HostDependencyUpdate) SetHostDependencyToDependOnHost(h *Host) *HostDependencyUpdate {
	return hdu.SetHostDependencyToDependOnHostID(h.ID)
}

// SetHostDependencyToDependByHostID sets the "HostDependencyToDependByHost" edge to the Host entity by ID.
func (hdu *HostDependencyUpdate) SetHostDependencyToDependByHostID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetHostDependencyToDependByHostID(id)
	return hdu
}

// SetNillableHostDependencyToDependByHostID sets the "HostDependencyToDependByHost" edge to the Host entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableHostDependencyToDependByHostID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetHostDependencyToDependByHostID(*id)
	}
	return hdu
}

// SetHostDependencyToDependByHost sets the "HostDependencyToDependByHost" edge to the Host entity.
func (hdu *HostDependencyUpdate) SetHostDependencyToDependByHost(h *Host) *HostDependencyUpdate {
	return hdu.SetHostDependencyToDependByHostID(h.ID)
}

// SetHostDependencyToNetworkID sets the "HostDependencyToNetwork" edge to the Network entity by ID.
func (hdu *HostDependencyUpdate) SetHostDependencyToNetworkID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetHostDependencyToNetworkID(id)
	return hdu
}

// SetNillableHostDependencyToNetworkID sets the "HostDependencyToNetwork" edge to the Network entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableHostDependencyToNetworkID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetHostDependencyToNetworkID(*id)
	}
	return hdu
}

// SetHostDependencyToNetwork sets the "HostDependencyToNetwork" edge to the Network entity.
func (hdu *HostDependencyUpdate) SetHostDependencyToNetwork(n *Network) *HostDependencyUpdate {
	return hdu.SetHostDependencyToNetworkID(n.ID)
}

// SetHostDependencyToEnvironmentID sets the "HostDependencyToEnvironment" edge to the Environment entity by ID.
func (hdu *HostDependencyUpdate) SetHostDependencyToEnvironmentID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetHostDependencyToEnvironmentID(id)
	return hdu
}

// SetNillableHostDependencyToEnvironmentID sets the "HostDependencyToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableHostDependencyToEnvironmentID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetHostDependencyToEnvironmentID(*id)
	}
	return hdu
}

// SetHostDependencyToEnvironment sets the "HostDependencyToEnvironment" edge to the Environment entity.
func (hdu *HostDependencyUpdate) SetHostDependencyToEnvironment(e *Environment) *HostDependencyUpdate {
	return hdu.SetHostDependencyToEnvironmentID(e.ID)
}

// Mutation returns the HostDependencyMutation object of the builder.
func (hdu *HostDependencyUpdate) Mutation() *HostDependencyMutation {
	return hdu.mutation
}

// ClearHostDependencyToDependOnHost clears the "HostDependencyToDependOnHost" edge to the Host entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToDependOnHost() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToDependOnHost()
	return hdu
}

// ClearHostDependencyToDependByHost clears the "HostDependencyToDependByHost" edge to the Host entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToDependByHost() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToDependByHost()
	return hdu
}

// ClearHostDependencyToNetwork clears the "HostDependencyToNetwork" edge to the Network entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToNetwork() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToNetwork()
	return hdu
}

// ClearHostDependencyToEnvironment clears the "HostDependencyToEnvironment" edge to the Environment entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToEnvironment() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToEnvironment()
	return hdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hdu *HostDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hdu.sqlSave, hdu.mutation, hdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hdu *HostDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := hdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hdu *HostDependencyUpdate) Exec(ctx context.Context) error {
	_, err := hdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hdu *HostDependencyUpdate) ExecX(ctx context.Context) {
	if err := hdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hdu *HostDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hostdependency.Table, hostdependency.Columns, sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID))
	if ps := hdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hdu.mutation.HostID(); ok {
		_spec.SetField(hostdependency.FieldHostID, field.TypeString, value)
	}
	if value, ok := hdu.mutation.NetworkID(); ok {
		_spec.SetField(hostdependency.FieldNetworkID, field.TypeString, value)
	}
	if hdu.mutation.HostDependencyToDependOnHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: []string{hostdependency.HostDependencyToDependOnHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToDependOnHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: []string{hostdependency.HostDependencyToDependOnHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.HostDependencyToDependByHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: []string{hostdependency.HostDependencyToDependByHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToDependByHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: []string{hostdependency.HostDependencyToDependByHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.HostDependencyToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: []string{hostdependency.HostDependencyToNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: []string{hostdependency.HostDependencyToNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.HostDependencyToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: []string{hostdependency.HostDependencyToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: []string{hostdependency.HostDependencyToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hdu.mutation.done = true
	return n, nil
}

// HostDependencyUpdateOne is the builder for updating a single HostDependency entity.
type HostDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostDependencyMutation
}

// SetHostID sets the "host_id" field.
func (hduo *HostDependencyUpdateOne) SetHostID(s string) *HostDependencyUpdateOne {
	hduo.mutation.SetHostID(s)
	return hduo
}

// SetNillableHostID sets the "host_id" field if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableHostID(s *string) *HostDependencyUpdateOne {
	if s != nil {
		hduo.SetHostID(*s)
	}
	return hduo
}

// SetNetworkID sets the "network_id" field.
func (hduo *HostDependencyUpdateOne) SetNetworkID(s string) *HostDependencyUpdateOne {
	hduo.mutation.SetNetworkID(s)
	return hduo
}

// SetNillableNetworkID sets the "network_id" field if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableNetworkID(s *string) *HostDependencyUpdateOne {
	if s != nil {
		hduo.SetNetworkID(*s)
	}
	return hduo
}

// SetHostDependencyToDependOnHostID sets the "HostDependencyToDependOnHost" edge to the Host entity by ID.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToDependOnHostID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetHostDependencyToDependOnHostID(id)
	return hduo
}

// SetNillableHostDependencyToDependOnHostID sets the "HostDependencyToDependOnHost" edge to the Host entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableHostDependencyToDependOnHostID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetHostDependencyToDependOnHostID(*id)
	}
	return hduo
}

// SetHostDependencyToDependOnHost sets the "HostDependencyToDependOnHost" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToDependOnHost(h *Host) *HostDependencyUpdateOne {
	return hduo.SetHostDependencyToDependOnHostID(h.ID)
}

// SetHostDependencyToDependByHostID sets the "HostDependencyToDependByHost" edge to the Host entity by ID.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToDependByHostID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetHostDependencyToDependByHostID(id)
	return hduo
}

// SetNillableHostDependencyToDependByHostID sets the "HostDependencyToDependByHost" edge to the Host entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableHostDependencyToDependByHostID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetHostDependencyToDependByHostID(*id)
	}
	return hduo
}

// SetHostDependencyToDependByHost sets the "HostDependencyToDependByHost" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToDependByHost(h *Host) *HostDependencyUpdateOne {
	return hduo.SetHostDependencyToDependByHostID(h.ID)
}

// SetHostDependencyToNetworkID sets the "HostDependencyToNetwork" edge to the Network entity by ID.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToNetworkID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetHostDependencyToNetworkID(id)
	return hduo
}

// SetNillableHostDependencyToNetworkID sets the "HostDependencyToNetwork" edge to the Network entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableHostDependencyToNetworkID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetHostDependencyToNetworkID(*id)
	}
	return hduo
}

// SetHostDependencyToNetwork sets the "HostDependencyToNetwork" edge to the Network entity.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToNetwork(n *Network) *HostDependencyUpdateOne {
	return hduo.SetHostDependencyToNetworkID(n.ID)
}

// SetHostDependencyToEnvironmentID sets the "HostDependencyToEnvironment" edge to the Environment entity by ID.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToEnvironmentID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetHostDependencyToEnvironmentID(id)
	return hduo
}

// SetNillableHostDependencyToEnvironmentID sets the "HostDependencyToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableHostDependencyToEnvironmentID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetHostDependencyToEnvironmentID(*id)
	}
	return hduo
}

// SetHostDependencyToEnvironment sets the "HostDependencyToEnvironment" edge to the Environment entity.
func (hduo *HostDependencyUpdateOne) SetHostDependencyToEnvironment(e *Environment) *HostDependencyUpdateOne {
	return hduo.SetHostDependencyToEnvironmentID(e.ID)
}

// Mutation returns the HostDependencyMutation object of the builder.
func (hduo *HostDependencyUpdateOne) Mutation() *HostDependencyMutation {
	return hduo.mutation
}

// ClearHostDependencyToDependOnHost clears the "HostDependencyToDependOnHost" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToDependOnHost() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToDependOnHost()
	return hduo
}

// ClearHostDependencyToDependByHost clears the "HostDependencyToDependByHost" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToDependByHost() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToDependByHost()
	return hduo
}

// ClearHostDependencyToNetwork clears the "HostDependencyToNetwork" edge to the Network entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToNetwork() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToNetwork()
	return hduo
}

// ClearHostDependencyToEnvironment clears the "HostDependencyToEnvironment" edge to the Environment entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToEnvironment() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToEnvironment()
	return hduo
}

// Where appends a list predicates to the HostDependencyUpdate builder.
func (hduo *HostDependencyUpdateOne) Where(ps ...predicate.HostDependency) *HostDependencyUpdateOne {
	hduo.mutation.Where(ps...)
	return hduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hduo *HostDependencyUpdateOne) Select(field string, fields ...string) *HostDependencyUpdateOne {
	hduo.fields = append([]string{field}, fields...)
	return hduo
}

// Save executes the query and returns the updated HostDependency entity.
func (hduo *HostDependencyUpdateOne) Save(ctx context.Context) (*HostDependency, error) {
	return withHooks(ctx, hduo.sqlSave, hduo.mutation, hduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hduo *HostDependencyUpdateOne) SaveX(ctx context.Context) *HostDependency {
	node, err := hduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hduo *HostDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := hduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hduo *HostDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := hduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hduo *HostDependencyUpdateOne) sqlSave(ctx context.Context) (_node *HostDependency, err error) {
	_spec := sqlgraph.NewUpdateSpec(hostdependency.Table, hostdependency.Columns, sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID))
	id, ok := hduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostdependency.FieldID)
		for _, f := range fields {
			if !hostdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hduo.mutation.HostID(); ok {
		_spec.SetField(hostdependency.FieldHostID, field.TypeString, value)
	}
	if value, ok := hduo.mutation.NetworkID(); ok {
		_spec.SetField(hostdependency.FieldNetworkID, field.TypeString, value)
	}
	if hduo.mutation.HostDependencyToDependOnHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: []string{hostdependency.HostDependencyToDependOnHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToDependOnHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: []string{hostdependency.HostDependencyToDependOnHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.HostDependencyToDependByHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: []string{hostdependency.HostDependencyToDependByHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToDependByHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: []string{hostdependency.HostDependencyToDependByHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.HostDependencyToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: []string{hostdependency.HostDependencyToNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: []string{hostdependency.HostDependencyToNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(network.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.HostDependencyToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: []string{hostdependency.HostDependencyToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: []string{hostdependency.HostDependencyToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostDependency{config: hduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hduo.mutation.done = true
	return _node, nil
}
