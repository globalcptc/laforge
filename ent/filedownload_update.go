// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// FileDownloadUpdate is the builder for updating FileDownload entities.
type FileDownloadUpdate struct {
	config
	hooks    []Hook
	mutation *FileDownloadMutation
}

// Where appends a list predicates to the FileDownloadUpdate builder.
func (fdu *FileDownloadUpdate) Where(ps ...predicate.FileDownload) *FileDownloadUpdate {
	fdu.mutation.Where(ps...)
	return fdu
}

// SetHCLID sets the "hcl_id" field.
func (fdu *FileDownloadUpdate) SetHCLID(s string) *FileDownloadUpdate {
	fdu.mutation.SetHCLID(s)
	return fdu
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableHCLID(s *string) *FileDownloadUpdate {
	if s != nil {
		fdu.SetHCLID(*s)
	}
	return fdu
}

// SetSourceType sets the "source_type" field.
func (fdu *FileDownloadUpdate) SetSourceType(s string) *FileDownloadUpdate {
	fdu.mutation.SetSourceType(s)
	return fdu
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableSourceType(s *string) *FileDownloadUpdate {
	if s != nil {
		fdu.SetSourceType(*s)
	}
	return fdu
}

// SetSource sets the "source" field.
func (fdu *FileDownloadUpdate) SetSource(s string) *FileDownloadUpdate {
	fdu.mutation.SetSource(s)
	return fdu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableSource(s *string) *FileDownloadUpdate {
	if s != nil {
		fdu.SetSource(*s)
	}
	return fdu
}

// SetDestination sets the "destination" field.
func (fdu *FileDownloadUpdate) SetDestination(s string) *FileDownloadUpdate {
	fdu.mutation.SetDestination(s)
	return fdu
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableDestination(s *string) *FileDownloadUpdate {
	if s != nil {
		fdu.SetDestination(*s)
	}
	return fdu
}

// SetTemplate sets the "template" field.
func (fdu *FileDownloadUpdate) SetTemplate(b bool) *FileDownloadUpdate {
	fdu.mutation.SetTemplate(b)
	return fdu
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableTemplate(b *bool) *FileDownloadUpdate {
	if b != nil {
		fdu.SetTemplate(*b)
	}
	return fdu
}

// SetPerms sets the "perms" field.
func (fdu *FileDownloadUpdate) SetPerms(s string) *FileDownloadUpdate {
	fdu.mutation.SetPerms(s)
	return fdu
}

// SetNillablePerms sets the "perms" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillablePerms(s *string) *FileDownloadUpdate {
	if s != nil {
		fdu.SetPerms(*s)
	}
	return fdu
}

// SetDisabled sets the "disabled" field.
func (fdu *FileDownloadUpdate) SetDisabled(b bool) *FileDownloadUpdate {
	fdu.mutation.SetDisabled(b)
	return fdu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableDisabled(b *bool) *FileDownloadUpdate {
	if b != nil {
		fdu.SetDisabled(*b)
	}
	return fdu
}

// SetMd5 sets the "md5" field.
func (fdu *FileDownloadUpdate) SetMd5(s string) *FileDownloadUpdate {
	fdu.mutation.SetMd5(s)
	return fdu
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableMd5(s *string) *FileDownloadUpdate {
	if s != nil {
		fdu.SetMd5(*s)
	}
	return fdu
}

// SetAbsPath sets the "abs_path" field.
func (fdu *FileDownloadUpdate) SetAbsPath(s string) *FileDownloadUpdate {
	fdu.mutation.SetAbsPath(s)
	return fdu
}

// SetNillableAbsPath sets the "abs_path" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableAbsPath(s *string) *FileDownloadUpdate {
	if s != nil {
		fdu.SetAbsPath(*s)
	}
	return fdu
}

// SetIsTxt sets the "is_txt" field.
func (fdu *FileDownloadUpdate) SetIsTxt(b bool) *FileDownloadUpdate {
	fdu.mutation.SetIsTxt(b)
	return fdu
}

// SetNillableIsTxt sets the "is_txt" field if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableIsTxt(b *bool) *FileDownloadUpdate {
	if b != nil {
		fdu.SetIsTxt(*b)
	}
	return fdu
}

// SetTags sets the "tags" field.
func (fdu *FileDownloadUpdate) SetTags(m map[string]string) *FileDownloadUpdate {
	fdu.mutation.SetTags(m)
	return fdu
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (fdu *FileDownloadUpdate) SetEnvironmentID(id uuid.UUID) *FileDownloadUpdate {
	fdu.mutation.SetEnvironmentID(id)
	return fdu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (fdu *FileDownloadUpdate) SetNillableEnvironmentID(id *uuid.UUID) *FileDownloadUpdate {
	if id != nil {
		fdu = fdu.SetEnvironmentID(*id)
	}
	return fdu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (fdu *FileDownloadUpdate) SetEnvironment(e *Environment) *FileDownloadUpdate {
	return fdu.SetEnvironmentID(e.ID)
}

// Mutation returns the FileDownloadMutation object of the builder.
func (fdu *FileDownloadUpdate) Mutation() *FileDownloadMutation {
	return fdu.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (fdu *FileDownloadUpdate) ClearEnvironment() *FileDownloadUpdate {
	fdu.mutation.ClearEnvironment()
	return fdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdu *FileDownloadUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fdu.sqlSave, fdu.mutation, fdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FileDownloadUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FileDownloadUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FileDownloadUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fdu *FileDownloadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(filedownload.Table, filedownload.Columns, sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID))
	if ps := fdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.HCLID(); ok {
		_spec.SetField(filedownload.FieldHCLID, field.TypeString, value)
	}
	if value, ok := fdu.mutation.SourceType(); ok {
		_spec.SetField(filedownload.FieldSourceType, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Source(); ok {
		_spec.SetField(filedownload.FieldSource, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Destination(); ok {
		_spec.SetField(filedownload.FieldDestination, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Template(); ok {
		_spec.SetField(filedownload.FieldTemplate, field.TypeBool, value)
	}
	if value, ok := fdu.mutation.Perms(); ok {
		_spec.SetField(filedownload.FieldPerms, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Disabled(); ok {
		_spec.SetField(filedownload.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := fdu.mutation.Md5(); ok {
		_spec.SetField(filedownload.FieldMd5, field.TypeString, value)
	}
	if value, ok := fdu.mutation.AbsPath(); ok {
		_spec.SetField(filedownload.FieldAbsPath, field.TypeString, value)
	}
	if value, ok := fdu.mutation.IsTxt(); ok {
		_spec.SetField(filedownload.FieldIsTxt, field.TypeBool, value)
	}
	if value, ok := fdu.mutation.Tags(); ok {
		_spec.SetField(filedownload.FieldTags, field.TypeJSON, value)
	}
	if fdu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownload.EnvironmentTable,
			Columns: []string{filedownload.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fdu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownload.EnvironmentTable,
			Columns: []string{filedownload.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedownload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fdu.mutation.done = true
	return n, nil
}

// FileDownloadUpdateOne is the builder for updating a single FileDownload entity.
type FileDownloadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileDownloadMutation
}

// SetHCLID sets the "hcl_id" field.
func (fduo *FileDownloadUpdateOne) SetHCLID(s string) *FileDownloadUpdateOne {
	fduo.mutation.SetHCLID(s)
	return fduo
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableHCLID(s *string) *FileDownloadUpdateOne {
	if s != nil {
		fduo.SetHCLID(*s)
	}
	return fduo
}

// SetSourceType sets the "source_type" field.
func (fduo *FileDownloadUpdateOne) SetSourceType(s string) *FileDownloadUpdateOne {
	fduo.mutation.SetSourceType(s)
	return fduo
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableSourceType(s *string) *FileDownloadUpdateOne {
	if s != nil {
		fduo.SetSourceType(*s)
	}
	return fduo
}

// SetSource sets the "source" field.
func (fduo *FileDownloadUpdateOne) SetSource(s string) *FileDownloadUpdateOne {
	fduo.mutation.SetSource(s)
	return fduo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableSource(s *string) *FileDownloadUpdateOne {
	if s != nil {
		fduo.SetSource(*s)
	}
	return fduo
}

// SetDestination sets the "destination" field.
func (fduo *FileDownloadUpdateOne) SetDestination(s string) *FileDownloadUpdateOne {
	fduo.mutation.SetDestination(s)
	return fduo
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableDestination(s *string) *FileDownloadUpdateOne {
	if s != nil {
		fduo.SetDestination(*s)
	}
	return fduo
}

// SetTemplate sets the "template" field.
func (fduo *FileDownloadUpdateOne) SetTemplate(b bool) *FileDownloadUpdateOne {
	fduo.mutation.SetTemplate(b)
	return fduo
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableTemplate(b *bool) *FileDownloadUpdateOne {
	if b != nil {
		fduo.SetTemplate(*b)
	}
	return fduo
}

// SetPerms sets the "perms" field.
func (fduo *FileDownloadUpdateOne) SetPerms(s string) *FileDownloadUpdateOne {
	fduo.mutation.SetPerms(s)
	return fduo
}

// SetNillablePerms sets the "perms" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillablePerms(s *string) *FileDownloadUpdateOne {
	if s != nil {
		fduo.SetPerms(*s)
	}
	return fduo
}

// SetDisabled sets the "disabled" field.
func (fduo *FileDownloadUpdateOne) SetDisabled(b bool) *FileDownloadUpdateOne {
	fduo.mutation.SetDisabled(b)
	return fduo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableDisabled(b *bool) *FileDownloadUpdateOne {
	if b != nil {
		fduo.SetDisabled(*b)
	}
	return fduo
}

// SetMd5 sets the "md5" field.
func (fduo *FileDownloadUpdateOne) SetMd5(s string) *FileDownloadUpdateOne {
	fduo.mutation.SetMd5(s)
	return fduo
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableMd5(s *string) *FileDownloadUpdateOne {
	if s != nil {
		fduo.SetMd5(*s)
	}
	return fduo
}

// SetAbsPath sets the "abs_path" field.
func (fduo *FileDownloadUpdateOne) SetAbsPath(s string) *FileDownloadUpdateOne {
	fduo.mutation.SetAbsPath(s)
	return fduo
}

// SetNillableAbsPath sets the "abs_path" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableAbsPath(s *string) *FileDownloadUpdateOne {
	if s != nil {
		fduo.SetAbsPath(*s)
	}
	return fduo
}

// SetIsTxt sets the "is_txt" field.
func (fduo *FileDownloadUpdateOne) SetIsTxt(b bool) *FileDownloadUpdateOne {
	fduo.mutation.SetIsTxt(b)
	return fduo
}

// SetNillableIsTxt sets the "is_txt" field if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableIsTxt(b *bool) *FileDownloadUpdateOne {
	if b != nil {
		fduo.SetIsTxt(*b)
	}
	return fduo
}

// SetTags sets the "tags" field.
func (fduo *FileDownloadUpdateOne) SetTags(m map[string]string) *FileDownloadUpdateOne {
	fduo.mutation.SetTags(m)
	return fduo
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (fduo *FileDownloadUpdateOne) SetEnvironmentID(id uuid.UUID) *FileDownloadUpdateOne {
	fduo.mutation.SetEnvironmentID(id)
	return fduo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (fduo *FileDownloadUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *FileDownloadUpdateOne {
	if id != nil {
		fduo = fduo.SetEnvironmentID(*id)
	}
	return fduo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (fduo *FileDownloadUpdateOne) SetEnvironment(e *Environment) *FileDownloadUpdateOne {
	return fduo.SetEnvironmentID(e.ID)
}

// Mutation returns the FileDownloadMutation object of the builder.
func (fduo *FileDownloadUpdateOne) Mutation() *FileDownloadMutation {
	return fduo.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (fduo *FileDownloadUpdateOne) ClearEnvironment() *FileDownloadUpdateOne {
	fduo.mutation.ClearEnvironment()
	return fduo
}

// Where appends a list predicates to the FileDownloadUpdate builder.
func (fduo *FileDownloadUpdateOne) Where(ps ...predicate.FileDownload) *FileDownloadUpdateOne {
	fduo.mutation.Where(ps...)
	return fduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fduo *FileDownloadUpdateOne) Select(field string, fields ...string) *FileDownloadUpdateOne {
	fduo.fields = append([]string{field}, fields...)
	return fduo
}

// Save executes the query and returns the updated FileDownload entity.
func (fduo *FileDownloadUpdateOne) Save(ctx context.Context) (*FileDownload, error) {
	return withHooks(ctx, fduo.sqlSave, fduo.mutation, fduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FileDownloadUpdateOne) SaveX(ctx context.Context) *FileDownload {
	node, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fduo *FileDownloadUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FileDownloadUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fduo *FileDownloadUpdateOne) sqlSave(ctx context.Context) (_node *FileDownload, err error) {
	_spec := sqlgraph.NewUpdateSpec(filedownload.Table, filedownload.Columns, sqlgraph.NewFieldSpec(filedownload.FieldID, field.TypeUUID))
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileDownload.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filedownload.FieldID)
		for _, f := range fields {
			if !filedownload.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filedownload.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fduo.mutation.HCLID(); ok {
		_spec.SetField(filedownload.FieldHCLID, field.TypeString, value)
	}
	if value, ok := fduo.mutation.SourceType(); ok {
		_spec.SetField(filedownload.FieldSourceType, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Source(); ok {
		_spec.SetField(filedownload.FieldSource, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Destination(); ok {
		_spec.SetField(filedownload.FieldDestination, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Template(); ok {
		_spec.SetField(filedownload.FieldTemplate, field.TypeBool, value)
	}
	if value, ok := fduo.mutation.Perms(); ok {
		_spec.SetField(filedownload.FieldPerms, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Disabled(); ok {
		_spec.SetField(filedownload.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := fduo.mutation.Md5(); ok {
		_spec.SetField(filedownload.FieldMd5, field.TypeString, value)
	}
	if value, ok := fduo.mutation.AbsPath(); ok {
		_spec.SetField(filedownload.FieldAbsPath, field.TypeString, value)
	}
	if value, ok := fduo.mutation.IsTxt(); ok {
		_spec.SetField(filedownload.FieldIsTxt, field.TypeBool, value)
	}
	if value, ok := fduo.mutation.Tags(); ok {
		_spec.SetField(filedownload.FieldTags, field.TypeJSON, value)
	}
	if fduo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownload.EnvironmentTable,
			Columns: []string{filedownload.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fduo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownload.EnvironmentTable,
			Columns: []string{filedownload.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileDownload{config: fduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedownload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fduo.mutation.done = true
	return _node, nil
}
