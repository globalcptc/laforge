// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// BuildUpdate is the builder for updating Build entities.
type BuildUpdate struct {
	config
	hooks    []Hook
	mutation *BuildMutation
}

// Where appends a list predicates to the BuildUpdate builder.
func (bu *BuildUpdate) Where(ps ...predicate.Build) *BuildUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetRevision sets the "revision" field.
func (bu *BuildUpdate) SetRevision(i int) *BuildUpdate {
	bu.mutation.ResetRevision()
	bu.mutation.SetRevision(i)
	return bu
}

// AddRevision adds i to the "revision" field.
func (bu *BuildUpdate) AddRevision(i int) *BuildUpdate {
	bu.mutation.AddRevision(i)
	return bu
}

// SetEnvironmentRevision sets the "environment_revision" field.
func (bu *BuildUpdate) SetEnvironmentRevision(i int) *BuildUpdate {
	bu.mutation.ResetEnvironmentRevision()
	bu.mutation.SetEnvironmentRevision(i)
	return bu
}

// AddEnvironmentRevision adds i to the "environment_revision" field.
func (bu *BuildUpdate) AddEnvironmentRevision(i int) *BuildUpdate {
	bu.mutation.AddEnvironmentRevision(i)
	return bu
}

// SetVars sets the "vars" field.
func (bu *BuildUpdate) SetVars(m map[string]string) *BuildUpdate {
	bu.mutation.SetVars(m)
	return bu
}

// SetCompletedPlan sets the "completed_plan" field.
func (bu *BuildUpdate) SetCompletedPlan(b bool) *BuildUpdate {
	bu.mutation.SetCompletedPlan(b)
	return bu
}

// SetNillableCompletedPlan sets the "completed_plan" field if the given value is not nil.
func (bu *BuildUpdate) SetNillableCompletedPlan(b *bool) *BuildUpdate {
	if b != nil {
		bu.SetCompletedPlan(*b)
	}
	return bu
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (bu *BuildUpdate) SetStatusID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetStatusID(id)
	return bu
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (bu *BuildUpdate) SetNillableStatusID(id *uuid.UUID) *BuildUpdate {
	if id != nil {
		bu = bu.SetStatusID(*id)
	}
	return bu
}

// SetStatus sets the "Status" edge to the Status entity.
func (bu *BuildUpdate) SetStatus(s *Status) *BuildUpdate {
	return bu.SetStatusID(s.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (bu *BuildUpdate) SetEnvironmentID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetEnvironmentID(id)
	return bu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (bu *BuildUpdate) SetEnvironment(e *Environment) *BuildUpdate {
	return bu.SetEnvironmentID(e.ID)
}

// SetCompetitionID sets the "Competition" edge to the Competition entity by ID.
func (bu *BuildUpdate) SetCompetitionID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetCompetitionID(id)
	return bu
}

// SetCompetition sets the "Competition" edge to the Competition entity.
func (bu *BuildUpdate) SetCompetition(c *Competition) *BuildUpdate {
	return bu.SetCompetitionID(c.ID)
}

// SetLatestBuildCommitID sets the "LatestBuildCommit" edge to the BuildCommit entity by ID.
func (bu *BuildUpdate) SetLatestBuildCommitID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetLatestBuildCommitID(id)
	return bu
}

// SetNillableLatestBuildCommitID sets the "LatestBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (bu *BuildUpdate) SetNillableLatestBuildCommitID(id *uuid.UUID) *BuildUpdate {
	if id != nil {
		bu = bu.SetLatestBuildCommitID(*id)
	}
	return bu
}

// SetLatestBuildCommit sets the "LatestBuildCommit" edge to the BuildCommit entity.
func (bu *BuildUpdate) SetLatestBuildCommit(b *BuildCommit) *BuildUpdate {
	return bu.SetLatestBuildCommitID(b.ID)
}

// SetRepoCommitID sets the "RepoCommit" edge to the RepoCommit entity by ID.
func (bu *BuildUpdate) SetRepoCommitID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetRepoCommitID(id)
	return bu
}

// SetNillableRepoCommitID sets the "RepoCommit" edge to the RepoCommit entity by ID if the given value is not nil.
func (bu *BuildUpdate) SetNillableRepoCommitID(id *uuid.UUID) *BuildUpdate {
	if id != nil {
		bu = bu.SetRepoCommitID(*id)
	}
	return bu
}

// SetRepoCommit sets the "RepoCommit" edge to the RepoCommit entity.
func (bu *BuildUpdate) SetRepoCommit(r *RepoCommit) *BuildUpdate {
	return bu.SetRepoCommitID(r.ID)
}

// AddProvisionedNetworkIDs adds the "ProvisionedNetworks" edge to the ProvisionedNetwork entity by IDs.
func (bu *BuildUpdate) AddProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddProvisionedNetworkIDs(ids...)
	return bu
}

// AddProvisionedNetworks adds the "ProvisionedNetworks" edges to the ProvisionedNetwork entity.
func (bu *BuildUpdate) AddProvisionedNetworks(p ...*ProvisionedNetwork) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddProvisionedNetworkIDs(ids...)
}

// AddTeamIDs adds the "Teams" edge to the Team entity by IDs.
func (bu *BuildUpdate) AddTeamIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddTeamIDs(ids...)
	return bu
}

// AddTeams adds the "Teams" edges to the Team entity.
func (bu *BuildUpdate) AddTeams(t ...*Team) *BuildUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddTeamIDs(ids...)
}

// AddPlanIDs adds the "Plans" edge to the Plan entity by IDs.
func (bu *BuildUpdate) AddPlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddPlanIDs(ids...)
	return bu
}

// AddPlans adds the "Plans" edges to the Plan entity.
func (bu *BuildUpdate) AddPlans(p ...*Plan) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddPlanIDs(ids...)
}

// AddBuildCommitIDs adds the "BuildCommits" edge to the BuildCommit entity by IDs.
func (bu *BuildUpdate) AddBuildCommitIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildCommitIDs(ids...)
	return bu
}

// AddBuildCommits adds the "BuildCommits" edges to the BuildCommit entity.
func (bu *BuildUpdate) AddBuildCommits(b ...*BuildCommit) *BuildUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBuildCommitIDs(ids...)
}

// AddAdhocPlanIDs adds the "AdhocPlans" edge to the AdhocPlan entity by IDs.
func (bu *BuildUpdate) AddAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddAdhocPlanIDs(ids...)
	return bu
}

// AddAdhocPlans adds the "AdhocPlans" edges to the AdhocPlan entity.
func (bu *BuildUpdate) AddAdhocPlans(a ...*AdhocPlan) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddAdhocPlanIDs(ids...)
}

// AddAgentStatuseIDs adds the "AgentStatuses" edge to the AgentStatus entity by IDs.
func (bu *BuildUpdate) AddAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddAgentStatuseIDs(ids...)
	return bu
}

// AddAgentStatuses adds the "AgentStatuses" edges to the AgentStatus entity.
func (bu *BuildUpdate) AddAgentStatuses(a ...*AgentStatus) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddAgentStatuseIDs(ids...)
}

// AddServerTaskIDs adds the "ServerTasks" edge to the ServerTask entity by IDs.
func (bu *BuildUpdate) AddServerTaskIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddServerTaskIDs(ids...)
	return bu
}

// AddServerTasks adds the "ServerTasks" edges to the ServerTask entity.
func (bu *BuildUpdate) AddServerTasks(s ...*ServerTask) *BuildUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddServerTaskIDs(ids...)
}

// Mutation returns the BuildMutation object of the builder.
func (bu *BuildUpdate) Mutation() *BuildMutation {
	return bu.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (bu *BuildUpdate) ClearStatus() *BuildUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (bu *BuildUpdate) ClearEnvironment() *BuildUpdate {
	bu.mutation.ClearEnvironment()
	return bu
}

// ClearCompetition clears the "Competition" edge to the Competition entity.
func (bu *BuildUpdate) ClearCompetition() *BuildUpdate {
	bu.mutation.ClearCompetition()
	return bu
}

// ClearLatestBuildCommit clears the "LatestBuildCommit" edge to the BuildCommit entity.
func (bu *BuildUpdate) ClearLatestBuildCommit() *BuildUpdate {
	bu.mutation.ClearLatestBuildCommit()
	return bu
}

// ClearRepoCommit clears the "RepoCommit" edge to the RepoCommit entity.
func (bu *BuildUpdate) ClearRepoCommit() *BuildUpdate {
	bu.mutation.ClearRepoCommit()
	return bu
}

// ClearProvisionedNetworks clears all "ProvisionedNetworks" edges to the ProvisionedNetwork entity.
func (bu *BuildUpdate) ClearProvisionedNetworks() *BuildUpdate {
	bu.mutation.ClearProvisionedNetworks()
	return bu
}

// RemoveProvisionedNetworkIDs removes the "ProvisionedNetworks" edge to ProvisionedNetwork entities by IDs.
func (bu *BuildUpdate) RemoveProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveProvisionedNetworkIDs(ids...)
	return bu
}

// RemoveProvisionedNetworks removes "ProvisionedNetworks" edges to ProvisionedNetwork entities.
func (bu *BuildUpdate) RemoveProvisionedNetworks(p ...*ProvisionedNetwork) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveProvisionedNetworkIDs(ids...)
}

// ClearTeams clears all "Teams" edges to the Team entity.
func (bu *BuildUpdate) ClearTeams() *BuildUpdate {
	bu.mutation.ClearTeams()
	return bu
}

// RemoveTeamIDs removes the "Teams" edge to Team entities by IDs.
func (bu *BuildUpdate) RemoveTeamIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveTeamIDs(ids...)
	return bu
}

// RemoveTeams removes "Teams" edges to Team entities.
func (bu *BuildUpdate) RemoveTeams(t ...*Team) *BuildUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveTeamIDs(ids...)
}

// ClearPlans clears all "Plans" edges to the Plan entity.
func (bu *BuildUpdate) ClearPlans() *BuildUpdate {
	bu.mutation.ClearPlans()
	return bu
}

// RemovePlanIDs removes the "Plans" edge to Plan entities by IDs.
func (bu *BuildUpdate) RemovePlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemovePlanIDs(ids...)
	return bu
}

// RemovePlans removes "Plans" edges to Plan entities.
func (bu *BuildUpdate) RemovePlans(p ...*Plan) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemovePlanIDs(ids...)
}

// ClearBuildCommits clears all "BuildCommits" edges to the BuildCommit entity.
func (bu *BuildUpdate) ClearBuildCommits() *BuildUpdate {
	bu.mutation.ClearBuildCommits()
	return bu
}

// RemoveBuildCommitIDs removes the "BuildCommits" edge to BuildCommit entities by IDs.
func (bu *BuildUpdate) RemoveBuildCommitIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildCommitIDs(ids...)
	return bu
}

// RemoveBuildCommits removes "BuildCommits" edges to BuildCommit entities.
func (bu *BuildUpdate) RemoveBuildCommits(b ...*BuildCommit) *BuildUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBuildCommitIDs(ids...)
}

// ClearAdhocPlans clears all "AdhocPlans" edges to the AdhocPlan entity.
func (bu *BuildUpdate) ClearAdhocPlans() *BuildUpdate {
	bu.mutation.ClearAdhocPlans()
	return bu
}

// RemoveAdhocPlanIDs removes the "AdhocPlans" edge to AdhocPlan entities by IDs.
func (bu *BuildUpdate) RemoveAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveAdhocPlanIDs(ids...)
	return bu
}

// RemoveAdhocPlans removes "AdhocPlans" edges to AdhocPlan entities.
func (bu *BuildUpdate) RemoveAdhocPlans(a ...*AdhocPlan) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveAdhocPlanIDs(ids...)
}

// ClearAgentStatuses clears all "AgentStatuses" edges to the AgentStatus entity.
func (bu *BuildUpdate) ClearAgentStatuses() *BuildUpdate {
	bu.mutation.ClearAgentStatuses()
	return bu
}

// RemoveAgentStatuseIDs removes the "AgentStatuses" edge to AgentStatus entities by IDs.
func (bu *BuildUpdate) RemoveAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveAgentStatuseIDs(ids...)
	return bu
}

// RemoveAgentStatuses removes "AgentStatuses" edges to AgentStatus entities.
func (bu *BuildUpdate) RemoveAgentStatuses(a ...*AgentStatus) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveAgentStatuseIDs(ids...)
}

// ClearServerTasks clears all "ServerTasks" edges to the ServerTask entity.
func (bu *BuildUpdate) ClearServerTasks() *BuildUpdate {
	bu.mutation.ClearServerTasks()
	return bu
}

// RemoveServerTaskIDs removes the "ServerTasks" edge to ServerTask entities by IDs.
func (bu *BuildUpdate) RemoveServerTaskIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveServerTaskIDs(ids...)
	return bu
}

// RemoveServerTasks removes "ServerTasks" edges to ServerTask entities.
func (bu *BuildUpdate) RemoveServerTasks(s ...*ServerTask) *BuildUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemoveServerTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BuildUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BuildUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BuildUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BuildUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BuildUpdate) check() error {
	if _, ok := bu.mutation.EnvironmentID(); bu.mutation.EnvironmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.Environment"`)
	}
	if _, ok := bu.mutation.CompetitionID(); bu.mutation.CompetitionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.Competition"`)
	}
	return nil
}

func (bu *BuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   build.Table,
			Columns: build.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: build.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := bu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := bu.mutation.EnvironmentRevision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldEnvironmentRevision,
		})
	}
	if value, ok := bu.mutation.AddedEnvironmentRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldEnvironmentRevision,
		})
	}
	if value, ok := bu.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: build.FieldVars,
		})
	}
	if value, ok := bu.mutation.CompletedPlan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: build.FieldCompletedPlan,
		})
	}
	if bu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.StatusTable,
			Columns: []string{build.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.StatusTable,
			Columns: []string{build.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.EnvironmentTable,
			Columns: []string{build.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.EnvironmentTable,
			Columns: []string{build.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.CompetitionTable,
			Columns: []string{build.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.CompetitionTable,
			Columns: []string{build.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LatestBuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.LatestBuildCommitTable,
			Columns: []string{build.LatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LatestBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.LatestBuildCommitTable,
			Columns: []string{build.LatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.RepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.RepoCommitTable,
			Columns: []string{build.RepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repocommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RepoCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.RepoCommitTable,
			Columns: []string{build.RepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repocommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ProvisionedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ProvisionedNetworksTable,
			Columns: []string{build.ProvisionedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedProvisionedNetworksIDs(); len(nodes) > 0 && !bu.mutation.ProvisionedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ProvisionedNetworksTable,
			Columns: []string{build.ProvisionedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ProvisionedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ProvisionedNetworksTable,
			Columns: []string{build.ProvisionedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.TeamsTable,
			Columns: []string{build.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !bu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.TeamsTable,
			Columns: []string{build.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.TeamsTable,
			Columns: []string{build.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.PlansTable,
			Columns: []string{build.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedPlansIDs(); len(nodes) > 0 && !bu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.PlansTable,
			Columns: []string{build.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.PlansTable,
			Columns: []string{build.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildCommitsTable,
			Columns: []string{build.BuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildCommitsIDs(); len(nodes) > 0 && !bu.mutation.BuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildCommitsTable,
			Columns: []string{build.BuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildCommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildCommitsTable,
			Columns: []string{build.BuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AdhocPlansTable,
			Columns: []string{build.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAdhocPlansIDs(); len(nodes) > 0 && !bu.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AdhocPlansTable,
			Columns: []string{build.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AdhocPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AdhocPlansTable,
			Columns: []string{build.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AgentStatusesTable,
			Columns: []string{build.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAgentStatusesIDs(); len(nodes) > 0 && !bu.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AgentStatusesTable,
			Columns: []string{build.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AgentStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AgentStatusesTable,
			Columns: []string{build.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ServerTasksTable,
			Columns: []string{build.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedServerTasksIDs(); len(nodes) > 0 && !bu.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ServerTasksTable,
			Columns: []string{build.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ServerTasksTable,
			Columns: []string{build.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{build.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BuildUpdateOne is the builder for updating a single Build entity.
type BuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BuildMutation
}

// SetRevision sets the "revision" field.
func (buo *BuildUpdateOne) SetRevision(i int) *BuildUpdateOne {
	buo.mutation.ResetRevision()
	buo.mutation.SetRevision(i)
	return buo
}

// AddRevision adds i to the "revision" field.
func (buo *BuildUpdateOne) AddRevision(i int) *BuildUpdateOne {
	buo.mutation.AddRevision(i)
	return buo
}

// SetEnvironmentRevision sets the "environment_revision" field.
func (buo *BuildUpdateOne) SetEnvironmentRevision(i int) *BuildUpdateOne {
	buo.mutation.ResetEnvironmentRevision()
	buo.mutation.SetEnvironmentRevision(i)
	return buo
}

// AddEnvironmentRevision adds i to the "environment_revision" field.
func (buo *BuildUpdateOne) AddEnvironmentRevision(i int) *BuildUpdateOne {
	buo.mutation.AddEnvironmentRevision(i)
	return buo
}

// SetVars sets the "vars" field.
func (buo *BuildUpdateOne) SetVars(m map[string]string) *BuildUpdateOne {
	buo.mutation.SetVars(m)
	return buo
}

// SetCompletedPlan sets the "completed_plan" field.
func (buo *BuildUpdateOne) SetCompletedPlan(b bool) *BuildUpdateOne {
	buo.mutation.SetCompletedPlan(b)
	return buo
}

// SetNillableCompletedPlan sets the "completed_plan" field if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableCompletedPlan(b *bool) *BuildUpdateOne {
	if b != nil {
		buo.SetCompletedPlan(*b)
	}
	return buo
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (buo *BuildUpdateOne) SetStatusID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetStatusID(id)
	return buo
}

// SetNillableStatusID sets the "Status" edge to the Status entity by ID if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableStatusID(id *uuid.UUID) *BuildUpdateOne {
	if id != nil {
		buo = buo.SetStatusID(*id)
	}
	return buo
}

// SetStatus sets the "Status" edge to the Status entity.
func (buo *BuildUpdateOne) SetStatus(s *Status) *BuildUpdateOne {
	return buo.SetStatusID(s.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (buo *BuildUpdateOne) SetEnvironmentID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetEnvironmentID(id)
	return buo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (buo *BuildUpdateOne) SetEnvironment(e *Environment) *BuildUpdateOne {
	return buo.SetEnvironmentID(e.ID)
}

// SetCompetitionID sets the "Competition" edge to the Competition entity by ID.
func (buo *BuildUpdateOne) SetCompetitionID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetCompetitionID(id)
	return buo
}

// SetCompetition sets the "Competition" edge to the Competition entity.
func (buo *BuildUpdateOne) SetCompetition(c *Competition) *BuildUpdateOne {
	return buo.SetCompetitionID(c.ID)
}

// SetLatestBuildCommitID sets the "LatestBuildCommit" edge to the BuildCommit entity by ID.
func (buo *BuildUpdateOne) SetLatestBuildCommitID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetLatestBuildCommitID(id)
	return buo
}

// SetNillableLatestBuildCommitID sets the "LatestBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableLatestBuildCommitID(id *uuid.UUID) *BuildUpdateOne {
	if id != nil {
		buo = buo.SetLatestBuildCommitID(*id)
	}
	return buo
}

// SetLatestBuildCommit sets the "LatestBuildCommit" edge to the BuildCommit entity.
func (buo *BuildUpdateOne) SetLatestBuildCommit(b *BuildCommit) *BuildUpdateOne {
	return buo.SetLatestBuildCommitID(b.ID)
}

// SetRepoCommitID sets the "RepoCommit" edge to the RepoCommit entity by ID.
func (buo *BuildUpdateOne) SetRepoCommitID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetRepoCommitID(id)
	return buo
}

// SetNillableRepoCommitID sets the "RepoCommit" edge to the RepoCommit entity by ID if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableRepoCommitID(id *uuid.UUID) *BuildUpdateOne {
	if id != nil {
		buo = buo.SetRepoCommitID(*id)
	}
	return buo
}

// SetRepoCommit sets the "RepoCommit" edge to the RepoCommit entity.
func (buo *BuildUpdateOne) SetRepoCommit(r *RepoCommit) *BuildUpdateOne {
	return buo.SetRepoCommitID(r.ID)
}

// AddProvisionedNetworkIDs adds the "ProvisionedNetworks" edge to the ProvisionedNetwork entity by IDs.
func (buo *BuildUpdateOne) AddProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddProvisionedNetworkIDs(ids...)
	return buo
}

// AddProvisionedNetworks adds the "ProvisionedNetworks" edges to the ProvisionedNetwork entity.
func (buo *BuildUpdateOne) AddProvisionedNetworks(p ...*ProvisionedNetwork) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddProvisionedNetworkIDs(ids...)
}

// AddTeamIDs adds the "Teams" edge to the Team entity by IDs.
func (buo *BuildUpdateOne) AddTeamIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddTeamIDs(ids...)
	return buo
}

// AddTeams adds the "Teams" edges to the Team entity.
func (buo *BuildUpdateOne) AddTeams(t ...*Team) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddTeamIDs(ids...)
}

// AddPlanIDs adds the "Plans" edge to the Plan entity by IDs.
func (buo *BuildUpdateOne) AddPlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddPlanIDs(ids...)
	return buo
}

// AddPlans adds the "Plans" edges to the Plan entity.
func (buo *BuildUpdateOne) AddPlans(p ...*Plan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddPlanIDs(ids...)
}

// AddBuildCommitIDs adds the "BuildCommits" edge to the BuildCommit entity by IDs.
func (buo *BuildUpdateOne) AddBuildCommitIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildCommitIDs(ids...)
	return buo
}

// AddBuildCommits adds the "BuildCommits" edges to the BuildCommit entity.
func (buo *BuildUpdateOne) AddBuildCommits(b ...*BuildCommit) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBuildCommitIDs(ids...)
}

// AddAdhocPlanIDs adds the "AdhocPlans" edge to the AdhocPlan entity by IDs.
func (buo *BuildUpdateOne) AddAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddAdhocPlanIDs(ids...)
	return buo
}

// AddAdhocPlans adds the "AdhocPlans" edges to the AdhocPlan entity.
func (buo *BuildUpdateOne) AddAdhocPlans(a ...*AdhocPlan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddAdhocPlanIDs(ids...)
}

// AddAgentStatuseIDs adds the "AgentStatuses" edge to the AgentStatus entity by IDs.
func (buo *BuildUpdateOne) AddAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddAgentStatuseIDs(ids...)
	return buo
}

// AddAgentStatuses adds the "AgentStatuses" edges to the AgentStatus entity.
func (buo *BuildUpdateOne) AddAgentStatuses(a ...*AgentStatus) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddAgentStatuseIDs(ids...)
}

// AddServerTaskIDs adds the "ServerTasks" edge to the ServerTask entity by IDs.
func (buo *BuildUpdateOne) AddServerTaskIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddServerTaskIDs(ids...)
	return buo
}

// AddServerTasks adds the "ServerTasks" edges to the ServerTask entity.
func (buo *BuildUpdateOne) AddServerTasks(s ...*ServerTask) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddServerTaskIDs(ids...)
}

// Mutation returns the BuildMutation object of the builder.
func (buo *BuildUpdateOne) Mutation() *BuildMutation {
	return buo.mutation
}

// ClearStatus clears the "Status" edge to the Status entity.
func (buo *BuildUpdateOne) ClearStatus() *BuildUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (buo *BuildUpdateOne) ClearEnvironment() *BuildUpdateOne {
	buo.mutation.ClearEnvironment()
	return buo
}

// ClearCompetition clears the "Competition" edge to the Competition entity.
func (buo *BuildUpdateOne) ClearCompetition() *BuildUpdateOne {
	buo.mutation.ClearCompetition()
	return buo
}

// ClearLatestBuildCommit clears the "LatestBuildCommit" edge to the BuildCommit entity.
func (buo *BuildUpdateOne) ClearLatestBuildCommit() *BuildUpdateOne {
	buo.mutation.ClearLatestBuildCommit()
	return buo
}

// ClearRepoCommit clears the "RepoCommit" edge to the RepoCommit entity.
func (buo *BuildUpdateOne) ClearRepoCommit() *BuildUpdateOne {
	buo.mutation.ClearRepoCommit()
	return buo
}

// ClearProvisionedNetworks clears all "ProvisionedNetworks" edges to the ProvisionedNetwork entity.
func (buo *BuildUpdateOne) ClearProvisionedNetworks() *BuildUpdateOne {
	buo.mutation.ClearProvisionedNetworks()
	return buo
}

// RemoveProvisionedNetworkIDs removes the "ProvisionedNetworks" edge to ProvisionedNetwork entities by IDs.
func (buo *BuildUpdateOne) RemoveProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveProvisionedNetworkIDs(ids...)
	return buo
}

// RemoveProvisionedNetworks removes "ProvisionedNetworks" edges to ProvisionedNetwork entities.
func (buo *BuildUpdateOne) RemoveProvisionedNetworks(p ...*ProvisionedNetwork) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveProvisionedNetworkIDs(ids...)
}

// ClearTeams clears all "Teams" edges to the Team entity.
func (buo *BuildUpdateOne) ClearTeams() *BuildUpdateOne {
	buo.mutation.ClearTeams()
	return buo
}

// RemoveTeamIDs removes the "Teams" edge to Team entities by IDs.
func (buo *BuildUpdateOne) RemoveTeamIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveTeamIDs(ids...)
	return buo
}

// RemoveTeams removes "Teams" edges to Team entities.
func (buo *BuildUpdateOne) RemoveTeams(t ...*Team) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveTeamIDs(ids...)
}

// ClearPlans clears all "Plans" edges to the Plan entity.
func (buo *BuildUpdateOne) ClearPlans() *BuildUpdateOne {
	buo.mutation.ClearPlans()
	return buo
}

// RemovePlanIDs removes the "Plans" edge to Plan entities by IDs.
func (buo *BuildUpdateOne) RemovePlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemovePlanIDs(ids...)
	return buo
}

// RemovePlans removes "Plans" edges to Plan entities.
func (buo *BuildUpdateOne) RemovePlans(p ...*Plan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemovePlanIDs(ids...)
}

// ClearBuildCommits clears all "BuildCommits" edges to the BuildCommit entity.
func (buo *BuildUpdateOne) ClearBuildCommits() *BuildUpdateOne {
	buo.mutation.ClearBuildCommits()
	return buo
}

// RemoveBuildCommitIDs removes the "BuildCommits" edge to BuildCommit entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildCommitIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildCommitIDs(ids...)
	return buo
}

// RemoveBuildCommits removes "BuildCommits" edges to BuildCommit entities.
func (buo *BuildUpdateOne) RemoveBuildCommits(b ...*BuildCommit) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBuildCommitIDs(ids...)
}

// ClearAdhocPlans clears all "AdhocPlans" edges to the AdhocPlan entity.
func (buo *BuildUpdateOne) ClearAdhocPlans() *BuildUpdateOne {
	buo.mutation.ClearAdhocPlans()
	return buo
}

// RemoveAdhocPlanIDs removes the "AdhocPlans" edge to AdhocPlan entities by IDs.
func (buo *BuildUpdateOne) RemoveAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveAdhocPlanIDs(ids...)
	return buo
}

// RemoveAdhocPlans removes "AdhocPlans" edges to AdhocPlan entities.
func (buo *BuildUpdateOne) RemoveAdhocPlans(a ...*AdhocPlan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveAdhocPlanIDs(ids...)
}

// ClearAgentStatuses clears all "AgentStatuses" edges to the AgentStatus entity.
func (buo *BuildUpdateOne) ClearAgentStatuses() *BuildUpdateOne {
	buo.mutation.ClearAgentStatuses()
	return buo
}

// RemoveAgentStatuseIDs removes the "AgentStatuses" edge to AgentStatus entities by IDs.
func (buo *BuildUpdateOne) RemoveAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveAgentStatuseIDs(ids...)
	return buo
}

// RemoveAgentStatuses removes "AgentStatuses" edges to AgentStatus entities.
func (buo *BuildUpdateOne) RemoveAgentStatuses(a ...*AgentStatus) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveAgentStatuseIDs(ids...)
}

// ClearServerTasks clears all "ServerTasks" edges to the ServerTask entity.
func (buo *BuildUpdateOne) ClearServerTasks() *BuildUpdateOne {
	buo.mutation.ClearServerTasks()
	return buo
}

// RemoveServerTaskIDs removes the "ServerTasks" edge to ServerTask entities by IDs.
func (buo *BuildUpdateOne) RemoveServerTaskIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveServerTaskIDs(ids...)
	return buo
}

// RemoveServerTasks removes "ServerTasks" edges to ServerTask entities.
func (buo *BuildUpdateOne) RemoveServerTasks(s ...*ServerTask) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemoveServerTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BuildUpdateOne) Select(field string, fields ...string) *BuildUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Build entity.
func (buo *BuildUpdateOne) Save(ctx context.Context) (*Build, error) {
	var (
		err  error
		node *Build
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Build)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BuildMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BuildUpdateOne) SaveX(ctx context.Context) *Build {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BuildUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BuildUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BuildUpdateOne) check() error {
	if _, ok := buo.mutation.EnvironmentID(); buo.mutation.EnvironmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.Environment"`)
	}
	if _, ok := buo.mutation.CompetitionID(); buo.mutation.CompetitionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.Competition"`)
	}
	return nil
}

func (buo *BuildUpdateOne) sqlSave(ctx context.Context) (_node *Build, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   build.Table,
			Columns: build.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: build.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Build.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, build.FieldID)
		for _, f := range fields {
			if !build.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != build.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := buo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := buo.mutation.EnvironmentRevision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldEnvironmentRevision,
		})
	}
	if value, ok := buo.mutation.AddedEnvironmentRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldEnvironmentRevision,
		})
	}
	if value, ok := buo.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: build.FieldVars,
		})
	}
	if value, ok := buo.mutation.CompletedPlan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: build.FieldCompletedPlan,
		})
	}
	if buo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.StatusTable,
			Columns: []string{build.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.StatusTable,
			Columns: []string{build.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.EnvironmentTable,
			Columns: []string{build.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.EnvironmentTable,
			Columns: []string{build.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.CompetitionTable,
			Columns: []string{build.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.CompetitionTable,
			Columns: []string{build.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LatestBuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.LatestBuildCommitTable,
			Columns: []string{build.LatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LatestBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.LatestBuildCommitTable,
			Columns: []string{build.LatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.RepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.RepoCommitTable,
			Columns: []string{build.RepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repocommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RepoCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.RepoCommitTable,
			Columns: []string{build.RepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repocommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ProvisionedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ProvisionedNetworksTable,
			Columns: []string{build.ProvisionedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedProvisionedNetworksIDs(); len(nodes) > 0 && !buo.mutation.ProvisionedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ProvisionedNetworksTable,
			Columns: []string{build.ProvisionedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ProvisionedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ProvisionedNetworksTable,
			Columns: []string{build.ProvisionedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.TeamsTable,
			Columns: []string{build.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !buo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.TeamsTable,
			Columns: []string{build.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.TeamsTable,
			Columns: []string{build.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.PlansTable,
			Columns: []string{build.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedPlansIDs(); len(nodes) > 0 && !buo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.PlansTable,
			Columns: []string{build.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.PlansTable,
			Columns: []string{build.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildCommitsTable,
			Columns: []string{build.BuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildCommitsIDs(); len(nodes) > 0 && !buo.mutation.BuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildCommitsTable,
			Columns: []string{build.BuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildCommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildCommitsTable,
			Columns: []string{build.BuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AdhocPlansTable,
			Columns: []string{build.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAdhocPlansIDs(); len(nodes) > 0 && !buo.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AdhocPlansTable,
			Columns: []string{build.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AdhocPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AdhocPlansTable,
			Columns: []string{build.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AgentStatusesTable,
			Columns: []string{build.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAgentStatusesIDs(); len(nodes) > 0 && !buo.mutation.AgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AgentStatusesTable,
			Columns: []string{build.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AgentStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.AgentStatusesTable,
			Columns: []string{build.AgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ServerTasksTable,
			Columns: []string{build.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedServerTasksIDs(); len(nodes) > 0 && !buo.mutation.ServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ServerTasksTable,
			Columns: []string{build.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.ServerTasksTable,
			Columns: []string{build.ServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: servertask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Build{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{build.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
