// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// BuildUpdate is the builder for updating Build entities.
type BuildUpdate struct {
	config
	hooks    []Hook
	mutation *BuildMutation
}

// Where appends a list predicates to the BuildUpdate builder.
func (bu *BuildUpdate) Where(ps ...predicate.Build) *BuildUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetRevision sets the "revision" field.
func (bu *BuildUpdate) SetRevision(i int) *BuildUpdate {
	bu.mutation.ResetRevision()
	bu.mutation.SetRevision(i)
	return bu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (bu *BuildUpdate) SetNillableRevision(i *int) *BuildUpdate {
	if i != nil {
		bu.SetRevision(*i)
	}
	return bu
}

// AddRevision adds i to the "revision" field.
func (bu *BuildUpdate) AddRevision(i int) *BuildUpdate {
	bu.mutation.AddRevision(i)
	return bu
}

// SetEnvironmentRevision sets the "environment_revision" field.
func (bu *BuildUpdate) SetEnvironmentRevision(i int) *BuildUpdate {
	bu.mutation.ResetEnvironmentRevision()
	bu.mutation.SetEnvironmentRevision(i)
	return bu
}

// SetNillableEnvironmentRevision sets the "environment_revision" field if the given value is not nil.
func (bu *BuildUpdate) SetNillableEnvironmentRevision(i *int) *BuildUpdate {
	if i != nil {
		bu.SetEnvironmentRevision(*i)
	}
	return bu
}

// AddEnvironmentRevision adds i to the "environment_revision" field.
func (bu *BuildUpdate) AddEnvironmentRevision(i int) *BuildUpdate {
	bu.mutation.AddEnvironmentRevision(i)
	return bu
}

// SetVars sets the "vars" field.
func (bu *BuildUpdate) SetVars(m map[string]string) *BuildUpdate {
	bu.mutation.SetVars(m)
	return bu
}

// SetCompletedPlan sets the "completed_plan" field.
func (bu *BuildUpdate) SetCompletedPlan(b bool) *BuildUpdate {
	bu.mutation.SetCompletedPlan(b)
	return bu
}

// SetNillableCompletedPlan sets the "completed_plan" field if the given value is not nil.
func (bu *BuildUpdate) SetNillableCompletedPlan(b *bool) *BuildUpdate {
	if b != nil {
		bu.SetCompletedPlan(*b)
	}
	return bu
}

// SetBuildToStatusID sets the "BuildToStatus" edge to the Status entity by ID.
func (bu *BuildUpdate) SetBuildToStatusID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetBuildToStatusID(id)
	return bu
}

// SetNillableBuildToStatusID sets the "BuildToStatus" edge to the Status entity by ID if the given value is not nil.
func (bu *BuildUpdate) SetNillableBuildToStatusID(id *uuid.UUID) *BuildUpdate {
	if id != nil {
		bu = bu.SetBuildToStatusID(*id)
	}
	return bu
}

// SetBuildToStatus sets the "BuildToStatus" edge to the Status entity.
func (bu *BuildUpdate) SetBuildToStatus(s *Status) *BuildUpdate {
	return bu.SetBuildToStatusID(s.ID)
}

// SetBuildToEnvironmentID sets the "BuildToEnvironment" edge to the Environment entity by ID.
func (bu *BuildUpdate) SetBuildToEnvironmentID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetBuildToEnvironmentID(id)
	return bu
}

// SetBuildToEnvironment sets the "BuildToEnvironment" edge to the Environment entity.
func (bu *BuildUpdate) SetBuildToEnvironment(e *Environment) *BuildUpdate {
	return bu.SetBuildToEnvironmentID(e.ID)
}

// SetBuildToCompetitionID sets the "BuildToCompetition" edge to the Competition entity by ID.
func (bu *BuildUpdate) SetBuildToCompetitionID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetBuildToCompetitionID(id)
	return bu
}

// SetBuildToCompetition sets the "BuildToCompetition" edge to the Competition entity.
func (bu *BuildUpdate) SetBuildToCompetition(c *Competition) *BuildUpdate {
	return bu.SetBuildToCompetitionID(c.ID)
}

// SetBuildToLatestBuildCommitID sets the "BuildToLatestBuildCommit" edge to the BuildCommit entity by ID.
func (bu *BuildUpdate) SetBuildToLatestBuildCommitID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetBuildToLatestBuildCommitID(id)
	return bu
}

// SetNillableBuildToLatestBuildCommitID sets the "BuildToLatestBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (bu *BuildUpdate) SetNillableBuildToLatestBuildCommitID(id *uuid.UUID) *BuildUpdate {
	if id != nil {
		bu = bu.SetBuildToLatestBuildCommitID(*id)
	}
	return bu
}

// SetBuildToLatestBuildCommit sets the "BuildToLatestBuildCommit" edge to the BuildCommit entity.
func (bu *BuildUpdate) SetBuildToLatestBuildCommit(b *BuildCommit) *BuildUpdate {
	return bu.SetBuildToLatestBuildCommitID(b.ID)
}

// SetBuildToRepoCommitID sets the "BuildToRepoCommit" edge to the RepoCommit entity by ID.
func (bu *BuildUpdate) SetBuildToRepoCommitID(id uuid.UUID) *BuildUpdate {
	bu.mutation.SetBuildToRepoCommitID(id)
	return bu
}

// SetNillableBuildToRepoCommitID sets the "BuildToRepoCommit" edge to the RepoCommit entity by ID if the given value is not nil.
func (bu *BuildUpdate) SetNillableBuildToRepoCommitID(id *uuid.UUID) *BuildUpdate {
	if id != nil {
		bu = bu.SetBuildToRepoCommitID(*id)
	}
	return bu
}

// SetBuildToRepoCommit sets the "BuildToRepoCommit" edge to the RepoCommit entity.
func (bu *BuildUpdate) SetBuildToRepoCommit(r *RepoCommit) *BuildUpdate {
	return bu.SetBuildToRepoCommitID(r.ID)
}

// AddBuildToProvisionedNetworkIDs adds the "BuildToProvisionedNetwork" edge to the ProvisionedNetwork entity by IDs.
func (bu *BuildUpdate) AddBuildToProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildToProvisionedNetworkIDs(ids...)
	return bu
}

// AddBuildToProvisionedNetwork adds the "BuildToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (bu *BuildUpdate) AddBuildToProvisionedNetwork(p ...*ProvisionedNetwork) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddBuildToProvisionedNetworkIDs(ids...)
}

// AddBuildToTeamIDs adds the "BuildToTeam" edge to the Team entity by IDs.
func (bu *BuildUpdate) AddBuildToTeamIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildToTeamIDs(ids...)
	return bu
}

// AddBuildToTeam adds the "BuildToTeam" edges to the Team entity.
func (bu *BuildUpdate) AddBuildToTeam(t ...*Team) *BuildUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddBuildToTeamIDs(ids...)
}

// AddBuildToPlanIDs adds the "BuildToPlan" edge to the Plan entity by IDs.
func (bu *BuildUpdate) AddBuildToPlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildToPlanIDs(ids...)
	return bu
}

// AddBuildToPlan adds the "BuildToPlan" edges to the Plan entity.
func (bu *BuildUpdate) AddBuildToPlan(p ...*Plan) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddBuildToPlanIDs(ids...)
}

// AddBuildToBuildCommitIDs adds the "BuildToBuildCommits" edge to the BuildCommit entity by IDs.
func (bu *BuildUpdate) AddBuildToBuildCommitIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildToBuildCommitIDs(ids...)
	return bu
}

// AddBuildToBuildCommits adds the "BuildToBuildCommits" edges to the BuildCommit entity.
func (bu *BuildUpdate) AddBuildToBuildCommits(b ...*BuildCommit) *BuildUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBuildToBuildCommitIDs(ids...)
}

// AddBuildToAdhocPlanIDs adds the "BuildToAdhocPlans" edge to the AdhocPlan entity by IDs.
func (bu *BuildUpdate) AddBuildToAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildToAdhocPlanIDs(ids...)
	return bu
}

// AddBuildToAdhocPlans adds the "BuildToAdhocPlans" edges to the AdhocPlan entity.
func (bu *BuildUpdate) AddBuildToAdhocPlans(a ...*AdhocPlan) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddBuildToAdhocPlanIDs(ids...)
}

// AddBuildToAgentStatuseIDs adds the "BuildToAgentStatuses" edge to the AgentStatus entity by IDs.
func (bu *BuildUpdate) AddBuildToAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildToAgentStatuseIDs(ids...)
	return bu
}

// AddBuildToAgentStatuses adds the "BuildToAgentStatuses" edges to the AgentStatus entity.
func (bu *BuildUpdate) AddBuildToAgentStatuses(a ...*AgentStatus) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddBuildToAgentStatuseIDs(ids...)
}

// AddBuildToServerTaskIDs adds the "BuildToServerTasks" edge to the ServerTask entity by IDs.
func (bu *BuildUpdate) AddBuildToServerTaskIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.AddBuildToServerTaskIDs(ids...)
	return bu
}

// AddBuildToServerTasks adds the "BuildToServerTasks" edges to the ServerTask entity.
func (bu *BuildUpdate) AddBuildToServerTasks(s ...*ServerTask) *BuildUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddBuildToServerTaskIDs(ids...)
}

// Mutation returns the BuildMutation object of the builder.
func (bu *BuildUpdate) Mutation() *BuildMutation {
	return bu.mutation
}

// ClearBuildToStatus clears the "BuildToStatus" edge to the Status entity.
func (bu *BuildUpdate) ClearBuildToStatus() *BuildUpdate {
	bu.mutation.ClearBuildToStatus()
	return bu
}

// ClearBuildToEnvironment clears the "BuildToEnvironment" edge to the Environment entity.
func (bu *BuildUpdate) ClearBuildToEnvironment() *BuildUpdate {
	bu.mutation.ClearBuildToEnvironment()
	return bu
}

// ClearBuildToCompetition clears the "BuildToCompetition" edge to the Competition entity.
func (bu *BuildUpdate) ClearBuildToCompetition() *BuildUpdate {
	bu.mutation.ClearBuildToCompetition()
	return bu
}

// ClearBuildToLatestBuildCommit clears the "BuildToLatestBuildCommit" edge to the BuildCommit entity.
func (bu *BuildUpdate) ClearBuildToLatestBuildCommit() *BuildUpdate {
	bu.mutation.ClearBuildToLatestBuildCommit()
	return bu
}

// ClearBuildToRepoCommit clears the "BuildToRepoCommit" edge to the RepoCommit entity.
func (bu *BuildUpdate) ClearBuildToRepoCommit() *BuildUpdate {
	bu.mutation.ClearBuildToRepoCommit()
	return bu
}

// ClearBuildToProvisionedNetwork clears all "BuildToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (bu *BuildUpdate) ClearBuildToProvisionedNetwork() *BuildUpdate {
	bu.mutation.ClearBuildToProvisionedNetwork()
	return bu
}

// RemoveBuildToProvisionedNetworkIDs removes the "BuildToProvisionedNetwork" edge to ProvisionedNetwork entities by IDs.
func (bu *BuildUpdate) RemoveBuildToProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildToProvisionedNetworkIDs(ids...)
	return bu
}

// RemoveBuildToProvisionedNetwork removes "BuildToProvisionedNetwork" edges to ProvisionedNetwork entities.
func (bu *BuildUpdate) RemoveBuildToProvisionedNetwork(p ...*ProvisionedNetwork) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveBuildToProvisionedNetworkIDs(ids...)
}

// ClearBuildToTeam clears all "BuildToTeam" edges to the Team entity.
func (bu *BuildUpdate) ClearBuildToTeam() *BuildUpdate {
	bu.mutation.ClearBuildToTeam()
	return bu
}

// RemoveBuildToTeamIDs removes the "BuildToTeam" edge to Team entities by IDs.
func (bu *BuildUpdate) RemoveBuildToTeamIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildToTeamIDs(ids...)
	return bu
}

// RemoveBuildToTeam removes "BuildToTeam" edges to Team entities.
func (bu *BuildUpdate) RemoveBuildToTeam(t ...*Team) *BuildUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveBuildToTeamIDs(ids...)
}

// ClearBuildToPlan clears all "BuildToPlan" edges to the Plan entity.
func (bu *BuildUpdate) ClearBuildToPlan() *BuildUpdate {
	bu.mutation.ClearBuildToPlan()
	return bu
}

// RemoveBuildToPlanIDs removes the "BuildToPlan" edge to Plan entities by IDs.
func (bu *BuildUpdate) RemoveBuildToPlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildToPlanIDs(ids...)
	return bu
}

// RemoveBuildToPlan removes "BuildToPlan" edges to Plan entities.
func (bu *BuildUpdate) RemoveBuildToPlan(p ...*Plan) *BuildUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveBuildToPlanIDs(ids...)
}

// ClearBuildToBuildCommits clears all "BuildToBuildCommits" edges to the BuildCommit entity.
func (bu *BuildUpdate) ClearBuildToBuildCommits() *BuildUpdate {
	bu.mutation.ClearBuildToBuildCommits()
	return bu
}

// RemoveBuildToBuildCommitIDs removes the "BuildToBuildCommits" edge to BuildCommit entities by IDs.
func (bu *BuildUpdate) RemoveBuildToBuildCommitIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildToBuildCommitIDs(ids...)
	return bu
}

// RemoveBuildToBuildCommits removes "BuildToBuildCommits" edges to BuildCommit entities.
func (bu *BuildUpdate) RemoveBuildToBuildCommits(b ...*BuildCommit) *BuildUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBuildToBuildCommitIDs(ids...)
}

// ClearBuildToAdhocPlans clears all "BuildToAdhocPlans" edges to the AdhocPlan entity.
func (bu *BuildUpdate) ClearBuildToAdhocPlans() *BuildUpdate {
	bu.mutation.ClearBuildToAdhocPlans()
	return bu
}

// RemoveBuildToAdhocPlanIDs removes the "BuildToAdhocPlans" edge to AdhocPlan entities by IDs.
func (bu *BuildUpdate) RemoveBuildToAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildToAdhocPlanIDs(ids...)
	return bu
}

// RemoveBuildToAdhocPlans removes "BuildToAdhocPlans" edges to AdhocPlan entities.
func (bu *BuildUpdate) RemoveBuildToAdhocPlans(a ...*AdhocPlan) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveBuildToAdhocPlanIDs(ids...)
}

// ClearBuildToAgentStatuses clears all "BuildToAgentStatuses" edges to the AgentStatus entity.
func (bu *BuildUpdate) ClearBuildToAgentStatuses() *BuildUpdate {
	bu.mutation.ClearBuildToAgentStatuses()
	return bu
}

// RemoveBuildToAgentStatuseIDs removes the "BuildToAgentStatuses" edge to AgentStatus entities by IDs.
func (bu *BuildUpdate) RemoveBuildToAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildToAgentStatuseIDs(ids...)
	return bu
}

// RemoveBuildToAgentStatuses removes "BuildToAgentStatuses" edges to AgentStatus entities.
func (bu *BuildUpdate) RemoveBuildToAgentStatuses(a ...*AgentStatus) *BuildUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveBuildToAgentStatuseIDs(ids...)
}

// ClearBuildToServerTasks clears all "BuildToServerTasks" edges to the ServerTask entity.
func (bu *BuildUpdate) ClearBuildToServerTasks() *BuildUpdate {
	bu.mutation.ClearBuildToServerTasks()
	return bu
}

// RemoveBuildToServerTaskIDs removes the "BuildToServerTasks" edge to ServerTask entities by IDs.
func (bu *BuildUpdate) RemoveBuildToServerTaskIDs(ids ...uuid.UUID) *BuildUpdate {
	bu.mutation.RemoveBuildToServerTaskIDs(ids...)
	return bu
}

// RemoveBuildToServerTasks removes "BuildToServerTasks" edges to ServerTask entities.
func (bu *BuildUpdate) RemoveBuildToServerTasks(s ...*ServerTask) *BuildUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemoveBuildToServerTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BuildUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BuildUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BuildUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BuildUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BuildUpdate) check() error {
	if _, ok := bu.mutation.BuildToEnvironmentID(); bu.mutation.BuildToEnvironmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.BuildToEnvironment"`)
	}
	if _, ok := bu.mutation.BuildToCompetitionID(); bu.mutation.BuildToCompetitionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.BuildToCompetition"`)
	}
	return nil
}

func (bu *BuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(build.Table, build.Columns, sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Revision(); ok {
		_spec.SetField(build.FieldRevision, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedRevision(); ok {
		_spec.AddField(build.FieldRevision, field.TypeInt, value)
	}
	if value, ok := bu.mutation.EnvironmentRevision(); ok {
		_spec.SetField(build.FieldEnvironmentRevision, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedEnvironmentRevision(); ok {
		_spec.AddField(build.FieldEnvironmentRevision, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Vars(); ok {
		_spec.SetField(build.FieldVars, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.CompletedPlan(); ok {
		_spec.SetField(build.FieldCompletedPlan, field.TypeBool, value)
	}
	if bu.mutation.BuildToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.BuildToStatusTable,
			Columns: []string{build.BuildToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.BuildToStatusTable,
			Columns: []string{build.BuildToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToEnvironmentTable,
			Columns: []string{build.BuildToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToEnvironmentTable,
			Columns: []string{build.BuildToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToCompetitionTable,
			Columns: []string{build.BuildToCompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToCompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToCompetitionTable,
			Columns: []string{build.BuildToCompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToLatestBuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToLatestBuildCommitTable,
			Columns: []string{build.BuildToLatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToLatestBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToLatestBuildCommitTable,
			Columns: []string{build.BuildToLatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToRepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToRepoCommitTable,
			Columns: []string{build.BuildToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToRepoCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToRepoCommitTable,
			Columns: []string{build.BuildToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToProvisionedNetworkTable,
			Columns: []string{build.BuildToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionednetwork.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildToProvisionedNetworkIDs(); len(nodes) > 0 && !bu.mutation.BuildToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToProvisionedNetworkTable,
			Columns: []string{build.BuildToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToProvisionedNetworkTable,
			Columns: []string{build.BuildToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToTeamTable,
			Columns: []string{build.BuildToTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildToTeamIDs(); len(nodes) > 0 && !bu.mutation.BuildToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToTeamTable,
			Columns: []string{build.BuildToTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToTeamTable,
			Columns: []string{build.BuildToTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToPlanTable,
			Columns: []string{build.BuildToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildToPlanIDs(); len(nodes) > 0 && !bu.mutation.BuildToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToPlanTable,
			Columns: []string{build.BuildToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToPlanTable,
			Columns: []string{build.BuildToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToBuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToBuildCommitsTable,
			Columns: []string{build.BuildToBuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildToBuildCommitsIDs(); len(nodes) > 0 && !bu.mutation.BuildToBuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToBuildCommitsTable,
			Columns: []string{build.BuildToBuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToBuildCommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToBuildCommitsTable,
			Columns: []string{build.BuildToBuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToAdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAdhocPlansTable,
			Columns: []string{build.BuildToAdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adhocplan.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildToAdhocPlansIDs(); len(nodes) > 0 && !bu.mutation.BuildToAdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAdhocPlansTable,
			Columns: []string{build.BuildToAdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adhocplan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToAdhocPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAdhocPlansTable,
			Columns: []string{build.BuildToAdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adhocplan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToAgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAgentStatusesTable,
			Columns: []string{build.BuildToAgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildToAgentStatusesIDs(); len(nodes) > 0 && !bu.mutation.BuildToAgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAgentStatusesTable,
			Columns: []string{build.BuildToAgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToAgentStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAgentStatusesTable,
			Columns: []string{build.BuildToAgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BuildToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToServerTasksTable,
			Columns: []string{build.BuildToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBuildToServerTasksIDs(); len(nodes) > 0 && !bu.mutation.BuildToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToServerTasksTable,
			Columns: []string{build.BuildToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BuildToServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToServerTasksTable,
			Columns: []string{build.BuildToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{build.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BuildUpdateOne is the builder for updating a single Build entity.
type BuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BuildMutation
}

// SetRevision sets the "revision" field.
func (buo *BuildUpdateOne) SetRevision(i int) *BuildUpdateOne {
	buo.mutation.ResetRevision()
	buo.mutation.SetRevision(i)
	return buo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableRevision(i *int) *BuildUpdateOne {
	if i != nil {
		buo.SetRevision(*i)
	}
	return buo
}

// AddRevision adds i to the "revision" field.
func (buo *BuildUpdateOne) AddRevision(i int) *BuildUpdateOne {
	buo.mutation.AddRevision(i)
	return buo
}

// SetEnvironmentRevision sets the "environment_revision" field.
func (buo *BuildUpdateOne) SetEnvironmentRevision(i int) *BuildUpdateOne {
	buo.mutation.ResetEnvironmentRevision()
	buo.mutation.SetEnvironmentRevision(i)
	return buo
}

// SetNillableEnvironmentRevision sets the "environment_revision" field if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableEnvironmentRevision(i *int) *BuildUpdateOne {
	if i != nil {
		buo.SetEnvironmentRevision(*i)
	}
	return buo
}

// AddEnvironmentRevision adds i to the "environment_revision" field.
func (buo *BuildUpdateOne) AddEnvironmentRevision(i int) *BuildUpdateOne {
	buo.mutation.AddEnvironmentRevision(i)
	return buo
}

// SetVars sets the "vars" field.
func (buo *BuildUpdateOne) SetVars(m map[string]string) *BuildUpdateOne {
	buo.mutation.SetVars(m)
	return buo
}

// SetCompletedPlan sets the "completed_plan" field.
func (buo *BuildUpdateOne) SetCompletedPlan(b bool) *BuildUpdateOne {
	buo.mutation.SetCompletedPlan(b)
	return buo
}

// SetNillableCompletedPlan sets the "completed_plan" field if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableCompletedPlan(b *bool) *BuildUpdateOne {
	if b != nil {
		buo.SetCompletedPlan(*b)
	}
	return buo
}

// SetBuildToStatusID sets the "BuildToStatus" edge to the Status entity by ID.
func (buo *BuildUpdateOne) SetBuildToStatusID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetBuildToStatusID(id)
	return buo
}

// SetNillableBuildToStatusID sets the "BuildToStatus" edge to the Status entity by ID if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableBuildToStatusID(id *uuid.UUID) *BuildUpdateOne {
	if id != nil {
		buo = buo.SetBuildToStatusID(*id)
	}
	return buo
}

// SetBuildToStatus sets the "BuildToStatus" edge to the Status entity.
func (buo *BuildUpdateOne) SetBuildToStatus(s *Status) *BuildUpdateOne {
	return buo.SetBuildToStatusID(s.ID)
}

// SetBuildToEnvironmentID sets the "BuildToEnvironment" edge to the Environment entity by ID.
func (buo *BuildUpdateOne) SetBuildToEnvironmentID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetBuildToEnvironmentID(id)
	return buo
}

// SetBuildToEnvironment sets the "BuildToEnvironment" edge to the Environment entity.
func (buo *BuildUpdateOne) SetBuildToEnvironment(e *Environment) *BuildUpdateOne {
	return buo.SetBuildToEnvironmentID(e.ID)
}

// SetBuildToCompetitionID sets the "BuildToCompetition" edge to the Competition entity by ID.
func (buo *BuildUpdateOne) SetBuildToCompetitionID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetBuildToCompetitionID(id)
	return buo
}

// SetBuildToCompetition sets the "BuildToCompetition" edge to the Competition entity.
func (buo *BuildUpdateOne) SetBuildToCompetition(c *Competition) *BuildUpdateOne {
	return buo.SetBuildToCompetitionID(c.ID)
}

// SetBuildToLatestBuildCommitID sets the "BuildToLatestBuildCommit" edge to the BuildCommit entity by ID.
func (buo *BuildUpdateOne) SetBuildToLatestBuildCommitID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetBuildToLatestBuildCommitID(id)
	return buo
}

// SetNillableBuildToLatestBuildCommitID sets the "BuildToLatestBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableBuildToLatestBuildCommitID(id *uuid.UUID) *BuildUpdateOne {
	if id != nil {
		buo = buo.SetBuildToLatestBuildCommitID(*id)
	}
	return buo
}

// SetBuildToLatestBuildCommit sets the "BuildToLatestBuildCommit" edge to the BuildCommit entity.
func (buo *BuildUpdateOne) SetBuildToLatestBuildCommit(b *BuildCommit) *BuildUpdateOne {
	return buo.SetBuildToLatestBuildCommitID(b.ID)
}

// SetBuildToRepoCommitID sets the "BuildToRepoCommit" edge to the RepoCommit entity by ID.
func (buo *BuildUpdateOne) SetBuildToRepoCommitID(id uuid.UUID) *BuildUpdateOne {
	buo.mutation.SetBuildToRepoCommitID(id)
	return buo
}

// SetNillableBuildToRepoCommitID sets the "BuildToRepoCommit" edge to the RepoCommit entity by ID if the given value is not nil.
func (buo *BuildUpdateOne) SetNillableBuildToRepoCommitID(id *uuid.UUID) *BuildUpdateOne {
	if id != nil {
		buo = buo.SetBuildToRepoCommitID(*id)
	}
	return buo
}

// SetBuildToRepoCommit sets the "BuildToRepoCommit" edge to the RepoCommit entity.
func (buo *BuildUpdateOne) SetBuildToRepoCommit(r *RepoCommit) *BuildUpdateOne {
	return buo.SetBuildToRepoCommitID(r.ID)
}

// AddBuildToProvisionedNetworkIDs adds the "BuildToProvisionedNetwork" edge to the ProvisionedNetwork entity by IDs.
func (buo *BuildUpdateOne) AddBuildToProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildToProvisionedNetworkIDs(ids...)
	return buo
}

// AddBuildToProvisionedNetwork adds the "BuildToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (buo *BuildUpdateOne) AddBuildToProvisionedNetwork(p ...*ProvisionedNetwork) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddBuildToProvisionedNetworkIDs(ids...)
}

// AddBuildToTeamIDs adds the "BuildToTeam" edge to the Team entity by IDs.
func (buo *BuildUpdateOne) AddBuildToTeamIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildToTeamIDs(ids...)
	return buo
}

// AddBuildToTeam adds the "BuildToTeam" edges to the Team entity.
func (buo *BuildUpdateOne) AddBuildToTeam(t ...*Team) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddBuildToTeamIDs(ids...)
}

// AddBuildToPlanIDs adds the "BuildToPlan" edge to the Plan entity by IDs.
func (buo *BuildUpdateOne) AddBuildToPlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildToPlanIDs(ids...)
	return buo
}

// AddBuildToPlan adds the "BuildToPlan" edges to the Plan entity.
func (buo *BuildUpdateOne) AddBuildToPlan(p ...*Plan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddBuildToPlanIDs(ids...)
}

// AddBuildToBuildCommitIDs adds the "BuildToBuildCommits" edge to the BuildCommit entity by IDs.
func (buo *BuildUpdateOne) AddBuildToBuildCommitIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildToBuildCommitIDs(ids...)
	return buo
}

// AddBuildToBuildCommits adds the "BuildToBuildCommits" edges to the BuildCommit entity.
func (buo *BuildUpdateOne) AddBuildToBuildCommits(b ...*BuildCommit) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBuildToBuildCommitIDs(ids...)
}

// AddBuildToAdhocPlanIDs adds the "BuildToAdhocPlans" edge to the AdhocPlan entity by IDs.
func (buo *BuildUpdateOne) AddBuildToAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildToAdhocPlanIDs(ids...)
	return buo
}

// AddBuildToAdhocPlans adds the "BuildToAdhocPlans" edges to the AdhocPlan entity.
func (buo *BuildUpdateOne) AddBuildToAdhocPlans(a ...*AdhocPlan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddBuildToAdhocPlanIDs(ids...)
}

// AddBuildToAgentStatuseIDs adds the "BuildToAgentStatuses" edge to the AgentStatus entity by IDs.
func (buo *BuildUpdateOne) AddBuildToAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildToAgentStatuseIDs(ids...)
	return buo
}

// AddBuildToAgentStatuses adds the "BuildToAgentStatuses" edges to the AgentStatus entity.
func (buo *BuildUpdateOne) AddBuildToAgentStatuses(a ...*AgentStatus) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddBuildToAgentStatuseIDs(ids...)
}

// AddBuildToServerTaskIDs adds the "BuildToServerTasks" edge to the ServerTask entity by IDs.
func (buo *BuildUpdateOne) AddBuildToServerTaskIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.AddBuildToServerTaskIDs(ids...)
	return buo
}

// AddBuildToServerTasks adds the "BuildToServerTasks" edges to the ServerTask entity.
func (buo *BuildUpdateOne) AddBuildToServerTasks(s ...*ServerTask) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddBuildToServerTaskIDs(ids...)
}

// Mutation returns the BuildMutation object of the builder.
func (buo *BuildUpdateOne) Mutation() *BuildMutation {
	return buo.mutation
}

// ClearBuildToStatus clears the "BuildToStatus" edge to the Status entity.
func (buo *BuildUpdateOne) ClearBuildToStatus() *BuildUpdateOne {
	buo.mutation.ClearBuildToStatus()
	return buo
}

// ClearBuildToEnvironment clears the "BuildToEnvironment" edge to the Environment entity.
func (buo *BuildUpdateOne) ClearBuildToEnvironment() *BuildUpdateOne {
	buo.mutation.ClearBuildToEnvironment()
	return buo
}

// ClearBuildToCompetition clears the "BuildToCompetition" edge to the Competition entity.
func (buo *BuildUpdateOne) ClearBuildToCompetition() *BuildUpdateOne {
	buo.mutation.ClearBuildToCompetition()
	return buo
}

// ClearBuildToLatestBuildCommit clears the "BuildToLatestBuildCommit" edge to the BuildCommit entity.
func (buo *BuildUpdateOne) ClearBuildToLatestBuildCommit() *BuildUpdateOne {
	buo.mutation.ClearBuildToLatestBuildCommit()
	return buo
}

// ClearBuildToRepoCommit clears the "BuildToRepoCommit" edge to the RepoCommit entity.
func (buo *BuildUpdateOne) ClearBuildToRepoCommit() *BuildUpdateOne {
	buo.mutation.ClearBuildToRepoCommit()
	return buo
}

// ClearBuildToProvisionedNetwork clears all "BuildToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (buo *BuildUpdateOne) ClearBuildToProvisionedNetwork() *BuildUpdateOne {
	buo.mutation.ClearBuildToProvisionedNetwork()
	return buo
}

// RemoveBuildToProvisionedNetworkIDs removes the "BuildToProvisionedNetwork" edge to ProvisionedNetwork entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildToProvisionedNetworkIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildToProvisionedNetworkIDs(ids...)
	return buo
}

// RemoveBuildToProvisionedNetwork removes "BuildToProvisionedNetwork" edges to ProvisionedNetwork entities.
func (buo *BuildUpdateOne) RemoveBuildToProvisionedNetwork(p ...*ProvisionedNetwork) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveBuildToProvisionedNetworkIDs(ids...)
}

// ClearBuildToTeam clears all "BuildToTeam" edges to the Team entity.
func (buo *BuildUpdateOne) ClearBuildToTeam() *BuildUpdateOne {
	buo.mutation.ClearBuildToTeam()
	return buo
}

// RemoveBuildToTeamIDs removes the "BuildToTeam" edge to Team entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildToTeamIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildToTeamIDs(ids...)
	return buo
}

// RemoveBuildToTeam removes "BuildToTeam" edges to Team entities.
func (buo *BuildUpdateOne) RemoveBuildToTeam(t ...*Team) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveBuildToTeamIDs(ids...)
}

// ClearBuildToPlan clears all "BuildToPlan" edges to the Plan entity.
func (buo *BuildUpdateOne) ClearBuildToPlan() *BuildUpdateOne {
	buo.mutation.ClearBuildToPlan()
	return buo
}

// RemoveBuildToPlanIDs removes the "BuildToPlan" edge to Plan entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildToPlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildToPlanIDs(ids...)
	return buo
}

// RemoveBuildToPlan removes "BuildToPlan" edges to Plan entities.
func (buo *BuildUpdateOne) RemoveBuildToPlan(p ...*Plan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveBuildToPlanIDs(ids...)
}

// ClearBuildToBuildCommits clears all "BuildToBuildCommits" edges to the BuildCommit entity.
func (buo *BuildUpdateOne) ClearBuildToBuildCommits() *BuildUpdateOne {
	buo.mutation.ClearBuildToBuildCommits()
	return buo
}

// RemoveBuildToBuildCommitIDs removes the "BuildToBuildCommits" edge to BuildCommit entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildToBuildCommitIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildToBuildCommitIDs(ids...)
	return buo
}

// RemoveBuildToBuildCommits removes "BuildToBuildCommits" edges to BuildCommit entities.
func (buo *BuildUpdateOne) RemoveBuildToBuildCommits(b ...*BuildCommit) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBuildToBuildCommitIDs(ids...)
}

// ClearBuildToAdhocPlans clears all "BuildToAdhocPlans" edges to the AdhocPlan entity.
func (buo *BuildUpdateOne) ClearBuildToAdhocPlans() *BuildUpdateOne {
	buo.mutation.ClearBuildToAdhocPlans()
	return buo
}

// RemoveBuildToAdhocPlanIDs removes the "BuildToAdhocPlans" edge to AdhocPlan entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildToAdhocPlanIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildToAdhocPlanIDs(ids...)
	return buo
}

// RemoveBuildToAdhocPlans removes "BuildToAdhocPlans" edges to AdhocPlan entities.
func (buo *BuildUpdateOne) RemoveBuildToAdhocPlans(a ...*AdhocPlan) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveBuildToAdhocPlanIDs(ids...)
}

// ClearBuildToAgentStatuses clears all "BuildToAgentStatuses" edges to the AgentStatus entity.
func (buo *BuildUpdateOne) ClearBuildToAgentStatuses() *BuildUpdateOne {
	buo.mutation.ClearBuildToAgentStatuses()
	return buo
}

// RemoveBuildToAgentStatuseIDs removes the "BuildToAgentStatuses" edge to AgentStatus entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildToAgentStatuseIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildToAgentStatuseIDs(ids...)
	return buo
}

// RemoveBuildToAgentStatuses removes "BuildToAgentStatuses" edges to AgentStatus entities.
func (buo *BuildUpdateOne) RemoveBuildToAgentStatuses(a ...*AgentStatus) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveBuildToAgentStatuseIDs(ids...)
}

// ClearBuildToServerTasks clears all "BuildToServerTasks" edges to the ServerTask entity.
func (buo *BuildUpdateOne) ClearBuildToServerTasks() *BuildUpdateOne {
	buo.mutation.ClearBuildToServerTasks()
	return buo
}

// RemoveBuildToServerTaskIDs removes the "BuildToServerTasks" edge to ServerTask entities by IDs.
func (buo *BuildUpdateOne) RemoveBuildToServerTaskIDs(ids ...uuid.UUID) *BuildUpdateOne {
	buo.mutation.RemoveBuildToServerTaskIDs(ids...)
	return buo
}

// RemoveBuildToServerTasks removes "BuildToServerTasks" edges to ServerTask entities.
func (buo *BuildUpdateOne) RemoveBuildToServerTasks(s ...*ServerTask) *BuildUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemoveBuildToServerTaskIDs(ids...)
}

// Where appends a list predicates to the BuildUpdate builder.
func (buo *BuildUpdateOne) Where(ps ...predicate.Build) *BuildUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BuildUpdateOne) Select(field string, fields ...string) *BuildUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Build entity.
func (buo *BuildUpdateOne) Save(ctx context.Context) (*Build, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BuildUpdateOne) SaveX(ctx context.Context) *Build {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BuildUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BuildUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BuildUpdateOne) check() error {
	if _, ok := buo.mutation.BuildToEnvironmentID(); buo.mutation.BuildToEnvironmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.BuildToEnvironment"`)
	}
	if _, ok := buo.mutation.BuildToCompetitionID(); buo.mutation.BuildToCompetitionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Build.BuildToCompetition"`)
	}
	return nil
}

func (buo *BuildUpdateOne) sqlSave(ctx context.Context) (_node *Build, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(build.Table, build.Columns, sqlgraph.NewFieldSpec(build.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Build.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, build.FieldID)
		for _, f := range fields {
			if !build.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != build.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Revision(); ok {
		_spec.SetField(build.FieldRevision, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedRevision(); ok {
		_spec.AddField(build.FieldRevision, field.TypeInt, value)
	}
	if value, ok := buo.mutation.EnvironmentRevision(); ok {
		_spec.SetField(build.FieldEnvironmentRevision, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedEnvironmentRevision(); ok {
		_spec.AddField(build.FieldEnvironmentRevision, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Vars(); ok {
		_spec.SetField(build.FieldVars, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.CompletedPlan(); ok {
		_spec.SetField(build.FieldCompletedPlan, field.TypeBool, value)
	}
	if buo.mutation.BuildToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.BuildToStatusTable,
			Columns: []string{build.BuildToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   build.BuildToStatusTable,
			Columns: []string{build.BuildToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToEnvironmentTable,
			Columns: []string{build.BuildToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToEnvironmentTable,
			Columns: []string{build.BuildToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToCompetitionTable,
			Columns: []string{build.BuildToCompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToCompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToCompetitionTable,
			Columns: []string{build.BuildToCompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToLatestBuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToLatestBuildCommitTable,
			Columns: []string{build.BuildToLatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToLatestBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToLatestBuildCommitTable,
			Columns: []string{build.BuildToLatestBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToRepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToRepoCommitTable,
			Columns: []string{build.BuildToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToRepoCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   build.BuildToRepoCommitTable,
			Columns: []string{build.BuildToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToProvisionedNetworkTable,
			Columns: []string{build.BuildToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionednetwork.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildToProvisionedNetworkIDs(); len(nodes) > 0 && !buo.mutation.BuildToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToProvisionedNetworkTable,
			Columns: []string{build.BuildToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToProvisionedNetworkTable,
			Columns: []string{build.BuildToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provisionednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToTeamTable,
			Columns: []string{build.BuildToTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildToTeamIDs(); len(nodes) > 0 && !buo.mutation.BuildToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToTeamTable,
			Columns: []string{build.BuildToTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToTeamTable,
			Columns: []string{build.BuildToTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToPlanTable,
			Columns: []string{build.BuildToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildToPlanIDs(); len(nodes) > 0 && !buo.mutation.BuildToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToPlanTable,
			Columns: []string{build.BuildToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToPlanTable,
			Columns: []string{build.BuildToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToBuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToBuildCommitsTable,
			Columns: []string{build.BuildToBuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildToBuildCommitsIDs(); len(nodes) > 0 && !buo.mutation.BuildToBuildCommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToBuildCommitsTable,
			Columns: []string{build.BuildToBuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToBuildCommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToBuildCommitsTable,
			Columns: []string{build.BuildToBuildCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildcommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToAdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAdhocPlansTable,
			Columns: []string{build.BuildToAdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adhocplan.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildToAdhocPlansIDs(); len(nodes) > 0 && !buo.mutation.BuildToAdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAdhocPlansTable,
			Columns: []string{build.BuildToAdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adhocplan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToAdhocPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAdhocPlansTable,
			Columns: []string{build.BuildToAdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adhocplan.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToAgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAgentStatusesTable,
			Columns: []string{build.BuildToAgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildToAgentStatusesIDs(); len(nodes) > 0 && !buo.mutation.BuildToAgentStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAgentStatusesTable,
			Columns: []string{build.BuildToAgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToAgentStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToAgentStatusesTable,
			Columns: []string{build.BuildToAgentStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BuildToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToServerTasksTable,
			Columns: []string{build.BuildToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBuildToServerTasksIDs(); len(nodes) > 0 && !buo.mutation.BuildToServerTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToServerTasksTable,
			Columns: []string{build.BuildToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BuildToServerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   build.BuildToServerTasksTable,
			Columns: []string{build.BuildToServerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Build{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{build.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
