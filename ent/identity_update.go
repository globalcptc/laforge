// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// IdentityUpdate is the builder for updating Identity entities.
type IdentityUpdate struct {
	config
	hooks    []Hook
	mutation *IdentityMutation
}

// Where appends a list predicates to the IdentityUpdate builder.
func (iu *IdentityUpdate) Where(ps ...predicate.Identity) *IdentityUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetHCLID sets the "hcl_id" field.
func (iu *IdentityUpdate) SetHCLID(s string) *IdentityUpdate {
	iu.mutation.SetHCLID(s)
	return iu
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableHCLID(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetHCLID(*s)
	}
	return iu
}

// SetFirstName sets the "first_name" field.
func (iu *IdentityUpdate) SetFirstName(s string) *IdentityUpdate {
	iu.mutation.SetFirstName(s)
	return iu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableFirstName(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetFirstName(*s)
	}
	return iu
}

// SetLastName sets the "last_name" field.
func (iu *IdentityUpdate) SetLastName(s string) *IdentityUpdate {
	iu.mutation.SetLastName(s)
	return iu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableLastName(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetLastName(*s)
	}
	return iu
}

// SetEmail sets the "email" field.
func (iu *IdentityUpdate) SetEmail(s string) *IdentityUpdate {
	iu.mutation.SetEmail(s)
	return iu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableEmail(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetEmail(*s)
	}
	return iu
}

// SetPassword sets the "password" field.
func (iu *IdentityUpdate) SetPassword(s string) *IdentityUpdate {
	iu.mutation.SetPassword(s)
	return iu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillablePassword(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetPassword(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *IdentityUpdate) SetDescription(s string) *IdentityUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableDescription(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// SetAvatarFile sets the "avatar_file" field.
func (iu *IdentityUpdate) SetAvatarFile(s string) *IdentityUpdate {
	iu.mutation.SetAvatarFile(s)
	return iu
}

// SetNillableAvatarFile sets the "avatar_file" field if the given value is not nil.
func (iu *IdentityUpdate) SetNillableAvatarFile(s *string) *IdentityUpdate {
	if s != nil {
		iu.SetAvatarFile(*s)
	}
	return iu
}

// SetVars sets the "vars" field.
func (iu *IdentityUpdate) SetVars(m map[string]string) *IdentityUpdate {
	iu.mutation.SetVars(m)
	return iu
}

// SetTags sets the "tags" field.
func (iu *IdentityUpdate) SetTags(m map[string]string) *IdentityUpdate {
	iu.mutation.SetTags(m)
	return iu
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (iu *IdentityUpdate) SetEnvironmentID(id uuid.UUID) *IdentityUpdate {
	iu.mutation.SetEnvironmentID(id)
	return iu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (iu *IdentityUpdate) SetNillableEnvironmentID(id *uuid.UUID) *IdentityUpdate {
	if id != nil {
		iu = iu.SetEnvironmentID(*id)
	}
	return iu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (iu *IdentityUpdate) SetEnvironment(e *Environment) *IdentityUpdate {
	return iu.SetEnvironmentID(e.ID)
}

// Mutation returns the IdentityMutation object of the builder.
func (iu *IdentityUpdate) Mutation() *IdentityMutation {
	return iu.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (iu *IdentityUpdate) ClearEnvironment() *IdentityUpdate {
	iu.mutation.ClearEnvironment()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdentityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdentityUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdentityUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdentityUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IdentityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(identity.Table, identity.Columns, sqlgraph.NewFieldSpec(identity.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.HCLID(); ok {
		_spec.SetField(identity.FieldHCLID, field.TypeString, value)
	}
	if value, ok := iu.mutation.FirstName(); ok {
		_spec.SetField(identity.FieldFirstName, field.TypeString, value)
	}
	if value, ok := iu.mutation.LastName(); ok {
		_spec.SetField(identity.FieldLastName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Email(); ok {
		_spec.SetField(identity.FieldEmail, field.TypeString, value)
	}
	if value, ok := iu.mutation.Password(); ok {
		_spec.SetField(identity.FieldPassword, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(identity.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.AvatarFile(); ok {
		_spec.SetField(identity.FieldAvatarFile, field.TypeString, value)
	}
	if value, ok := iu.mutation.Vars(); ok {
		_spec.SetField(identity.FieldVars, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.Tags(); ok {
		_spec.SetField(identity.FieldTags, field.TypeJSON, value)
	}
	if iu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.EnvironmentTable,
			Columns: []string{identity.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.EnvironmentTable,
			Columns: []string{identity.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdentityUpdateOne is the builder for updating a single Identity entity.
type IdentityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentityMutation
}

// SetHCLID sets the "hcl_id" field.
func (iuo *IdentityUpdateOne) SetHCLID(s string) *IdentityUpdateOne {
	iuo.mutation.SetHCLID(s)
	return iuo
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableHCLID(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetHCLID(*s)
	}
	return iuo
}

// SetFirstName sets the "first_name" field.
func (iuo *IdentityUpdateOne) SetFirstName(s string) *IdentityUpdateOne {
	iuo.mutation.SetFirstName(s)
	return iuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableFirstName(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetFirstName(*s)
	}
	return iuo
}

// SetLastName sets the "last_name" field.
func (iuo *IdentityUpdateOne) SetLastName(s string) *IdentityUpdateOne {
	iuo.mutation.SetLastName(s)
	return iuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableLastName(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetLastName(*s)
	}
	return iuo
}

// SetEmail sets the "email" field.
func (iuo *IdentityUpdateOne) SetEmail(s string) *IdentityUpdateOne {
	iuo.mutation.SetEmail(s)
	return iuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableEmail(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetEmail(*s)
	}
	return iuo
}

// SetPassword sets the "password" field.
func (iuo *IdentityUpdateOne) SetPassword(s string) *IdentityUpdateOne {
	iuo.mutation.SetPassword(s)
	return iuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillablePassword(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetPassword(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *IdentityUpdateOne) SetDescription(s string) *IdentityUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableDescription(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// SetAvatarFile sets the "avatar_file" field.
func (iuo *IdentityUpdateOne) SetAvatarFile(s string) *IdentityUpdateOne {
	iuo.mutation.SetAvatarFile(s)
	return iuo
}

// SetNillableAvatarFile sets the "avatar_file" field if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableAvatarFile(s *string) *IdentityUpdateOne {
	if s != nil {
		iuo.SetAvatarFile(*s)
	}
	return iuo
}

// SetVars sets the "vars" field.
func (iuo *IdentityUpdateOne) SetVars(m map[string]string) *IdentityUpdateOne {
	iuo.mutation.SetVars(m)
	return iuo
}

// SetTags sets the "tags" field.
func (iuo *IdentityUpdateOne) SetTags(m map[string]string) *IdentityUpdateOne {
	iuo.mutation.SetTags(m)
	return iuo
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (iuo *IdentityUpdateOne) SetEnvironmentID(id uuid.UUID) *IdentityUpdateOne {
	iuo.mutation.SetEnvironmentID(id)
	return iuo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (iuo *IdentityUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *IdentityUpdateOne {
	if id != nil {
		iuo = iuo.SetEnvironmentID(*id)
	}
	return iuo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (iuo *IdentityUpdateOne) SetEnvironment(e *Environment) *IdentityUpdateOne {
	return iuo.SetEnvironmentID(e.ID)
}

// Mutation returns the IdentityMutation object of the builder.
func (iuo *IdentityUpdateOne) Mutation() *IdentityMutation {
	return iuo.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (iuo *IdentityUpdateOne) ClearEnvironment() *IdentityUpdateOne {
	iuo.mutation.ClearEnvironment()
	return iuo
}

// Where appends a list predicates to the IdentityUpdate builder.
func (iuo *IdentityUpdateOne) Where(ps ...predicate.Identity) *IdentityUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdentityUpdateOne) Select(field string, fields ...string) *IdentityUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Identity entity.
func (iuo *IdentityUpdateOne) Save(ctx context.Context) (*Identity, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdentityUpdateOne) SaveX(ctx context.Context) *Identity {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdentityUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdentityUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IdentityUpdateOne) sqlSave(ctx context.Context) (_node *Identity, err error) {
	_spec := sqlgraph.NewUpdateSpec(identity.Table, identity.Columns, sqlgraph.NewFieldSpec(identity.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Identity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identity.FieldID)
		for _, f := range fields {
			if !identity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != identity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.HCLID(); ok {
		_spec.SetField(identity.FieldHCLID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.FirstName(); ok {
		_spec.SetField(identity.FieldFirstName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.LastName(); ok {
		_spec.SetField(identity.FieldLastName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Email(); ok {
		_spec.SetField(identity.FieldEmail, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Password(); ok {
		_spec.SetField(identity.FieldPassword, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(identity.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.AvatarFile(); ok {
		_spec.SetField(identity.FieldAvatarFile, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Vars(); ok {
		_spec.SetField(identity.FieldVars, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.Tags(); ok {
		_spec.SetField(identity.FieldTags, field.TypeJSON, value)
	}
	if iuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.EnvironmentTable,
			Columns: []string{identity.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.EnvironmentTable,
			Columns: []string{identity.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Identity{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
