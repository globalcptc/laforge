// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/disk"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/plandiff"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/token"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
	"github.com/hashicorp/go-multierror"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     uuid.UUID `json:"id,omitempty"`     // node id.
	Type   string    `json:"type,omitempty"`   // node type.
	Fields []*Field  `json:"fields,omitempty"` // node fields.
	Edges  []*Edge   `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string      `json:"type,omitempty"` // edge type.
	Name string      `json:"name,omitempty"` // edge name.
	IDs  []uuid.UUID `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (ap *AdhocPlan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ap.ID,
		Type:   "AdhocPlan",
		Fields: make([]*Field, 0),
		Edges:  make([]*Edge, 5),
	}
	node.Edges[0] = &Edge{
		Type: "AdhocPlan",
		Name: "PrevAdhocPlans",
	}
	err = ap.QueryPrevAdhocPlans().
		Select(adhocplan.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "AdhocPlan",
		Name: "NextAdhocPlans",
	}
	err = ap.QueryNextAdhocPlans().
		Select(adhocplan.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = ap.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = ap.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "AgentTask",
		Name: "AgentTask",
	}
	err = ap.QueryAgentTask().
		Select(agenttask.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (as *AgentStatus) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     as.ID,
		Type:   "AgentStatus",
		Fields: make([]*Field, 14),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(as.ClientID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "ClientID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Hostname); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "Hostname",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.UpTime); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int64",
		Name:  "UpTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.BootTime); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int64",
		Name:  "BootTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.NumProcs); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int64",
		Name:  "NumProcs",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Os); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "Os",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.HostID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "HostID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Load1); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "float64",
		Name:  "Load1",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Load5); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "float64",
		Name:  "Load5",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Load15); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "float64",
		Name:  "Load15",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.TotalMem); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "int64",
		Name:  "TotalMem",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.FreeMem); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "int64",
		Name:  "FreeMem",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.UsedMem); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "int64",
		Name:  "UsedMem",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Timestamp); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "int64",
		Name:  "Timestamp",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHost",
	}
	err = as.QueryProvisionedHost().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "ProvisionedNetwork",
	}
	err = as.QueryProvisionedNetwork().
		Select(provisionednetwork.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = as.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (at *AgentTask) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     at.ID,
		Type:   "AgentTask",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(at.Command); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "agenttask.Command",
		Name:  "command",
		Value: string(buf),
	}
	if buf, err = json.Marshal(at.Args); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "args",
		Value: string(buf),
	}
	if buf, err = json.Marshal(at.Number); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(at.Output); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "output",
		Value: string(buf),
	}
	if buf, err = json.Marshal(at.State); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "agenttask.State",
		Name:  "state",
		Value: string(buf),
	}
	if buf, err = json.Marshal(at.ErrorMessage); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "error_message",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ProvisioningStep",
		Name: "ProvisioningStep",
	}
	err = at.QueryProvisioningStep().
		Select(provisioningstep.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProvisioningScheduledStep",
		Name: "ProvisioningScheduledStep",
	}
	err = at.QueryProvisioningScheduledStep().
		Select(provisioningscheduledstep.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHost",
	}
	err = at.QueryProvisionedHost().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "AdhocPlan",
		Name: "AdhocPlans",
	}
	err = at.QueryAdhocPlans().
		Select(adhocplan.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (a *Ansible) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Ansible",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(a.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.HclID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Source); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.PlaybookName); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "playbook_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Method); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "ansible.Method",
		Name:  "method",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Inventory); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "inventory",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.AbsPath); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "abs_path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Tags); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "Users",
	}
	err = a.QueryUsers().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = a.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (au *AuthUser) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     au.ID,
		Type:   "AuthUser",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(au.Username); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "username",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.Password); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.FirstName); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "first_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.LastName); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "last_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.Email); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.Phone); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "phone",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.Company); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "company",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.Occupation); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "occupation",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.PrivateKeyPath); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "private_key_path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.Role); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "authuser.Role",
		Name:  "role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(au.Provider); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "authuser.Provider",
		Name:  "provider",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Token",
		Name: "Tokens",
	}
	err = au.QueryTokens().
		Select(token.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ServerTask",
		Name: "ServerTasks",
	}
	err = au.QueryServerTasks().
		Select(servertask.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (b *Build) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     b.ID,
		Type:   "Build",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 12),
	}
	var buf []byte
	if buf, err = json.Marshal(b.Revision); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.EnvironmentRevision); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "environment_revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Vars); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.CompletedPlan); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "completed_plan",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = b.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = b.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Competition",
		Name: "Competition",
	}
	err = b.QueryCompetition().
		Select(competition.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "BuildCommit",
		Name: "LatestBuildCommit",
	}
	err = b.QueryLatestBuildCommit().
		Select(buildcommit.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "RepoCommit",
		Name: "RepoCommit",
	}
	err = b.QueryRepoCommit().
		Select(repocommit.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "ProvisionedNetworks",
	}
	err = b.QueryProvisionedNetworks().
		Select(provisionednetwork.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "Team",
		Name: "Teams",
	}
	err = b.QueryTeams().
		Select(team.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "Plan",
		Name: "Plans",
	}
	err = b.QueryPlans().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "BuildCommit",
		Name: "BuildCommits",
	}
	err = b.QueryBuildCommits().
		Select(buildcommit.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "AdhocPlan",
		Name: "AdhocPlans",
	}
	err = b.QueryAdhocPlans().
		Select(adhocplan.FieldID).
		Scan(ctx, &node.Edges[9].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "AgentStatus",
		Name: "AgentStatuses",
	}
	err = b.QueryAgentStatuses().
		Select(agentstatus.FieldID).
		Scan(ctx, &node.Edges[10].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "ServerTask",
		Name: "ServerTasks",
	}
	err = b.QueryServerTasks().
		Select(servertask.FieldID).
		Scan(ctx, &node.Edges[11].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (bc *BuildCommit) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     bc.ID,
		Type:   "BuildCommit",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(bc.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "buildcommit.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bc.Revision); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bc.State); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "buildcommit.State",
		Name:  "state",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = bc.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ServerTask",
		Name: "ServerTasks",
	}
	err = bc.QueryServerTasks().
		Select(servertask.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "PlanDiff",
		Name: "PlanDiffs",
	}
	err = bc.QueryPlanDiffs().
		Select(plandiff.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Command) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Command",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(c.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Program); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "program",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Args); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]string",
		Name:  "args",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.IgnoreErrors); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "ignore_errors",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Disabled); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Cooldown); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int",
		Name:  "cooldown",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Timeout); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int",
		Name:  "timeout",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Vars); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Tags); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "Users",
	}
	err = c.QueryUsers().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = c.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Competition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Competition",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(c.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.RootPassword); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "root_password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.StartTime); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int64",
		Name:  "start_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.StopTime); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int64",
		Name:  "stop_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Config); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Tags); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "DNS",
		Name: "DNS",
	}
	err = c.QueryDNS().
		Select(dns.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = c.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Build",
		Name: "Builds",
	}
	err = c.QueryBuilds().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (d *DNS) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     d.ID,
		Type:   "DNS",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(d.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.Type); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.RootDomain); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "root_domain",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.DNSServers); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "[]string",
		Name:  "dns_servers",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.NtpServers); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]string",
		Name:  "ntp_servers",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.Config); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environments",
	}
	err = d.QueryEnvironments().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Competition",
		Name: "Competitions",
	}
	err = d.QueryCompetitions().
		Select(competition.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (dr *DNSRecord) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dr.ID,
		Type:   "DNSRecord",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(dr.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Values); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "[]string",
		Name:  "values",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Zone); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "zone",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Vars); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Disabled); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Tags); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = dr.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (d *Disk) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     d.ID,
		Type:   "Disk",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(d.Size); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "size",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Host",
		Name: "Host",
	}
	err = d.QueryHost().
		Select(host.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (e *Environment) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     e.ID,
		Type:   "Environment",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 20),
	}
	var buf []byte
	if buf, err = json.Marshal(e.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.CompetitionID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "competition_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Builder); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "builder",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.TeamCount); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "team_count",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Revision); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.AdminCidrs); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "[]string",
		Name:  "admin_cidrs",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.ExposedVdiPorts); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "[]string",
		Name:  "exposed_vdi_ports",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Config); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Tags); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "Users",
	}
	err = e.QueryUsers().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Host",
		Name: "Hosts",
	}
	err = e.QueryHosts().
		Select(host.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Competition",
		Name: "Competitions",
	}
	err = e.QueryCompetitions().
		Select(competition.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Identity",
		Name: "Identities",
	}
	err = e.QueryIdentities().
		Select(identity.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Command",
		Name: "Commands",
	}
	err = e.QueryCommands().
		Select(command.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Script",
		Name: "Scripts",
	}
	err = e.QueryScripts().
		Select(script.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "FileDownload",
		Name: "FileDownloads",
	}
	err = e.QueryFileDownloads().
		Select(filedownload.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "FileDelete",
		Name: "FileDeletes",
	}
	err = e.QueryFileDeletes().
		Select(filedelete.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "FileExtract",
		Name: "FileExtracts",
	}
	err = e.QueryFileExtracts().
		Select(fileextract.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "IncludedNetwork",
		Name: "IncludedNetworks",
	}
	err = e.QueryIncludedNetworks().
		Select(includednetwork.FieldID).
		Scan(ctx, &node.Edges[9].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "Finding",
		Name: "Findings",
	}
	err = e.QueryFindings().
		Select(finding.FieldID).
		Scan(ctx, &node.Edges[10].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "DNSRecord",
		Name: "DNSRecords",
	}
	err = e.QueryDNSRecords().
		Select(dnsrecord.FieldID).
		Scan(ctx, &node.Edges[11].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[12] = &Edge{
		Type: "DNS",
		Name: "DNS",
	}
	err = e.QueryDNS().
		Select(dns.FieldID).
		Scan(ctx, &node.Edges[12].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[13] = &Edge{
		Type: "Network",
		Name: "Networks",
	}
	err = e.QueryNetworks().
		Select(network.FieldID).
		Scan(ctx, &node.Edges[13].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[14] = &Edge{
		Type: "HostDependency",
		Name: "HostDependencies",
	}
	err = e.QueryHostDependencies().
		Select(hostdependency.FieldID).
		Scan(ctx, &node.Edges[14].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[15] = &Edge{
		Type: "Ansible",
		Name: "Ansibles",
	}
	err = e.QueryAnsibles().
		Select(ansible.FieldID).
		Scan(ctx, &node.Edges[15].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[16] = &Edge{
		Type: "ScheduledStep",
		Name: "ScheduledSteps",
	}
	err = e.QueryScheduledSteps().
		Select(scheduledstep.FieldID).
		Scan(ctx, &node.Edges[16].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[17] = &Edge{
		Type: "Build",
		Name: "Builds",
	}
	err = e.QueryBuilds().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[17].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[18] = &Edge{
		Type: "Repository",
		Name: "Repositories",
	}
	err = e.QueryRepositories().
		Select(repository.FieldID).
		Scan(ctx, &node.Edges[18].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[19] = &Edge{
		Type: "ServerTask",
		Name: "ServerTasks",
	}
	err = e.QueryServerTasks().
		Select(servertask.FieldID).
		Scan(ctx, &node.Edges[19].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fd *FileDelete) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fd.ID,
		Type:   "FileDelete",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(fd.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Path); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Tags); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = fd.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fd *FileDownload) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fd.ID,
		Type:   "FileDownload",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(fd.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.SourceType); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "source_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Source); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Destination); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "destination",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Template); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "template",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Perms); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "perms",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Disabled); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Md5); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "md5",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.AbsPath); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "abs_path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.IsTxt); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "bool",
		Name:  "is_txt",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Tags); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = fd.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fe *FileExtract) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fe.ID,
		Type:   "FileExtract",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(fe.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Source); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Destination); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "destination",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Tags); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = fe.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (f *Finding) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     f.ID,
		Type:   "Finding",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(f.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Description); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Severity); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "finding.Severity",
		Name:  "severity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Difficulty); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "finding.Difficulty",
		Name:  "difficulty",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Tags); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "Users",
	}
	err = f.QueryUsers().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Host",
		Name: "Host",
	}
	err = f.QueryHost().
		Select(host.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Script",
		Name: "Script",
	}
	err = f.QueryScript().
		Select(script.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = f.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (gfm *GinFileMiddleware) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     gfm.ID,
		Type:   "GinFileMiddleware",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(gfm.URLID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "url_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gfm.FilePath); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "file_path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gfm.Accessed); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "bool",
		Name:  "accessed",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHost",
	}
	err = gfm.QueryProvisionedHost().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProvisioningStep",
		Name: "ProvisioningStep",
	}
	err = gfm.QueryProvisioningStep().
		Select(provisioningstep.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisioningScheduledStep",
		Name: "ProvisioningScheduledStep",
	}
	err = gfm.QueryProvisioningScheduledStep().
		Select(provisioningscheduledstep.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (h *Host) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     h.ID,
		Type:   "Host",
		Fields: make([]*Field, 15),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(h.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Hostname); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "hostname",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.OS); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "OS",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.LastOctet); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "last_octet",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.InstanceSize); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "instance_size",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.AllowMACChanges); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "allow_mac_changes",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.ExposedTCPPorts); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "[]string",
		Name:  "exposed_tcp_ports",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.ExposedUDPPorts); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "[]string",
		Name:  "exposed_udp_ports",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.OverridePassword); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "override_password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Vars); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.UserGroups); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "[]string",
		Name:  "user_groups",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.ProvisionSteps); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "[]string",
		Name:  "provision_steps",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.ScheduledSteps); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "[]string",
		Name:  "scheduled_steps",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Tags); err != nil {
		return nil, err
	}
	node.Fields[14] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Disk",
		Name: "Disk",
	}
	err = h.QueryDisk().
		Select(disk.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "User",
		Name: "Users",
	}
	err = h.QueryUsers().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = h.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "IncludedNetwork",
		Name: "IncludedNetworks",
	}
	err = h.QueryIncludedNetworks().
		Select(includednetwork.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "HostDependency",
		Name: "DependOnHostDependencies",
	}
	err = h.QueryDependOnHostDependencies().
		Select(hostdependency.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "HostDependency",
		Name: "RequiredByHostDependencies",
	}
	err = h.QueryRequiredByHostDependencies().
		Select(hostdependency.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (hd *HostDependency) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     hd.ID,
		Type:   "HostDependency",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(hd.HostID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "host_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(hd.NetworkID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "network_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Host",
		Name: "RequiredBy",
	}
	err = hd.QueryRequiredBy().
		Select(host.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Host",
		Name: "DependOnHost",
	}
	err = hd.QueryDependOnHost().
		Select(host.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Network",
		Name: "DependOnNetwork",
	}
	err = hd.QueryDependOnNetwork().
		Select(network.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = hd.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (i *Identity) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     i.ID,
		Type:   "Identity",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(i.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.FirstName); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "first_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.LastName); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "last_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Email); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Password); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.AvatarFile); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "avatar_file",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Vars); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Tags); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = i.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (in *IncludedNetwork) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     in.ID,
		Type:   "IncludedNetwork",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(in.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(in.IncludedHosts); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "[]string",
		Name:  "included_hosts",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "Tags",
	}
	err = in.QueryTags().
		Select(tag.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Host",
		Name: "Hosts",
	}
	err = in.QueryHosts().
		Select(host.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Network",
		Name: "Network",
	}
	err = in.QueryNetwork().
		Select(network.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Environment",
		Name: "Environments",
	}
	err = in.QueryEnvironments().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (n *Network) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     n.ID,
		Type:   "Network",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(n.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Cidr); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "cidr",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.VdiVisible); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "vdi_visible",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Vars); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Tags); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = n.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "HostDependency",
		Name: "HostDependencies",
	}
	err = n.QueryHostDependencies().
		Select(hostdependency.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "IncludedNetwork",
		Name: "IncludedNetworks",
	}
	err = n.QueryIncludedNetworks().
		Select(includednetwork.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pl *Plan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pl.ID,
		Type:   "Plan",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 10),
	}
	var buf []byte
	if buf, err = json.Marshal(pl.StepNumber); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "step_number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.Type); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "plan.Type",
		Name:  "type",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Plan",
		Name: "PrevPlans",
	}
	err = pl.QueryPrevPlans().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Plan",
		Name: "NextPlans",
	}
	err = pl.QueryNextPlans().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = pl.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Team",
		Name: "Team",
	}
	err = pl.QueryTeam().
		Select(team.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "ProvisionedNetwork",
	}
	err = pl.QueryProvisionedNetwork().
		Select(provisionednetwork.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHost",
	}
	err = pl.QueryProvisionedHost().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "ProvisioningStep",
		Name: "ProvisioningStep",
	}
	err = pl.QueryProvisioningStep().
		Select(provisioningstep.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "ProvisioningScheduledStep",
		Name: "ProvisioningScheduledStep",
	}
	err = pl.QueryProvisioningScheduledStep().
		Select(provisioningscheduledstep.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = pl.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "PlanDiff",
		Name: "PlanDiffs",
	}
	err = pl.QueryPlanDiffs().
		Select(plandiff.FieldID).
		Scan(ctx, &node.Edges[9].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pd *PlanDiff) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pd.ID,
		Type:   "PlanDiff",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(pd.Revision); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pd.NewState); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "plandiff.NewState",
		Name:  "new_state",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "BuildCommit",
		Name: "BuildCommit",
	}
	err = pd.QueryBuildCommit().
		Select(buildcommit.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Plan",
		Name: "Plan",
	}
	err = pd.QueryPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ph *ProvisionedHost) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ph.ID,
		Type:   "ProvisionedHost",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 11),
	}
	var buf []byte
	if buf, err = json.Marshal(ph.SubnetIP); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "subnet_ip",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ph.AddonType); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "provisionedhost.AddonType",
		Name:  "addon_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ph.Vars); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = ph.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "ProvisionedNetwork",
	}
	err = ph.QueryProvisionedNetwork().
		Select(provisionednetwork.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Host",
		Name: "Host",
	}
	err = ph.QueryHost().
		Select(host.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Plan",
		Name: "EndStepPlan",
	}
	err = ph.QueryEndStepPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = ph.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "ProvisioningStep",
		Name: "ProvisioningSteps",
	}
	err = ph.QueryProvisioningSteps().
		Select(provisioningstep.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "ProvisioningScheduledStep",
		Name: "ProvisioningScheduledSteps",
	}
	err = ph.QueryProvisioningScheduledSteps().
		Select(provisioningscheduledstep.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "AgentStatus",
		Name: "AgentStatuses",
	}
	err = ph.QueryAgentStatuses().
		Select(agentstatus.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "AgentTask",
		Name: "AgentTasks",
	}
	err = ph.QueryAgentTasks().
		Select(agenttask.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "Plan",
		Name: "Plan",
	}
	err = ph.QueryPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[9].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "GinFileMiddleware",
		Name: "GinFileMiddleware",
	}
	err = ph.QueryGinFileMiddleware().
		Select(ginfilemiddleware.FieldID).
		Scan(ctx, &node.Edges[10].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pn *ProvisionedNetwork) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pn.ID,
		Type:   "ProvisionedNetwork",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(pn.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pn.Cidr); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "cidr",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pn.Vars); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = pn.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Network",
		Name: "Network",
	}
	err = pn.QueryNetwork().
		Select(network.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = pn.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Team",
		Name: "Team",
	}
	err = pn.QueryTeam().
		Select(team.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHosts",
	}
	err = pn.QueryProvisionedHosts().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Plan",
		Name: "Plan",
	}
	err = pn.QueryPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pss *ProvisioningScheduledStep) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pss.ID,
		Type:   "ProvisioningScheduledStep",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 13),
	}
	var buf []byte
	if buf, err = json.Marshal(pss.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "provisioningscheduledstep.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pss.RunTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "run_time",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = pss.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ScheduledStep",
		Name: "ScheduledStep",
	}
	err = pss.QueryScheduledStep().
		Select(scheduledstep.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHost",
	}
	err = pss.QueryProvisionedHost().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Script",
		Name: "Script",
	}
	err = pss.QueryScript().
		Select(script.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Command",
		Name: "Command",
	}
	err = pss.QueryCommand().
		Select(command.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "DNSRecord",
		Name: "DNSRecord",
	}
	err = pss.QueryDNSRecord().
		Select(dnsrecord.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "FileDelete",
		Name: "FileDelete",
	}
	err = pss.QueryFileDelete().
		Select(filedelete.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "FileDownload",
		Name: "FileDownload",
	}
	err = pss.QueryFileDownload().
		Select(filedownload.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "FileExtract",
		Name: "FileExtract",
	}
	err = pss.QueryFileExtract().
		Select(fileextract.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "Ansible",
		Name: "Ansible",
	}
	err = pss.QueryAnsible().
		Select(ansible.FieldID).
		Scan(ctx, &node.Edges[9].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "AgentTask",
		Name: "AgentTasks",
	}
	err = pss.QueryAgentTasks().
		Select(agenttask.FieldID).
		Scan(ctx, &node.Edges[10].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "Plan",
		Name: "Plan",
	}
	err = pss.QueryPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[11].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[12] = &Edge{
		Type: "GinFileMiddleware",
		Name: "GinFileMiddleware",
	}
	err = pss.QueryGinFileMiddleware().
		Select(ginfilemiddleware.FieldID).
		Scan(ctx, &node.Edges[12].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ps *ProvisioningStep) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ps.ID,
		Type:   "ProvisioningStep",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 12),
	}
	var buf []byte
	if buf, err = json.Marshal(ps.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "provisioningstep.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ps.StepNumber); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "step_number",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = ps.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHost",
	}
	err = ps.QueryProvisionedHost().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Script",
		Name: "Script",
	}
	err = ps.QueryScript().
		Select(script.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Command",
		Name: "Command",
	}
	err = ps.QueryCommand().
		Select(command.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "DNSRecord",
		Name: "DNSRecord",
	}
	err = ps.QueryDNSRecord().
		Select(dnsrecord.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "FileDelete",
		Name: "FileDelete",
	}
	err = ps.QueryFileDelete().
		Select(filedelete.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "FileDownload",
		Name: "FileDownload",
	}
	err = ps.QueryFileDownload().
		Select(filedownload.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "FileExtract",
		Name: "FileExtract",
	}
	err = ps.QueryFileExtract().
		Select(fileextract.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "Ansible",
		Name: "Ansible",
	}
	err = ps.QueryAnsible().
		Select(ansible.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "Plan",
		Name: "Plan",
	}
	err = ps.QueryPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[9].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "AgentTask",
		Name: "AgentTasks",
	}
	err = ps.QueryAgentTasks().
		Select(agenttask.FieldID).
		Scan(ctx, &node.Edges[10].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "GinFileMiddleware",
		Name: "GinFileMiddleware",
	}
	err = ps.QueryGinFileMiddleware().
		Select(ginfilemiddleware.FieldID).
		Scan(ctx, &node.Edges[11].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (rc *RepoCommit) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     rc.ID,
		Type:   "RepoCommit",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(rc.Revision); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.Hash); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.Author); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "object.Signature",
		Name:  "author",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.Committer); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "object.Signature",
		Name:  "committer",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.PgpSignature); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "pgp_signature",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.Message); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "message",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.TreeHash); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "tree_hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.ParentHashes); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "[]string",
		Name:  "parent_hashes",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Repository",
		Name: "Repository",
	}
	err = rc.QueryRepository().
		Select(repository.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Repository) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Repository",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(r.RepoURL); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "repo_url",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.BranchName); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "branch_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.EnviromentFilepath); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "enviroment_filepath",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.FolderPath); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "folder_path",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environments",
	}
	err = r.QueryEnvironments().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "RepoCommit",
		Name: "RepoCommits",
	}
	err = r.QueryRepoCommits().
		Select(repocommit.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ss *ScheduledStep) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ss.ID,
		Type:   "ScheduledStep",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ss.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ss.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ss.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ss.Step); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "step",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ss.Type); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "scheduledstep.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ss.Schedule); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "schedule",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ss.RunAt); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "run_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = ss.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Script) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Script",
		Fields: make([]*Field, 14),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(s.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Language); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "language",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Source); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.SourceType); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "source_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Cooldown); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "cooldown",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Timeout); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int",
		Name:  "timeout",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.IgnoreErrors); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "bool",
		Name:  "ignore_errors",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Args); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "[]string",
		Name:  "args",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Disabled); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Vars); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.AbsPath); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "string",
		Name:  "abs_path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Tags); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "Users",
	}
	err = s.QueryUsers().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Finding",
		Name: "Findings",
	}
	err = s.QueryFindings().
		Select(finding.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = s.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (st *ServerTask) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     st.ID,
		Type:   "ServerTask",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(st.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "servertask.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.StartTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "start_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.EndTime); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "end_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.Errors); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "[]string",
		Name:  "errors",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.LogFilePath); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "log_file_path",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "AuthUser",
		Name: "AuthUser",
	}
	err = st.QueryAuthUser().
		Select(authuser.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = st.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Environment",
		Name: "Environment",
	}
	err = st.QueryEnvironment().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = st.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "BuildCommit",
		Name: "BuildCommit",
	}
	err = st.QueryBuildCommit().
		Select(buildcommit.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "GinFileMiddleware",
		Name: "GinFileMiddleware",
	}
	err = st.QueryGinFileMiddleware().
		Select(ginfilemiddleware.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Status) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Status",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 9),
	}
	var buf []byte
	if buf, err = json.Marshal(s.State); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "status.State",
		Name:  "state",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.StatusFor); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "status.StatusFor",
		Name:  "status_for",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.StartedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "started_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.EndedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "ended_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Failed); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "failed",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Completed); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "completed",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Error); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "error",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = s.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "ProvisionedNetwork",
	}
	err = s.QueryProvisionedNetwork().
		Select(provisionednetwork.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedHost",
	}
	err = s.QueryProvisionedHost().
		Select(provisionedhost.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "ProvisioningStep",
		Name: "ProvisioningStep",
	}
	err = s.QueryProvisioningStep().
		Select(provisioningstep.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Team",
		Name: "Team",
	}
	err = s.QueryTeam().
		Select(team.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Plan",
		Name: "Plan",
	}
	err = s.QueryPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "ServerTask",
		Name: "ServerTask",
	}
	err = s.QueryServerTask().
		Select(servertask.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "AdhocPlan",
		Name: "AdhocPlan",
	}
	err = s.QueryAdhocPlan().
		Select(adhocplan.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "ProvisioningScheduledStep",
		Name: "ProvisioningScheduledStep",
	}
	err = s.QueryProvisioningScheduledStep().
		Select(provisioningscheduledstep.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Tag) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Tag",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(t.UUID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "uuid.UUID",
		Name:  "uuid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "description",
		Value: string(buf),
	}
	return node, nil
}

func (t *Team) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Team",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(t.TeamNumber); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "team_number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Vars); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Build",
		Name: "Build",
	}
	err = t.QueryBuild().
		Select(build.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Status",
		Name: "Status",
	}
	err = t.QueryStatus().
		Select(status.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "ProvisionedNetworks",
	}
	err = t.QueryProvisionedNetworks().
		Select(provisionednetwork.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Plan",
		Name: "Plan",
	}
	err = t.QueryPlan().
		Select(plan.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Token) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Token",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(t.Token); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "token",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.ExpireAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "expire_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "AuthUser",
		Name: "AuthUser",
	}
	err = t.QueryAuthUser().
		Select(authuser.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(u.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UUID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "uuid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Email); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.HclID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "Tag",
	}
	err = u.QueryTag().
		Select(tag.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "Environments",
	}
	err = u.QueryEnvironments().
		Select(environment.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id uuid.UUID) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, uuid.UUID) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, uuid.UUID) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, uuid.UUID) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id uuid.UUID) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(pet.Table))
func (c *Client) Noder(ctx context.Context, id uuid.UUID, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id uuid.UUID) (Noder, error) {
	switch table {
	case adhocplan.Table:
		n, err := c.AdhocPlan.Query().
			Where(adhocplan.ID(id)).
			CollectFields(ctx, "AdhocPlan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case agentstatus.Table:
		n, err := c.AgentStatus.Query().
			Where(agentstatus.ID(id)).
			CollectFields(ctx, "AgentStatus").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case agenttask.Table:
		n, err := c.AgentTask.Query().
			Where(agenttask.ID(id)).
			CollectFields(ctx, "AgentTask").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case ansible.Table:
		n, err := c.Ansible.Query().
			Where(ansible.ID(id)).
			CollectFields(ctx, "Ansible").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case authuser.Table:
		n, err := c.AuthUser.Query().
			Where(authuser.ID(id)).
			CollectFields(ctx, "AuthUser").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case build.Table:
		n, err := c.Build.Query().
			Where(build.ID(id)).
			CollectFields(ctx, "Build").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case buildcommit.Table:
		n, err := c.BuildCommit.Query().
			Where(buildcommit.ID(id)).
			CollectFields(ctx, "BuildCommit").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case command.Table:
		n, err := c.Command.Query().
			Where(command.ID(id)).
			CollectFields(ctx, "Command").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case competition.Table:
		n, err := c.Competition.Query().
			Where(competition.ID(id)).
			CollectFields(ctx, "Competition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case dns.Table:
		n, err := c.DNS.Query().
			Where(dns.ID(id)).
			CollectFields(ctx, "DNS").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case dnsrecord.Table:
		n, err := c.DNSRecord.Query().
			Where(dnsrecord.ID(id)).
			CollectFields(ctx, "DNSRecord").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case disk.Table:
		n, err := c.Disk.Query().
			Where(disk.ID(id)).
			CollectFields(ctx, "Disk").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case environment.Table:
		n, err := c.Environment.Query().
			Where(environment.ID(id)).
			CollectFields(ctx, "Environment").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case filedelete.Table:
		n, err := c.FileDelete.Query().
			Where(filedelete.ID(id)).
			CollectFields(ctx, "FileDelete").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case filedownload.Table:
		n, err := c.FileDownload.Query().
			Where(filedownload.ID(id)).
			CollectFields(ctx, "FileDownload").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case fileextract.Table:
		n, err := c.FileExtract.Query().
			Where(fileextract.ID(id)).
			CollectFields(ctx, "FileExtract").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case finding.Table:
		n, err := c.Finding.Query().
			Where(finding.ID(id)).
			CollectFields(ctx, "Finding").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case ginfilemiddleware.Table:
		n, err := c.GinFileMiddleware.Query().
			Where(ginfilemiddleware.ID(id)).
			CollectFields(ctx, "GinFileMiddleware").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case host.Table:
		n, err := c.Host.Query().
			Where(host.ID(id)).
			CollectFields(ctx, "Host").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case hostdependency.Table:
		n, err := c.HostDependency.Query().
			Where(hostdependency.ID(id)).
			CollectFields(ctx, "HostDependency").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case identity.Table:
		n, err := c.Identity.Query().
			Where(identity.ID(id)).
			CollectFields(ctx, "Identity").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case includednetwork.Table:
		n, err := c.IncludedNetwork.Query().
			Where(includednetwork.ID(id)).
			CollectFields(ctx, "IncludedNetwork").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case network.Table:
		n, err := c.Network.Query().
			Where(network.ID(id)).
			CollectFields(ctx, "Network").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case plan.Table:
		n, err := c.Plan.Query().
			Where(plan.ID(id)).
			CollectFields(ctx, "Plan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case plandiff.Table:
		n, err := c.PlanDiff.Query().
			Where(plandiff.ID(id)).
			CollectFields(ctx, "PlanDiff").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provisionedhost.Table:
		n, err := c.ProvisionedHost.Query().
			Where(provisionedhost.ID(id)).
			CollectFields(ctx, "ProvisionedHost").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provisionednetwork.Table:
		n, err := c.ProvisionedNetwork.Query().
			Where(provisionednetwork.ID(id)).
			CollectFields(ctx, "ProvisionedNetwork").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provisioningscheduledstep.Table:
		n, err := c.ProvisioningScheduledStep.Query().
			Where(provisioningscheduledstep.ID(id)).
			CollectFields(ctx, "ProvisioningScheduledStep").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provisioningstep.Table:
		n, err := c.ProvisioningStep.Query().
			Where(provisioningstep.ID(id)).
			CollectFields(ctx, "ProvisioningStep").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case repocommit.Table:
		n, err := c.RepoCommit.Query().
			Where(repocommit.ID(id)).
			CollectFields(ctx, "RepoCommit").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case repository.Table:
		n, err := c.Repository.Query().
			Where(repository.ID(id)).
			CollectFields(ctx, "Repository").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case scheduledstep.Table:
		n, err := c.ScheduledStep.Query().
			Where(scheduledstep.ID(id)).
			CollectFields(ctx, "ScheduledStep").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case script.Table:
		n, err := c.Script.Query().
			Where(script.ID(id)).
			CollectFields(ctx, "Script").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case servertask.Table:
		n, err := c.ServerTask.Query().
			Where(servertask.ID(id)).
			CollectFields(ctx, "ServerTask").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case status.Table:
		n, err := c.Status.Query().
			Where(status.ID(id)).
			CollectFields(ctx, "Status").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case tag.Table:
		n, err := c.Tag.Query().
			Where(tag.ID(id)).
			CollectFields(ctx, "Tag").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case team.Table:
		n, err := c.Team.Query().
			Where(team.ID(id)).
			CollectFields(ctx, "Team").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case token.Table:
		n, err := c.Token.Query().
			Where(token.ID(id)).
			CollectFields(ctx, "Token").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		n, err := c.User.Query().
			Where(user.ID(id)).
			CollectFields(ctx, "User").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []uuid.UUID, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]uuid.UUID)
	id2idx := make(map[uuid.UUID][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []uuid.UUID) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[uuid.UUID][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case adhocplan.Table:
		nodes, err := c.AdhocPlan.Query().
			Where(adhocplan.IDIn(ids...)).
			CollectFields(ctx, "AdhocPlan").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case agentstatus.Table:
		nodes, err := c.AgentStatus.Query().
			Where(agentstatus.IDIn(ids...)).
			CollectFields(ctx, "AgentStatus").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case agenttask.Table:
		nodes, err := c.AgentTask.Query().
			Where(agenttask.IDIn(ids...)).
			CollectFields(ctx, "AgentTask").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case ansible.Table:
		nodes, err := c.Ansible.Query().
			Where(ansible.IDIn(ids...)).
			CollectFields(ctx, "Ansible").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case authuser.Table:
		nodes, err := c.AuthUser.Query().
			Where(authuser.IDIn(ids...)).
			CollectFields(ctx, "AuthUser").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case build.Table:
		nodes, err := c.Build.Query().
			Where(build.IDIn(ids...)).
			CollectFields(ctx, "Build").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case buildcommit.Table:
		nodes, err := c.BuildCommit.Query().
			Where(buildcommit.IDIn(ids...)).
			CollectFields(ctx, "BuildCommit").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case command.Table:
		nodes, err := c.Command.Query().
			Where(command.IDIn(ids...)).
			CollectFields(ctx, "Command").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case competition.Table:
		nodes, err := c.Competition.Query().
			Where(competition.IDIn(ids...)).
			CollectFields(ctx, "Competition").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case dns.Table:
		nodes, err := c.DNS.Query().
			Where(dns.IDIn(ids...)).
			CollectFields(ctx, "DNS").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case dnsrecord.Table:
		nodes, err := c.DNSRecord.Query().
			Where(dnsrecord.IDIn(ids...)).
			CollectFields(ctx, "DNSRecord").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case disk.Table:
		nodes, err := c.Disk.Query().
			Where(disk.IDIn(ids...)).
			CollectFields(ctx, "Disk").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case environment.Table:
		nodes, err := c.Environment.Query().
			Where(environment.IDIn(ids...)).
			CollectFields(ctx, "Environment").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case filedelete.Table:
		nodes, err := c.FileDelete.Query().
			Where(filedelete.IDIn(ids...)).
			CollectFields(ctx, "FileDelete").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case filedownload.Table:
		nodes, err := c.FileDownload.Query().
			Where(filedownload.IDIn(ids...)).
			CollectFields(ctx, "FileDownload").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case fileextract.Table:
		nodes, err := c.FileExtract.Query().
			Where(fileextract.IDIn(ids...)).
			CollectFields(ctx, "FileExtract").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case finding.Table:
		nodes, err := c.Finding.Query().
			Where(finding.IDIn(ids...)).
			CollectFields(ctx, "Finding").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case ginfilemiddleware.Table:
		nodes, err := c.GinFileMiddleware.Query().
			Where(ginfilemiddleware.IDIn(ids...)).
			CollectFields(ctx, "GinFileMiddleware").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case host.Table:
		nodes, err := c.Host.Query().
			Where(host.IDIn(ids...)).
			CollectFields(ctx, "Host").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hostdependency.Table:
		nodes, err := c.HostDependency.Query().
			Where(hostdependency.IDIn(ids...)).
			CollectFields(ctx, "HostDependency").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case identity.Table:
		nodes, err := c.Identity.Query().
			Where(identity.IDIn(ids...)).
			CollectFields(ctx, "Identity").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case includednetwork.Table:
		nodes, err := c.IncludedNetwork.Query().
			Where(includednetwork.IDIn(ids...)).
			CollectFields(ctx, "IncludedNetwork").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case network.Table:
		nodes, err := c.Network.Query().
			Where(network.IDIn(ids...)).
			CollectFields(ctx, "Network").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case plan.Table:
		nodes, err := c.Plan.Query().
			Where(plan.IDIn(ids...)).
			CollectFields(ctx, "Plan").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case plandiff.Table:
		nodes, err := c.PlanDiff.Query().
			Where(plandiff.IDIn(ids...)).
			CollectFields(ctx, "PlanDiff").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provisionedhost.Table:
		nodes, err := c.ProvisionedHost.Query().
			Where(provisionedhost.IDIn(ids...)).
			CollectFields(ctx, "ProvisionedHost").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provisionednetwork.Table:
		nodes, err := c.ProvisionedNetwork.Query().
			Where(provisionednetwork.IDIn(ids...)).
			CollectFields(ctx, "ProvisionedNetwork").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provisioningscheduledstep.Table:
		nodes, err := c.ProvisioningScheduledStep.Query().
			Where(provisioningscheduledstep.IDIn(ids...)).
			CollectFields(ctx, "ProvisioningScheduledStep").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provisioningstep.Table:
		nodes, err := c.ProvisioningStep.Query().
			Where(provisioningstep.IDIn(ids...)).
			CollectFields(ctx, "ProvisioningStep").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case repocommit.Table:
		nodes, err := c.RepoCommit.Query().
			Where(repocommit.IDIn(ids...)).
			CollectFields(ctx, "RepoCommit").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case repository.Table:
		nodes, err := c.Repository.Query().
			Where(repository.IDIn(ids...)).
			CollectFields(ctx, "Repository").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case scheduledstep.Table:
		nodes, err := c.ScheduledStep.Query().
			Where(scheduledstep.IDIn(ids...)).
			CollectFields(ctx, "ScheduledStep").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case script.Table:
		nodes, err := c.Script.Query().
			Where(script.IDIn(ids...)).
			CollectFields(ctx, "Script").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case servertask.Table:
		nodes, err := c.ServerTask.Query().
			Where(servertask.IDIn(ids...)).
			CollectFields(ctx, "ServerTask").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case status.Table:
		nodes, err := c.Status.Query().
			Where(status.IDIn(ids...)).
			CollectFields(ctx, "Status").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case tag.Table:
		nodes, err := c.Tag.Query().
			Where(tag.IDIn(ids...)).
			CollectFields(ctx, "Tag").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case team.Table:
		nodes, err := c.Team.Query().
			Where(team.IDIn(ids...)).
			CollectFields(ctx, "Team").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case token.Table:
		nodes, err := c.Token.Query().
			Where(token.IDIn(ids...)).
			CollectFields(ctx, "Token").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		nodes, err := c.User.Query().
			Where(user.IDIn(ids...)).
			CollectFields(ctx, "User").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
