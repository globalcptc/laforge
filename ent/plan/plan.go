// Code generated by ent, DO NOT EDIT.

package plan

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStepNumber holds the string denoting the step_number field in the database.
	FieldStepNumber = "step_number"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgePrevPlans holds the string denoting the prevplans edge name in mutations.
	EdgePrevPlans = "PrevPlans"
	// EdgeNextPlans holds the string denoting the nextplans edge name in mutations.
	EdgeNextPlans = "NextPlans"
	// EdgeBuild holds the string denoting the build edge name in mutations.
	EdgeBuild = "Build"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "Team"
	// EdgeProvisionedNetwork holds the string denoting the provisionednetwork edge name in mutations.
	EdgeProvisionedNetwork = "ProvisionedNetwork"
	// EdgeProvisionedHost holds the string denoting the provisionedhost edge name in mutations.
	EdgeProvisionedHost = "ProvisionedHost"
	// EdgeProvisioningStep holds the string denoting the provisioningstep edge name in mutations.
	EdgeProvisioningStep = "ProvisioningStep"
	// EdgeProvisioningScheduledStep holds the string denoting the provisioningscheduledstep edge name in mutations.
	EdgeProvisioningScheduledStep = "ProvisioningScheduledStep"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "Status"
	// EdgePlanDiffs holds the string denoting the plandiffs edge name in mutations.
	EdgePlanDiffs = "PlanDiffs"
	// Table holds the table name of the plan in the database.
	Table = "plans"
	// PrevPlansTable is the table that holds the PrevPlans relation/edge. The primary key declared below.
	PrevPlansTable = "plan_NextPlans"
	// NextPlansTable is the table that holds the NextPlans relation/edge. The primary key declared below.
	NextPlansTable = "plan_NextPlans"
	// BuildTable is the table that holds the Build relation/edge.
	BuildTable = "plans"
	// BuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	BuildInverseTable = "builds"
	// BuildColumn is the table column denoting the Build relation/edge.
	BuildColumn = "plan_build"
	// TeamTable is the table that holds the Team relation/edge.
	TeamTable = "teams"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the Team relation/edge.
	TeamColumn = "plan_team"
	// ProvisionedNetworkTable is the table that holds the ProvisionedNetwork relation/edge.
	ProvisionedNetworkTable = "provisioned_networks"
	// ProvisionedNetworkInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	ProvisionedNetworkInverseTable = "provisioned_networks"
	// ProvisionedNetworkColumn is the table column denoting the ProvisionedNetwork relation/edge.
	ProvisionedNetworkColumn = "plan_provisioned_network"
	// ProvisionedHostTable is the table that holds the ProvisionedHost relation/edge.
	ProvisionedHostTable = "provisioned_hosts"
	// ProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisionedHostInverseTable = "provisioned_hosts"
	// ProvisionedHostColumn is the table column denoting the ProvisionedHost relation/edge.
	ProvisionedHostColumn = "plan_provisioned_host"
	// ProvisioningStepTable is the table that holds the ProvisioningStep relation/edge.
	ProvisioningStepTable = "provisioning_steps"
	// ProvisioningStepInverseTable is the table name for the ProvisioningStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisioningstep" package.
	ProvisioningStepInverseTable = "provisioning_steps"
	// ProvisioningStepColumn is the table column denoting the ProvisioningStep relation/edge.
	ProvisioningStepColumn = "plan_provisioning_step"
	// ProvisioningScheduledStepTable is the table that holds the ProvisioningScheduledStep relation/edge.
	ProvisioningScheduledStepTable = "provisioning_scheduled_steps"
	// ProvisioningScheduledStepInverseTable is the table name for the ProvisioningScheduledStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisioningscheduledstep" package.
	ProvisioningScheduledStepInverseTable = "provisioning_scheduled_steps"
	// ProvisioningScheduledStepColumn is the table column denoting the ProvisioningScheduledStep relation/edge.
	ProvisioningScheduledStepColumn = "plan_provisioning_scheduled_step"
	// StatusTable is the table that holds the Status relation/edge.
	StatusTable = "status"
	// StatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	StatusInverseTable = "status"
	// StatusColumn is the table column denoting the Status relation/edge.
	StatusColumn = "plan_status"
	// PlanDiffsTable is the table that holds the PlanDiffs relation/edge.
	PlanDiffsTable = "plan_diffs"
	// PlanDiffsInverseTable is the table name for the PlanDiff entity.
	// It exists in this package in order to avoid circular dependency with the "plandiff" package.
	PlanDiffsInverseTable = "plan_diffs"
	// PlanDiffsColumn is the table column denoting the PlanDiffs relation/edge.
	PlanDiffsColumn = "plan_diff_plan"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldStepNumber,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "plans"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_build",
}

var (
	// PrevPlansPrimaryKey and PrevPlansColumn2 are the table columns denoting the
	// primary key for the PrevPlans relation (M2M).
	PrevPlansPrimaryKey = []string{"plan_id", "PrevPlan_id"}
	// NextPlansPrimaryKey and NextPlansColumn2 are the table columns denoting the
	// primary key for the NextPlans relation (M2M).
	NextPlansPrimaryKey = []string{"plan_id", "PrevPlan_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeStartBuild         Type = "start_build"
	TypeStartTeam          Type = "start_team"
	TypeProvisionNetwork   Type = "provision_network"
	TypeProvisionHost      Type = "provision_host"
	TypeExecuteStep        Type = "execute_step"
	TypeStartScheduledStep Type = "start_scheduled_step"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeStartBuild, TypeStartTeam, TypeProvisionNetwork, TypeProvisionHost, TypeExecuteStep, TypeStartScheduledStep:
		return nil
	default:
		return fmt.Errorf("plan: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStepNumber orders the results by the step_number field.
func ByStepNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepNumber, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPrevPlansCount orders the results by PrevPlans count.
func ByPrevPlansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrevPlansStep(), opts...)
	}
}

// ByPrevPlans orders the results by PrevPlans terms.
func ByPrevPlans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrevPlansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNextPlansCount orders the results by NextPlans count.
func ByNextPlansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNextPlansStep(), opts...)
	}
}

// ByNextPlans orders the results by NextPlans terms.
func ByNextPlans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextPlansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBuildField orders the results by Build field.
func ByBuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by Team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisionedNetworkField orders the results by ProvisionedNetwork field.
func ByProvisionedNetworkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionedNetworkStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisionedHostField orders the results by ProvisionedHost field.
func ByProvisionedHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionedHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningStepField orders the results by ProvisioningStep field.
func ByProvisioningStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningStepStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisioningScheduledStepField orders the results by ProvisioningScheduledStep field.
func ByProvisioningScheduledStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisioningScheduledStepStep(), sql.OrderByField(field, opts...))
	}
}

// ByStatusField orders the results by Status field.
func ByStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatusStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanDiffsCount orders the results by PlanDiffs count.
func ByPlanDiffsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlanDiffsStep(), opts...)
	}
}

// ByPlanDiffs orders the results by PlanDiffs terms.
func ByPlanDiffs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanDiffsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPrevPlansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PrevPlansTable, PrevPlansPrimaryKey...),
	)
}
func newNextPlansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NextPlansTable, NextPlansPrimaryKey...),
	)
}
func newBuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BuildTable, BuildColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TeamTable, TeamColumn),
	)
}
func newProvisionedNetworkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionedNetworkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedNetworkTable, ProvisionedNetworkColumn),
	)
}
func newProvisionedHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionedHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedHostTable, ProvisionedHostColumn),
	)
}
func newProvisioningStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisioningStepTable, ProvisioningStepColumn),
	)
}
func newProvisioningScheduledStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisioningScheduledStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProvisioningScheduledStepTable, ProvisioningScheduledStepColumn),
	)
}
func newStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
	)
}
func newPlanDiffsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanDiffsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PlanDiffsTable, PlanDiffsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
