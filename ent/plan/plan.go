// Code generated by ent, DO NOT EDIT.

package plan

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStepNumber holds the string denoting the step_number field in the database.
	FieldStepNumber = "step_number"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldBuildID holds the string denoting the build_id field in the database.
	FieldBuildID = "build_id"
	// EdgePrevPlan holds the string denoting the prevplan edge name in mutations.
	EdgePrevPlan = "PrevPlan"
	// EdgeNextPlan holds the string denoting the nextplan edge name in mutations.
	EdgeNextPlan = "NextPlan"
	// EdgePlanToBuild holds the string denoting the plantobuild edge name in mutations.
	EdgePlanToBuild = "PlanToBuild"
	// EdgePlanToTeam holds the string denoting the plantoteam edge name in mutations.
	EdgePlanToTeam = "PlanToTeam"
	// EdgePlanToProvisionedNetwork holds the string denoting the plantoprovisionednetwork edge name in mutations.
	EdgePlanToProvisionedNetwork = "PlanToProvisionedNetwork"
	// EdgePlanToProvisionedHost holds the string denoting the plantoprovisionedhost edge name in mutations.
	EdgePlanToProvisionedHost = "PlanToProvisionedHost"
	// EdgePlanToProvisioningStep holds the string denoting the plantoprovisioningstep edge name in mutations.
	EdgePlanToProvisioningStep = "PlanToProvisioningStep"
	// EdgePlanToStatus holds the string denoting the plantostatus edge name in mutations.
	EdgePlanToStatus = "PlanToStatus"
	// EdgePlanToPlanDiffs holds the string denoting the plantoplandiffs edge name in mutations.
	EdgePlanToPlanDiffs = "PlanToPlanDiffs"
	// Table holds the table name of the plan in the database.
	Table = "plans"
	// PrevPlanTable is the table that holds the PrevPlan relation/edge. The primary key declared below.
	PrevPlanTable = "plan_NextPlan"
	// NextPlanTable is the table that holds the NextPlan relation/edge. The primary key declared below.
	NextPlanTable = "plan_NextPlan"
	// PlanToBuildTable is the table that holds the PlanToBuild relation/edge.
	PlanToBuildTable = "plans"
	// PlanToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	PlanToBuildInverseTable = "builds"
	// PlanToBuildColumn is the table column denoting the PlanToBuild relation/edge.
	PlanToBuildColumn = "plan_plan_to_build"
	// PlanToTeamTable is the table that holds the PlanToTeam relation/edge.
	PlanToTeamTable = "teams"
	// PlanToTeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	PlanToTeamInverseTable = "teams"
	// PlanToTeamColumn is the table column denoting the PlanToTeam relation/edge.
	PlanToTeamColumn = "plan_plan_to_team"
	// PlanToProvisionedNetworkTable is the table that holds the PlanToProvisionedNetwork relation/edge.
	PlanToProvisionedNetworkTable = "provisioned_networks"
	// PlanToProvisionedNetworkInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	PlanToProvisionedNetworkInverseTable = "provisioned_networks"
	// PlanToProvisionedNetworkColumn is the table column denoting the PlanToProvisionedNetwork relation/edge.
	PlanToProvisionedNetworkColumn = "plan_plan_to_provisioned_network"
	// PlanToProvisionedHostTable is the table that holds the PlanToProvisionedHost relation/edge.
	PlanToProvisionedHostTable = "provisioned_hosts"
	// PlanToProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	PlanToProvisionedHostInverseTable = "provisioned_hosts"
	// PlanToProvisionedHostColumn is the table column denoting the PlanToProvisionedHost relation/edge.
	PlanToProvisionedHostColumn = "plan_plan_to_provisioned_host"
	// PlanToProvisioningStepTable is the table that holds the PlanToProvisioningStep relation/edge.
	PlanToProvisioningStepTable = "provisioning_steps"
	// PlanToProvisioningStepInverseTable is the table name for the ProvisioningStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisioningstep" package.
	PlanToProvisioningStepInverseTable = "provisioning_steps"
	// PlanToProvisioningStepColumn is the table column denoting the PlanToProvisioningStep relation/edge.
	PlanToProvisioningStepColumn = "plan_plan_to_provisioning_step"
	// PlanToStatusTable is the table that holds the PlanToStatus relation/edge.
	PlanToStatusTable = "status"
	// PlanToStatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	PlanToStatusInverseTable = "status"
	// PlanToStatusColumn is the table column denoting the PlanToStatus relation/edge.
	PlanToStatusColumn = "plan_plan_to_status"
	// PlanToPlanDiffsTable is the table that holds the PlanToPlanDiffs relation/edge.
	PlanToPlanDiffsTable = "plan_diffs"
	// PlanToPlanDiffsInverseTable is the table name for the PlanDiff entity.
	// It exists in this package in order to avoid circular dependency with the "plandiff" package.
	PlanToPlanDiffsInverseTable = "plan_diffs"
	// PlanToPlanDiffsColumn is the table column denoting the PlanToPlanDiffs relation/edge.
	PlanToPlanDiffsColumn = "plan_diff_plan_diff_to_plan"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldStepNumber,
	FieldType,
	FieldBuildID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "plans"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_plan_to_build",
}

var (
	// PrevPlanPrimaryKey and PrevPlanColumn2 are the table columns denoting the
	// primary key for the PrevPlan relation (M2M).
	PrevPlanPrimaryKey = []string{"plan_id", "PrevPlan_id"}
	// NextPlanPrimaryKey and NextPlanColumn2 are the table columns denoting the
	// primary key for the NextPlan relation (M2M).
	NextPlanPrimaryKey = []string{"plan_id", "PrevPlan_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeStartBuild       Type = "start_build"
	TypeStartTeam        Type = "start_team"
	TypeProvisionNetwork Type = "provision_network"
	TypeProvisionHost    Type = "provision_host"
	TypeExecuteStep      Type = "execute_step"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeStartBuild, TypeStartTeam, TypeProvisionNetwork, TypeProvisionHost, TypeExecuteStep:
		return nil
	default:
		return fmt.Errorf("plan: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStepNumber orders the results by the step_number field.
func ByStepNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepNumber, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByBuildID orders the results by the build_id field.
func ByBuildID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildID, opts...).ToFunc()
}

// ByPrevPlanCount orders the results by PrevPlan count.
func ByPrevPlanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrevPlanStep(), opts...)
	}
}

// ByPrevPlan orders the results by PrevPlan terms.
func ByPrevPlan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrevPlanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNextPlanCount orders the results by NextPlan count.
func ByNextPlanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNextPlanStep(), opts...)
	}
}

// ByNextPlan orders the results by NextPlan terms.
func ByNextPlan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextPlanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlanToBuildField orders the results by PlanToBuild field.
func ByPlanToBuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanToBuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanToTeamField orders the results by PlanToTeam field.
func ByPlanToTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanToTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanToProvisionedNetworkField orders the results by PlanToProvisionedNetwork field.
func ByPlanToProvisionedNetworkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanToProvisionedNetworkStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanToProvisionedHostField orders the results by PlanToProvisionedHost field.
func ByPlanToProvisionedHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanToProvisionedHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanToProvisioningStepField orders the results by PlanToProvisioningStep field.
func ByPlanToProvisioningStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanToProvisioningStepStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanToStatusField orders the results by PlanToStatus field.
func ByPlanToStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanToStatusStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanToPlanDiffsCount orders the results by PlanToPlanDiffs count.
func ByPlanToPlanDiffsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlanToPlanDiffsStep(), opts...)
	}
}

// ByPlanToPlanDiffs orders the results by PlanToPlanDiffs terms.
func ByPlanToPlanDiffs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanToPlanDiffsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPrevPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PrevPlanTable, PrevPlanPrimaryKey...),
	)
}
func newNextPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NextPlanTable, NextPlanPrimaryKey...),
	)
}
func newPlanToBuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanToBuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PlanToBuildTable, PlanToBuildColumn),
	)
}
func newPlanToTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanToTeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlanToTeamTable, PlanToTeamColumn),
	)
}
func newPlanToProvisionedNetworkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanToProvisionedNetworkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlanToProvisionedNetworkTable, PlanToProvisionedNetworkColumn),
	)
}
func newPlanToProvisionedHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanToProvisionedHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlanToProvisionedHostTable, PlanToProvisionedHostColumn),
	)
}
func newPlanToProvisioningStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanToProvisioningStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlanToProvisioningStepTable, PlanToProvisioningStepColumn),
	)
}
func newPlanToStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanToStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlanToStatusTable, PlanToStatusColumn),
	)
}
func newPlanToPlanDiffsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanToPlanDiffsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PlanToPlanDiffsTable, PlanToPlanDiffsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
