// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// NetworkUpdate is the builder for updating Network entities.
type NetworkUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkMutation
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nu *NetworkUpdate) Where(ps ...predicate.Network) *NetworkUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetHCLID sets the "hcl_id" field.
func (nu *NetworkUpdate) SetHCLID(s string) *NetworkUpdate {
	nu.mutation.SetHCLID(s)
	return nu
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableHCLID(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetHCLID(*s)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NetworkUpdate) SetName(s string) *NetworkUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableName(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetCidr sets the "cidr" field.
func (nu *NetworkUpdate) SetCidr(s string) *NetworkUpdate {
	nu.mutation.SetCidr(s)
	return nu
}

// SetNillableCidr sets the "cidr" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableCidr(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetCidr(*s)
	}
	return nu
}

// SetVdiVisible sets the "vdi_visible" field.
func (nu *NetworkUpdate) SetVdiVisible(b bool) *NetworkUpdate {
	nu.mutation.SetVdiVisible(b)
	return nu
}

// SetNillableVdiVisible sets the "vdi_visible" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableVdiVisible(b *bool) *NetworkUpdate {
	if b != nil {
		nu.SetVdiVisible(*b)
	}
	return nu
}

// SetVars sets the "vars" field.
func (nu *NetworkUpdate) SetVars(m map[string]string) *NetworkUpdate {
	nu.mutation.SetVars(m)
	return nu
}

// SetTags sets the "tags" field.
func (nu *NetworkUpdate) SetTags(m map[string]string) *NetworkUpdate {
	nu.mutation.SetTags(m)
	return nu
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (nu *NetworkUpdate) SetEnvironmentID(id uuid.UUID) *NetworkUpdate {
	nu.mutation.SetEnvironmentID(id)
	return nu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (nu *NetworkUpdate) SetNillableEnvironmentID(id *uuid.UUID) *NetworkUpdate {
	if id != nil {
		nu = nu.SetEnvironmentID(*id)
	}
	return nu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (nu *NetworkUpdate) SetEnvironment(e *Environment) *NetworkUpdate {
	return nu.SetEnvironmentID(e.ID)
}

// AddHostDependencyIDs adds the "HostDependencies" edge to the HostDependency entity by IDs.
func (nu *NetworkUpdate) AddHostDependencyIDs(ids ...uuid.UUID) *NetworkUpdate {
	nu.mutation.AddHostDependencyIDs(ids...)
	return nu
}

// AddHostDependencies adds the "HostDependencies" edges to the HostDependency entity.
func (nu *NetworkUpdate) AddHostDependencies(h ...*HostDependency) *NetworkUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nu.AddHostDependencyIDs(ids...)
}

// AddIncludedNetworkIDs adds the "IncludedNetworks" edge to the IncludedNetwork entity by IDs.
func (nu *NetworkUpdate) AddIncludedNetworkIDs(ids ...uuid.UUID) *NetworkUpdate {
	nu.mutation.AddIncludedNetworkIDs(ids...)
	return nu
}

// AddIncludedNetworks adds the "IncludedNetworks" edges to the IncludedNetwork entity.
func (nu *NetworkUpdate) AddIncludedNetworks(i ...*IncludedNetwork) *NetworkUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddIncludedNetworkIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nu *NetworkUpdate) Mutation() *NetworkMutation {
	return nu.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (nu *NetworkUpdate) ClearEnvironment() *NetworkUpdate {
	nu.mutation.ClearEnvironment()
	return nu
}

// ClearHostDependencies clears all "HostDependencies" edges to the HostDependency entity.
func (nu *NetworkUpdate) ClearHostDependencies() *NetworkUpdate {
	nu.mutation.ClearHostDependencies()
	return nu
}

// RemoveHostDependencyIDs removes the "HostDependencies" edge to HostDependency entities by IDs.
func (nu *NetworkUpdate) RemoveHostDependencyIDs(ids ...uuid.UUID) *NetworkUpdate {
	nu.mutation.RemoveHostDependencyIDs(ids...)
	return nu
}

// RemoveHostDependencies removes "HostDependencies" edges to HostDependency entities.
func (nu *NetworkUpdate) RemoveHostDependencies(h ...*HostDependency) *NetworkUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nu.RemoveHostDependencyIDs(ids...)
}

// ClearIncludedNetworks clears all "IncludedNetworks" edges to the IncludedNetwork entity.
func (nu *NetworkUpdate) ClearIncludedNetworks() *NetworkUpdate {
	nu.mutation.ClearIncludedNetworks()
	return nu
}

// RemoveIncludedNetworkIDs removes the "IncludedNetworks" edge to IncludedNetwork entities by IDs.
func (nu *NetworkUpdate) RemoveIncludedNetworkIDs(ids ...uuid.UUID) *NetworkUpdate {
	nu.mutation.RemoveIncludedNetworkIDs(ids...)
	return nu
}

// RemoveIncludedNetworks removes "IncludedNetworks" edges to IncludedNetwork entities.
func (nu *NetworkUpdate) RemoveIncludedNetworks(i ...*IncludedNetwork) *NetworkUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemoveIncludedNetworkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NetworkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetworkUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetworkUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetworkUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NetworkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeUUID))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.HCLID(); ok {
		_spec.SetField(network.FieldHCLID, field.TypeString, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(network.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Cidr(); ok {
		_spec.SetField(network.FieldCidr, field.TypeString, value)
	}
	if value, ok := nu.mutation.VdiVisible(); ok {
		_spec.SetField(network.FieldVdiVisible, field.TypeBool, value)
	}
	if value, ok := nu.mutation.Vars(); ok {
		_spec.SetField(network.FieldVars, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.Tags(); ok {
		_spec.SetField(network.FieldTags, field.TypeJSON, value)
	}
	if nu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.HostDependenciesTable,
			Columns: []string{network.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedHostDependenciesIDs(); len(nodes) > 0 && !nu.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.HostDependenciesTable,
			Columns: []string{network.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.HostDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.HostDependenciesTable,
			Columns: []string{network.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.IncludedNetworksTable,
			Columns: []string{network.IncludedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedIncludedNetworksIDs(); len(nodes) > 0 && !nu.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.IncludedNetworksTable,
			Columns: []string{network.IncludedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.IncludedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.IncludedNetworksTable,
			Columns: []string{network.IncludedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NetworkUpdateOne is the builder for updating a single Network entity.
type NetworkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkMutation
}

// SetHCLID sets the "hcl_id" field.
func (nuo *NetworkUpdateOne) SetHCLID(s string) *NetworkUpdateOne {
	nuo.mutation.SetHCLID(s)
	return nuo
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableHCLID(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetHCLID(*s)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NetworkUpdateOne) SetName(s string) *NetworkUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableName(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetCidr sets the "cidr" field.
func (nuo *NetworkUpdateOne) SetCidr(s string) *NetworkUpdateOne {
	nuo.mutation.SetCidr(s)
	return nuo
}

// SetNillableCidr sets the "cidr" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableCidr(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetCidr(*s)
	}
	return nuo
}

// SetVdiVisible sets the "vdi_visible" field.
func (nuo *NetworkUpdateOne) SetVdiVisible(b bool) *NetworkUpdateOne {
	nuo.mutation.SetVdiVisible(b)
	return nuo
}

// SetNillableVdiVisible sets the "vdi_visible" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableVdiVisible(b *bool) *NetworkUpdateOne {
	if b != nil {
		nuo.SetVdiVisible(*b)
	}
	return nuo
}

// SetVars sets the "vars" field.
func (nuo *NetworkUpdateOne) SetVars(m map[string]string) *NetworkUpdateOne {
	nuo.mutation.SetVars(m)
	return nuo
}

// SetTags sets the "tags" field.
func (nuo *NetworkUpdateOne) SetTags(m map[string]string) *NetworkUpdateOne {
	nuo.mutation.SetTags(m)
	return nuo
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (nuo *NetworkUpdateOne) SetEnvironmentID(id uuid.UUID) *NetworkUpdateOne {
	nuo.mutation.SetEnvironmentID(id)
	return nuo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *NetworkUpdateOne {
	if id != nil {
		nuo = nuo.SetEnvironmentID(*id)
	}
	return nuo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (nuo *NetworkUpdateOne) SetEnvironment(e *Environment) *NetworkUpdateOne {
	return nuo.SetEnvironmentID(e.ID)
}

// AddHostDependencyIDs adds the "HostDependencies" edge to the HostDependency entity by IDs.
func (nuo *NetworkUpdateOne) AddHostDependencyIDs(ids ...uuid.UUID) *NetworkUpdateOne {
	nuo.mutation.AddHostDependencyIDs(ids...)
	return nuo
}

// AddHostDependencies adds the "HostDependencies" edges to the HostDependency entity.
func (nuo *NetworkUpdateOne) AddHostDependencies(h ...*HostDependency) *NetworkUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nuo.AddHostDependencyIDs(ids...)
}

// AddIncludedNetworkIDs adds the "IncludedNetworks" edge to the IncludedNetwork entity by IDs.
func (nuo *NetworkUpdateOne) AddIncludedNetworkIDs(ids ...uuid.UUID) *NetworkUpdateOne {
	nuo.mutation.AddIncludedNetworkIDs(ids...)
	return nuo
}

// AddIncludedNetworks adds the "IncludedNetworks" edges to the IncludedNetwork entity.
func (nuo *NetworkUpdateOne) AddIncludedNetworks(i ...*IncludedNetwork) *NetworkUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddIncludedNetworkIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nuo *NetworkUpdateOne) Mutation() *NetworkMutation {
	return nuo.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (nuo *NetworkUpdateOne) ClearEnvironment() *NetworkUpdateOne {
	nuo.mutation.ClearEnvironment()
	return nuo
}

// ClearHostDependencies clears all "HostDependencies" edges to the HostDependency entity.
func (nuo *NetworkUpdateOne) ClearHostDependencies() *NetworkUpdateOne {
	nuo.mutation.ClearHostDependencies()
	return nuo
}

// RemoveHostDependencyIDs removes the "HostDependencies" edge to HostDependency entities by IDs.
func (nuo *NetworkUpdateOne) RemoveHostDependencyIDs(ids ...uuid.UUID) *NetworkUpdateOne {
	nuo.mutation.RemoveHostDependencyIDs(ids...)
	return nuo
}

// RemoveHostDependencies removes "HostDependencies" edges to HostDependency entities.
func (nuo *NetworkUpdateOne) RemoveHostDependencies(h ...*HostDependency) *NetworkUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nuo.RemoveHostDependencyIDs(ids...)
}

// ClearIncludedNetworks clears all "IncludedNetworks" edges to the IncludedNetwork entity.
func (nuo *NetworkUpdateOne) ClearIncludedNetworks() *NetworkUpdateOne {
	nuo.mutation.ClearIncludedNetworks()
	return nuo
}

// RemoveIncludedNetworkIDs removes the "IncludedNetworks" edge to IncludedNetwork entities by IDs.
func (nuo *NetworkUpdateOne) RemoveIncludedNetworkIDs(ids ...uuid.UUID) *NetworkUpdateOne {
	nuo.mutation.RemoveIncludedNetworkIDs(ids...)
	return nuo
}

// RemoveIncludedNetworks removes "IncludedNetworks" edges to IncludedNetwork entities.
func (nuo *NetworkUpdateOne) RemoveIncludedNetworks(i ...*IncludedNetwork) *NetworkUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemoveIncludedNetworkIDs(ids...)
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nuo *NetworkUpdateOne) Where(ps ...predicate.Network) *NetworkUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NetworkUpdateOne) Select(field string, fields ...string) *NetworkUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Network entity.
func (nuo *NetworkUpdateOne) Save(ctx context.Context) (*Network, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetworkUpdateOne) SaveX(ctx context.Context) *Network {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NetworkUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetworkUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NetworkUpdateOne) sqlSave(ctx context.Context) (_node *Network, err error) {
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeUUID))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Network.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, network.FieldID)
		for _, f := range fields {
			if !network.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != network.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.HCLID(); ok {
		_spec.SetField(network.FieldHCLID, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(network.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Cidr(); ok {
		_spec.SetField(network.FieldCidr, field.TypeString, value)
	}
	if value, ok := nuo.mutation.VdiVisible(); ok {
		_spec.SetField(network.FieldVdiVisible, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.Vars(); ok {
		_spec.SetField(network.FieldVars, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.Tags(); ok {
		_spec.SetField(network.FieldTags, field.TypeJSON, value)
	}
	if nuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.HostDependenciesTable,
			Columns: []string{network.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedHostDependenciesIDs(); len(nodes) > 0 && !nuo.mutation.HostDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.HostDependenciesTable,
			Columns: []string{network.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.HostDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.HostDependenciesTable,
			Columns: []string{network.HostDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostdependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.IncludedNetworksTable,
			Columns: []string{network.IncludedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedIncludedNetworksIDs(); len(nodes) > 0 && !nuo.mutation.IncludedNetworksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.IncludedNetworksTable,
			Columns: []string{network.IncludedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.IncludedNetworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.IncludedNetworksTable,
			Columns: []string{network.IncludedNetworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(includednetwork.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Network{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
