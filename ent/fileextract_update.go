// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// FileExtractUpdate is the builder for updating FileExtract entities.
type FileExtractUpdate struct {
	config
	hooks    []Hook
	mutation *FileExtractMutation
}

// Where appends a list predicates to the FileExtractUpdate builder.
func (feu *FileExtractUpdate) Where(ps ...predicate.FileExtract) *FileExtractUpdate {
	feu.mutation.Where(ps...)
	return feu
}

// SetHclID sets the "hcl_id" field.
func (feu *FileExtractUpdate) SetHclID(s string) *FileExtractUpdate {
	feu.mutation.SetHclID(s)
	return feu
}

// SetSource sets the "source" field.
func (feu *FileExtractUpdate) SetSource(s string) *FileExtractUpdate {
	feu.mutation.SetSource(s)
	return feu
}

// SetDestination sets the "destination" field.
func (feu *FileExtractUpdate) SetDestination(s string) *FileExtractUpdate {
	feu.mutation.SetDestination(s)
	return feu
}

// SetType sets the "type" field.
func (feu *FileExtractUpdate) SetType(s string) *FileExtractUpdate {
	feu.mutation.SetType(s)
	return feu
}

// SetTags sets the "tags" field.
func (feu *FileExtractUpdate) SetTags(m map[string]string) *FileExtractUpdate {
	feu.mutation.SetTags(m)
	return feu
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (feu *FileExtractUpdate) SetEnvironmentID(id uuid.UUID) *FileExtractUpdate {
	feu.mutation.SetEnvironmentID(id)
	return feu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (feu *FileExtractUpdate) SetNillableEnvironmentID(id *uuid.UUID) *FileExtractUpdate {
	if id != nil {
		feu = feu.SetEnvironmentID(*id)
	}
	return feu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (feu *FileExtractUpdate) SetEnvironment(e *Environment) *FileExtractUpdate {
	return feu.SetEnvironmentID(e.ID)
}

// Mutation returns the FileExtractMutation object of the builder.
func (feu *FileExtractUpdate) Mutation() *FileExtractMutation {
	return feu.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (feu *FileExtractUpdate) ClearEnvironment() *FileExtractUpdate {
	feu.mutation.ClearEnvironment()
	return feu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (feu *FileExtractUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(feu.hooks) == 0 {
		affected, err = feu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileExtractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			feu.mutation = mutation
			affected, err = feu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(feu.hooks) - 1; i >= 0; i-- {
			if feu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = feu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, feu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (feu *FileExtractUpdate) SaveX(ctx context.Context) int {
	affected, err := feu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (feu *FileExtractUpdate) Exec(ctx context.Context) error {
	_, err := feu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feu *FileExtractUpdate) ExecX(ctx context.Context) {
	if err := feu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (feu *FileExtractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileextract.Table,
			Columns: fileextract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fileextract.FieldID,
			},
		},
	}
	if ps := feu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feu.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldHclID,
		})
	}
	if value, ok := feu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldSource,
		})
	}
	if value, ok := feu.mutation.Destination(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldDestination,
		})
	}
	if value, ok := feu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldType,
		})
	}
	if value, ok := feu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: fileextract.FieldTags,
		})
	}
	if feu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileextract.EnvironmentTable,
			Columns: []string{fileextract.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileextract.EnvironmentTable,
			Columns: []string{fileextract.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, feu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileextract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FileExtractUpdateOne is the builder for updating a single FileExtract entity.
type FileExtractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileExtractMutation
}

// SetHclID sets the "hcl_id" field.
func (feuo *FileExtractUpdateOne) SetHclID(s string) *FileExtractUpdateOne {
	feuo.mutation.SetHclID(s)
	return feuo
}

// SetSource sets the "source" field.
func (feuo *FileExtractUpdateOne) SetSource(s string) *FileExtractUpdateOne {
	feuo.mutation.SetSource(s)
	return feuo
}

// SetDestination sets the "destination" field.
func (feuo *FileExtractUpdateOne) SetDestination(s string) *FileExtractUpdateOne {
	feuo.mutation.SetDestination(s)
	return feuo
}

// SetType sets the "type" field.
func (feuo *FileExtractUpdateOne) SetType(s string) *FileExtractUpdateOne {
	feuo.mutation.SetType(s)
	return feuo
}

// SetTags sets the "tags" field.
func (feuo *FileExtractUpdateOne) SetTags(m map[string]string) *FileExtractUpdateOne {
	feuo.mutation.SetTags(m)
	return feuo
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (feuo *FileExtractUpdateOne) SetEnvironmentID(id uuid.UUID) *FileExtractUpdateOne {
	feuo.mutation.SetEnvironmentID(id)
	return feuo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (feuo *FileExtractUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *FileExtractUpdateOne {
	if id != nil {
		feuo = feuo.SetEnvironmentID(*id)
	}
	return feuo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (feuo *FileExtractUpdateOne) SetEnvironment(e *Environment) *FileExtractUpdateOne {
	return feuo.SetEnvironmentID(e.ID)
}

// Mutation returns the FileExtractMutation object of the builder.
func (feuo *FileExtractUpdateOne) Mutation() *FileExtractMutation {
	return feuo.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (feuo *FileExtractUpdateOne) ClearEnvironment() *FileExtractUpdateOne {
	feuo.mutation.ClearEnvironment()
	return feuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (feuo *FileExtractUpdateOne) Select(field string, fields ...string) *FileExtractUpdateOne {
	feuo.fields = append([]string{field}, fields...)
	return feuo
}

// Save executes the query and returns the updated FileExtract entity.
func (feuo *FileExtractUpdateOne) Save(ctx context.Context) (*FileExtract, error) {
	var (
		err  error
		node *FileExtract
	)
	if len(feuo.hooks) == 0 {
		node, err = feuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileExtractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			feuo.mutation = mutation
			node, err = feuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(feuo.hooks) - 1; i >= 0; i-- {
			if feuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = feuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, feuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FileExtract)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FileExtractMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (feuo *FileExtractUpdateOne) SaveX(ctx context.Context) *FileExtract {
	node, err := feuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (feuo *FileExtractUpdateOne) Exec(ctx context.Context) error {
	_, err := feuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feuo *FileExtractUpdateOne) ExecX(ctx context.Context) {
	if err := feuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (feuo *FileExtractUpdateOne) sqlSave(ctx context.Context) (_node *FileExtract, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileextract.Table,
			Columns: fileextract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fileextract.FieldID,
			},
		},
	}
	id, ok := feuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileExtract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := feuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileextract.FieldID)
		for _, f := range fields {
			if !fileextract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fileextract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := feuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feuo.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldHclID,
		})
	}
	if value, ok := feuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldSource,
		})
	}
	if value, ok := feuo.mutation.Destination(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldDestination,
		})
	}
	if value, ok := feuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileextract.FieldType,
		})
	}
	if value, ok := feuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: fileextract.FieldTags,
		})
	}
	if feuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileextract.EnvironmentTable,
			Columns: []string{fileextract.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileextract.EnvironmentTable,
			Columns: []string{fileextract.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileExtract{config: feuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, feuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileextract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
