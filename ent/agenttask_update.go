// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/google/uuid"
)

// AgentTaskUpdate is the builder for updating AgentTask entities.
type AgentTaskUpdate struct {
	config
	hooks    []Hook
	mutation *AgentTaskMutation
}

// Where appends a list predicates to the AgentTaskUpdate builder.
func (atu *AgentTaskUpdate) Where(ps ...predicate.AgentTask) *AgentTaskUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetCommand sets the "command" field.
func (atu *AgentTaskUpdate) SetCommand(a agenttask.Command) *AgentTaskUpdate {
	atu.mutation.SetCommand(a)
	return atu
}

// SetArgs sets the "args" field.
func (atu *AgentTaskUpdate) SetArgs(s string) *AgentTaskUpdate {
	atu.mutation.SetArgs(s)
	return atu
}

// SetNumber sets the "number" field.
func (atu *AgentTaskUpdate) SetNumber(i int) *AgentTaskUpdate {
	atu.mutation.ResetNumber()
	atu.mutation.SetNumber(i)
	return atu
}

// AddNumber adds i to the "number" field.
func (atu *AgentTaskUpdate) AddNumber(i int) *AgentTaskUpdate {
	atu.mutation.AddNumber(i)
	return atu
}

// SetOutput sets the "output" field.
func (atu *AgentTaskUpdate) SetOutput(s string) *AgentTaskUpdate {
	atu.mutation.SetOutput(s)
	return atu
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (atu *AgentTaskUpdate) SetNillableOutput(s *string) *AgentTaskUpdate {
	if s != nil {
		atu.SetOutput(*s)
	}
	return atu
}

// SetState sets the "state" field.
func (atu *AgentTaskUpdate) SetState(a agenttask.State) *AgentTaskUpdate {
	atu.mutation.SetState(a)
	return atu
}

// SetErrorMessage sets the "error_message" field.
func (atu *AgentTaskUpdate) SetErrorMessage(s string) *AgentTaskUpdate {
	atu.mutation.SetErrorMessage(s)
	return atu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (atu *AgentTaskUpdate) SetNillableErrorMessage(s *string) *AgentTaskUpdate {
	if s != nil {
		atu.SetErrorMessage(*s)
	}
	return atu
}

// SetProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID.
func (atu *AgentTaskUpdate) SetProvisioningStepID(id uuid.UUID) *AgentTaskUpdate {
	atu.mutation.SetProvisioningStepID(id)
	return atu
}

// SetNillableProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID if the given value is not nil.
func (atu *AgentTaskUpdate) SetNillableProvisioningStepID(id *uuid.UUID) *AgentTaskUpdate {
	if id != nil {
		atu = atu.SetProvisioningStepID(*id)
	}
	return atu
}

// SetProvisioningStep sets the "ProvisioningStep" edge to the ProvisioningStep entity.
func (atu *AgentTaskUpdate) SetProvisioningStep(p *ProvisioningStep) *AgentTaskUpdate {
	return atu.SetProvisioningStepID(p.ID)
}

// SetProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID.
func (atu *AgentTaskUpdate) SetProvisioningScheduledStepID(id uuid.UUID) *AgentTaskUpdate {
	atu.mutation.SetProvisioningScheduledStepID(id)
	return atu
}

// SetNillableProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID if the given value is not nil.
func (atu *AgentTaskUpdate) SetNillableProvisioningScheduledStepID(id *uuid.UUID) *AgentTaskUpdate {
	if id != nil {
		atu = atu.SetProvisioningScheduledStepID(*id)
	}
	return atu
}

// SetProvisioningScheduledStep sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (atu *AgentTaskUpdate) SetProvisioningScheduledStep(p *ProvisioningScheduledStep) *AgentTaskUpdate {
	return atu.SetProvisioningScheduledStepID(p.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (atu *AgentTaskUpdate) SetProvisionedHostID(id uuid.UUID) *AgentTaskUpdate {
	atu.mutation.SetProvisionedHostID(id)
	return atu
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (atu *AgentTaskUpdate) SetProvisionedHost(p *ProvisionedHost) *AgentTaskUpdate {
	return atu.SetProvisionedHostID(p.ID)
}

// AddAdhocPlanIDs adds the "AdhocPlans" edge to the AdhocPlan entity by IDs.
func (atu *AgentTaskUpdate) AddAdhocPlanIDs(ids ...uuid.UUID) *AgentTaskUpdate {
	atu.mutation.AddAdhocPlanIDs(ids...)
	return atu
}

// AddAdhocPlans adds the "AdhocPlans" edges to the AdhocPlan entity.
func (atu *AgentTaskUpdate) AddAdhocPlans(a ...*AdhocPlan) *AgentTaskUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddAdhocPlanIDs(ids...)
}

// Mutation returns the AgentTaskMutation object of the builder.
func (atu *AgentTaskUpdate) Mutation() *AgentTaskMutation {
	return atu.mutation
}

// ClearProvisioningStep clears the "ProvisioningStep" edge to the ProvisioningStep entity.
func (atu *AgentTaskUpdate) ClearProvisioningStep() *AgentTaskUpdate {
	atu.mutation.ClearProvisioningStep()
	return atu
}

// ClearProvisioningScheduledStep clears the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (atu *AgentTaskUpdate) ClearProvisioningScheduledStep() *AgentTaskUpdate {
	atu.mutation.ClearProvisioningScheduledStep()
	return atu
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (atu *AgentTaskUpdate) ClearProvisionedHost() *AgentTaskUpdate {
	atu.mutation.ClearProvisionedHost()
	return atu
}

// ClearAdhocPlans clears all "AdhocPlans" edges to the AdhocPlan entity.
func (atu *AgentTaskUpdate) ClearAdhocPlans() *AgentTaskUpdate {
	atu.mutation.ClearAdhocPlans()
	return atu
}

// RemoveAdhocPlanIDs removes the "AdhocPlans" edge to AdhocPlan entities by IDs.
func (atu *AgentTaskUpdate) RemoveAdhocPlanIDs(ids ...uuid.UUID) *AgentTaskUpdate {
	atu.mutation.RemoveAdhocPlanIDs(ids...)
	return atu
}

// RemoveAdhocPlans removes "AdhocPlans" edges to AdhocPlan entities.
func (atu *AgentTaskUpdate) RemoveAdhocPlans(a ...*AdhocPlan) *AgentTaskUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveAdhocPlanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AgentTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(atu.hooks) == 0 {
		if err = atu.check(); err != nil {
			return 0, err
		}
		affected, err = atu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atu.check(); err != nil {
				return 0, err
			}
			atu.mutation = mutation
			affected, err = atu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atu.hooks) - 1; i >= 0; i-- {
			if atu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AgentTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AgentTaskUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AgentTaskUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AgentTaskUpdate) check() error {
	if v, ok := atu.mutation.Command(); ok {
		if err := agenttask.CommandValidator(v); err != nil {
			return &ValidationError{Name: "command", err: fmt.Errorf(`ent: validator failed for field "AgentTask.command": %w`, err)}
		}
	}
	if v, ok := atu.mutation.State(); ok {
		if err := agenttask.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "AgentTask.state": %w`, err)}
		}
	}
	if _, ok := atu.mutation.ProvisionedHostID(); atu.mutation.ProvisionedHostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AgentTask.ProvisionedHost"`)
	}
	return nil
}

func (atu *AgentTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agenttask.Table,
			Columns: agenttask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: agenttask.FieldID,
			},
		},
	}
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Command(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agenttask.FieldCommand,
		})
	}
	if value, ok := atu.mutation.Args(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttask.FieldArgs,
		})
	}
	if value, ok := atu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: agenttask.FieldNumber,
		})
	}
	if value, ok := atu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: agenttask.FieldNumber,
		})
	}
	if value, ok := atu.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttask.FieldOutput,
		})
	}
	if value, ok := atu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agenttask.FieldState,
		})
	}
	if value, ok := atu.mutation.ErrorMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttask.FieldErrorMessage,
		})
	}
	if atu.mutation.ProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningStepTable,
			Columns: []string{agenttask.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningStepTable,
			Columns: []string{agenttask.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ProvisioningScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningScheduledStepTable,
			Columns: []string{agenttask.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ProvisioningScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningScheduledStepTable,
			Columns: []string{agenttask.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisionedHostTable,
			Columns: []string{agenttask.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisionedHostTable,
			Columns: []string{agenttask.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agenttask.AdhocPlansTable,
			Columns: []string{agenttask.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedAdhocPlansIDs(); len(nodes) > 0 && !atu.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agenttask.AdhocPlansTable,
			Columns: []string{agenttask.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.AdhocPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agenttask.AdhocPlansTable,
			Columns: []string{agenttask.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agenttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AgentTaskUpdateOne is the builder for updating a single AgentTask entity.
type AgentTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentTaskMutation
}

// SetCommand sets the "command" field.
func (atuo *AgentTaskUpdateOne) SetCommand(a agenttask.Command) *AgentTaskUpdateOne {
	atuo.mutation.SetCommand(a)
	return atuo
}

// SetArgs sets the "args" field.
func (atuo *AgentTaskUpdateOne) SetArgs(s string) *AgentTaskUpdateOne {
	atuo.mutation.SetArgs(s)
	return atuo
}

// SetNumber sets the "number" field.
func (atuo *AgentTaskUpdateOne) SetNumber(i int) *AgentTaskUpdateOne {
	atuo.mutation.ResetNumber()
	atuo.mutation.SetNumber(i)
	return atuo
}

// AddNumber adds i to the "number" field.
func (atuo *AgentTaskUpdateOne) AddNumber(i int) *AgentTaskUpdateOne {
	atuo.mutation.AddNumber(i)
	return atuo
}

// SetOutput sets the "output" field.
func (atuo *AgentTaskUpdateOne) SetOutput(s string) *AgentTaskUpdateOne {
	atuo.mutation.SetOutput(s)
	return atuo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (atuo *AgentTaskUpdateOne) SetNillableOutput(s *string) *AgentTaskUpdateOne {
	if s != nil {
		atuo.SetOutput(*s)
	}
	return atuo
}

// SetState sets the "state" field.
func (atuo *AgentTaskUpdateOne) SetState(a agenttask.State) *AgentTaskUpdateOne {
	atuo.mutation.SetState(a)
	return atuo
}

// SetErrorMessage sets the "error_message" field.
func (atuo *AgentTaskUpdateOne) SetErrorMessage(s string) *AgentTaskUpdateOne {
	atuo.mutation.SetErrorMessage(s)
	return atuo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (atuo *AgentTaskUpdateOne) SetNillableErrorMessage(s *string) *AgentTaskUpdateOne {
	if s != nil {
		atuo.SetErrorMessage(*s)
	}
	return atuo
}

// SetProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID.
func (atuo *AgentTaskUpdateOne) SetProvisioningStepID(id uuid.UUID) *AgentTaskUpdateOne {
	atuo.mutation.SetProvisioningStepID(id)
	return atuo
}

// SetNillableProvisioningStepID sets the "ProvisioningStep" edge to the ProvisioningStep entity by ID if the given value is not nil.
func (atuo *AgentTaskUpdateOne) SetNillableProvisioningStepID(id *uuid.UUID) *AgentTaskUpdateOne {
	if id != nil {
		atuo = atuo.SetProvisioningStepID(*id)
	}
	return atuo
}

// SetProvisioningStep sets the "ProvisioningStep" edge to the ProvisioningStep entity.
func (atuo *AgentTaskUpdateOne) SetProvisioningStep(p *ProvisioningStep) *AgentTaskUpdateOne {
	return atuo.SetProvisioningStepID(p.ID)
}

// SetProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID.
func (atuo *AgentTaskUpdateOne) SetProvisioningScheduledStepID(id uuid.UUID) *AgentTaskUpdateOne {
	atuo.mutation.SetProvisioningScheduledStepID(id)
	return atuo
}

// SetNillableProvisioningScheduledStepID sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity by ID if the given value is not nil.
func (atuo *AgentTaskUpdateOne) SetNillableProvisioningScheduledStepID(id *uuid.UUID) *AgentTaskUpdateOne {
	if id != nil {
		atuo = atuo.SetProvisioningScheduledStepID(*id)
	}
	return atuo
}

// SetProvisioningScheduledStep sets the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (atuo *AgentTaskUpdateOne) SetProvisioningScheduledStep(p *ProvisioningScheduledStep) *AgentTaskUpdateOne {
	return atuo.SetProvisioningScheduledStepID(p.ID)
}

// SetProvisionedHostID sets the "ProvisionedHost" edge to the ProvisionedHost entity by ID.
func (atuo *AgentTaskUpdateOne) SetProvisionedHostID(id uuid.UUID) *AgentTaskUpdateOne {
	atuo.mutation.SetProvisionedHostID(id)
	return atuo
}

// SetProvisionedHost sets the "ProvisionedHost" edge to the ProvisionedHost entity.
func (atuo *AgentTaskUpdateOne) SetProvisionedHost(p *ProvisionedHost) *AgentTaskUpdateOne {
	return atuo.SetProvisionedHostID(p.ID)
}

// AddAdhocPlanIDs adds the "AdhocPlans" edge to the AdhocPlan entity by IDs.
func (atuo *AgentTaskUpdateOne) AddAdhocPlanIDs(ids ...uuid.UUID) *AgentTaskUpdateOne {
	atuo.mutation.AddAdhocPlanIDs(ids...)
	return atuo
}

// AddAdhocPlans adds the "AdhocPlans" edges to the AdhocPlan entity.
func (atuo *AgentTaskUpdateOne) AddAdhocPlans(a ...*AdhocPlan) *AgentTaskUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddAdhocPlanIDs(ids...)
}

// Mutation returns the AgentTaskMutation object of the builder.
func (atuo *AgentTaskUpdateOne) Mutation() *AgentTaskMutation {
	return atuo.mutation
}

// ClearProvisioningStep clears the "ProvisioningStep" edge to the ProvisioningStep entity.
func (atuo *AgentTaskUpdateOne) ClearProvisioningStep() *AgentTaskUpdateOne {
	atuo.mutation.ClearProvisioningStep()
	return atuo
}

// ClearProvisioningScheduledStep clears the "ProvisioningScheduledStep" edge to the ProvisioningScheduledStep entity.
func (atuo *AgentTaskUpdateOne) ClearProvisioningScheduledStep() *AgentTaskUpdateOne {
	atuo.mutation.ClearProvisioningScheduledStep()
	return atuo
}

// ClearProvisionedHost clears the "ProvisionedHost" edge to the ProvisionedHost entity.
func (atuo *AgentTaskUpdateOne) ClearProvisionedHost() *AgentTaskUpdateOne {
	atuo.mutation.ClearProvisionedHost()
	return atuo
}

// ClearAdhocPlans clears all "AdhocPlans" edges to the AdhocPlan entity.
func (atuo *AgentTaskUpdateOne) ClearAdhocPlans() *AgentTaskUpdateOne {
	atuo.mutation.ClearAdhocPlans()
	return atuo
}

// RemoveAdhocPlanIDs removes the "AdhocPlans" edge to AdhocPlan entities by IDs.
func (atuo *AgentTaskUpdateOne) RemoveAdhocPlanIDs(ids ...uuid.UUID) *AgentTaskUpdateOne {
	atuo.mutation.RemoveAdhocPlanIDs(ids...)
	return atuo
}

// RemoveAdhocPlans removes "AdhocPlans" edges to AdhocPlan entities.
func (atuo *AgentTaskUpdateOne) RemoveAdhocPlans(a ...*AdhocPlan) *AgentTaskUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveAdhocPlanIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AgentTaskUpdateOne) Select(field string, fields ...string) *AgentTaskUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AgentTask entity.
func (atuo *AgentTaskUpdateOne) Save(ctx context.Context) (*AgentTask, error) {
	var (
		err  error
		node *AgentTask
	)
	if len(atuo.hooks) == 0 {
		if err = atuo.check(); err != nil {
			return nil, err
		}
		node, err = atuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atuo.check(); err != nil {
				return nil, err
			}
			atuo.mutation = mutation
			node, err = atuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atuo.hooks) - 1; i >= 0; i-- {
			if atuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, atuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AgentTask)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AgentTaskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AgentTaskUpdateOne) SaveX(ctx context.Context) *AgentTask {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AgentTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AgentTaskUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AgentTaskUpdateOne) check() error {
	if v, ok := atuo.mutation.Command(); ok {
		if err := agenttask.CommandValidator(v); err != nil {
			return &ValidationError{Name: "command", err: fmt.Errorf(`ent: validator failed for field "AgentTask.command": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.State(); ok {
		if err := agenttask.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "AgentTask.state": %w`, err)}
		}
	}
	if _, ok := atuo.mutation.ProvisionedHostID(); atuo.mutation.ProvisionedHostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AgentTask.ProvisionedHost"`)
	}
	return nil
}

func (atuo *AgentTaskUpdateOne) sqlSave(ctx context.Context) (_node *AgentTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agenttask.Table,
			Columns: agenttask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: agenttask.FieldID,
			},
		},
	}
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AgentTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agenttask.FieldID)
		for _, f := range fields {
			if !agenttask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agenttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Command(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agenttask.FieldCommand,
		})
	}
	if value, ok := atuo.mutation.Args(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttask.FieldArgs,
		})
	}
	if value, ok := atuo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: agenttask.FieldNumber,
		})
	}
	if value, ok := atuo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: agenttask.FieldNumber,
		})
	}
	if value, ok := atuo.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttask.FieldOutput,
		})
	}
	if value, ok := atuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agenttask.FieldState,
		})
	}
	if value, ok := atuo.mutation.ErrorMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttask.FieldErrorMessage,
		})
	}
	if atuo.mutation.ProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningStepTable,
			Columns: []string{agenttask.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningStepTable,
			Columns: []string{agenttask.ProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ProvisioningScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningScheduledStepTable,
			Columns: []string{agenttask.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ProvisioningScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisioningScheduledStepTable,
			Columns: []string{agenttask.ProvisioningScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisioningscheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisionedHostTable,
			Columns: []string{agenttask.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agenttask.ProvisionedHostTable,
			Columns: []string{agenttask.ProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agenttask.AdhocPlansTable,
			Columns: []string{agenttask.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedAdhocPlansIDs(); len(nodes) > 0 && !atuo.mutation.AdhocPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agenttask.AdhocPlansTable,
			Columns: []string{agenttask.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.AdhocPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agenttask.AdhocPlansTable,
			Columns: []string{agenttask.AdhocPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: adhocplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AgentTask{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agenttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
