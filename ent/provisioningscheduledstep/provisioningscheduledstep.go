// Code generated by ent, DO NOT EDIT.

package provisioningscheduledstep

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the provisioningscheduledstep type in the database.
	Label = "provisioning_scheduled_step"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRunTime holds the string denoting the run_time field in the database.
	FieldRunTime = "run_time"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "Status"
	// EdgeScheduledStep holds the string denoting the scheduledstep edge name in mutations.
	EdgeScheduledStep = "ScheduledStep"
	// EdgeProvisionedHost holds the string denoting the provisionedhost edge name in mutations.
	EdgeProvisionedHost = "ProvisionedHost"
	// EdgeScript holds the string denoting the script edge name in mutations.
	EdgeScript = "Script"
	// EdgeCommand holds the string denoting the command edge name in mutations.
	EdgeCommand = "Command"
	// EdgeDNSRecord holds the string denoting the dnsrecord edge name in mutations.
	EdgeDNSRecord = "DNSRecord"
	// EdgeFileDelete holds the string denoting the filedelete edge name in mutations.
	EdgeFileDelete = "FileDelete"
	// EdgeFileDownload holds the string denoting the filedownload edge name in mutations.
	EdgeFileDownload = "FileDownload"
	// EdgeFileExtract holds the string denoting the fileextract edge name in mutations.
	EdgeFileExtract = "FileExtract"
	// EdgeAnsible holds the string denoting the ansible edge name in mutations.
	EdgeAnsible = "Ansible"
	// EdgeAgentTasks holds the string denoting the agenttasks edge name in mutations.
	EdgeAgentTasks = "AgentTasks"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "Plan"
	// EdgeGinFileMiddleware holds the string denoting the ginfilemiddleware edge name in mutations.
	EdgeGinFileMiddleware = "GinFileMiddleware"
	// Table holds the table name of the provisioningscheduledstep in the database.
	Table = "provisioning_scheduled_steps"
	// StatusTable is the table that holds the Status relation/edge.
	StatusTable = "status"
	// StatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	StatusInverseTable = "status"
	// StatusColumn is the table column denoting the Status relation/edge.
	StatusColumn = "provisioning_scheduled_step_status"
	// ScheduledStepTable is the table that holds the ScheduledStep relation/edge.
	ScheduledStepTable = "provisioning_scheduled_steps"
	// ScheduledStepInverseTable is the table name for the ScheduledStep entity.
	// It exists in this package in order to avoid circular dependency with the "scheduledstep" package.
	ScheduledStepInverseTable = "scheduled_steps"
	// ScheduledStepColumn is the table column denoting the ScheduledStep relation/edge.
	ScheduledStepColumn = "provisioning_scheduled_step_scheduled_step"
	// ProvisionedHostTable is the table that holds the ProvisionedHost relation/edge.
	ProvisionedHostTable = "provisioning_scheduled_steps"
	// ProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisionedHostInverseTable = "provisioned_hosts"
	// ProvisionedHostColumn is the table column denoting the ProvisionedHost relation/edge.
	ProvisionedHostColumn = "provisioning_scheduled_step_provisioned_host"
	// ScriptTable is the table that holds the Script relation/edge.
	ScriptTable = "provisioning_scheduled_steps"
	// ScriptInverseTable is the table name for the Script entity.
	// It exists in this package in order to avoid circular dependency with the "script" package.
	ScriptInverseTable = "scripts"
	// ScriptColumn is the table column denoting the Script relation/edge.
	ScriptColumn = "provisioning_scheduled_step_script"
	// CommandTable is the table that holds the Command relation/edge.
	CommandTable = "provisioning_scheduled_steps"
	// CommandInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	CommandInverseTable = "commands"
	// CommandColumn is the table column denoting the Command relation/edge.
	CommandColumn = "provisioning_scheduled_step_command"
	// DNSRecordTable is the table that holds the DNSRecord relation/edge.
	DNSRecordTable = "provisioning_scheduled_steps"
	// DNSRecordInverseTable is the table name for the DNSRecord entity.
	// It exists in this package in order to avoid circular dependency with the "dnsrecord" package.
	DNSRecordInverseTable = "dns_records"
	// DNSRecordColumn is the table column denoting the DNSRecord relation/edge.
	DNSRecordColumn = "provisioning_scheduled_step_dns_record"
	// FileDeleteTable is the table that holds the FileDelete relation/edge.
	FileDeleteTable = "provisioning_scheduled_steps"
	// FileDeleteInverseTable is the table name for the FileDelete entity.
	// It exists in this package in order to avoid circular dependency with the "filedelete" package.
	FileDeleteInverseTable = "file_deletes"
	// FileDeleteColumn is the table column denoting the FileDelete relation/edge.
	FileDeleteColumn = "provisioning_scheduled_step_file_delete"
	// FileDownloadTable is the table that holds the FileDownload relation/edge.
	FileDownloadTable = "provisioning_scheduled_steps"
	// FileDownloadInverseTable is the table name for the FileDownload entity.
	// It exists in this package in order to avoid circular dependency with the "filedownload" package.
	FileDownloadInverseTable = "file_downloads"
	// FileDownloadColumn is the table column denoting the FileDownload relation/edge.
	FileDownloadColumn = "provisioning_scheduled_step_file_download"
	// FileExtractTable is the table that holds the FileExtract relation/edge.
	FileExtractTable = "provisioning_scheduled_steps"
	// FileExtractInverseTable is the table name for the FileExtract entity.
	// It exists in this package in order to avoid circular dependency with the "fileextract" package.
	FileExtractInverseTable = "file_extracts"
	// FileExtractColumn is the table column denoting the FileExtract relation/edge.
	FileExtractColumn = "provisioning_scheduled_step_file_extract"
	// AnsibleTable is the table that holds the Ansible relation/edge.
	AnsibleTable = "provisioning_scheduled_steps"
	// AnsibleInverseTable is the table name for the Ansible entity.
	// It exists in this package in order to avoid circular dependency with the "ansible" package.
	AnsibleInverseTable = "ansibles"
	// AnsibleColumn is the table column denoting the Ansible relation/edge.
	AnsibleColumn = "provisioning_scheduled_step_ansible"
	// AgentTasksTable is the table that holds the AgentTasks relation/edge.
	AgentTasksTable = "agent_tasks"
	// AgentTasksInverseTable is the table name for the AgentTask entity.
	// It exists in this package in order to avoid circular dependency with the "agenttask" package.
	AgentTasksInverseTable = "agent_tasks"
	// AgentTasksColumn is the table column denoting the AgentTasks relation/edge.
	AgentTasksColumn = "agent_task_provisioning_scheduled_step"
	// PlanTable is the table that holds the Plan relation/edge.
	PlanTable = "provisioning_scheduled_steps"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plans"
	// PlanColumn is the table column denoting the Plan relation/edge.
	PlanColumn = "plan_provisioning_scheduled_step"
	// GinFileMiddlewareTable is the table that holds the GinFileMiddleware relation/edge.
	GinFileMiddlewareTable = "provisioning_scheduled_steps"
	// GinFileMiddlewareInverseTable is the table name for the GinFileMiddleware entity.
	// It exists in this package in order to avoid circular dependency with the "ginfilemiddleware" package.
	GinFileMiddlewareInverseTable = "gin_file_middlewares"
	// GinFileMiddlewareColumn is the table column denoting the GinFileMiddleware relation/edge.
	GinFileMiddlewareColumn = "gin_file_middleware_provisioning_scheduled_step"
)

// Columns holds all SQL columns for provisioningscheduledstep fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRunTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provisioning_scheduled_steps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"gin_file_middleware_provisioning_scheduled_step",
	"plan_provisioning_scheduled_step",
	"provisioning_scheduled_step_scheduled_step",
	"provisioning_scheduled_step_provisioned_host",
	"provisioning_scheduled_step_script",
	"provisioning_scheduled_step_command",
	"provisioning_scheduled_step_dns_record",
	"provisioning_scheduled_step_file_delete",
	"provisioning_scheduled_step_file_download",
	"provisioning_scheduled_step_file_extract",
	"provisioning_scheduled_step_ansible",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeScript       Type = "Script"
	TypeCommand      Type = "Command"
	TypeDNSRecord    Type = "DNSRecord"
	TypeFileDelete   Type = "FileDelete"
	TypeFileDownload Type = "FileDownload"
	TypeFileExtract  Type = "FileExtract"
	TypeAnsible      Type = "Ansible"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeScript, TypeCommand, TypeDNSRecord, TypeFileDelete, TypeFileDownload, TypeFileExtract, TypeAnsible:
		return nil
	default:
		return fmt.Errorf("provisioningscheduledstep: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ProvisioningScheduledStep queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRunTime orders the results by the run_time field.
func ByRunTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunTime, opts...).ToFunc()
}

// ByStatusField orders the results by Status field.
func ByStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatusStep(), sql.OrderByField(field, opts...))
	}
}

// ByScheduledStepField orders the results by ScheduledStep field.
func ByScheduledStepField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduledStepStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvisionedHostField orders the results by ProvisionedHost field.
func ByProvisionedHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvisionedHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByScriptField orders the results by Script field.
func ByScriptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScriptStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommandField orders the results by Command field.
func ByCommandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommandStep(), sql.OrderByField(field, opts...))
	}
}

// ByDNSRecordField orders the results by DNSRecord field.
func ByDNSRecordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDNSRecordStep(), sql.OrderByField(field, opts...))
	}
}

// ByFileDeleteField orders the results by FileDelete field.
func ByFileDeleteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileDeleteStep(), sql.OrderByField(field, opts...))
	}
}

// ByFileDownloadField orders the results by FileDownload field.
func ByFileDownloadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileDownloadStep(), sql.OrderByField(field, opts...))
	}
}

// ByFileExtractField orders the results by FileExtract field.
func ByFileExtractField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileExtractStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnsibleField orders the results by Ansible field.
func ByAnsibleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnsibleStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentTasksCount orders the results by AgentTasks count.
func ByAgentTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentTasksStep(), opts...)
	}
}

// ByAgentTasks orders the results by AgentTasks terms.
func ByAgentTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlanField orders the results by Plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByGinFileMiddlewareField orders the results by GinFileMiddleware field.
func ByGinFileMiddlewareField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGinFileMiddlewareStep(), sql.OrderByField(field, opts...))
	}
}
func newStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
	)
}
func newScheduledStepStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduledStepInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ScheduledStepTable, ScheduledStepColumn),
	)
}
func newProvisionedHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvisionedHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostTable, ProvisionedHostColumn),
	)
}
func newScriptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScriptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ScriptTable, ScriptColumn),
	)
}
func newCommandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CommandTable, CommandColumn),
	)
}
func newDNSRecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DNSRecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DNSRecordTable, DNSRecordColumn),
	)
}
func newFileDeleteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileDeleteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FileDeleteTable, FileDeleteColumn),
	)
}
func newFileDownloadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileDownloadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FileDownloadTable, FileDownloadColumn),
	)
}
func newFileExtractStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileExtractInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FileExtractTable, FileExtractColumn),
	)
}
func newAnsibleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnsibleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AnsibleTable, AnsibleColumn),
	)
}
func newAgentTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AgentTasksTable, AgentTasksColumn),
	)
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PlanTable, PlanColumn),
	)
}
func newGinFileMiddlewareStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GinFileMiddlewareInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, GinFileMiddlewareTable, GinFileMiddlewareColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
