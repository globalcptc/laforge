// Code generated by ent, DO NOT EDIT.

package provisioningscheduledstep

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RunTime applies equality check predicate on the "run_time" field. It's identical to RunTimeEQ.
func RunTime(v time.Time) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunTime), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ProvisioningScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ProvisioningScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// RunTimeEQ applies the EQ predicate on the "run_time" field.
func RunTimeEQ(v time.Time) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunTime), v))
	})
}

// RunTimeNEQ applies the NEQ predicate on the "run_time" field.
func RunTimeNEQ(v time.Time) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRunTime), v))
	})
}

// RunTimeIn applies the In predicate on the "run_time" field.
func RunTimeIn(vs ...time.Time) predicate.ProvisioningScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRunTime), v...))
	})
}

// RunTimeNotIn applies the NotIn predicate on the "run_time" field.
func RunTimeNotIn(vs ...time.Time) predicate.ProvisioningScheduledStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRunTime), v...))
	})
}

// RunTimeGT applies the GT predicate on the "run_time" field.
func RunTimeGT(v time.Time) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRunTime), v))
	})
}

// RunTimeGTE applies the GTE predicate on the "run_time" field.
func RunTimeGTE(v time.Time) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRunTime), v))
	})
}

// RunTimeLT applies the LT predicate on the "run_time" field.
func RunTimeLT(v time.Time) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRunTime), v))
	})
}

// RunTimeLTE applies the LTE predicate on the "run_time" field.
func RunTimeLTE(v time.Time) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRunTime), v))
	})
}

// HasStatus applies the HasEdge predicate on the "Status" edge.
func HasStatus() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "Status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.Status) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduledStep applies the HasEdge predicate on the "ScheduledStep" edge.
func HasScheduledStep() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduledStepTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduledStepTable, ScheduledStepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduledStepWith applies the HasEdge predicate on the "ScheduledStep" edge with a given conditions (other predicates).
func HasScheduledStepWith(preds ...predicate.ScheduledStep) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduledStepInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduledStepTable, ScheduledStepColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHost applies the HasEdge predicate on the "ProvisionedHost" edge.
func HasProvisionedHost() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostTable, ProvisionedHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostWith applies the HasEdge predicate on the "ProvisionedHost" edge with a given conditions (other predicates).
func HasProvisionedHostWith(preds ...predicate.ProvisionedHost) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostTable, ProvisionedHostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScript applies the HasEdge predicate on the "Script" edge.
func HasScript() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScriptTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScriptTable, ScriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScriptWith applies the HasEdge predicate on the "Script" edge with a given conditions (other predicates).
func HasScriptWith(preds ...predicate.Script) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScriptInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScriptTable, ScriptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommand applies the HasEdge predicate on the "Command" edge.
func HasCommand() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommandTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CommandTable, CommandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommandWith applies the HasEdge predicate on the "Command" edge with a given conditions (other predicates).
func HasCommandWith(preds ...predicate.Command) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommandInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CommandTable, CommandColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDNSRecord applies the HasEdge predicate on the "DNSRecord" edge.
func HasDNSRecord() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DNSRecordTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DNSRecordTable, DNSRecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDNSRecordWith applies the HasEdge predicate on the "DNSRecord" edge with a given conditions (other predicates).
func HasDNSRecordWith(preds ...predicate.DNSRecord) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DNSRecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DNSRecordTable, DNSRecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFileDelete applies the HasEdge predicate on the "FileDelete" edge.
func HasFileDelete() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileDeleteTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileDeleteTable, FileDeleteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileDeleteWith applies the HasEdge predicate on the "FileDelete" edge with a given conditions (other predicates).
func HasFileDeleteWith(preds ...predicate.FileDelete) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileDeleteInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileDeleteTable, FileDeleteColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFileDownload applies the HasEdge predicate on the "FileDownload" edge.
func HasFileDownload() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileDownloadTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileDownloadTable, FileDownloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileDownloadWith applies the HasEdge predicate on the "FileDownload" edge with a given conditions (other predicates).
func HasFileDownloadWith(preds ...predicate.FileDownload) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileDownloadInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileDownloadTable, FileDownloadColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFileExtract applies the HasEdge predicate on the "FileExtract" edge.
func HasFileExtract() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileExtractTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileExtractTable, FileExtractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileExtractWith applies the HasEdge predicate on the "FileExtract" edge with a given conditions (other predicates).
func HasFileExtractWith(preds ...predicate.FileExtract) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileExtractInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileExtractTable, FileExtractColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnsible applies the HasEdge predicate on the "Ansible" edge.
func HasAnsible() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnsibleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnsibleTable, AnsibleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnsibleWith applies the HasEdge predicate on the "Ansible" edge with a given conditions (other predicates).
func HasAnsibleWith(preds ...predicate.Ansible) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnsibleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnsibleTable, AnsibleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgentTasks applies the HasEdge predicate on the "AgentTasks" edge.
func HasAgentTasks() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgentTasksTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AgentTasksTable, AgentTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentTasksWith applies the HasEdge predicate on the "AgentTasks" edge with a given conditions (other predicates).
func HasAgentTasksWith(preds ...predicate.AgentTask) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgentTasksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AgentTasksTable, AgentTasksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlan applies the HasEdge predicate on the "Plan" edge.
func HasPlan() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlanTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanWith applies the HasEdge predicate on the "Plan" edge with a given conditions (other predicates).
func HasPlanWith(preds ...predicate.Plan) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGinFileMiddleware applies the HasEdge predicate on the "GinFileMiddleware" edge.
func HasGinFileMiddleware() predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GinFileMiddlewareTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GinFileMiddlewareTable, GinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGinFileMiddlewareWith applies the HasEdge predicate on the "GinFileMiddleware" edge with a given conditions (other predicates).
func HasGinFileMiddlewareWith(preds ...predicate.GinFileMiddleware) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GinFileMiddlewareInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GinFileMiddlewareTable, GinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProvisioningScheduledStep) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProvisioningScheduledStep) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProvisioningScheduledStep) predicate.ProvisioningScheduledStep {
	return predicate.ProvisioningScheduledStep(func(s *sql.Selector) {
		p(s.Not())
	})
}
