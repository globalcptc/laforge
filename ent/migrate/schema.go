// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdhocPlansColumns holds the columns for the "adhoc_plans" table.
	AdhocPlansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "adhoc_plan_adhoc_plan_to_build", Type: field.TypeUUID},
		{Name: "adhoc_plan_adhoc_plan_to_agent_task", Type: field.TypeUUID},
	}
	// AdhocPlansTable holds the schema information for the "adhoc_plans" table.
	AdhocPlansTable = &schema.Table{
		Name:       "adhoc_plans",
		Columns:    AdhocPlansColumns,
		PrimaryKey: []*schema.Column{AdhocPlansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "adhoc_plans_builds_AdhocPlanToBuild",
				Columns:    []*schema.Column{AdhocPlansColumns[1]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "adhoc_plans_agent_tasks_AdhocPlanToAgentTask",
				Columns:    []*schema.Column{AdhocPlansColumns[2]},
				RefColumns: []*schema.Column{AgentTasksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AgentStatusColumns holds the columns for the "agent_status" table.
	AgentStatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "client_id", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "up_time", Type: field.TypeInt64},
		{Name: "boot_time", Type: field.TypeInt64},
		{Name: "num_procs", Type: field.TypeInt64},
		{Name: "os", Type: field.TypeString},
		{Name: "host_id", Type: field.TypeString},
		{Name: "load1", Type: field.TypeFloat64},
		{Name: "load5", Type: field.TypeFloat64},
		{Name: "load15", Type: field.TypeFloat64},
		{Name: "total_mem", Type: field.TypeInt64},
		{Name: "free_mem", Type: field.TypeInt64},
		{Name: "used_mem", Type: field.TypeInt64},
		{Name: "timestamp", Type: field.TypeInt64},
		{Name: "agent_status_agent_status_to_provisioned_host", Type: field.TypeUUID, Nullable: true},
		{Name: "agent_status_agent_status_to_provisioned_network", Type: field.TypeUUID, Nullable: true},
		{Name: "agent_status_agent_status_to_build", Type: field.TypeUUID, Nullable: true},
	}
	// AgentStatusTable holds the schema information for the "agent_status" table.
	AgentStatusTable = &schema.Table{
		Name:       "agent_status",
		Columns:    AgentStatusColumns,
		PrimaryKey: []*schema.Column{AgentStatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agent_status_provisioned_hosts_AgentStatusToProvisionedHost",
				Columns:    []*schema.Column{AgentStatusColumns[15]},
				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "agent_status_provisioned_networks_AgentStatusToProvisionedNetwork",
				Columns:    []*schema.Column{AgentStatusColumns[16]},
				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "agent_status_builds_AgentStatusToBuild",
				Columns:    []*schema.Column{AgentStatusColumns[17]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AgentTasksColumns holds the columns for the "agent_tasks" table.
	AgentTasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "command", Type: field.TypeEnum, Enums: []string{"DEFAULT", "DELETE", "REBOOT", "EXTRACT", "DOWNLOAD", "CREATEUSER", "CREATEUSERPASS", "ADDTOGROUP", "EXECUTE", "VALIDATE", "CHANGEPERMS", "APPENDFILE", "ANSIBLE"}},
		{Name: "args", Type: field.TypeString},
		{Name: "number", Type: field.TypeInt},
		{Name: "output", Type: field.TypeString, Default: ""},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"AWAITING", "INPROGRESS", "FAILED", "COMPLETE"}},
		{Name: "error_message", Type: field.TypeString, Default: ""},
		{Name: "agent_task_agent_task_to_provisioning_step", Type: field.TypeUUID, Nullable: true},
		{Name: "agent_task_agent_task_to_provisioned_host", Type: field.TypeUUID},
	}
	// AgentTasksTable holds the schema information for the "agent_tasks" table.
	AgentTasksTable = &schema.Table{
		Name:       "agent_tasks",
		Columns:    AgentTasksColumns,
		PrimaryKey: []*schema.Column{AgentTasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agent_tasks_provisioning_steps_AgentTaskToProvisioningStep",
				Columns:    []*schema.Column{AgentTasksColumns[7]},
				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "agent_tasks_provisioned_hosts_AgentTaskToProvisionedHost",
				Columns:    []*schema.Column{AgentTasksColumns[8]},
				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AnsiblesColumns holds the columns for the "ansibles" table.
	AnsiblesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "playbook_name", Type: field.TypeString},
		{Name: "method", Type: field.TypeEnum, Enums: []string{"local"}},
		{Name: "inventory", Type: field.TypeString},
		{Name: "abs_path", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_ansible", Type: field.TypeUUID, Nullable: true},
	}
	// AnsiblesTable holds the schema information for the "ansibles" table.
	AnsiblesTable = &schema.Table{
		Name:       "ansibles",
		Columns:    AnsiblesColumns,
		PrimaryKey: []*schema.Column{AnsiblesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ansibles_environments_EnvironmentToAnsible",
				Columns:    []*schema.Column{AnsiblesColumns[10]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AuthUsersColumns holds the columns for the "auth_users" table.
	AuthUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "username", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString, Default: ""},
		{Name: "last_name", Type: field.TypeString, Default: ""},
		{Name: "email", Type: field.TypeString, Default: ""},
		{Name: "phone", Type: field.TypeString, Default: ""},
		{Name: "company", Type: field.TypeString, Default: ""},
		{Name: "occupation", Type: field.TypeString, Default: ""},
		{Name: "private_key_path", Type: field.TypeString, Default: ""},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"USER", "ADMIN"}},
		{Name: "provider", Type: field.TypeEnum, Enums: []string{"LOCAL", "GITHUB", "OPENID"}},
	}
	// AuthUsersTable holds the schema information for the "auth_users" table.
	AuthUsersTable = &schema.Table{
		Name:       "auth_users",
		Columns:    AuthUsersColumns,
		PrimaryKey: []*schema.Column{AuthUsersColumns[0]},
	}
	// BuildsColumns holds the columns for the "builds" table.
	BuildsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "revision", Type: field.TypeInt},
		{Name: "environment_revision", Type: field.TypeInt},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "completed_plan", Type: field.TypeBool, Default: false},
		{Name: "build_build_to_environment", Type: field.TypeUUID},
		{Name: "build_build_to_competition", Type: field.TypeUUID},
		{Name: "build_build_to_latest_build_commit", Type: field.TypeUUID, Nullable: true},
		{Name: "build_build_to_repo_commit", Type: field.TypeUUID, Nullable: true},
	}
	// BuildsTable holds the schema information for the "builds" table.
	BuildsTable = &schema.Table{
		Name:       "builds",
		Columns:    BuildsColumns,
		PrimaryKey: []*schema.Column{BuildsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "builds_environments_BuildToEnvironment",
				Columns:    []*schema.Column{BuildsColumns[5]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "builds_competitions_BuildToCompetition",
				Columns:    []*schema.Column{BuildsColumns[6]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "builds_build_commits_BuildToLatestBuildCommit",
				Columns:    []*schema.Column{BuildsColumns[7]},
				RefColumns: []*schema.Column{BuildCommitsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "builds_repo_commits_BuildToRepoCommit",
				Columns:    []*schema.Column{BuildsColumns[8]},
				RefColumns: []*schema.Column{RepoCommitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BuildCommitsColumns holds the columns for the "build_commits" table.
	BuildCommitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"ROOT", "REBUILD", "DELETE"}},
		{Name: "revision", Type: field.TypeInt},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"PLANNING", "INPROGRESS", "APPLIED", "CANCELLED", "APPROVED"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "build_commit_build_commit_to_build", Type: field.TypeUUID},
	}
	// BuildCommitsTable holds the schema information for the "build_commits" table.
	BuildCommitsTable = &schema.Table{
		Name:       "build_commits",
		Columns:    BuildCommitsColumns,
		PrimaryKey: []*schema.Column{BuildCommitsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "build_commits_builds_BuildCommitToBuild",
				Columns:    []*schema.Column{BuildCommitsColumns[5]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CommandsColumns holds the columns for the "commands" table.
	CommandsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "program", Type: field.TypeString},
		{Name: "args", Type: field.TypeJSON},
		{Name: "ignore_errors", Type: field.TypeBool},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "cooldown", Type: field.TypeInt},
		{Name: "timeout", Type: field.TypeInt},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_command", Type: field.TypeUUID, Nullable: true},
	}
	// CommandsTable holds the schema information for the "commands" table.
	CommandsTable = &schema.Table{
		Name:       "commands",
		Columns:    CommandsColumns,
		PrimaryKey: []*schema.Column{CommandsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "commands_environments_EnvironmentToCommand",
				Columns:    []*schema.Column{CommandsColumns[12]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CompetitionsColumns holds the columns for the "competitions" table.
	CompetitionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "root_password", Type: field.TypeString},
		{Name: "config", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_competition", Type: field.TypeUUID, Nullable: true},
	}
	// CompetitionsTable holds the schema information for the "competitions" table.
	CompetitionsTable = &schema.Table{
		Name:       "competitions",
		Columns:    CompetitionsColumns,
		PrimaryKey: []*schema.Column{CompetitionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "competitions_environments_EnvironmentToCompetition",
				Columns:    []*schema.Column{CompetitionsColumns[5]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DnSsColumns holds the columns for the "dn_ss" table.
	DnSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "root_domain", Type: field.TypeString},
		{Name: "dns_servers", Type: field.TypeJSON},
		{Name: "ntp_servers", Type: field.TypeJSON},
		{Name: "config", Type: field.TypeJSON},
	}
	// DnSsTable holds the schema information for the "dn_ss" table.
	DnSsTable = &schema.Table{
		Name:       "dn_ss",
		Columns:    DnSsColumns,
		PrimaryKey: []*schema.Column{DnSsColumns[0]},
	}
	// DNSRecordsColumns holds the columns for the "dns_records" table.
	DNSRecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "values", Type: field.TypeJSON},
		{Name: "type", Type: field.TypeString},
		{Name: "zone", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_dns_record", Type: field.TypeUUID, Nullable: true},
	}
	// DNSRecordsTable holds the schema information for the "dns_records" table.
	DNSRecordsTable = &schema.Table{
		Name:       "dns_records",
		Columns:    DNSRecordsColumns,
		PrimaryKey: []*schema.Column{DNSRecordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dns_records_environments_EnvironmentToDNSRecord",
				Columns:    []*schema.Column{DNSRecordsColumns[9]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DisksColumns holds the columns for the "disks" table.
	DisksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "size", Type: field.TypeInt},
		{Name: "host_host_to_disk", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// DisksTable holds the schema information for the "disks" table.
	DisksTable = &schema.Table{
		Name:       "disks",
		Columns:    DisksColumns,
		PrimaryKey: []*schema.Column{DisksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "disks_hosts_HostToDisk",
				Columns:    []*schema.Column{DisksColumns[2]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentsColumns holds the columns for the "environments" table.
	EnvironmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "competition_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "builder", Type: field.TypeString},
		{Name: "team_count", Type: field.TypeInt},
		{Name: "revision", Type: field.TypeInt},
		{Name: "admin_cidrs", Type: field.TypeJSON},
		{Name: "exposed_vdi_ports", Type: field.TypeJSON},
		{Name: "config", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
	}
	// EnvironmentsTable holds the schema information for the "environments" table.
	EnvironmentsTable = &schema.Table{
		Name:       "environments",
		Columns:    EnvironmentsColumns,
		PrimaryKey: []*schema.Column{EnvironmentsColumns[0]},
	}
	// FileDeletesColumns holds the columns for the "file_deletes" table.
	FileDeletesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "path", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_file_delete", Type: field.TypeUUID, Nullable: true},
	}
	// FileDeletesTable holds the schema information for the "file_deletes" table.
	FileDeletesTable = &schema.Table{
		Name:       "file_deletes",
		Columns:    FileDeletesColumns,
		PrimaryKey: []*schema.Column{FileDeletesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "file_deletes_environments_EnvironmentToFileDelete",
				Columns:    []*schema.Column{FileDeletesColumns[4]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FileDownloadsColumns holds the columns for the "file_downloads" table.
	FileDownloadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "source_type", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "destination", Type: field.TypeString},
		{Name: "template", Type: field.TypeBool},
		{Name: "perms", Type: field.TypeString},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "md5", Type: field.TypeString},
		{Name: "abs_path", Type: field.TypeString},
		{Name: "is_txt", Type: field.TypeBool, Default: false},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_file_download", Type: field.TypeUUID, Nullable: true},
	}
	// FileDownloadsTable holds the schema information for the "file_downloads" table.
	FileDownloadsTable = &schema.Table{
		Name:       "file_downloads",
		Columns:    FileDownloadsColumns,
		PrimaryKey: []*schema.Column{FileDownloadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "file_downloads_environments_EnvironmentToFileDownload",
				Columns:    []*schema.Column{FileDownloadsColumns[12]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FileExtractsColumns holds the columns for the "file_extracts" table.
	FileExtractsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "destination", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_file_extract", Type: field.TypeUUID, Nullable: true},
	}
	// FileExtractsTable holds the schema information for the "file_extracts" table.
	FileExtractsTable = &schema.Table{
		Name:       "file_extracts",
		Columns:    FileExtractsColumns,
		PrimaryKey: []*schema.Column{FileExtractsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "file_extracts_environments_EnvironmentToFileExtract",
				Columns:    []*schema.Column{FileExtractsColumns[6]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FindingsColumns holds the columns for the "findings" table.
	FindingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "severity", Type: field.TypeEnum, Enums: []string{"ZeroSeverity", "LowSeverity", "MediumSeverity", "HighSeverity", "CriticalSeverity", "NullSeverity"}},
		{Name: "difficulty", Type: field.TypeEnum, Enums: []string{"ZeroDifficulty", "NoviceDifficulty", "AdvancedDifficulty", "ExpertDifficulty", "NullDifficulty"}},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_finding", Type: field.TypeUUID, Nullable: true},
		{Name: "finding_finding_to_host", Type: field.TypeUUID, Nullable: true},
		{Name: "script_script_to_finding", Type: field.TypeUUID, Nullable: true},
	}
	// FindingsTable holds the schema information for the "findings" table.
	FindingsTable = &schema.Table{
		Name:       "findings",
		Columns:    FindingsColumns,
		PrimaryKey: []*schema.Column{FindingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "findings_environments_EnvironmentToFinding",
				Columns:    []*schema.Column{FindingsColumns[6]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "findings_hosts_FindingToHost",
				Columns:    []*schema.Column{FindingsColumns[7]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "findings_scripts_ScriptToFinding",
				Columns:    []*schema.Column{FindingsColumns[8]},
				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GinFileMiddlewaresColumns holds the columns for the "gin_file_middlewares" table.
	GinFileMiddlewaresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "url_id", Type: field.TypeString},
		{Name: "file_path", Type: field.TypeString},
		{Name: "accessed", Type: field.TypeBool, Default: false},
		{Name: "server_task_server_task_to_gin_file_middleware", Type: field.TypeUUID, Nullable: true},
	}
	// GinFileMiddlewaresTable holds the schema information for the "gin_file_middlewares" table.
	GinFileMiddlewaresTable = &schema.Table{
		Name:       "gin_file_middlewares",
		Columns:    GinFileMiddlewaresColumns,
		PrimaryKey: []*schema.Column{GinFileMiddlewaresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "gin_file_middlewares_server_tasks_ServerTaskToGinFileMiddleware",
				Columns:    []*schema.Column{GinFileMiddlewaresColumns[4]},
				RefColumns: []*schema.Column{ServerTasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HostsColumns holds the columns for the "hosts" table.
	HostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "os", Type: field.TypeString},
		{Name: "last_octet", Type: field.TypeInt},
		{Name: "instance_size", Type: field.TypeString},
		{Name: "allow_mac_changes", Type: field.TypeBool},
		{Name: "exposed_tcp_ports", Type: field.TypeJSON},
		{Name: "exposed_udp_ports", Type: field.TypeJSON},
		{Name: "override_password", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "user_groups", Type: field.TypeJSON},
		{Name: "provision_steps", Type: field.TypeJSON, Nullable: true},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_host", Type: field.TypeUUID, Nullable: true},
	}
	// HostsTable holds the schema information for the "hosts" table.
	HostsTable = &schema.Table{
		Name:       "hosts",
		Columns:    HostsColumns,
		PrimaryKey: []*schema.Column{HostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hosts_environments_EnvironmentToHost",
				Columns:    []*schema.Column{HostsColumns[15]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HostDependenciesColumns holds the columns for the "host_dependencies" table.
	HostDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "host_id", Type: field.TypeString},
		{Name: "network_id", Type: field.TypeString},
		{Name: "environment_environment_to_host_dependency", Type: field.TypeUUID, Nullable: true},
		{Name: "host_dependency_host_dependency_to_depend_on_host", Type: field.TypeUUID, Nullable: true},
		{Name: "host_dependency_host_dependency_to_depend_by_host", Type: field.TypeUUID, Nullable: true},
		{Name: "host_dependency_host_dependency_to_network", Type: field.TypeUUID, Nullable: true},
	}
	// HostDependenciesTable holds the schema information for the "host_dependencies" table.
	HostDependenciesTable = &schema.Table{
		Name:       "host_dependencies",
		Columns:    HostDependenciesColumns,
		PrimaryKey: []*schema.Column{HostDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "host_dependencies_environments_EnvironmentToHostDependency",
				Columns:    []*schema.Column{HostDependenciesColumns[3]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "host_dependencies_hosts_HostDependencyToDependOnHost",
				Columns:    []*schema.Column{HostDependenciesColumns[4]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "host_dependencies_hosts_HostDependencyToDependByHost",
				Columns:    []*schema.Column{HostDependenciesColumns[5]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "host_dependencies_networks_HostDependencyToNetwork",
				Columns:    []*schema.Column{HostDependenciesColumns[6]},
				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IdentitiesColumns holds the columns for the "identities" table.
	IdentitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "avatar_file", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_identity", Type: field.TypeUUID, Nullable: true},
	}
	// IdentitiesTable holds the schema information for the "identities" table.
	IdentitiesTable = &schema.Table{
		Name:       "identities",
		Columns:    IdentitiesColumns,
		PrimaryKey: []*schema.Column{IdentitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "identities_environments_EnvironmentToIdentity",
				Columns:    []*schema.Column{IdentitiesColumns[10]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncludedNetworksColumns holds the columns for the "included_networks" table.
	IncludedNetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "hosts", Type: field.TypeJSON},
		{Name: "included_network_included_network_to_network", Type: field.TypeUUID, Nullable: true},
	}
	// IncludedNetworksTable holds the schema information for the "included_networks" table.
	IncludedNetworksTable = &schema.Table{
		Name:       "included_networks",
		Columns:    IncludedNetworksColumns,
		PrimaryKey: []*schema.Column{IncludedNetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "included_networks_networks_IncludedNetworkToNetwork",
				Columns:    []*schema.Column{IncludedNetworksColumns[3]},
				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NetworksColumns holds the columns for the "networks" table.
	NetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "cidr", Type: field.TypeString},
		{Name: "vdi_visible", Type: field.TypeBool},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_network", Type: field.TypeUUID, Nullable: true},
	}
	// NetworksTable holds the schema information for the "networks" table.
	NetworksTable = &schema.Table{
		Name:       "networks",
		Columns:    NetworksColumns,
		PrimaryKey: []*schema.Column{NetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "networks_environments_EnvironmentToNetwork",
				Columns:    []*schema.Column{NetworksColumns[7]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlansColumns holds the columns for the "plans" table.
	PlansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "step_number", Type: field.TypeInt},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"start_build", "start_team", "provision_network", "provision_host", "execute_step"}},
		{Name: "build_id", Type: field.TypeString},
		{Name: "plan_plan_to_build", Type: field.TypeUUID, Nullable: true},
	}
	// PlansTable holds the schema information for the "plans" table.
	PlansTable = &schema.Table{
		Name:       "plans",
		Columns:    PlansColumns,
		PrimaryKey: []*schema.Column{PlansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plans_builds_PlanToBuild",
				Columns:    []*schema.Column{PlansColumns[4]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PlanDiffsColumns holds the columns for the "plan_diffs" table.
	PlanDiffsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "revision", Type: field.TypeInt},
		{Name: "new_state", Type: field.TypeEnum, Enums: []string{"PLANNING", "AWAITING", "INPROGRESS", "FAILED", "COMPLETE", "TAINTED", "TODELETE", "DELETEINPROGRESS", "DELETED", "TOREBUILD"}},
		{Name: "plan_diff_plan_diff_to_build_commit", Type: field.TypeUUID},
		{Name: "plan_diff_plan_diff_to_plan", Type: field.TypeUUID},
	}
	// PlanDiffsTable holds the schema information for the "plan_diffs" table.
	PlanDiffsTable = &schema.Table{
		Name:       "plan_diffs",
		Columns:    PlanDiffsColumns,
		PrimaryKey: []*schema.Column{PlanDiffsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plan_diffs_build_commits_PlanDiffToBuildCommit",
				Columns:    []*schema.Column{PlanDiffsColumns[3]},
				RefColumns: []*schema.Column{BuildCommitsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "plan_diffs_plans_PlanDiffToPlan",
				Columns:    []*schema.Column{PlanDiffsColumns[4]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProvisionedHostsColumns holds the columns for the "provisioned_hosts" table.
	ProvisionedHostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "subnet_ip", Type: field.TypeString},
		{Name: "addon_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"DNS"}},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "gin_file_middleware_gin_file_middleware_to_provisioned_host", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "plan_plan_to_provisioned_host", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_provisioned_network", Type: field.TypeUUID},
		{Name: "provisioned_host_provisioned_host_to_host", Type: field.TypeUUID},
		{Name: "provisioned_host_provisioned_host_to_end_step_plan", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_build", Type: field.TypeUUID},
	}
	// ProvisionedHostsTable holds the schema information for the "provisioned_hosts" table.
	ProvisionedHostsTable = &schema.Table{
		Name:       "provisioned_hosts",
		Columns:    ProvisionedHostsColumns,
		PrimaryKey: []*schema.Column{ProvisionedHostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provisioned_hosts_gin_file_middlewares_GinFileMiddlewareToProvisionedHost",
				Columns:    []*schema.Column{ProvisionedHostsColumns[4]},
				RefColumns: []*schema.Column{GinFileMiddlewaresColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioned_hosts_plans_PlanToProvisionedHost",
				Columns:    []*schema.Column{ProvisionedHostsColumns[5]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioned_hosts_provisioned_networks_ProvisionedHostToProvisionedNetwork",
				Columns:    []*schema.Column{ProvisionedHostsColumns[6]},
				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "provisioned_hosts_hosts_ProvisionedHostToHost",
				Columns:    []*schema.Column{ProvisionedHostsColumns[7]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "provisioned_hosts_plans_ProvisionedHostToEndStepPlan",
				Columns:    []*schema.Column{ProvisionedHostsColumns[8]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "provisioned_hosts_builds_ProvisionedHostToBuild",
				Columns:    []*schema.Column{ProvisionedHostsColumns[9]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProvisionedNetworksColumns holds the columns for the "provisioned_networks" table.
	ProvisionedNetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "cidr", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "plan_plan_to_provisioned_network", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_network", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_build", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_team", Type: field.TypeUUID, Nullable: true},
	}
	// ProvisionedNetworksTable holds the schema information for the "provisioned_networks" table.
	ProvisionedNetworksTable = &schema.Table{
		Name:       "provisioned_networks",
		Columns:    ProvisionedNetworksColumns,
		PrimaryKey: []*schema.Column{ProvisionedNetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provisioned_networks_plans_PlanToProvisionedNetwork",
				Columns:    []*schema.Column{ProvisionedNetworksColumns[4]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioned_networks_networks_ProvisionedNetworkToNetwork",
				Columns:    []*schema.Column{ProvisionedNetworksColumns[5]},
				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioned_networks_builds_ProvisionedNetworkToBuild",
				Columns:    []*schema.Column{ProvisionedNetworksColumns[6]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioned_networks_teams_ProvisionedNetworkToTeam",
				Columns:    []*schema.Column{ProvisionedNetworksColumns[7]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProvisioningStepsColumns holds the columns for the "provisioning_steps" table.
	ProvisioningStepsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"Script", "Command", "DNSRecord", "FileDelete", "FileDownload", "FileExtract", "Ansible"}},
		{Name: "step_number", Type: field.TypeInt},
		{Name: "gin_file_middleware_gin_file_middleware_to_provisioning_step", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "plan_plan_to_provisioning_step", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_provisioned_host", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_script", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_command", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_dns_record", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_file_delete", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_file_download", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_file_extract", Type: field.TypeUUID, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_ansible", Type: field.TypeUUID, Nullable: true},
	}
	// ProvisioningStepsTable holds the schema information for the "provisioning_steps" table.
	ProvisioningStepsTable = &schema.Table{
		Name:       "provisioning_steps",
		Columns:    ProvisioningStepsColumns,
		PrimaryKey: []*schema.Column{ProvisioningStepsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provisioning_steps_gin_file_middlewares_GinFileMiddlewareToProvisioningStep",
				Columns:    []*schema.Column{ProvisioningStepsColumns[3]},
				RefColumns: []*schema.Column{GinFileMiddlewaresColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_plans_PlanToProvisioningStep",
				Columns:    []*schema.Column{ProvisioningStepsColumns[4]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_provisioned_hosts_ProvisioningStepToProvisionedHost",
				Columns:    []*schema.Column{ProvisioningStepsColumns[5]},
				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_scripts_ProvisioningStepToScript",
				Columns:    []*schema.Column{ProvisioningStepsColumns[6]},
				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_commands_ProvisioningStepToCommand",
				Columns:    []*schema.Column{ProvisioningStepsColumns[7]},
				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_dns_records_ProvisioningStepToDNSRecord",
				Columns:    []*schema.Column{ProvisioningStepsColumns[8]},
				RefColumns: []*schema.Column{DNSRecordsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_file_deletes_ProvisioningStepToFileDelete",
				Columns:    []*schema.Column{ProvisioningStepsColumns[9]},
				RefColumns: []*schema.Column{FileDeletesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_file_downloads_ProvisioningStepToFileDownload",
				Columns:    []*schema.Column{ProvisioningStepsColumns[10]},
				RefColumns: []*schema.Column{FileDownloadsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_file_extracts_ProvisioningStepToFileExtract",
				Columns:    []*schema.Column{ProvisioningStepsColumns[11]},
				RefColumns: []*schema.Column{FileExtractsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "provisioning_steps_ansibles_ProvisioningStepToAnsible",
				Columns:    []*schema.Column{ProvisioningStepsColumns[12]},
				RefColumns: []*schema.Column{AnsiblesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RepoCommitsColumns holds the columns for the "repo_commits" table.
	RepoCommitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "revision", Type: field.TypeInt},
		{Name: "hash", Type: field.TypeString},
		{Name: "author", Type: field.TypeJSON},
		{Name: "committer", Type: field.TypeJSON},
		{Name: "pgp_signature", Type: field.TypeString},
		{Name: "message", Type: field.TypeString},
		{Name: "tree_hash", Type: field.TypeString},
		{Name: "parent_hashes", Type: field.TypeJSON},
		{Name: "repository_repository_to_repo_commit", Type: field.TypeUUID, Nullable: true},
	}
	// RepoCommitsTable holds the schema information for the "repo_commits" table.
	RepoCommitsTable = &schema.Table{
		Name:       "repo_commits",
		Columns:    RepoCommitsColumns,
		PrimaryKey: []*schema.Column{RepoCommitsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "repo_commits_repositories_RepositoryToRepoCommit",
				Columns:    []*schema.Column{RepoCommitsColumns[9]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RepositoriesColumns holds the columns for the "repositories" table.
	RepositoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "repo_url", Type: field.TypeString},
		{Name: "branch_name", Type: field.TypeString, Default: "master"},
		{Name: "enviroment_filepath", Type: field.TypeString},
		{Name: "folder_path", Type: field.TypeString, Default: "N/A"},
	}
	// RepositoriesTable holds the schema information for the "repositories" table.
	RepositoriesTable = &schema.Table{
		Name:       "repositories",
		Columns:    RepositoriesColumns,
		PrimaryKey: []*schema.Column{RepositoriesColumns[0]},
	}
	// ScriptsColumns holds the columns for the "scripts" table.
	ScriptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "language", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "source_type", Type: field.TypeString},
		{Name: "cooldown", Type: field.TypeInt},
		{Name: "timeout", Type: field.TypeInt},
		{Name: "ignore_errors", Type: field.TypeBool},
		{Name: "args", Type: field.TypeJSON},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "abs_path", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "environment_environment_to_script", Type: field.TypeUUID, Nullable: true},
	}
	// ScriptsTable holds the schema information for the "scripts" table.
	ScriptsTable = &schema.Table{
		Name:       "scripts",
		Columns:    ScriptsColumns,
		PrimaryKey: []*schema.Column{ScriptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scripts_environments_EnvironmentToScript",
				Columns:    []*schema.Column{ScriptsColumns[15]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ServerTasksColumns holds the columns for the "server_tasks" table.
	ServerTasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"LOADENV", "CREATEBUILD", "RENDERFILES", "DELETEBUILD", "REBUILD", "EXECUTEBUILD"}},
		{Name: "start_time", Type: field.TypeTime, Nullable: true},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
		{Name: "errors", Type: field.TypeJSON, Nullable: true},
		{Name: "log_file_path", Type: field.TypeString, Nullable: true},
		{Name: "server_task_server_task_to_auth_user", Type: field.TypeUUID},
		{Name: "server_task_server_task_to_environment", Type: field.TypeUUID, Nullable: true},
		{Name: "server_task_server_task_to_build", Type: field.TypeUUID, Nullable: true},
		{Name: "server_task_server_task_to_build_commit", Type: field.TypeUUID, Nullable: true},
	}
	// ServerTasksTable holds the schema information for the "server_tasks" table.
	ServerTasksTable = &schema.Table{
		Name:       "server_tasks",
		Columns:    ServerTasksColumns,
		PrimaryKey: []*schema.Column{ServerTasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "server_tasks_auth_users_ServerTaskToAuthUser",
				Columns:    []*schema.Column{ServerTasksColumns[6]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "server_tasks_environments_ServerTaskToEnvironment",
				Columns:    []*schema.Column{ServerTasksColumns[7]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "server_tasks_builds_ServerTaskToBuild",
				Columns:    []*schema.Column{ServerTasksColumns[8]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "server_tasks_build_commits_ServerTaskToBuildCommit",
				Columns:    []*schema.Column{ServerTasksColumns[9]},
				RefColumns: []*schema.Column{BuildCommitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StatusColumns holds the columns for the "status" table.
	StatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"PLANNING", "AWAITING", "PARENTAWAITING", "INPROGRESS", "FAILED", "COMPLETE", "TAINTED", "TODELETE", "DELETEINPROGRESS", "DELETED", "TOREBUILD", "CANCELLED"}},
		{Name: "status_for", Type: field.TypeEnum, Enums: []string{"Build", "Team", "Plan", "ProvisionedNetwork", "ProvisionedHost", "ProvisioningStep", "ServerTask"}},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "ended_at", Type: field.TypeTime, Nullable: true},
		{Name: "failed", Type: field.TypeBool, Default: false},
		{Name: "completed", Type: field.TypeBool, Default: false},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "adhoc_plan_adhoc_plan_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "build_build_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "plan_plan_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "server_task_server_task_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "team_team_to_status", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// StatusTable holds the schema information for the "status" table.
	StatusTable = &schema.Table{
		Name:       "status",
		Columns:    StatusColumns,
		PrimaryKey: []*schema.Column{StatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "status_adhoc_plans_AdhocPlanToStatus",
				Columns:    []*schema.Column{StatusColumns[8]},
				RefColumns: []*schema.Column{AdhocPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "status_builds_BuildToStatus",
				Columns:    []*schema.Column{StatusColumns[9]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "status_plans_PlanToStatus",
				Columns:    []*schema.Column{StatusColumns[10]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "status_provisioned_hosts_ProvisionedHostToStatus",
				Columns:    []*schema.Column{StatusColumns[11]},
				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "status_provisioned_networks_ProvisionedNetworkToStatus",
				Columns:    []*schema.Column{StatusColumns[12]},
				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "status_provisioning_steps_ProvisioningStepToStatus",
				Columns:    []*schema.Column{StatusColumns[13]},
				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "status_server_tasks_ServerTaskToStatus",
				Columns:    []*schema.Column{StatusColumns[14]},
				RefColumns: []*schema.Column{ServerTasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "status_teams_TeamToStatus",
				Columns:    []*schema.Column{StatusColumns[15]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeJSON},
		{Name: "included_network_included_network_to_tag", Type: field.TypeUUID, Nullable: true},
		{Name: "user_user_to_tag", Type: field.TypeUUID, Nullable: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tags_included_networks_IncludedNetworkToTag",
				Columns:    []*schema.Column{TagsColumns[4]},
				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tags_users_UserToTag",
				Columns:    []*schema.Column{TagsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TeamsColumns holds the columns for the "teams" table.
	TeamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "team_number", Type: field.TypeInt},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "plan_plan_to_team", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "team_team_to_build", Type: field.TypeUUID},
	}
	// TeamsTable holds the schema information for the "teams" table.
	TeamsTable = &schema.Table{
		Name:       "teams",
		Columns:    TeamsColumns,
		PrimaryKey: []*schema.Column{TeamsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "teams_plans_PlanToTeam",
				Columns:    []*schema.Column{TeamsColumns[3]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "teams_builds_TeamToBuild",
				Columns:    []*schema.Column{TeamsColumns[4]},
				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "token", Type: field.TypeString},
		{Name: "expire_at", Type: field.TypeInt64},
		{Name: "auth_user_auth_user_to_token", Type: field.TypeUUID},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_auth_users_AuthUserToToken",
				Columns:    []*schema.Column{TokensColumns[3]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "uuid", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "ansible_ansible_to_user", Type: field.TypeUUID, Nullable: true},
		{Name: "command_command_to_user", Type: field.TypeUUID, Nullable: true},
		{Name: "finding_finding_to_user", Type: field.TypeUUID, Nullable: true},
		{Name: "host_host_to_user", Type: field.TypeUUID, Nullable: true},
		{Name: "script_script_to_user", Type: field.TypeUUID, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_ansibles_AnsibleToUser",
				Columns:    []*schema.Column{UsersColumns[5]},
				RefColumns: []*schema.Column{AnsiblesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_commands_CommandToUser",
				Columns:    []*schema.Column{UsersColumns[6]},
				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_findings_FindingToUser",
				Columns:    []*schema.Column{UsersColumns[7]},
				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_hosts_HostToUser",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_scripts_ScriptToUser",
				Columns:    []*schema.Column{UsersColumns[9]},
				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AdhocPlanNextAdhocPlanColumns holds the columns for the "adhoc_plan_NextAdhocPlan" table.
	AdhocPlanNextAdhocPlanColumns = []*schema.Column{
		{Name: "adhoc_plan_id", Type: field.TypeUUID},
		{Name: "PrevAdhocPlan_id", Type: field.TypeUUID},
	}
	// AdhocPlanNextAdhocPlanTable holds the schema information for the "adhoc_plan_NextAdhocPlan" table.
	AdhocPlanNextAdhocPlanTable = &schema.Table{
		Name:       "adhoc_plan_NextAdhocPlan",
		Columns:    AdhocPlanNextAdhocPlanColumns,
		PrimaryKey: []*schema.Column{AdhocPlanNextAdhocPlanColumns[0], AdhocPlanNextAdhocPlanColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "adhoc_plan_NextAdhocPlan_adhoc_plan_id",
				Columns:    []*schema.Column{AdhocPlanNextAdhocPlanColumns[0]},
				RefColumns: []*schema.Column{AdhocPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "adhoc_plan_NextAdhocPlan_PrevAdhocPlan_id",
				Columns:    []*schema.Column{AdhocPlanNextAdhocPlanColumns[1]},
				RefColumns: []*schema.Column{AdhocPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CompetitionCompetitionToDNSColumns holds the columns for the "competition_CompetitionToDNS" table.
	CompetitionCompetitionToDNSColumns = []*schema.Column{
		{Name: "competition_id", Type: field.TypeUUID},
		{Name: "dns_id", Type: field.TypeUUID},
	}
	// CompetitionCompetitionToDNSTable holds the schema information for the "competition_CompetitionToDNS" table.
	CompetitionCompetitionToDNSTable = &schema.Table{
		Name:       "competition_CompetitionToDNS",
		Columns:    CompetitionCompetitionToDNSColumns,
		PrimaryKey: []*schema.Column{CompetitionCompetitionToDNSColumns[0], CompetitionCompetitionToDNSColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "competition_CompetitionToDNS_competition_id",
				Columns:    []*schema.Column{CompetitionCompetitionToDNSColumns[0]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "competition_CompetitionToDNS_dns_id",
				Columns:    []*schema.Column{CompetitionCompetitionToDNSColumns[1]},
				RefColumns: []*schema.Column{DnSsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToUserColumns holds the columns for the "environment_EnvironmentToUser" table.
	EnvironmentEnvironmentToUserColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// EnvironmentEnvironmentToUserTable holds the schema information for the "environment_EnvironmentToUser" table.
	EnvironmentEnvironmentToUserTable = &schema.Table{
		Name:       "environment_EnvironmentToUser",
		Columns:    EnvironmentEnvironmentToUserColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToUserColumns[0], EnvironmentEnvironmentToUserColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "environment_EnvironmentToUser_environment_id",
				Columns:    []*schema.Column{EnvironmentEnvironmentToUserColumns[0]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "environment_EnvironmentToUser_user_id",
				Columns:    []*schema.Column{EnvironmentEnvironmentToUserColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToIncludedNetworkColumns holds the columns for the "environment_EnvironmentToIncludedNetwork" table.
	EnvironmentEnvironmentToIncludedNetworkColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeUUID},
		{Name: "included_network_id", Type: field.TypeUUID},
	}
	// EnvironmentEnvironmentToIncludedNetworkTable holds the schema information for the "environment_EnvironmentToIncludedNetwork" table.
	EnvironmentEnvironmentToIncludedNetworkTable = &schema.Table{
		Name:       "environment_EnvironmentToIncludedNetwork",
		Columns:    EnvironmentEnvironmentToIncludedNetworkColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToIncludedNetworkColumns[0], EnvironmentEnvironmentToIncludedNetworkColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "environment_EnvironmentToIncludedNetwork_environment_id",
				Columns:    []*schema.Column{EnvironmentEnvironmentToIncludedNetworkColumns[0]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "environment_EnvironmentToIncludedNetwork_included_network_id",
				Columns:    []*schema.Column{EnvironmentEnvironmentToIncludedNetworkColumns[1]},
				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToDNSColumns holds the columns for the "environment_EnvironmentToDNS" table.
	EnvironmentEnvironmentToDNSColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeUUID},
		{Name: "dns_id", Type: field.TypeUUID},
	}
	// EnvironmentEnvironmentToDNSTable holds the schema information for the "environment_EnvironmentToDNS" table.
	EnvironmentEnvironmentToDNSTable = &schema.Table{
		Name:       "environment_EnvironmentToDNS",
		Columns:    EnvironmentEnvironmentToDNSColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToDNSColumns[0], EnvironmentEnvironmentToDNSColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "environment_EnvironmentToDNS_environment_id",
				Columns:    []*schema.Column{EnvironmentEnvironmentToDNSColumns[0]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "environment_EnvironmentToDNS_dns_id",
				Columns:    []*schema.Column{EnvironmentEnvironmentToDNSColumns[1]},
				RefColumns: []*schema.Column{DnSsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncludedNetworkIncludedNetworkToHostColumns holds the columns for the "included_network_IncludedNetworkToHost" table.
	IncludedNetworkIncludedNetworkToHostColumns = []*schema.Column{
		{Name: "included_network_id", Type: field.TypeUUID},
		{Name: "host_id", Type: field.TypeUUID},
	}
	// IncludedNetworkIncludedNetworkToHostTable holds the schema information for the "included_network_IncludedNetworkToHost" table.
	IncludedNetworkIncludedNetworkToHostTable = &schema.Table{
		Name:       "included_network_IncludedNetworkToHost",
		Columns:    IncludedNetworkIncludedNetworkToHostColumns,
		PrimaryKey: []*schema.Column{IncludedNetworkIncludedNetworkToHostColumns[0], IncludedNetworkIncludedNetworkToHostColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "included_network_IncludedNetworkToHost_included_network_id",
				Columns:    []*schema.Column{IncludedNetworkIncludedNetworkToHostColumns[0]},
				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "included_network_IncludedNetworkToHost_host_id",
				Columns:    []*schema.Column{IncludedNetworkIncludedNetworkToHostColumns[1]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlanNextPlanColumns holds the columns for the "plan_NextPlan" table.
	PlanNextPlanColumns = []*schema.Column{
		{Name: "plan_id", Type: field.TypeUUID},
		{Name: "PrevPlan_id", Type: field.TypeUUID},
	}
	// PlanNextPlanTable holds the schema information for the "plan_NextPlan" table.
	PlanNextPlanTable = &schema.Table{
		Name:       "plan_NextPlan",
		Columns:    PlanNextPlanColumns,
		PrimaryKey: []*schema.Column{PlanNextPlanColumns[0], PlanNextPlanColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plan_NextPlan_plan_id",
				Columns:    []*schema.Column{PlanNextPlanColumns[0]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "plan_NextPlan_PrevPlan_id",
				Columns:    []*schema.Column{PlanNextPlanColumns[1]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RepositoryRepositoryToEnvironmentColumns holds the columns for the "repository_RepositoryToEnvironment" table.
	RepositoryRepositoryToEnvironmentColumns = []*schema.Column{
		{Name: "repository_id", Type: field.TypeUUID},
		{Name: "environment_id", Type: field.TypeUUID},
	}
	// RepositoryRepositoryToEnvironmentTable holds the schema information for the "repository_RepositoryToEnvironment" table.
	RepositoryRepositoryToEnvironmentTable = &schema.Table{
		Name:       "repository_RepositoryToEnvironment",
		Columns:    RepositoryRepositoryToEnvironmentColumns,
		PrimaryKey: []*schema.Column{RepositoryRepositoryToEnvironmentColumns[0], RepositoryRepositoryToEnvironmentColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "repository_RepositoryToEnvironment_repository_id",
				Columns:    []*schema.Column{RepositoryRepositoryToEnvironmentColumns[0]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "repository_RepositoryToEnvironment_environment_id",
				Columns:    []*schema.Column{RepositoryRepositoryToEnvironmentColumns[1]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdhocPlansTable,
		AgentStatusTable,
		AgentTasksTable,
		AnsiblesTable,
		AuthUsersTable,
		BuildsTable,
		BuildCommitsTable,
		CommandsTable,
		CompetitionsTable,
		DnSsTable,
		DNSRecordsTable,
		DisksTable,
		EnvironmentsTable,
		FileDeletesTable,
		FileDownloadsTable,
		FileExtractsTable,
		FindingsTable,
		GinFileMiddlewaresTable,
		HostsTable,
		HostDependenciesTable,
		IdentitiesTable,
		IncludedNetworksTable,
		NetworksTable,
		PlansTable,
		PlanDiffsTable,
		ProvisionedHostsTable,
		ProvisionedNetworksTable,
		ProvisioningStepsTable,
		RepoCommitsTable,
		RepositoriesTable,
		ScriptsTable,
		ServerTasksTable,
		StatusTable,
		TagsTable,
		TeamsTable,
		TokensTable,
		UsersTable,
		AdhocPlanNextAdhocPlanTable,
		CompetitionCompetitionToDNSTable,
		EnvironmentEnvironmentToUserTable,
		EnvironmentEnvironmentToIncludedNetworkTable,
		EnvironmentEnvironmentToDNSTable,
		IncludedNetworkIncludedNetworkToHostTable,
		PlanNextPlanTable,
		RepositoryRepositoryToEnvironmentTable,
	}
)

func init() {
	AdhocPlansTable.ForeignKeys[0].RefTable = BuildsTable
	AdhocPlansTable.ForeignKeys[1].RefTable = AgentTasksTable
	AgentStatusTable.ForeignKeys[0].RefTable = ProvisionedHostsTable
	AgentStatusTable.ForeignKeys[1].RefTable = ProvisionedNetworksTable
	AgentStatusTable.ForeignKeys[2].RefTable = BuildsTable
	AgentTasksTable.ForeignKeys[0].RefTable = ProvisioningStepsTable
	AgentTasksTable.ForeignKeys[1].RefTable = ProvisionedHostsTable
	AnsiblesTable.ForeignKeys[0].RefTable = EnvironmentsTable
	BuildsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	BuildsTable.ForeignKeys[1].RefTable = CompetitionsTable
	BuildsTable.ForeignKeys[2].RefTable = BuildCommitsTable
	BuildsTable.ForeignKeys[3].RefTable = RepoCommitsTable
	BuildCommitsTable.ForeignKeys[0].RefTable = BuildsTable
	CommandsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	CompetitionsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	DNSRecordsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	DisksTable.ForeignKeys[0].RefTable = HostsTable
	FileDeletesTable.ForeignKeys[0].RefTable = EnvironmentsTable
	FileDownloadsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	FileExtractsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	FindingsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	FindingsTable.ForeignKeys[1].RefTable = HostsTable
	FindingsTable.ForeignKeys[2].RefTable = ScriptsTable
	GinFileMiddlewaresTable.ForeignKeys[0].RefTable = ServerTasksTable
	HostsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	HostDependenciesTable.ForeignKeys[0].RefTable = EnvironmentsTable
	HostDependenciesTable.ForeignKeys[1].RefTable = HostsTable
	HostDependenciesTable.ForeignKeys[2].RefTable = HostsTable
	HostDependenciesTable.ForeignKeys[3].RefTable = NetworksTable
	IdentitiesTable.ForeignKeys[0].RefTable = EnvironmentsTable
	IncludedNetworksTable.ForeignKeys[0].RefTable = NetworksTable
	NetworksTable.ForeignKeys[0].RefTable = EnvironmentsTable
	PlansTable.ForeignKeys[0].RefTable = BuildsTable
	PlanDiffsTable.ForeignKeys[0].RefTable = BuildCommitsTable
	PlanDiffsTable.ForeignKeys[1].RefTable = PlansTable
	ProvisionedHostsTable.ForeignKeys[0].RefTable = GinFileMiddlewaresTable
	ProvisionedHostsTable.ForeignKeys[1].RefTable = PlansTable
	ProvisionedHostsTable.ForeignKeys[2].RefTable = ProvisionedNetworksTable
	ProvisionedHostsTable.ForeignKeys[3].RefTable = HostsTable
	ProvisionedHostsTable.ForeignKeys[4].RefTable = PlansTable
	ProvisionedHostsTable.ForeignKeys[5].RefTable = BuildsTable
	ProvisionedNetworksTable.ForeignKeys[0].RefTable = PlansTable
	ProvisionedNetworksTable.ForeignKeys[1].RefTable = NetworksTable
	ProvisionedNetworksTable.ForeignKeys[2].RefTable = BuildsTable
	ProvisionedNetworksTable.ForeignKeys[3].RefTable = TeamsTable
	ProvisioningStepsTable.ForeignKeys[0].RefTable = GinFileMiddlewaresTable
	ProvisioningStepsTable.ForeignKeys[1].RefTable = PlansTable
	ProvisioningStepsTable.ForeignKeys[2].RefTable = ProvisionedHostsTable
	ProvisioningStepsTable.ForeignKeys[3].RefTable = ScriptsTable
	ProvisioningStepsTable.ForeignKeys[4].RefTable = CommandsTable
	ProvisioningStepsTable.ForeignKeys[5].RefTable = DNSRecordsTable
	ProvisioningStepsTable.ForeignKeys[6].RefTable = FileDeletesTable
	ProvisioningStepsTable.ForeignKeys[7].RefTable = FileDownloadsTable
	ProvisioningStepsTable.ForeignKeys[8].RefTable = FileExtractsTable
	ProvisioningStepsTable.ForeignKeys[9].RefTable = AnsiblesTable
	RepoCommitsTable.ForeignKeys[0].RefTable = RepositoriesTable
	ScriptsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	ServerTasksTable.ForeignKeys[0].RefTable = AuthUsersTable
	ServerTasksTable.ForeignKeys[1].RefTable = EnvironmentsTable
	ServerTasksTable.ForeignKeys[2].RefTable = BuildsTable
	ServerTasksTable.ForeignKeys[3].RefTable = BuildCommitsTable
	StatusTable.ForeignKeys[0].RefTable = AdhocPlansTable
	StatusTable.ForeignKeys[1].RefTable = BuildsTable
	StatusTable.ForeignKeys[2].RefTable = PlansTable
	StatusTable.ForeignKeys[3].RefTable = ProvisionedHostsTable
	StatusTable.ForeignKeys[4].RefTable = ProvisionedNetworksTable
	StatusTable.ForeignKeys[5].RefTable = ProvisioningStepsTable
	StatusTable.ForeignKeys[6].RefTable = ServerTasksTable
	StatusTable.ForeignKeys[7].RefTable = TeamsTable
	TagsTable.ForeignKeys[0].RefTable = IncludedNetworksTable
	TagsTable.ForeignKeys[1].RefTable = UsersTable
	TeamsTable.ForeignKeys[0].RefTable = PlansTable
	TeamsTable.ForeignKeys[1].RefTable = BuildsTable
	TokensTable.ForeignKeys[0].RefTable = AuthUsersTable
	UsersTable.ForeignKeys[0].RefTable = AnsiblesTable
	UsersTable.ForeignKeys[1].RefTable = CommandsTable
	UsersTable.ForeignKeys[2].RefTable = FindingsTable
	UsersTable.ForeignKeys[3].RefTable = HostsTable
	UsersTable.ForeignKeys[4].RefTable = ScriptsTable
	AdhocPlanNextAdhocPlanTable.ForeignKeys[0].RefTable = AdhocPlansTable
	AdhocPlanNextAdhocPlanTable.ForeignKeys[1].RefTable = AdhocPlansTable
	CompetitionCompetitionToDNSTable.ForeignKeys[0].RefTable = CompetitionsTable
	CompetitionCompetitionToDNSTable.ForeignKeys[1].RefTable = DnSsTable
	EnvironmentEnvironmentToUserTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToUserTable.ForeignKeys[1].RefTable = UsersTable
	EnvironmentEnvironmentToUserTable.Annotation = &entsql.Annotation{}
	EnvironmentEnvironmentToIncludedNetworkTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToIncludedNetworkTable.ForeignKeys[1].RefTable = IncludedNetworksTable
	EnvironmentEnvironmentToIncludedNetworkTable.Annotation = &entsql.Annotation{}
	EnvironmentEnvironmentToDNSTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToDNSTable.ForeignKeys[1].RefTable = DnSsTable
	EnvironmentEnvironmentToDNSTable.Annotation = &entsql.Annotation{}
	IncludedNetworkIncludedNetworkToHostTable.ForeignKeys[0].RefTable = IncludedNetworksTable
	IncludedNetworkIncludedNetworkToHostTable.ForeignKeys[1].RefTable = HostsTable
	PlanNextPlanTable.ForeignKeys[0].RefTable = PlansTable
	PlanNextPlanTable.ForeignKeys[1].RefTable = PlansTable
	RepositoryRepositoryToEnvironmentTable.ForeignKeys[0].RefTable = RepositoriesTable
	RepositoryRepositoryToEnvironmentTable.ForeignKeys[1].RefTable = EnvironmentsTable
}
