// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// FindingUpdate is the builder for updating Finding entities.
type FindingUpdate struct {
	config
	hooks    []Hook
	mutation *FindingMutation
}

// Where appends a list predicates to the FindingUpdate builder.
func (fu *FindingUpdate) Where(ps ...predicate.Finding) *FindingUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FindingUpdate) SetName(s string) *FindingUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetDescription sets the "description" field.
func (fu *FindingUpdate) SetDescription(s string) *FindingUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetSeverity sets the "severity" field.
func (fu *FindingUpdate) SetSeverity(f finding.Severity) *FindingUpdate {
	fu.mutation.SetSeverity(f)
	return fu
}

// SetDifficulty sets the "difficulty" field.
func (fu *FindingUpdate) SetDifficulty(f finding.Difficulty) *FindingUpdate {
	fu.mutation.SetDifficulty(f)
	return fu
}

// SetTags sets the "tags" field.
func (fu *FindingUpdate) SetTags(m map[string]string) *FindingUpdate {
	fu.mutation.SetTags(m)
	return fu
}

// AddUserIDs adds the "Users" edge to the User entity by IDs.
func (fu *FindingUpdate) AddUserIDs(ids ...uuid.UUID) *FindingUpdate {
	fu.mutation.AddUserIDs(ids...)
	return fu
}

// AddUsers adds the "Users" edges to the User entity.
func (fu *FindingUpdate) AddUsers(u ...*User) *FindingUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddUserIDs(ids...)
}

// SetHostID sets the "Host" edge to the Host entity by ID.
func (fu *FindingUpdate) SetHostID(id uuid.UUID) *FindingUpdate {
	fu.mutation.SetHostID(id)
	return fu
}

// SetNillableHostID sets the "Host" edge to the Host entity by ID if the given value is not nil.
func (fu *FindingUpdate) SetNillableHostID(id *uuid.UUID) *FindingUpdate {
	if id != nil {
		fu = fu.SetHostID(*id)
	}
	return fu
}

// SetHost sets the "Host" edge to the Host entity.
func (fu *FindingUpdate) SetHost(h *Host) *FindingUpdate {
	return fu.SetHostID(h.ID)
}

// SetScriptID sets the "Script" edge to the Script entity by ID.
func (fu *FindingUpdate) SetScriptID(id uuid.UUID) *FindingUpdate {
	fu.mutation.SetScriptID(id)
	return fu
}

// SetNillableScriptID sets the "Script" edge to the Script entity by ID if the given value is not nil.
func (fu *FindingUpdate) SetNillableScriptID(id *uuid.UUID) *FindingUpdate {
	if id != nil {
		fu = fu.SetScriptID(*id)
	}
	return fu
}

// SetScript sets the "Script" edge to the Script entity.
func (fu *FindingUpdate) SetScript(s *Script) *FindingUpdate {
	return fu.SetScriptID(s.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (fu *FindingUpdate) SetEnvironmentID(id uuid.UUID) *FindingUpdate {
	fu.mutation.SetEnvironmentID(id)
	return fu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (fu *FindingUpdate) SetNillableEnvironmentID(id *uuid.UUID) *FindingUpdate {
	if id != nil {
		fu = fu.SetEnvironmentID(*id)
	}
	return fu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (fu *FindingUpdate) SetEnvironment(e *Environment) *FindingUpdate {
	return fu.SetEnvironmentID(e.ID)
}

// Mutation returns the FindingMutation object of the builder.
func (fu *FindingUpdate) Mutation() *FindingMutation {
	return fu.mutation
}

// ClearUsers clears all "Users" edges to the User entity.
func (fu *FindingUpdate) ClearUsers() *FindingUpdate {
	fu.mutation.ClearUsers()
	return fu
}

// RemoveUserIDs removes the "Users" edge to User entities by IDs.
func (fu *FindingUpdate) RemoveUserIDs(ids ...uuid.UUID) *FindingUpdate {
	fu.mutation.RemoveUserIDs(ids...)
	return fu
}

// RemoveUsers removes "Users" edges to User entities.
func (fu *FindingUpdate) RemoveUsers(u ...*User) *FindingUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveUserIDs(ids...)
}

// ClearHost clears the "Host" edge to the Host entity.
func (fu *FindingUpdate) ClearHost() *FindingUpdate {
	fu.mutation.ClearHost()
	return fu
}

// ClearScript clears the "Script" edge to the Script entity.
func (fu *FindingUpdate) ClearScript() *FindingUpdate {
	fu.mutation.ClearScript()
	return fu
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (fu *FindingUpdate) ClearEnvironment() *FindingUpdate {
	fu.mutation.ClearEnvironment()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FindingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FindingUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FindingUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FindingUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FindingUpdate) check() error {
	if v, ok := fu.mutation.Severity(); ok {
		if err := finding.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "Finding.severity": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Difficulty(); ok {
		if err := finding.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Finding.difficulty": %w`, err)}
		}
	}
	return nil
}

func (fu *FindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   finding.Table,
			Columns: finding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: finding.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldName,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldDescription,
		})
	}
	if value, ok := fu.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldSeverity,
		})
	}
	if value, ok := fu.mutation.Difficulty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldDifficulty,
		})
	}
	if value, ok := fu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: finding.FieldTags,
		})
	}
	if fu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.UsersTable,
			Columns: []string{finding.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !fu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.UsersTable,
			Columns: []string{finding.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.UsersTable,
			Columns: []string{finding.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   finding.HostTable,
			Columns: []string{finding.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   finding.HostTable,
			Columns: []string{finding.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.ScriptTable,
			Columns: []string{finding.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.ScriptTable,
			Columns: []string{finding.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.EnvironmentTable,
			Columns: []string{finding.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.EnvironmentTable,
			Columns: []string{finding.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FindingUpdateOne is the builder for updating a single Finding entity.
type FindingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FindingMutation
}

// SetName sets the "name" field.
func (fuo *FindingUpdateOne) SetName(s string) *FindingUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FindingUpdateOne) SetDescription(s string) *FindingUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetSeverity sets the "severity" field.
func (fuo *FindingUpdateOne) SetSeverity(f finding.Severity) *FindingUpdateOne {
	fuo.mutation.SetSeverity(f)
	return fuo
}

// SetDifficulty sets the "difficulty" field.
func (fuo *FindingUpdateOne) SetDifficulty(f finding.Difficulty) *FindingUpdateOne {
	fuo.mutation.SetDifficulty(f)
	return fuo
}

// SetTags sets the "tags" field.
func (fuo *FindingUpdateOne) SetTags(m map[string]string) *FindingUpdateOne {
	fuo.mutation.SetTags(m)
	return fuo
}

// AddUserIDs adds the "Users" edge to the User entity by IDs.
func (fuo *FindingUpdateOne) AddUserIDs(ids ...uuid.UUID) *FindingUpdateOne {
	fuo.mutation.AddUserIDs(ids...)
	return fuo
}

// AddUsers adds the "Users" edges to the User entity.
func (fuo *FindingUpdateOne) AddUsers(u ...*User) *FindingUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddUserIDs(ids...)
}

// SetHostID sets the "Host" edge to the Host entity by ID.
func (fuo *FindingUpdateOne) SetHostID(id uuid.UUID) *FindingUpdateOne {
	fuo.mutation.SetHostID(id)
	return fuo
}

// SetNillableHostID sets the "Host" edge to the Host entity by ID if the given value is not nil.
func (fuo *FindingUpdateOne) SetNillableHostID(id *uuid.UUID) *FindingUpdateOne {
	if id != nil {
		fuo = fuo.SetHostID(*id)
	}
	return fuo
}

// SetHost sets the "Host" edge to the Host entity.
func (fuo *FindingUpdateOne) SetHost(h *Host) *FindingUpdateOne {
	return fuo.SetHostID(h.ID)
}

// SetScriptID sets the "Script" edge to the Script entity by ID.
func (fuo *FindingUpdateOne) SetScriptID(id uuid.UUID) *FindingUpdateOne {
	fuo.mutation.SetScriptID(id)
	return fuo
}

// SetNillableScriptID sets the "Script" edge to the Script entity by ID if the given value is not nil.
func (fuo *FindingUpdateOne) SetNillableScriptID(id *uuid.UUID) *FindingUpdateOne {
	if id != nil {
		fuo = fuo.SetScriptID(*id)
	}
	return fuo
}

// SetScript sets the "Script" edge to the Script entity.
func (fuo *FindingUpdateOne) SetScript(s *Script) *FindingUpdateOne {
	return fuo.SetScriptID(s.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (fuo *FindingUpdateOne) SetEnvironmentID(id uuid.UUID) *FindingUpdateOne {
	fuo.mutation.SetEnvironmentID(id)
	return fuo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (fuo *FindingUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *FindingUpdateOne {
	if id != nil {
		fuo = fuo.SetEnvironmentID(*id)
	}
	return fuo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (fuo *FindingUpdateOne) SetEnvironment(e *Environment) *FindingUpdateOne {
	return fuo.SetEnvironmentID(e.ID)
}

// Mutation returns the FindingMutation object of the builder.
func (fuo *FindingUpdateOne) Mutation() *FindingMutation {
	return fuo.mutation
}

// ClearUsers clears all "Users" edges to the User entity.
func (fuo *FindingUpdateOne) ClearUsers() *FindingUpdateOne {
	fuo.mutation.ClearUsers()
	return fuo
}

// RemoveUserIDs removes the "Users" edge to User entities by IDs.
func (fuo *FindingUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *FindingUpdateOne {
	fuo.mutation.RemoveUserIDs(ids...)
	return fuo
}

// RemoveUsers removes "Users" edges to User entities.
func (fuo *FindingUpdateOne) RemoveUsers(u ...*User) *FindingUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveUserIDs(ids...)
}

// ClearHost clears the "Host" edge to the Host entity.
func (fuo *FindingUpdateOne) ClearHost() *FindingUpdateOne {
	fuo.mutation.ClearHost()
	return fuo
}

// ClearScript clears the "Script" edge to the Script entity.
func (fuo *FindingUpdateOne) ClearScript() *FindingUpdateOne {
	fuo.mutation.ClearScript()
	return fuo
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (fuo *FindingUpdateOne) ClearEnvironment() *FindingUpdateOne {
	fuo.mutation.ClearEnvironment()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FindingUpdateOne) Select(field string, fields ...string) *FindingUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Finding entity.
func (fuo *FindingUpdateOne) Save(ctx context.Context) (*Finding, error) {
	var (
		err  error
		node *Finding
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Finding)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FindingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FindingUpdateOne) SaveX(ctx context.Context) *Finding {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FindingUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FindingUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FindingUpdateOne) check() error {
	if v, ok := fuo.mutation.Severity(); ok {
		if err := finding.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "Finding.severity": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Difficulty(); ok {
		if err := finding.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Finding.difficulty": %w`, err)}
		}
	}
	return nil
}

func (fuo *FindingUpdateOne) sqlSave(ctx context.Context) (_node *Finding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   finding.Table,
			Columns: finding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: finding.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Finding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, finding.FieldID)
		for _, f := range fields {
			if !finding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != finding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldName,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldDescription,
		})
	}
	if value, ok := fuo.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldSeverity,
		})
	}
	if value, ok := fuo.mutation.Difficulty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldDifficulty,
		})
	}
	if value, ok := fuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: finding.FieldTags,
		})
	}
	if fuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.UsersTable,
			Columns: []string{finding.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !fuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.UsersTable,
			Columns: []string{finding.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.UsersTable,
			Columns: []string{finding.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   finding.HostTable,
			Columns: []string{finding.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   finding.HostTable,
			Columns: []string{finding.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.ScriptTable,
			Columns: []string{finding.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.ScriptTable,
			Columns: []string{finding.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.EnvironmentTable,
			Columns: []string{finding.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finding.EnvironmentTable,
			Columns: []string{finding.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Finding{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
