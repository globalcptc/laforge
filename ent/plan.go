// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StepNumber holds the value of the "step_number" field.
	StepNumber int `json:"step_number,omitempty"`
	// Type holds the value of the "type" field.
	Type plan.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges PlanEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// PrevPlans holds the value of the PrevPlans edge.
	HCLPrevPlans []*Plan `json:"PrevPlans,omitempty"`
	// NextPlans holds the value of the NextPlans edge.
	HCLNextPlans []*Plan `json:"NextPlans,omitempty"`
	// Build holds the value of the Build edge.
	HCLBuild *Build `json:"Build,omitempty"`
	// Team holds the value of the Team edge.
	HCLTeam *Team `json:"Team,omitempty"`
	// ProvisionedNetwork holds the value of the ProvisionedNetwork edge.
	HCLProvisionedNetwork *ProvisionedNetwork `json:"ProvisionedNetwork,omitempty"`
	// ProvisionedHost holds the value of the ProvisionedHost edge.
	HCLProvisionedHost *ProvisionedHost `json:"ProvisionedHost,omitempty"`
	// ProvisioningStep holds the value of the ProvisioningStep edge.
	HCLProvisioningStep *ProvisioningStep `json:"ProvisioningStep,omitempty"`
	// ProvisioningScheduledStep holds the value of the ProvisioningScheduledStep edge.
	HCLProvisioningScheduledStep *ProvisioningScheduledStep `json:"ProvisioningScheduledStep,omitempty"`
	// Status holds the value of the Status edge.
	HCLStatus *Status `json:"Status,omitempty"`
	// PlanDiffs holds the value of the PlanDiffs edge.
	HCLPlanDiffs []*PlanDiff `json:"PlanDiffs,omitempty"`
	//
	plan_build *uuid.UUID
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// PrevPlans holds the value of the PrevPlans edge.
	PrevPlans []*Plan `json:"PrevPlans,omitempty"`
	// NextPlans holds the value of the NextPlans edge.
	NextPlans []*Plan `json:"NextPlans,omitempty"`
	// Build holds the value of the Build edge.
	Build *Build `json:"Build,omitempty"`
	// Team holds the value of the Team edge.
	Team *Team `json:"Team,omitempty"`
	// ProvisionedNetwork holds the value of the ProvisionedNetwork edge.
	ProvisionedNetwork *ProvisionedNetwork `json:"ProvisionedNetwork,omitempty"`
	// ProvisionedHost holds the value of the ProvisionedHost edge.
	ProvisionedHost *ProvisionedHost `json:"ProvisionedHost,omitempty"`
	// ProvisioningStep holds the value of the ProvisioningStep edge.
	ProvisioningStep *ProvisioningStep `json:"ProvisioningStep,omitempty"`
	// ProvisioningScheduledStep holds the value of the ProvisioningScheduledStep edge.
	ProvisioningScheduledStep *ProvisioningScheduledStep `json:"ProvisioningScheduledStep,omitempty"`
	// Status holds the value of the Status edge.
	Status *Status `json:"Status,omitempty"`
	// PlanDiffs holds the value of the PlanDiffs edge.
	PlanDiffs []*PlanDiff `json:"PlanDiffs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// PrevPlansOrErr returns the PrevPlans value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PrevPlansOrErr() ([]*Plan, error) {
	if e.loadedTypes[0] {
		return e.PrevPlans, nil
	}
	return nil, &NotLoadedError{edge: "PrevPlans"}
}

// NextPlansOrErr returns the NextPlans value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) NextPlansOrErr() ([]*Plan, error) {
	if e.loadedTypes[1] {
		return e.NextPlans, nil
	}
	return nil, &NotLoadedError{edge: "NextPlans"}
}

// BuildOrErr returns the Build value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) BuildOrErr() (*Build, error) {
	if e.loadedTypes[2] {
		if e.Build == nil {
			// The edge Build was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.Build, nil
	}
	return nil, &NotLoadedError{edge: "Build"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[3] {
		if e.Team == nil {
			// The edge Team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "Team"}
}

// ProvisionedNetworkOrErr returns the ProvisionedNetwork value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) ProvisionedNetworkOrErr() (*ProvisionedNetwork, error) {
	if e.loadedTypes[4] {
		if e.ProvisionedNetwork == nil {
			// The edge ProvisionedNetwork was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionednetwork.Label}
		}
		return e.ProvisionedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedNetwork"}
}

// ProvisionedHostOrErr returns the ProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) ProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[5] {
		if e.ProvisionedHost == nil {
			// The edge ProvisionedHost was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.ProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedHost"}
}

// ProvisioningStepOrErr returns the ProvisioningStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) ProvisioningStepOrErr() (*ProvisioningStep, error) {
	if e.loadedTypes[6] {
		if e.ProvisioningStep == nil {
			// The edge ProvisioningStep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisioningstep.Label}
		}
		return e.ProvisioningStep, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStep"}
}

// ProvisioningScheduledStepOrErr returns the ProvisioningScheduledStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) ProvisioningScheduledStepOrErr() (*ProvisioningScheduledStep, error) {
	if e.loadedTypes[7] {
		if e.ProvisioningScheduledStep == nil {
			// The edge ProvisioningScheduledStep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisioningscheduledstep.Label}
		}
		return e.ProvisioningScheduledStep, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStep"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) StatusOrErr() (*Status, error) {
	if e.loadedTypes[8] {
		if e.Status == nil {
			// The edge Status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "Status"}
}

// PlanDiffsOrErr returns the PlanDiffs value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PlanDiffsOrErr() ([]*PlanDiff, error) {
	if e.loadedTypes[9] {
		return e.PlanDiffs, nil
	}
	return nil, &NotLoadedError{edge: "PlanDiffs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldStepNumber:
			values[i] = new(sql.NullInt64)
		case plan.FieldType:
			values[i] = new(sql.NullString)
		case plan.FieldID:
			values[i] = new(uuid.UUID)
		case plan.ForeignKeys[0]: // plan_build
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Plan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case plan.FieldStepNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step_number", values[i])
			} else if value.Valid {
				pl.StepNumber = int(value.Int64)
			}
		case plan.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pl.Type = plan.Type(value.String)
			}
		case plan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_build", values[i])
			} else if value.Valid {
				pl.plan_build = new(uuid.UUID)
				*pl.plan_build = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryPrevPlans queries the "PrevPlans" edge of the Plan entity.
func (pl *Plan) QueryPrevPlans() *PlanQuery {
	return (&PlanClient{config: pl.config}).QueryPrevPlans(pl)
}

// QueryNextPlans queries the "NextPlans" edge of the Plan entity.
func (pl *Plan) QueryNextPlans() *PlanQuery {
	return (&PlanClient{config: pl.config}).QueryNextPlans(pl)
}

// QueryBuild queries the "Build" edge of the Plan entity.
func (pl *Plan) QueryBuild() *BuildQuery {
	return (&PlanClient{config: pl.config}).QueryBuild(pl)
}

// QueryTeam queries the "Team" edge of the Plan entity.
func (pl *Plan) QueryTeam() *TeamQuery {
	return (&PlanClient{config: pl.config}).QueryTeam(pl)
}

// QueryProvisionedNetwork queries the "ProvisionedNetwork" edge of the Plan entity.
func (pl *Plan) QueryProvisionedNetwork() *ProvisionedNetworkQuery {
	return (&PlanClient{config: pl.config}).QueryProvisionedNetwork(pl)
}

// QueryProvisionedHost queries the "ProvisionedHost" edge of the Plan entity.
func (pl *Plan) QueryProvisionedHost() *ProvisionedHostQuery {
	return (&PlanClient{config: pl.config}).QueryProvisionedHost(pl)
}

// QueryProvisioningStep queries the "ProvisioningStep" edge of the Plan entity.
func (pl *Plan) QueryProvisioningStep() *ProvisioningStepQuery {
	return (&PlanClient{config: pl.config}).QueryProvisioningStep(pl)
}

// QueryProvisioningScheduledStep queries the "ProvisioningScheduledStep" edge of the Plan entity.
func (pl *Plan) QueryProvisioningScheduledStep() *ProvisioningScheduledStepQuery {
	return (&PlanClient{config: pl.config}).QueryProvisioningScheduledStep(pl)
}

// QueryStatus queries the "Status" edge of the Plan entity.
func (pl *Plan) QueryStatus() *StatusQuery {
	return (&PlanClient{config: pl.config}).QueryStatus(pl)
}

// QueryPlanDiffs queries the "PlanDiffs" edge of the Plan entity.
func (pl *Plan) QueryPlanDiffs() *PlanDiffQuery {
	return (&PlanClient{config: pl.config}).QueryPlanDiffs(pl)
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return (&PlanClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", step_number=")
	builder.WriteString(fmt.Sprintf("%v", pl.StepNumber))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", pl.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Plans is a parsable slice of Plan.
type Plans []*Plan

func (pl Plans) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
