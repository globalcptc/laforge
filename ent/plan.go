// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StepNumber holds the value of the "step_number" field.
	StepNumber int `json:"step_number,omitempty"`
	// Type holds the value of the "type" field.
	Type plan.Type `json:"type,omitempty"`
	// BuildID holds the value of the "build_id" field.
	BuildID string `json:"build_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges PlanEdges `json:"edges"`

	// vvvvvvvvvvvv CUSTOM vvvvvvvvvvvv
	// Edges put into the main struct to be loaded via hcl
	// PrevPlan holds the value of the PrevPlan edge.
	HCLPrevPlan []*Plan `json:"PrevPlan,omitempty"`
	// NextPlan holds the value of the NextPlan edge.
	HCLNextPlan []*Plan `json:"NextPlan,omitempty"`
	// PlanToBuild holds the value of the PlanToBuild edge.
	HCLPlanToBuild *Build `json:"PlanToBuild,omitempty"`
	// PlanToTeam holds the value of the PlanToTeam edge.
	HCLPlanToTeam *Team `json:"PlanToTeam,omitempty"`
	// PlanToProvisionedNetwork holds the value of the PlanToProvisionedNetwork edge.
	HCLPlanToProvisionedNetwork *ProvisionedNetwork `json:"PlanToProvisionedNetwork,omitempty"`
	// PlanToProvisionedHost holds the value of the PlanToProvisionedHost edge.
	HCLPlanToProvisionedHost *ProvisionedHost `json:"PlanToProvisionedHost,omitempty"`
	// PlanToProvisioningStep holds the value of the PlanToProvisioningStep edge.
	HCLPlanToProvisioningStep *ProvisioningStep `json:"PlanToProvisioningStep,omitempty"`
	// PlanToStatus holds the value of the PlanToStatus edge.
	HCLPlanToStatus *Status `json:"PlanToStatus,omitempty"`
	// PlanToPlanDiffs holds the value of the PlanToPlanDiffs edge.
	HCLPlanToPlanDiffs []*PlanDiff `json:"PlanToPlanDiffs,omitempty"`
	// ^^^^^^^^^^^^ CUSTOM ^^^^^^^^^^^^^
	plan_plan_to_build *uuid.UUID
	selectValues       sql.SelectValues
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// PrevPlan holds the value of the PrevPlan edge.
	PrevPlan []*Plan `json:"PrevPlan,omitempty"`
	// NextPlan holds the value of the NextPlan edge.
	NextPlan []*Plan `json:"NextPlan,omitempty"`
	// PlanToBuild holds the value of the PlanToBuild edge.
	PlanToBuild *Build `json:"PlanToBuild,omitempty"`
	// PlanToTeam holds the value of the PlanToTeam edge.
	PlanToTeam *Team `json:"PlanToTeam,omitempty"`
	// PlanToProvisionedNetwork holds the value of the PlanToProvisionedNetwork edge.
	PlanToProvisionedNetwork *ProvisionedNetwork `json:"PlanToProvisionedNetwork,omitempty"`
	// PlanToProvisionedHost holds the value of the PlanToProvisionedHost edge.
	PlanToProvisionedHost *ProvisionedHost `json:"PlanToProvisionedHost,omitempty"`
	// PlanToProvisioningStep holds the value of the PlanToProvisioningStep edge.
	PlanToProvisioningStep *ProvisioningStep `json:"PlanToProvisioningStep,omitempty"`
	// PlanToStatus holds the value of the PlanToStatus edge.
	PlanToStatus *Status `json:"PlanToStatus,omitempty"`
	// PlanToPlanDiffs holds the value of the PlanToPlanDiffs edge.
	PlanToPlanDiffs []*PlanDiff `json:"PlanToPlanDiffs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedPrevPlan        map[string][]*Plan
	namedNextPlan        map[string][]*Plan
	namedPlanToPlanDiffs map[string][]*PlanDiff
}

// PrevPlanOrErr returns the PrevPlan value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PrevPlanOrErr() ([]*Plan, error) {
	if e.loadedTypes[0] {
		return e.PrevPlan, nil
	}
	return nil, &NotLoadedError{edge: "PrevPlan"}
}

// NextPlanOrErr returns the NextPlan value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) NextPlanOrErr() ([]*Plan, error) {
	if e.loadedTypes[1] {
		return e.NextPlan, nil
	}
	return nil, &NotLoadedError{edge: "NextPlan"}
}

// PlanToBuildOrErr returns the PlanToBuild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) PlanToBuildOrErr() (*Build, error) {
	if e.loadedTypes[2] {
		if e.PlanToBuild == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.PlanToBuild, nil
	}
	return nil, &NotLoadedError{edge: "PlanToBuild"}
}

// PlanToTeamOrErr returns the PlanToTeam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) PlanToTeamOrErr() (*Team, error) {
	if e.loadedTypes[3] {
		if e.PlanToTeam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.PlanToTeam, nil
	}
	return nil, &NotLoadedError{edge: "PlanToTeam"}
}

// PlanToProvisionedNetworkOrErr returns the PlanToProvisionedNetwork value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) PlanToProvisionedNetworkOrErr() (*ProvisionedNetwork, error) {
	if e.loadedTypes[4] {
		if e.PlanToProvisionedNetwork == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provisionednetwork.Label}
		}
		return e.PlanToProvisionedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "PlanToProvisionedNetwork"}
}

// PlanToProvisionedHostOrErr returns the PlanToProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) PlanToProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[5] {
		if e.PlanToProvisionedHost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.PlanToProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "PlanToProvisionedHost"}
}

// PlanToProvisioningStepOrErr returns the PlanToProvisioningStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) PlanToProvisioningStepOrErr() (*ProvisioningStep, error) {
	if e.loadedTypes[6] {
		if e.PlanToProvisioningStep == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provisioningstep.Label}
		}
		return e.PlanToProvisioningStep, nil
	}
	return nil, &NotLoadedError{edge: "PlanToProvisioningStep"}
}

// PlanToStatusOrErr returns the PlanToStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) PlanToStatusOrErr() (*Status, error) {
	if e.loadedTypes[7] {
		if e.PlanToStatus == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.PlanToStatus, nil
	}
	return nil, &NotLoadedError{edge: "PlanToStatus"}
}

// PlanToPlanDiffsOrErr returns the PlanToPlanDiffs value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PlanToPlanDiffsOrErr() ([]*PlanDiff, error) {
	if e.loadedTypes[8] {
		return e.PlanToPlanDiffs, nil
	}
	return nil, &NotLoadedError{edge: "PlanToPlanDiffs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldStepNumber:
			values[i] = new(sql.NullInt64)
		case plan.FieldType, plan.FieldBuildID:
			values[i] = new(sql.NullString)
		case plan.FieldID:
			values[i] = new(uuid.UUID)
		case plan.ForeignKeys[0]: // plan_plan_to_build
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case plan.FieldStepNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step_number", values[i])
			} else if value.Valid {
				pl.StepNumber = int(value.Int64)
			}
		case plan.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pl.Type = plan.Type(value.String)
			}
		case plan.FieldBuildID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field build_id", values[i])
			} else if value.Valid {
				pl.BuildID = value.String
			}
		case plan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_plan_to_build", values[i])
			} else if value.Valid {
				pl.plan_plan_to_build = new(uuid.UUID)
				*pl.plan_plan_to_build = *value.S.(*uuid.UUID)
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plan.
// This includes values selected through modifiers, order, etc.
func (pl *Plan) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryPrevPlan queries the "PrevPlan" edge of the Plan entity.
func (pl *Plan) QueryPrevPlan() *PlanQuery {
	return NewPlanClient(pl.config).QueryPrevPlan(pl)
}

// QueryNextPlan queries the "NextPlan" edge of the Plan entity.
func (pl *Plan) QueryNextPlan() *PlanQuery {
	return NewPlanClient(pl.config).QueryNextPlan(pl)
}

// QueryPlanToBuild queries the "PlanToBuild" edge of the Plan entity.
func (pl *Plan) QueryPlanToBuild() *BuildQuery {
	return NewPlanClient(pl.config).QueryPlanToBuild(pl)
}

// QueryPlanToTeam queries the "PlanToTeam" edge of the Plan entity.
func (pl *Plan) QueryPlanToTeam() *TeamQuery {
	return NewPlanClient(pl.config).QueryPlanToTeam(pl)
}

// QueryPlanToProvisionedNetwork queries the "PlanToProvisionedNetwork" edge of the Plan entity.
func (pl *Plan) QueryPlanToProvisionedNetwork() *ProvisionedNetworkQuery {
	return NewPlanClient(pl.config).QueryPlanToProvisionedNetwork(pl)
}

// QueryPlanToProvisionedHost queries the "PlanToProvisionedHost" edge of the Plan entity.
func (pl *Plan) QueryPlanToProvisionedHost() *ProvisionedHostQuery {
	return NewPlanClient(pl.config).QueryPlanToProvisionedHost(pl)
}

// QueryPlanToProvisioningStep queries the "PlanToProvisioningStep" edge of the Plan entity.
func (pl *Plan) QueryPlanToProvisioningStep() *ProvisioningStepQuery {
	return NewPlanClient(pl.config).QueryPlanToProvisioningStep(pl)
}

// QueryPlanToStatus queries the "PlanToStatus" edge of the Plan entity.
func (pl *Plan) QueryPlanToStatus() *StatusQuery {
	return NewPlanClient(pl.config).QueryPlanToStatus(pl)
}

// QueryPlanToPlanDiffs queries the "PlanToPlanDiffs" edge of the Plan entity.
func (pl *Plan) QueryPlanToPlanDiffs() *PlanDiffQuery {
	return NewPlanClient(pl.config).QueryPlanToPlanDiffs(pl)
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return NewPlanClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("step_number=")
	builder.WriteString(fmt.Sprintf("%v", pl.StepNumber))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pl.Type))
	builder.WriteString(", ")
	builder.WriteString("build_id=")
	builder.WriteString(pl.BuildID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPrevPlan returns the PrevPlan named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pl *Plan) NamedPrevPlan(name string) ([]*Plan, error) {
	if pl.Edges.namedPrevPlan == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pl.Edges.namedPrevPlan[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pl *Plan) appendNamedPrevPlan(name string, edges ...*Plan) {
	if pl.Edges.namedPrevPlan == nil {
		pl.Edges.namedPrevPlan = make(map[string][]*Plan)
	}
	if len(edges) == 0 {
		pl.Edges.namedPrevPlan[name] = []*Plan{}
	} else {
		pl.Edges.namedPrevPlan[name] = append(pl.Edges.namedPrevPlan[name], edges...)
	}
}

// NamedNextPlan returns the NextPlan named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pl *Plan) NamedNextPlan(name string) ([]*Plan, error) {
	if pl.Edges.namedNextPlan == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pl.Edges.namedNextPlan[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pl *Plan) appendNamedNextPlan(name string, edges ...*Plan) {
	if pl.Edges.namedNextPlan == nil {
		pl.Edges.namedNextPlan = make(map[string][]*Plan)
	}
	if len(edges) == 0 {
		pl.Edges.namedNextPlan[name] = []*Plan{}
	} else {
		pl.Edges.namedNextPlan[name] = append(pl.Edges.namedNextPlan[name], edges...)
	}
}

// NamedPlanToPlanDiffs returns the PlanToPlanDiffs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pl *Plan) NamedPlanToPlanDiffs(name string) ([]*PlanDiff, error) {
	if pl.Edges.namedPlanToPlanDiffs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pl.Edges.namedPlanToPlanDiffs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pl *Plan) appendNamedPlanToPlanDiffs(name string, edges ...*PlanDiff) {
	if pl.Edges.namedPlanToPlanDiffs == nil {
		pl.Edges.namedPlanToPlanDiffs = make(map[string][]*PlanDiff)
	}
	if len(edges) == 0 {
		pl.Edges.namedPlanToPlanDiffs[name] = []*PlanDiff{}
	} else {
		pl.Edges.namedPlanToPlanDiffs[name] = append(pl.Edges.namedPlanToPlanDiffs[name], edges...)
	}
}

// Plans is a parsable slice of Plan.
type Plans []*Plan
