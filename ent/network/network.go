// Code generated by ent, DO NOT EDIT.

package network

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the network type in the database.
	Label = "network"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCidr holds the string denoting the cidr field in the database.
	FieldCidr = "cidr"
	// FieldVdiVisible holds the string denoting the vdi_visible field in the database.
	FieldVdiVisible = "vdi_visible"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// EdgeHostDependencies holds the string denoting the hostdependencies edge name in mutations.
	EdgeHostDependencies = "HostDependencies"
	// EdgeIncludedNetworks holds the string denoting the includednetworks edge name in mutations.
	EdgeIncludedNetworks = "IncludedNetworks"
	// Table holds the table name of the network in the database.
	Table = "networks"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "networks"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "environment_networks"
	// HostDependenciesTable is the table that holds the HostDependencies relation/edge.
	HostDependenciesTable = "host_dependencies"
	// HostDependenciesInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	HostDependenciesInverseTable = "host_dependencies"
	// HostDependenciesColumn is the table column denoting the HostDependencies relation/edge.
	HostDependenciesColumn = "host_dependency_depend_on_network"
	// IncludedNetworksTable is the table that holds the IncludedNetworks relation/edge.
	IncludedNetworksTable = "included_networks"
	// IncludedNetworksInverseTable is the table name for the IncludedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "includednetwork" package.
	IncludedNetworksInverseTable = "included_networks"
	// IncludedNetworksColumn is the table column denoting the IncludedNetworks relation/edge.
	IncludedNetworksColumn = "included_network_network"
)

// Columns holds all SQL columns for network fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldName,
	FieldCidr,
	FieldVdiVisible,
	FieldVars,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "networks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_networks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Network queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCidr orders the results by the cidr field.
func ByCidr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCidr, opts...).ToFunc()
}

// ByVdiVisible orders the results by the vdi_visible field.
func ByVdiVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVdiVisible, opts...).ToFunc()
}

// ByEnvironmentField orders the results by Environment field.
func ByEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostDependenciesCount orders the results by HostDependencies count.
func ByHostDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostDependenciesStep(), opts...)
	}
}

// ByHostDependencies orders the results by HostDependencies terms.
func ByHostDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedNetworksCount orders the results by IncludedNetworks count.
func ByIncludedNetworksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedNetworksStep(), opts...)
	}
}

// ByIncludedNetworks orders the results by IncludedNetworks terms.
func ByIncludedNetworks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedNetworksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
	)
}
func newHostDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostDependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HostDependenciesTable, HostDependenciesColumn),
	)
}
func newIncludedNetworksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedNetworksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, IncludedNetworksTable, IncludedNetworksColumn),
	)
}
