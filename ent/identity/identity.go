// Code generated by ent, DO NOT EDIT.

package identity

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the identity type in the database.
	Label = "identity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHCLID holds the string denoting the hcl_id field in the database.
	FieldHCLID = "hcl_id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAvatarFile holds the string denoting the avatar_file field in the database.
	FieldAvatarFile = "avatar_file"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeIdentityToEnvironment holds the string denoting the identitytoenvironment edge name in mutations.
	EdgeIdentityToEnvironment = "IdentityToEnvironment"
	// Table holds the table name of the identity in the database.
	Table = "identities"
	// IdentityToEnvironmentTable is the table that holds the IdentityToEnvironment relation/edge.
	IdentityToEnvironmentTable = "identities"
	// IdentityToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	IdentityToEnvironmentInverseTable = "environments"
	// IdentityToEnvironmentColumn is the table column denoting the IdentityToEnvironment relation/edge.
	IdentityToEnvironmentColumn = "environment_environment_to_identity"
)

// Columns holds all SQL columns for identity fields.
var Columns = []string{
	FieldID,
	FieldHCLID,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldDescription,
	FieldAvatarFile,
	FieldVars,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "identities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_environment_to_identity",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Identity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHCLID orders the results by the hcl_id field.
func ByHCLID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHCLID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAvatarFile orders the results by the avatar_file field.
func ByAvatarFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarFile, opts...).ToFunc()
}

// ByIdentityToEnvironmentField orders the results by IdentityToEnvironment field.
func ByIdentityToEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentityToEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}
func newIdentityToEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentityToEnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IdentityToEnvironmentTable, IdentityToEnvironmentColumn),
	)
}
