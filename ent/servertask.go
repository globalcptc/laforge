// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ServerTask is the model entity for the ServerTask schema.
type ServerTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type servertask.Type `json:"type,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Errors holds the value of the "errors" field.
	Errors []string `json:"errors,omitempty"`
	// LogFilePath holds the value of the "log_file_path" field.
	LogFilePath string `json:"log_file_path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerTaskQuery when eager-loading is set.
	Edges ServerTaskEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// AuthUser holds the value of the AuthUser edge.
	HCLAuthUser *AuthUser `json:"AuthUser,omitempty"`
	// Status holds the value of the Status edge.
	HCLStatus *Status `json:"Status,omitempty"`
	// Environment holds the value of the Environment edge.
	HCLEnvironment *Environment `json:"Environment,omitempty"`
	// Build holds the value of the Build edge.
	HCLBuild *Build `json:"Build,omitempty"`
	// BuildCommit holds the value of the BuildCommit edge.
	HCLBuildCommit *BuildCommit `json:"BuildCommit,omitempty"`
	// GinFileMiddleware holds the value of the GinFileMiddleware edge.
	HCLGinFileMiddleware []*GinFileMiddleware `json:"GinFileMiddleware,omitempty"`
	//
	server_task_auth_user    *uuid.UUID
	server_task_environment  *uuid.UUID
	server_task_build        *uuid.UUID
	server_task_build_commit *uuid.UUID
}

// ServerTaskEdges holds the relations/edges for other nodes in the graph.
type ServerTaskEdges struct {
	// AuthUser holds the value of the AuthUser edge.
	AuthUser *AuthUser `json:"AuthUser,omitempty"`
	// Status holds the value of the Status edge.
	Status *Status `json:"Status,omitempty"`
	// Environment holds the value of the Environment edge.
	Environment *Environment `json:"Environment,omitempty"`
	// Build holds the value of the Build edge.
	Build *Build `json:"Build,omitempty"`
	// BuildCommit holds the value of the BuildCommit edge.
	BuildCommit *BuildCommit `json:"BuildCommit,omitempty"`
	// GinFileMiddleware holds the value of the GinFileMiddleware edge.
	GinFileMiddleware []*GinFileMiddleware `json:"GinFileMiddleware,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// AuthUserOrErr returns the AuthUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerTaskEdges) AuthUserOrErr() (*AuthUser, error) {
	if e.loadedTypes[0] {
		if e.AuthUser == nil {
			// The edge AuthUser was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: authuser.Label}
		}
		return e.AuthUser, nil
	}
	return nil, &NotLoadedError{edge: "AuthUser"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerTaskEdges) StatusOrErr() (*Status, error) {
	if e.loadedTypes[1] {
		if e.Status == nil {
			// The edge Status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "Status"}
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerTaskEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[2] {
		if e.Environment == nil {
			// The edge Environment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "Environment"}
}

// BuildOrErr returns the Build value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerTaskEdges) BuildOrErr() (*Build, error) {
	if e.loadedTypes[3] {
		if e.Build == nil {
			// The edge Build was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.Build, nil
	}
	return nil, &NotLoadedError{edge: "Build"}
}

// BuildCommitOrErr returns the BuildCommit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerTaskEdges) BuildCommitOrErr() (*BuildCommit, error) {
	if e.loadedTypes[4] {
		if e.BuildCommit == nil {
			// The edge BuildCommit was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: buildcommit.Label}
		}
		return e.BuildCommit, nil
	}
	return nil, &NotLoadedError{edge: "BuildCommit"}
}

// GinFileMiddlewareOrErr returns the GinFileMiddleware value or an error if the edge
// was not loaded in eager-loading.
func (e ServerTaskEdges) GinFileMiddlewareOrErr() ([]*GinFileMiddleware, error) {
	if e.loadedTypes[5] {
		return e.GinFileMiddleware, nil
	}
	return nil, &NotLoadedError{edge: "GinFileMiddleware"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerTask) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case servertask.FieldErrors:
			values[i] = new([]byte)
		case servertask.FieldType, servertask.FieldLogFilePath:
			values[i] = new(sql.NullString)
		case servertask.FieldStartTime, servertask.FieldEndTime:
			values[i] = new(sql.NullTime)
		case servertask.FieldID:
			values[i] = new(uuid.UUID)
		case servertask.ForeignKeys[0]: // server_task_auth_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case servertask.ForeignKeys[1]: // server_task_environment
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case servertask.ForeignKeys[2]: // server_task_build
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case servertask.ForeignKeys[3]: // server_task_build_commit
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServerTask", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerTask fields.
func (st *ServerTask) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servertask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case servertask.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				st.Type = servertask.Type(value.String)
			}
		case servertask.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				st.StartTime = value.Time
			}
		case servertask.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				st.EndTime = value.Time
			}
		case servertask.FieldErrors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field errors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.Errors); err != nil {
					return fmt.Errorf("unmarshal field errors: %w", err)
				}
			}
		case servertask.FieldLogFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log_file_path", values[i])
			} else if value.Valid {
				st.LogFilePath = value.String
			}
		case servertask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_task_auth_user", values[i])
			} else if value.Valid {
				st.server_task_auth_user = new(uuid.UUID)
				*st.server_task_auth_user = *value.S.(*uuid.UUID)
			}
		case servertask.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_task_environment", values[i])
			} else if value.Valid {
				st.server_task_environment = new(uuid.UUID)
				*st.server_task_environment = *value.S.(*uuid.UUID)
			}
		case servertask.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_task_build", values[i])
			} else if value.Valid {
				st.server_task_build = new(uuid.UUID)
				*st.server_task_build = *value.S.(*uuid.UUID)
			}
		case servertask.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_task_build_commit", values[i])
			} else if value.Valid {
				st.server_task_build_commit = new(uuid.UUID)
				*st.server_task_build_commit = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryAuthUser queries the "AuthUser" edge of the ServerTask entity.
func (st *ServerTask) QueryAuthUser() *AuthUserQuery {
	return (&ServerTaskClient{config: st.config}).QueryAuthUser(st)
}

// QueryStatus queries the "Status" edge of the ServerTask entity.
func (st *ServerTask) QueryStatus() *StatusQuery {
	return (&ServerTaskClient{config: st.config}).QueryStatus(st)
}

// QueryEnvironment queries the "Environment" edge of the ServerTask entity.
func (st *ServerTask) QueryEnvironment() *EnvironmentQuery {
	return (&ServerTaskClient{config: st.config}).QueryEnvironment(st)
}

// QueryBuild queries the "Build" edge of the ServerTask entity.
func (st *ServerTask) QueryBuild() *BuildQuery {
	return (&ServerTaskClient{config: st.config}).QueryBuild(st)
}

// QueryBuildCommit queries the "BuildCommit" edge of the ServerTask entity.
func (st *ServerTask) QueryBuildCommit() *BuildCommitQuery {
	return (&ServerTaskClient{config: st.config}).QueryBuildCommit(st)
}

// QueryGinFileMiddleware queries the "GinFileMiddleware" edge of the ServerTask entity.
func (st *ServerTask) QueryGinFileMiddleware() *GinFileMiddlewareQuery {
	return (&ServerTaskClient{config: st.config}).QueryGinFileMiddleware(st)
}

// Update returns a builder for updating this ServerTask.
// Note that you need to call ServerTask.Unwrap() before calling this method if this ServerTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ServerTask) Update() *ServerTaskUpdateOne {
	return (&ServerTaskClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the ServerTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ServerTask) Unwrap() *ServerTask {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServerTask is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ServerTask) String() string {
	var builder strings.Builder
	builder.WriteString("ServerTask(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", st.Type))
	builder.WriteString(", start_time=")
	builder.WriteString(st.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(st.EndTime.Format(time.ANSIC))
	builder.WriteString(", errors=")
	builder.WriteString(fmt.Sprintf("%v", st.Errors))
	builder.WriteString(", log_file_path=")
	builder.WriteString(st.LogFilePath)
	builder.WriteByte(')')
	return builder.String()
}

// ServerTasks is a parsable slice of ServerTask.
type ServerTasks []*ServerTask

func (st ServerTasks) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
