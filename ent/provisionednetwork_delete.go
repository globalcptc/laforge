// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
)

// ProvisionedNetworkDelete is the builder for deleting a ProvisionedNetwork entity.
type ProvisionedNetworkDelete struct {
	config
	hooks    []Hook
	mutation *ProvisionedNetworkMutation
}

// Where appends a list predicates to the ProvisionedNetworkDelete builder.
func (pnd *ProvisionedNetworkDelete) Where(ps ...predicate.ProvisionedNetwork) *ProvisionedNetworkDelete {
	pnd.mutation.Where(ps...)
	return pnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pnd *ProvisionedNetworkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pnd.sqlExec, pnd.mutation, pnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pnd *ProvisionedNetworkDelete) ExecX(ctx context.Context) int {
	n, err := pnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pnd *ProvisionedNetworkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(provisionednetwork.Table, sqlgraph.NewFieldSpec(provisionednetwork.FieldID, field.TypeUUID))
	if ps := pnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pnd.mutation.done = true
	return affected, err
}

// ProvisionedNetworkDeleteOne is the builder for deleting a single ProvisionedNetwork entity.
type ProvisionedNetworkDeleteOne struct {
	pnd *ProvisionedNetworkDelete
}

// Where appends a list predicates to the ProvisionedNetworkDelete builder.
func (pndo *ProvisionedNetworkDeleteOne) Where(ps ...predicate.ProvisionedNetwork) *ProvisionedNetworkDeleteOne {
	pndo.pnd.mutation.Where(ps...)
	return pndo
}

// Exec executes the deletion query.
func (pndo *ProvisionedNetworkDeleteOne) Exec(ctx context.Context) error {
	n, err := pndo.pnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{provisionednetwork.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pndo *ProvisionedNetworkDeleteOne) ExecX(ctx context.Context) {
	if err := pndo.Exec(ctx); err != nil {
		panic(err)
	}
}
