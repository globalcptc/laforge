// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/disk"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// DiskUpdate is the builder for updating Disk entities.
type DiskUpdate struct {
	config
	hooks    []Hook
	mutation *DiskMutation
}

// Where appends a list predicates to the DiskUpdate builder.
func (du *DiskUpdate) Where(ps ...predicate.Disk) *DiskUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetSize sets the "size" field.
func (du *DiskUpdate) SetSize(i int) *DiskUpdate {
	du.mutation.ResetSize()
	du.mutation.SetSize(i)
	return du
}

// AddSize adds i to the "size" field.
func (du *DiskUpdate) AddSize(i int) *DiskUpdate {
	du.mutation.AddSize(i)
	return du
}

// SetHostID sets the "Host" edge to the Host entity by ID.
func (du *DiskUpdate) SetHostID(id uuid.UUID) *DiskUpdate {
	du.mutation.SetHostID(id)
	return du
}

// SetNillableHostID sets the "Host" edge to the Host entity by ID if the given value is not nil.
func (du *DiskUpdate) SetNillableHostID(id *uuid.UUID) *DiskUpdate {
	if id != nil {
		du = du.SetHostID(*id)
	}
	return du
}

// SetHost sets the "Host" edge to the Host entity.
func (du *DiskUpdate) SetHost(h *Host) *DiskUpdate {
	return du.SetHostID(h.ID)
}

// Mutation returns the DiskMutation object of the builder.
func (du *DiskUpdate) Mutation() *DiskMutation {
	return du.mutation
}

// ClearHost clears the "Host" edge to the Host entity.
func (du *DiskUpdate) ClearHost() *DiskUpdate {
	du.mutation.ClearHost()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiskUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiskUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiskUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DiskUpdate) check() error {
	if v, ok := du.mutation.Size(); ok {
		if err := disk.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Disk.size": %w`, err)}
		}
	}
	return nil
}

func (du *DiskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disk.Table,
			Columns: disk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: disk.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disk.FieldSize,
		})
	}
	if value, ok := du.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disk.FieldSize,
		})
	}
	if du.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   disk.HostTable,
			Columns: []string{disk.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   disk.HostTable,
			Columns: []string{disk.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DiskUpdateOne is the builder for updating a single Disk entity.
type DiskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiskMutation
}

// SetSize sets the "size" field.
func (duo *DiskUpdateOne) SetSize(i int) *DiskUpdateOne {
	duo.mutation.ResetSize()
	duo.mutation.SetSize(i)
	return duo
}

// AddSize adds i to the "size" field.
func (duo *DiskUpdateOne) AddSize(i int) *DiskUpdateOne {
	duo.mutation.AddSize(i)
	return duo
}

// SetHostID sets the "Host" edge to the Host entity by ID.
func (duo *DiskUpdateOne) SetHostID(id uuid.UUID) *DiskUpdateOne {
	duo.mutation.SetHostID(id)
	return duo
}

// SetNillableHostID sets the "Host" edge to the Host entity by ID if the given value is not nil.
func (duo *DiskUpdateOne) SetNillableHostID(id *uuid.UUID) *DiskUpdateOne {
	if id != nil {
		duo = duo.SetHostID(*id)
	}
	return duo
}

// SetHost sets the "Host" edge to the Host entity.
func (duo *DiskUpdateOne) SetHost(h *Host) *DiskUpdateOne {
	return duo.SetHostID(h.ID)
}

// Mutation returns the DiskMutation object of the builder.
func (duo *DiskUpdateOne) Mutation() *DiskMutation {
	return duo.mutation
}

// ClearHost clears the "Host" edge to the Host entity.
func (duo *DiskUpdateOne) ClearHost() *DiskUpdateOne {
	duo.mutation.ClearHost()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiskUpdateOne) Select(field string, fields ...string) *DiskUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Disk entity.
func (duo *DiskUpdateOne) Save(ctx context.Context) (*Disk, error) {
	var (
		err  error
		node *Disk
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Disk)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DiskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiskUpdateOne) SaveX(ctx context.Context) *Disk {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiskUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiskUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DiskUpdateOne) check() error {
	if v, ok := duo.mutation.Size(); ok {
		if err := disk.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Disk.size": %w`, err)}
		}
	}
	return nil
}

func (duo *DiskUpdateOne) sqlSave(ctx context.Context) (_node *Disk, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disk.Table,
			Columns: disk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: disk.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Disk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, disk.FieldID)
		for _, f := range fields {
			if !disk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != disk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disk.FieldSize,
		})
	}
	if value, ok := duo.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disk.FieldSize,
		})
	}
	if duo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   disk.HostTable,
			Columns: []string{disk.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   disk.HostTable,
			Columns: []string{disk.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Disk{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
