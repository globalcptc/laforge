// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// DNSRecordUpdate is the builder for updating DNSRecord entities.
type DNSRecordUpdate struct {
	config
	hooks    []Hook
	mutation *DNSRecordMutation
}

// Where appends a list predicates to the DNSRecordUpdate builder.
func (dru *DNSRecordUpdate) Where(ps ...predicate.DNSRecord) *DNSRecordUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetHCLID sets the "hcl_id" field.
func (dru *DNSRecordUpdate) SetHCLID(s string) *DNSRecordUpdate {
	dru.mutation.SetHCLID(s)
	return dru
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (dru *DNSRecordUpdate) SetNillableHCLID(s *string) *DNSRecordUpdate {
	if s != nil {
		dru.SetHCLID(*s)
	}
	return dru
}

// SetName sets the "name" field.
func (dru *DNSRecordUpdate) SetName(s string) *DNSRecordUpdate {
	dru.mutation.SetName(s)
	return dru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dru *DNSRecordUpdate) SetNillableName(s *string) *DNSRecordUpdate {
	if s != nil {
		dru.SetName(*s)
	}
	return dru
}

// SetValues sets the "values" field.
func (dru *DNSRecordUpdate) SetValues(s []string) *DNSRecordUpdate {
	dru.mutation.SetValues(s)
	return dru
}

// AppendValues appends s to the "values" field.
func (dru *DNSRecordUpdate) AppendValues(s []string) *DNSRecordUpdate {
	dru.mutation.AppendValues(s)
	return dru
}

// SetType sets the "type" field.
func (dru *DNSRecordUpdate) SetType(s string) *DNSRecordUpdate {
	dru.mutation.SetType(s)
	return dru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dru *DNSRecordUpdate) SetNillableType(s *string) *DNSRecordUpdate {
	if s != nil {
		dru.SetType(*s)
	}
	return dru
}

// SetZone sets the "zone" field.
func (dru *DNSRecordUpdate) SetZone(s string) *DNSRecordUpdate {
	dru.mutation.SetZone(s)
	return dru
}

// SetNillableZone sets the "zone" field if the given value is not nil.
func (dru *DNSRecordUpdate) SetNillableZone(s *string) *DNSRecordUpdate {
	if s != nil {
		dru.SetZone(*s)
	}
	return dru
}

// SetVars sets the "vars" field.
func (dru *DNSRecordUpdate) SetVars(m map[string]string) *DNSRecordUpdate {
	dru.mutation.SetVars(m)
	return dru
}

// SetDisabled sets the "disabled" field.
func (dru *DNSRecordUpdate) SetDisabled(b bool) *DNSRecordUpdate {
	dru.mutation.SetDisabled(b)
	return dru
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (dru *DNSRecordUpdate) SetNillableDisabled(b *bool) *DNSRecordUpdate {
	if b != nil {
		dru.SetDisabled(*b)
	}
	return dru
}

// SetTags sets the "tags" field.
func (dru *DNSRecordUpdate) SetTags(m map[string]string) *DNSRecordUpdate {
	dru.mutation.SetTags(m)
	return dru
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (dru *DNSRecordUpdate) SetEnvironmentID(id uuid.UUID) *DNSRecordUpdate {
	dru.mutation.SetEnvironmentID(id)
	return dru
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (dru *DNSRecordUpdate) SetNillableEnvironmentID(id *uuid.UUID) *DNSRecordUpdate {
	if id != nil {
		dru = dru.SetEnvironmentID(*id)
	}
	return dru
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (dru *DNSRecordUpdate) SetEnvironment(e *Environment) *DNSRecordUpdate {
	return dru.SetEnvironmentID(e.ID)
}

// Mutation returns the DNSRecordMutation object of the builder.
func (dru *DNSRecordUpdate) Mutation() *DNSRecordMutation {
	return dru.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (dru *DNSRecordUpdate) ClearEnvironment() *DNSRecordUpdate {
	dru.mutation.ClearEnvironment()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DNSRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DNSRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DNSRecordUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DNSRecordUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DNSRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dnsrecord.Table, dnsrecord.Columns, sqlgraph.NewFieldSpec(dnsrecord.FieldID, field.TypeUUID))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.HCLID(); ok {
		_spec.SetField(dnsrecord.FieldHCLID, field.TypeString, value)
	}
	if value, ok := dru.mutation.Name(); ok {
		_spec.SetField(dnsrecord.FieldName, field.TypeString, value)
	}
	if value, ok := dru.mutation.Values(); ok {
		_spec.SetField(dnsrecord.FieldValues, field.TypeJSON, value)
	}
	if value, ok := dru.mutation.AppendedValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsrecord.FieldValues, value)
		})
	}
	if value, ok := dru.mutation.GetType(); ok {
		_spec.SetField(dnsrecord.FieldType, field.TypeString, value)
	}
	if value, ok := dru.mutation.Zone(); ok {
		_spec.SetField(dnsrecord.FieldZone, field.TypeString, value)
	}
	if value, ok := dru.mutation.Vars(); ok {
		_spec.SetField(dnsrecord.FieldVars, field.TypeJSON, value)
	}
	if value, ok := dru.mutation.Disabled(); ok {
		_spec.SetField(dnsrecord.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := dru.mutation.Tags(); ok {
		_spec.SetField(dnsrecord.FieldTags, field.TypeJSON, value)
	}
	if dru.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsrecord.EnvironmentTable,
			Columns: []string{dnsrecord.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsrecord.EnvironmentTable,
			Columns: []string{dnsrecord.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DNSRecordUpdateOne is the builder for updating a single DNSRecord entity.
type DNSRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DNSRecordMutation
}

// SetHCLID sets the "hcl_id" field.
func (druo *DNSRecordUpdateOne) SetHCLID(s string) *DNSRecordUpdateOne {
	druo.mutation.SetHCLID(s)
	return druo
}

// SetNillableHCLID sets the "hcl_id" field if the given value is not nil.
func (druo *DNSRecordUpdateOne) SetNillableHCLID(s *string) *DNSRecordUpdateOne {
	if s != nil {
		druo.SetHCLID(*s)
	}
	return druo
}

// SetName sets the "name" field.
func (druo *DNSRecordUpdateOne) SetName(s string) *DNSRecordUpdateOne {
	druo.mutation.SetName(s)
	return druo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (druo *DNSRecordUpdateOne) SetNillableName(s *string) *DNSRecordUpdateOne {
	if s != nil {
		druo.SetName(*s)
	}
	return druo
}

// SetValues sets the "values" field.
func (druo *DNSRecordUpdateOne) SetValues(s []string) *DNSRecordUpdateOne {
	druo.mutation.SetValues(s)
	return druo
}

// AppendValues appends s to the "values" field.
func (druo *DNSRecordUpdateOne) AppendValues(s []string) *DNSRecordUpdateOne {
	druo.mutation.AppendValues(s)
	return druo
}

// SetType sets the "type" field.
func (druo *DNSRecordUpdateOne) SetType(s string) *DNSRecordUpdateOne {
	druo.mutation.SetType(s)
	return druo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (druo *DNSRecordUpdateOne) SetNillableType(s *string) *DNSRecordUpdateOne {
	if s != nil {
		druo.SetType(*s)
	}
	return druo
}

// SetZone sets the "zone" field.
func (druo *DNSRecordUpdateOne) SetZone(s string) *DNSRecordUpdateOne {
	druo.mutation.SetZone(s)
	return druo
}

// SetNillableZone sets the "zone" field if the given value is not nil.
func (druo *DNSRecordUpdateOne) SetNillableZone(s *string) *DNSRecordUpdateOne {
	if s != nil {
		druo.SetZone(*s)
	}
	return druo
}

// SetVars sets the "vars" field.
func (druo *DNSRecordUpdateOne) SetVars(m map[string]string) *DNSRecordUpdateOne {
	druo.mutation.SetVars(m)
	return druo
}

// SetDisabled sets the "disabled" field.
func (druo *DNSRecordUpdateOne) SetDisabled(b bool) *DNSRecordUpdateOne {
	druo.mutation.SetDisabled(b)
	return druo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (druo *DNSRecordUpdateOne) SetNillableDisabled(b *bool) *DNSRecordUpdateOne {
	if b != nil {
		druo.SetDisabled(*b)
	}
	return druo
}

// SetTags sets the "tags" field.
func (druo *DNSRecordUpdateOne) SetTags(m map[string]string) *DNSRecordUpdateOne {
	druo.mutation.SetTags(m)
	return druo
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (druo *DNSRecordUpdateOne) SetEnvironmentID(id uuid.UUID) *DNSRecordUpdateOne {
	druo.mutation.SetEnvironmentID(id)
	return druo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (druo *DNSRecordUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *DNSRecordUpdateOne {
	if id != nil {
		druo = druo.SetEnvironmentID(*id)
	}
	return druo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (druo *DNSRecordUpdateOne) SetEnvironment(e *Environment) *DNSRecordUpdateOne {
	return druo.SetEnvironmentID(e.ID)
}

// Mutation returns the DNSRecordMutation object of the builder.
func (druo *DNSRecordUpdateOne) Mutation() *DNSRecordMutation {
	return druo.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (druo *DNSRecordUpdateOne) ClearEnvironment() *DNSRecordUpdateOne {
	druo.mutation.ClearEnvironment()
	return druo
}

// Where appends a list predicates to the DNSRecordUpdate builder.
func (druo *DNSRecordUpdateOne) Where(ps ...predicate.DNSRecord) *DNSRecordUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DNSRecordUpdateOne) Select(field string, fields ...string) *DNSRecordUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DNSRecord entity.
func (druo *DNSRecordUpdateOne) Save(ctx context.Context) (*DNSRecord, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DNSRecordUpdateOne) SaveX(ctx context.Context) *DNSRecord {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DNSRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DNSRecordUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DNSRecordUpdateOne) sqlSave(ctx context.Context) (_node *DNSRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(dnsrecord.Table, dnsrecord.Columns, sqlgraph.NewFieldSpec(dnsrecord.FieldID, field.TypeUUID))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DNSRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnsrecord.FieldID)
		for _, f := range fields {
			if !dnsrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dnsrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.HCLID(); ok {
		_spec.SetField(dnsrecord.FieldHCLID, field.TypeString, value)
	}
	if value, ok := druo.mutation.Name(); ok {
		_spec.SetField(dnsrecord.FieldName, field.TypeString, value)
	}
	if value, ok := druo.mutation.Values(); ok {
		_spec.SetField(dnsrecord.FieldValues, field.TypeJSON, value)
	}
	if value, ok := druo.mutation.AppendedValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsrecord.FieldValues, value)
		})
	}
	if value, ok := druo.mutation.GetType(); ok {
		_spec.SetField(dnsrecord.FieldType, field.TypeString, value)
	}
	if value, ok := druo.mutation.Zone(); ok {
		_spec.SetField(dnsrecord.FieldZone, field.TypeString, value)
	}
	if value, ok := druo.mutation.Vars(); ok {
		_spec.SetField(dnsrecord.FieldVars, field.TypeJSON, value)
	}
	if value, ok := druo.mutation.Disabled(); ok {
		_spec.SetField(dnsrecord.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := druo.mutation.Tags(); ok {
		_spec.SetField(dnsrecord.FieldTags, field.TypeJSON, value)
	}
	if druo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsrecord.EnvironmentTable,
			Columns: []string{dnsrecord.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsrecord.EnvironmentTable,
			Columns: []string{dnsrecord.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DNSRecord{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
