// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ServerTaskUpdate is the builder for updating ServerTask entities.
type ServerTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ServerTaskMutation
}

// Where appends a list predicates to the ServerTaskUpdate builder.
func (stu *ServerTaskUpdate) Where(ps ...predicate.ServerTask) *ServerTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetType sets the "type" field.
func (stu *ServerTaskUpdate) SetType(s servertask.Type) *ServerTaskUpdate {
	stu.mutation.SetType(s)
	return stu
}

// SetStartTime sets the "start_time" field.
func (stu *ServerTaskUpdate) SetStartTime(t time.Time) *ServerTaskUpdate {
	stu.mutation.SetStartTime(t)
	return stu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableStartTime(t *time.Time) *ServerTaskUpdate {
	if t != nil {
		stu.SetStartTime(*t)
	}
	return stu
}

// ClearStartTime clears the value of the "start_time" field.
func (stu *ServerTaskUpdate) ClearStartTime() *ServerTaskUpdate {
	stu.mutation.ClearStartTime()
	return stu
}

// SetEndTime sets the "end_time" field.
func (stu *ServerTaskUpdate) SetEndTime(t time.Time) *ServerTaskUpdate {
	stu.mutation.SetEndTime(t)
	return stu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableEndTime(t *time.Time) *ServerTaskUpdate {
	if t != nil {
		stu.SetEndTime(*t)
	}
	return stu
}

// ClearEndTime clears the value of the "end_time" field.
func (stu *ServerTaskUpdate) ClearEndTime() *ServerTaskUpdate {
	stu.mutation.ClearEndTime()
	return stu
}

// SetErrors sets the "errors" field.
func (stu *ServerTaskUpdate) SetErrors(s []string) *ServerTaskUpdate {
	stu.mutation.SetErrors(s)
	return stu
}

// ClearErrors clears the value of the "errors" field.
func (stu *ServerTaskUpdate) ClearErrors() *ServerTaskUpdate {
	stu.mutation.ClearErrors()
	return stu
}

// SetLogFilePath sets the "log_file_path" field.
func (stu *ServerTaskUpdate) SetLogFilePath(s string) *ServerTaskUpdate {
	stu.mutation.SetLogFilePath(s)
	return stu
}

// SetNillableLogFilePath sets the "log_file_path" field if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableLogFilePath(s *string) *ServerTaskUpdate {
	if s != nil {
		stu.SetLogFilePath(*s)
	}
	return stu
}

// ClearLogFilePath clears the value of the "log_file_path" field.
func (stu *ServerTaskUpdate) ClearLogFilePath() *ServerTaskUpdate {
	stu.mutation.ClearLogFilePath()
	return stu
}

// SetAuthUserID sets the "AuthUser" edge to the AuthUser entity by ID.
func (stu *ServerTaskUpdate) SetAuthUserID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetAuthUserID(id)
	return stu
}

// SetAuthUser sets the "AuthUser" edge to the AuthUser entity.
func (stu *ServerTaskUpdate) SetAuthUser(a *AuthUser) *ServerTaskUpdate {
	return stu.SetAuthUserID(a.ID)
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (stu *ServerTaskUpdate) SetStatusID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetStatusID(id)
	return stu
}

// SetStatus sets the "Status" edge to the Status entity.
func (stu *ServerTaskUpdate) SetStatus(s *Status) *ServerTaskUpdate {
	return stu.SetStatusID(s.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (stu *ServerTaskUpdate) SetEnvironmentID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetEnvironmentID(id)
	return stu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableEnvironmentID(id *uuid.UUID) *ServerTaskUpdate {
	if id != nil {
		stu = stu.SetEnvironmentID(*id)
	}
	return stu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (stu *ServerTaskUpdate) SetEnvironment(e *Environment) *ServerTaskUpdate {
	return stu.SetEnvironmentID(e.ID)
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (stu *ServerTaskUpdate) SetBuildID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetBuildID(id)
	return stu
}

// SetNillableBuildID sets the "Build" edge to the Build entity by ID if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableBuildID(id *uuid.UUID) *ServerTaskUpdate {
	if id != nil {
		stu = stu.SetBuildID(*id)
	}
	return stu
}

// SetBuild sets the "Build" edge to the Build entity.
func (stu *ServerTaskUpdate) SetBuild(b *Build) *ServerTaskUpdate {
	return stu.SetBuildID(b.ID)
}

// SetBuildCommitID sets the "BuildCommit" edge to the BuildCommit entity by ID.
func (stu *ServerTaskUpdate) SetBuildCommitID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetBuildCommitID(id)
	return stu
}

// SetNillableBuildCommitID sets the "BuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableBuildCommitID(id *uuid.UUID) *ServerTaskUpdate {
	if id != nil {
		stu = stu.SetBuildCommitID(*id)
	}
	return stu
}

// SetBuildCommit sets the "BuildCommit" edge to the BuildCommit entity.
func (stu *ServerTaskUpdate) SetBuildCommit(b *BuildCommit) *ServerTaskUpdate {
	return stu.SetBuildCommitID(b.ID)
}

// AddGinFileMiddlewareIDs adds the "GinFileMiddleware" edge to the GinFileMiddleware entity by IDs.
func (stu *ServerTaskUpdate) AddGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdate {
	stu.mutation.AddGinFileMiddlewareIDs(ids...)
	return stu
}

// AddGinFileMiddleware adds the "GinFileMiddleware" edges to the GinFileMiddleware entity.
func (stu *ServerTaskUpdate) AddGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stu.AddGinFileMiddlewareIDs(ids...)
}

// Mutation returns the ServerTaskMutation object of the builder.
func (stu *ServerTaskUpdate) Mutation() *ServerTaskMutation {
	return stu.mutation
}

// ClearAuthUser clears the "AuthUser" edge to the AuthUser entity.
func (stu *ServerTaskUpdate) ClearAuthUser() *ServerTaskUpdate {
	stu.mutation.ClearAuthUser()
	return stu
}

// ClearStatus clears the "Status" edge to the Status entity.
func (stu *ServerTaskUpdate) ClearStatus() *ServerTaskUpdate {
	stu.mutation.ClearStatus()
	return stu
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (stu *ServerTaskUpdate) ClearEnvironment() *ServerTaskUpdate {
	stu.mutation.ClearEnvironment()
	return stu
}

// ClearBuild clears the "Build" edge to the Build entity.
func (stu *ServerTaskUpdate) ClearBuild() *ServerTaskUpdate {
	stu.mutation.ClearBuild()
	return stu
}

// ClearBuildCommit clears the "BuildCommit" edge to the BuildCommit entity.
func (stu *ServerTaskUpdate) ClearBuildCommit() *ServerTaskUpdate {
	stu.mutation.ClearBuildCommit()
	return stu
}

// ClearGinFileMiddleware clears all "GinFileMiddleware" edges to the GinFileMiddleware entity.
func (stu *ServerTaskUpdate) ClearGinFileMiddleware() *ServerTaskUpdate {
	stu.mutation.ClearGinFileMiddleware()
	return stu
}

// RemoveGinFileMiddlewareIDs removes the "GinFileMiddleware" edge to GinFileMiddleware entities by IDs.
func (stu *ServerTaskUpdate) RemoveGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdate {
	stu.mutation.RemoveGinFileMiddlewareIDs(ids...)
	return stu
}

// RemoveGinFileMiddleware removes "GinFileMiddleware" edges to GinFileMiddleware entities.
func (stu *ServerTaskUpdate) RemoveGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stu.RemoveGinFileMiddlewareIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServerTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		if err = stu.check(); err != nil {
			return 0, err
		}
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stu.check(); err != nil {
				return 0, err
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServerTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServerTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServerTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ServerTaskUpdate) check() error {
	if v, ok := stu.mutation.GetType(); ok {
		if err := servertask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ServerTask.type": %w`, err)}
		}
	}
	if _, ok := stu.mutation.AuthUserID(); stu.mutation.AuthUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.AuthUser"`)
	}
	if _, ok := stu.mutation.StatusID(); stu.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.Status"`)
	}
	return nil
}

func (stu *ServerTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servertask.Table,
			Columns: servertask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servertask.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: servertask.FieldType,
		})
	}
	if value, ok := stu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldStartTime,
		})
	}
	if stu.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldStartTime,
		})
	}
	if value, ok := stu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldEndTime,
		})
	}
	if stu.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldEndTime,
		})
	}
	if value, ok := stu.mutation.Errors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: servertask.FieldErrors,
		})
	}
	if stu.mutation.ErrorsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: servertask.FieldErrors,
		})
	}
	if value, ok := stu.mutation.LogFilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stu.mutation.LogFilePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stu.mutation.AuthUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.AuthUserTable,
			Columns: []string{servertask.AuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.AuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.AuthUserTable,
			Columns: []string{servertask.AuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.StatusTable,
			Columns: []string{servertask.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.StatusTable,
			Columns: []string{servertask.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.EnvironmentTable,
			Columns: []string{servertask.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.EnvironmentTable,
			Columns: []string{servertask.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildTable,
			Columns: []string{servertask.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildTable,
			Columns: []string{servertask.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.BuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildCommitTable,
			Columns: []string{servertask.BuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.BuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildCommitTable,
			Columns: []string{servertask.BuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.GinFileMiddlewareTable,
			Columns: []string{servertask.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedGinFileMiddlewareIDs(); len(nodes) > 0 && !stu.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.GinFileMiddlewareTable,
			Columns: []string{servertask.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.GinFileMiddlewareTable,
			Columns: []string{servertask.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ServerTaskUpdateOne is the builder for updating a single ServerTask entity.
type ServerTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerTaskMutation
}

// SetType sets the "type" field.
func (stuo *ServerTaskUpdateOne) SetType(s servertask.Type) *ServerTaskUpdateOne {
	stuo.mutation.SetType(s)
	return stuo
}

// SetStartTime sets the "start_time" field.
func (stuo *ServerTaskUpdateOne) SetStartTime(t time.Time) *ServerTaskUpdateOne {
	stuo.mutation.SetStartTime(t)
	return stuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableStartTime(t *time.Time) *ServerTaskUpdateOne {
	if t != nil {
		stuo.SetStartTime(*t)
	}
	return stuo
}

// ClearStartTime clears the value of the "start_time" field.
func (stuo *ServerTaskUpdateOne) ClearStartTime() *ServerTaskUpdateOne {
	stuo.mutation.ClearStartTime()
	return stuo
}

// SetEndTime sets the "end_time" field.
func (stuo *ServerTaskUpdateOne) SetEndTime(t time.Time) *ServerTaskUpdateOne {
	stuo.mutation.SetEndTime(t)
	return stuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableEndTime(t *time.Time) *ServerTaskUpdateOne {
	if t != nil {
		stuo.SetEndTime(*t)
	}
	return stuo
}

// ClearEndTime clears the value of the "end_time" field.
func (stuo *ServerTaskUpdateOne) ClearEndTime() *ServerTaskUpdateOne {
	stuo.mutation.ClearEndTime()
	return stuo
}

// SetErrors sets the "errors" field.
func (stuo *ServerTaskUpdateOne) SetErrors(s []string) *ServerTaskUpdateOne {
	stuo.mutation.SetErrors(s)
	return stuo
}

// ClearErrors clears the value of the "errors" field.
func (stuo *ServerTaskUpdateOne) ClearErrors() *ServerTaskUpdateOne {
	stuo.mutation.ClearErrors()
	return stuo
}

// SetLogFilePath sets the "log_file_path" field.
func (stuo *ServerTaskUpdateOne) SetLogFilePath(s string) *ServerTaskUpdateOne {
	stuo.mutation.SetLogFilePath(s)
	return stuo
}

// SetNillableLogFilePath sets the "log_file_path" field if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableLogFilePath(s *string) *ServerTaskUpdateOne {
	if s != nil {
		stuo.SetLogFilePath(*s)
	}
	return stuo
}

// ClearLogFilePath clears the value of the "log_file_path" field.
func (stuo *ServerTaskUpdateOne) ClearLogFilePath() *ServerTaskUpdateOne {
	stuo.mutation.ClearLogFilePath()
	return stuo
}

// SetAuthUserID sets the "AuthUser" edge to the AuthUser entity by ID.
func (stuo *ServerTaskUpdateOne) SetAuthUserID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetAuthUserID(id)
	return stuo
}

// SetAuthUser sets the "AuthUser" edge to the AuthUser entity.
func (stuo *ServerTaskUpdateOne) SetAuthUser(a *AuthUser) *ServerTaskUpdateOne {
	return stuo.SetAuthUserID(a.ID)
}

// SetStatusID sets the "Status" edge to the Status entity by ID.
func (stuo *ServerTaskUpdateOne) SetStatusID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetStatusID(id)
	return stuo
}

// SetStatus sets the "Status" edge to the Status entity.
func (stuo *ServerTaskUpdateOne) SetStatus(s *Status) *ServerTaskUpdateOne {
	return stuo.SetStatusID(s.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (stuo *ServerTaskUpdateOne) SetEnvironmentID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetEnvironmentID(id)
	return stuo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *ServerTaskUpdateOne {
	if id != nil {
		stuo = stuo.SetEnvironmentID(*id)
	}
	return stuo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (stuo *ServerTaskUpdateOne) SetEnvironment(e *Environment) *ServerTaskUpdateOne {
	return stuo.SetEnvironmentID(e.ID)
}

// SetBuildID sets the "Build" edge to the Build entity by ID.
func (stuo *ServerTaskUpdateOne) SetBuildID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetBuildID(id)
	return stuo
}

// SetNillableBuildID sets the "Build" edge to the Build entity by ID if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableBuildID(id *uuid.UUID) *ServerTaskUpdateOne {
	if id != nil {
		stuo = stuo.SetBuildID(*id)
	}
	return stuo
}

// SetBuild sets the "Build" edge to the Build entity.
func (stuo *ServerTaskUpdateOne) SetBuild(b *Build) *ServerTaskUpdateOne {
	return stuo.SetBuildID(b.ID)
}

// SetBuildCommitID sets the "BuildCommit" edge to the BuildCommit entity by ID.
func (stuo *ServerTaskUpdateOne) SetBuildCommitID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetBuildCommitID(id)
	return stuo
}

// SetNillableBuildCommitID sets the "BuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableBuildCommitID(id *uuid.UUID) *ServerTaskUpdateOne {
	if id != nil {
		stuo = stuo.SetBuildCommitID(*id)
	}
	return stuo
}

// SetBuildCommit sets the "BuildCommit" edge to the BuildCommit entity.
func (stuo *ServerTaskUpdateOne) SetBuildCommit(b *BuildCommit) *ServerTaskUpdateOne {
	return stuo.SetBuildCommitID(b.ID)
}

// AddGinFileMiddlewareIDs adds the "GinFileMiddleware" edge to the GinFileMiddleware entity by IDs.
func (stuo *ServerTaskUpdateOne) AddGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.AddGinFileMiddlewareIDs(ids...)
	return stuo
}

// AddGinFileMiddleware adds the "GinFileMiddleware" edges to the GinFileMiddleware entity.
func (stuo *ServerTaskUpdateOne) AddGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stuo.AddGinFileMiddlewareIDs(ids...)
}

// Mutation returns the ServerTaskMutation object of the builder.
func (stuo *ServerTaskUpdateOne) Mutation() *ServerTaskMutation {
	return stuo.mutation
}

// ClearAuthUser clears the "AuthUser" edge to the AuthUser entity.
func (stuo *ServerTaskUpdateOne) ClearAuthUser() *ServerTaskUpdateOne {
	stuo.mutation.ClearAuthUser()
	return stuo
}

// ClearStatus clears the "Status" edge to the Status entity.
func (stuo *ServerTaskUpdateOne) ClearStatus() *ServerTaskUpdateOne {
	stuo.mutation.ClearStatus()
	return stuo
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (stuo *ServerTaskUpdateOne) ClearEnvironment() *ServerTaskUpdateOne {
	stuo.mutation.ClearEnvironment()
	return stuo
}

// ClearBuild clears the "Build" edge to the Build entity.
func (stuo *ServerTaskUpdateOne) ClearBuild() *ServerTaskUpdateOne {
	stuo.mutation.ClearBuild()
	return stuo
}

// ClearBuildCommit clears the "BuildCommit" edge to the BuildCommit entity.
func (stuo *ServerTaskUpdateOne) ClearBuildCommit() *ServerTaskUpdateOne {
	stuo.mutation.ClearBuildCommit()
	return stuo
}

// ClearGinFileMiddleware clears all "GinFileMiddleware" edges to the GinFileMiddleware entity.
func (stuo *ServerTaskUpdateOne) ClearGinFileMiddleware() *ServerTaskUpdateOne {
	stuo.mutation.ClearGinFileMiddleware()
	return stuo
}

// RemoveGinFileMiddlewareIDs removes the "GinFileMiddleware" edge to GinFileMiddleware entities by IDs.
func (stuo *ServerTaskUpdateOne) RemoveGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.RemoveGinFileMiddlewareIDs(ids...)
	return stuo
}

// RemoveGinFileMiddleware removes "GinFileMiddleware" edges to GinFileMiddleware entities.
func (stuo *ServerTaskUpdateOne) RemoveGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stuo.RemoveGinFileMiddlewareIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ServerTaskUpdateOne) Select(field string, fields ...string) *ServerTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ServerTask entity.
func (stuo *ServerTaskUpdateOne) Save(ctx context.Context) (*ServerTask, error) {
	var (
		err  error
		node *ServerTask
	)
	if len(stuo.hooks) == 0 {
		if err = stuo.check(); err != nil {
			return nil, err
		}
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stuo.check(); err != nil {
				return nil, err
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, stuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ServerTask)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ServerTaskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServerTaskUpdateOne) SaveX(ctx context.Context) *ServerTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServerTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServerTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ServerTaskUpdateOne) check() error {
	if v, ok := stuo.mutation.GetType(); ok {
		if err := servertask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ServerTask.type": %w`, err)}
		}
	}
	if _, ok := stuo.mutation.AuthUserID(); stuo.mutation.AuthUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.AuthUser"`)
	}
	if _, ok := stuo.mutation.StatusID(); stuo.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.Status"`)
	}
	return nil
}

func (stuo *ServerTaskUpdateOne) sqlSave(ctx context.Context) (_node *ServerTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servertask.Table,
			Columns: servertask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servertask.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServerTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servertask.FieldID)
		for _, f := range fields {
			if !servertask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: servertask.FieldType,
		})
	}
	if value, ok := stuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldStartTime,
		})
	}
	if stuo.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldStartTime,
		})
	}
	if value, ok := stuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldEndTime,
		})
	}
	if stuo.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldEndTime,
		})
	}
	if value, ok := stuo.mutation.Errors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: servertask.FieldErrors,
		})
	}
	if stuo.mutation.ErrorsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: servertask.FieldErrors,
		})
	}
	if value, ok := stuo.mutation.LogFilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stuo.mutation.LogFilePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stuo.mutation.AuthUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.AuthUserTable,
			Columns: []string{servertask.AuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.AuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.AuthUserTable,
			Columns: []string{servertask.AuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.StatusTable,
			Columns: []string{servertask.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.StatusTable,
			Columns: []string{servertask.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.EnvironmentTable,
			Columns: []string{servertask.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.EnvironmentTable,
			Columns: []string{servertask.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildTable,
			Columns: []string{servertask.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildTable,
			Columns: []string{servertask.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.BuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildCommitTable,
			Columns: []string{servertask.BuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.BuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.BuildCommitTable,
			Columns: []string{servertask.BuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.GinFileMiddlewareTable,
			Columns: []string{servertask.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedGinFileMiddlewareIDs(); len(nodes) > 0 && !stuo.mutation.GinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.GinFileMiddlewareTable,
			Columns: []string{servertask.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.GinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.GinFileMiddlewareTable,
			Columns: []string{servertask.GinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
