// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/repository"
	"github.com/google/uuid"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRepoURL sets the "repo_url" field.
func (ru *RepositoryUpdate) SetRepoURL(s string) *RepositoryUpdate {
	ru.mutation.SetRepoURL(s)
	return ru
}

// SetNillableRepoURL sets the "repo_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableRepoURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetRepoURL(*s)
	}
	return ru
}

// SetBranchName sets the "branch_name" field.
func (ru *RepositoryUpdate) SetBranchName(s string) *RepositoryUpdate {
	ru.mutation.SetBranchName(s)
	return ru
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableBranchName(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetBranchName(*s)
	}
	return ru
}

// SetEnviromentFilepath sets the "enviroment_filepath" field.
func (ru *RepositoryUpdate) SetEnviromentFilepath(s string) *RepositoryUpdate {
	ru.mutation.SetEnviromentFilepath(s)
	return ru
}

// SetNillableEnviromentFilepath sets the "enviroment_filepath" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableEnviromentFilepath(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetEnviromentFilepath(*s)
	}
	return ru
}

// SetFolderPath sets the "folder_path" field.
func (ru *RepositoryUpdate) SetFolderPath(s string) *RepositoryUpdate {
	ru.mutation.SetFolderPath(s)
	return ru
}

// SetNillableFolderPath sets the "folder_path" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableFolderPath(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetFolderPath(*s)
	}
	return ru
}

// AddRepositoryToEnvironmentIDs adds the "RepositoryToEnvironment" edge to the Environment entity by IDs.
func (ru *RepositoryUpdate) AddRepositoryToEnvironmentIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.AddRepositoryToEnvironmentIDs(ids...)
	return ru
}

// AddRepositoryToEnvironment adds the "RepositoryToEnvironment" edges to the Environment entity.
func (ru *RepositoryUpdate) AddRepositoryToEnvironment(e ...*Environment) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddRepositoryToEnvironmentIDs(ids...)
}

// AddRepositoryToRepoCommitIDs adds the "RepositoryToRepoCommit" edge to the RepoCommit entity by IDs.
func (ru *RepositoryUpdate) AddRepositoryToRepoCommitIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.AddRepositoryToRepoCommitIDs(ids...)
	return ru
}

// AddRepositoryToRepoCommit adds the "RepositoryToRepoCommit" edges to the RepoCommit entity.
func (ru *RepositoryUpdate) AddRepositoryToRepoCommit(r ...*RepoCommit) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRepositoryToRepoCommitIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearRepositoryToEnvironment clears all "RepositoryToEnvironment" edges to the Environment entity.
func (ru *RepositoryUpdate) ClearRepositoryToEnvironment() *RepositoryUpdate {
	ru.mutation.ClearRepositoryToEnvironment()
	return ru
}

// RemoveRepositoryToEnvironmentIDs removes the "RepositoryToEnvironment" edge to Environment entities by IDs.
func (ru *RepositoryUpdate) RemoveRepositoryToEnvironmentIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.RemoveRepositoryToEnvironmentIDs(ids...)
	return ru
}

// RemoveRepositoryToEnvironment removes "RepositoryToEnvironment" edges to Environment entities.
func (ru *RepositoryUpdate) RemoveRepositoryToEnvironment(e ...*Environment) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveRepositoryToEnvironmentIDs(ids...)
}

// ClearRepositoryToRepoCommit clears all "RepositoryToRepoCommit" edges to the RepoCommit entity.
func (ru *RepositoryUpdate) ClearRepositoryToRepoCommit() *RepositoryUpdate {
	ru.mutation.ClearRepositoryToRepoCommit()
	return ru
}

// RemoveRepositoryToRepoCommitIDs removes the "RepositoryToRepoCommit" edge to RepoCommit entities by IDs.
func (ru *RepositoryUpdate) RemoveRepositoryToRepoCommitIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.RemoveRepositoryToRepoCommitIDs(ids...)
	return ru
}

// RemoveRepositoryToRepoCommit removes "RepositoryToRepoCommit" edges to RepoCommit entities.
func (ru *RepositoryUpdate) RemoveRepositoryToRepoCommit(r ...*RepoCommit) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRepositoryToRepoCommitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RepoURL(); ok {
		_spec.SetField(repository.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.BranchName(); ok {
		_spec.SetField(repository.FieldBranchName, field.TypeString, value)
	}
	if value, ok := ru.mutation.EnviromentFilepath(); ok {
		_spec.SetField(repository.FieldEnviromentFilepath, field.TypeString, value)
	}
	if value, ok := ru.mutation.FolderPath(); ok {
		_spec.SetField(repository.FieldFolderPath, field.TypeString, value)
	}
	if ru.mutation.RepositoryToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.RepositoryToEnvironmentTable,
			Columns: repository.RepositoryToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRepositoryToEnvironmentIDs(); len(nodes) > 0 && !ru.mutation.RepositoryToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.RepositoryToEnvironmentTable,
			Columns: repository.RepositoryToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RepositoryToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.RepositoryToEnvironmentTable,
			Columns: repository.RepositoryToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RepositoryToRepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.RepositoryToRepoCommitTable,
			Columns: []string{repository.RepositoryToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRepositoryToRepoCommitIDs(); len(nodes) > 0 && !ru.mutation.RepositoryToRepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.RepositoryToRepoCommitTable,
			Columns: []string{repository.RepositoryToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RepositoryToRepoCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.RepositoryToRepoCommitTable,
			Columns: []string{repository.RepositoryToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetRepoURL sets the "repo_url" field.
func (ruo *RepositoryUpdateOne) SetRepoURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetRepoURL(s)
	return ruo
}

// SetNillableRepoURL sets the "repo_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableRepoURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetRepoURL(*s)
	}
	return ruo
}

// SetBranchName sets the "branch_name" field.
func (ruo *RepositoryUpdateOne) SetBranchName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetBranchName(s)
	return ruo
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableBranchName(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetBranchName(*s)
	}
	return ruo
}

// SetEnviromentFilepath sets the "enviroment_filepath" field.
func (ruo *RepositoryUpdateOne) SetEnviromentFilepath(s string) *RepositoryUpdateOne {
	ruo.mutation.SetEnviromentFilepath(s)
	return ruo
}

// SetNillableEnviromentFilepath sets the "enviroment_filepath" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableEnviromentFilepath(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetEnviromentFilepath(*s)
	}
	return ruo
}

// SetFolderPath sets the "folder_path" field.
func (ruo *RepositoryUpdateOne) SetFolderPath(s string) *RepositoryUpdateOne {
	ruo.mutation.SetFolderPath(s)
	return ruo
}

// SetNillableFolderPath sets the "folder_path" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableFolderPath(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetFolderPath(*s)
	}
	return ruo
}

// AddRepositoryToEnvironmentIDs adds the "RepositoryToEnvironment" edge to the Environment entity by IDs.
func (ruo *RepositoryUpdateOne) AddRepositoryToEnvironmentIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.AddRepositoryToEnvironmentIDs(ids...)
	return ruo
}

// AddRepositoryToEnvironment adds the "RepositoryToEnvironment" edges to the Environment entity.
func (ruo *RepositoryUpdateOne) AddRepositoryToEnvironment(e ...*Environment) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddRepositoryToEnvironmentIDs(ids...)
}

// AddRepositoryToRepoCommitIDs adds the "RepositoryToRepoCommit" edge to the RepoCommit entity by IDs.
func (ruo *RepositoryUpdateOne) AddRepositoryToRepoCommitIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.AddRepositoryToRepoCommitIDs(ids...)
	return ruo
}

// AddRepositoryToRepoCommit adds the "RepositoryToRepoCommit" edges to the RepoCommit entity.
func (ruo *RepositoryUpdateOne) AddRepositoryToRepoCommit(r ...*RepoCommit) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRepositoryToRepoCommitIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearRepositoryToEnvironment clears all "RepositoryToEnvironment" edges to the Environment entity.
func (ruo *RepositoryUpdateOne) ClearRepositoryToEnvironment() *RepositoryUpdateOne {
	ruo.mutation.ClearRepositoryToEnvironment()
	return ruo
}

// RemoveRepositoryToEnvironmentIDs removes the "RepositoryToEnvironment" edge to Environment entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveRepositoryToEnvironmentIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.RemoveRepositoryToEnvironmentIDs(ids...)
	return ruo
}

// RemoveRepositoryToEnvironment removes "RepositoryToEnvironment" edges to Environment entities.
func (ruo *RepositoryUpdateOne) RemoveRepositoryToEnvironment(e ...*Environment) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveRepositoryToEnvironmentIDs(ids...)
}

// ClearRepositoryToRepoCommit clears all "RepositoryToRepoCommit" edges to the RepoCommit entity.
func (ruo *RepositoryUpdateOne) ClearRepositoryToRepoCommit() *RepositoryUpdateOne {
	ruo.mutation.ClearRepositoryToRepoCommit()
	return ruo
}

// RemoveRepositoryToRepoCommitIDs removes the "RepositoryToRepoCommit" edge to RepoCommit entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveRepositoryToRepoCommitIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.RemoveRepositoryToRepoCommitIDs(ids...)
	return ruo
}

// RemoveRepositoryToRepoCommit removes "RepositoryToRepoCommit" edges to RepoCommit entities.
func (ruo *RepositoryUpdateOne) RemoveRepositoryToRepoCommit(r ...*RepoCommit) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRepositoryToRepoCommitIDs(ids...)
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ruo *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RepoURL(); ok {
		_spec.SetField(repository.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.BranchName(); ok {
		_spec.SetField(repository.FieldBranchName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.EnviromentFilepath(); ok {
		_spec.SetField(repository.FieldEnviromentFilepath, field.TypeString, value)
	}
	if value, ok := ruo.mutation.FolderPath(); ok {
		_spec.SetField(repository.FieldFolderPath, field.TypeString, value)
	}
	if ruo.mutation.RepositoryToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.RepositoryToEnvironmentTable,
			Columns: repository.RepositoryToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRepositoryToEnvironmentIDs(); len(nodes) > 0 && !ruo.mutation.RepositoryToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.RepositoryToEnvironmentTable,
			Columns: repository.RepositoryToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RepositoryToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repository.RepositoryToEnvironmentTable,
			Columns: repository.RepositoryToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RepositoryToRepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.RepositoryToRepoCommitTable,
			Columns: []string{repository.RepositoryToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRepositoryToRepoCommitIDs(); len(nodes) > 0 && !ruo.mutation.RepositoryToRepoCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.RepositoryToRepoCommitTable,
			Columns: []string{repository.RepositoryToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RepositoryToRepoCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.RepositoryToRepoCommitTable,
			Columns: []string{repository.RepositoryToRepoCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repocommit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
