// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,attr"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty" hcl:"uuid,optional"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty" hcl:"email,attr"`
	// HclID holds the value of the "hcl_id" field.
	HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Tag holds the value of the Tag edge.
	HCLTag []*Tag `json:"Tag,omitempty"`
	// Environments holds the value of the Environments edge.
	HCLEnvironments []*Environment `json:"Environments,omitempty"`
	//
	ansible_users *uuid.UUID
	command_users *uuid.UUID
	finding_users *uuid.UUID
	host_users    *uuid.UUID
	script_users  *uuid.UUID
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Tag holds the value of the Tag edge.
	Tag []*Tag `json:"Tag,omitempty"`
	// Environments holds the value of the Environments edge.
	Environments []*Environment `json:"Environments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "Tag"}
}

// EnvironmentsOrErr returns the Environments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EnvironmentsOrErr() ([]*Environment, error) {
	if e.loadedTypes[1] {
		return e.Environments, nil
	}
	return nil, &NotLoadedError{edge: "Environments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldName, user.FieldUUID, user.FieldEmail, user.FieldHclID:
			values[i] = new(sql.NullString)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		case user.ForeignKeys[0]: // ansible_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case user.ForeignKeys[1]: // command_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case user.ForeignKeys[2]: // finding_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case user.ForeignKeys[3]: // host_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case user.ForeignKeys[4]: // script_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				u.UUID = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldHclID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hcl_id", values[i])
			} else if value.Valid {
				u.HclID = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field ansible_users", values[i])
			} else if value.Valid {
				u.ansible_users = new(uuid.UUID)
				*u.ansible_users = *value.S.(*uuid.UUID)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field command_users", values[i])
			} else if value.Valid {
				u.command_users = new(uuid.UUID)
				*u.command_users = *value.S.(*uuid.UUID)
			}
		case user.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field finding_users", values[i])
			} else if value.Valid {
				u.finding_users = new(uuid.UUID)
				*u.finding_users = *value.S.(*uuid.UUID)
			}
		case user.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field host_users", values[i])
			} else if value.Valid {
				u.host_users = new(uuid.UUID)
				*u.host_users = *value.S.(*uuid.UUID)
			}
		case user.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field script_users", values[i])
			} else if value.Valid {
				u.script_users = new(uuid.UUID)
				*u.script_users = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTag queries the "Tag" edge of the User entity.
func (u *User) QueryTag() *TagQuery {
	return (&UserClient{config: u.config}).QueryTag(u)
}

// QueryEnvironments queries the "Environments" edge of the User entity.
func (u *User) QueryEnvironments() *EnvironmentQuery {
	return (&UserClient{config: u.config}).QueryEnvironments(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", uuid=")
	builder.WriteString(u.UUID)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", hcl_id=")
	builder.WriteString(u.HclID)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
