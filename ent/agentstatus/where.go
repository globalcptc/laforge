// Code generated by ent, DO NOT EDIT.

package agentstatus

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ClientID applies equality check predicate on the "ClientID" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// Hostname applies equality check predicate on the "Hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// UpTime applies equality check predicate on the "UpTime" field. It's identical to UpTimeEQ.
func UpTime(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpTime), v))
	})
}

// BootTime applies equality check predicate on the "BootTime" field. It's identical to BootTimeEQ.
func BootTime(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBootTime), v))
	})
}

// NumProcs applies equality check predicate on the "NumProcs" field. It's identical to NumProcsEQ.
func NumProcs(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumProcs), v))
	})
}

// Os applies equality check predicate on the "Os" field. It's identical to OsEQ.
func Os(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// HostID applies equality check predicate on the "HostID" field. It's identical to HostIDEQ.
func HostID(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostID), v))
	})
}

// Load1 applies equality check predicate on the "Load1" field. It's identical to Load1EQ.
func Load1(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad1), v))
	})
}

// Load5 applies equality check predicate on the "Load5" field. It's identical to Load5EQ.
func Load5(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad5), v))
	})
}

// Load15 applies equality check predicate on the "Load15" field. It's identical to Load15EQ.
func Load15(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad15), v))
	})
}

// TotalMem applies equality check predicate on the "TotalMem" field. It's identical to TotalMemEQ.
func TotalMem(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalMem), v))
	})
}

// FreeMem applies equality check predicate on the "FreeMem" field. It's identical to FreeMemEQ.
func FreeMem(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeMem), v))
	})
}

// UsedMem applies equality check predicate on the "UsedMem" field. It's identical to UsedMemEQ.
func UsedMem(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedMem), v))
	})
}

// Timestamp applies equality check predicate on the "Timestamp" field. It's identical to TimestampEQ.
func Timestamp(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// ClientIDEQ applies the EQ predicate on the "ClientID" field.
func ClientIDEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// ClientIDNEQ applies the NEQ predicate on the "ClientID" field.
func ClientIDNEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientID), v))
	})
}

// ClientIDIn applies the In predicate on the "ClientID" field.
func ClientIDIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClientID), v...))
	})
}

// ClientIDNotIn applies the NotIn predicate on the "ClientID" field.
func ClientIDNotIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClientID), v...))
	})
}

// ClientIDGT applies the GT predicate on the "ClientID" field.
func ClientIDGT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientID), v))
	})
}

// ClientIDGTE applies the GTE predicate on the "ClientID" field.
func ClientIDGTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientID), v))
	})
}

// ClientIDLT applies the LT predicate on the "ClientID" field.
func ClientIDLT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientID), v))
	})
}

// ClientIDLTE applies the LTE predicate on the "ClientID" field.
func ClientIDLTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientID), v))
	})
}

// ClientIDContains applies the Contains predicate on the "ClientID" field.
func ClientIDContains(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientID), v))
	})
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "ClientID" field.
func ClientIDHasPrefix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientID), v))
	})
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "ClientID" field.
func ClientIDHasSuffix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientID), v))
	})
}

// ClientIDEqualFold applies the EqualFold predicate on the "ClientID" field.
func ClientIDEqualFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientID), v))
	})
}

// ClientIDContainsFold applies the ContainsFold predicate on the "ClientID" field.
func ClientIDContainsFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientID), v))
	})
}

// HostnameEQ applies the EQ predicate on the "Hostname" field.
func HostnameEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// HostnameNEQ applies the NEQ predicate on the "Hostname" field.
func HostnameNEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostname), v))
	})
}

// HostnameIn applies the In predicate on the "Hostname" field.
func HostnameIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHostname), v...))
	})
}

// HostnameNotIn applies the NotIn predicate on the "Hostname" field.
func HostnameNotIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHostname), v...))
	})
}

// HostnameGT applies the GT predicate on the "Hostname" field.
func HostnameGT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostname), v))
	})
}

// HostnameGTE applies the GTE predicate on the "Hostname" field.
func HostnameGTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostname), v))
	})
}

// HostnameLT applies the LT predicate on the "Hostname" field.
func HostnameLT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostname), v))
	})
}

// HostnameLTE applies the LTE predicate on the "Hostname" field.
func HostnameLTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostname), v))
	})
}

// HostnameContains applies the Contains predicate on the "Hostname" field.
func HostnameContains(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostname), v))
	})
}

// HostnameHasPrefix applies the HasPrefix predicate on the "Hostname" field.
func HostnameHasPrefix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostname), v))
	})
}

// HostnameHasSuffix applies the HasSuffix predicate on the "Hostname" field.
func HostnameHasSuffix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostname), v))
	})
}

// HostnameEqualFold applies the EqualFold predicate on the "Hostname" field.
func HostnameEqualFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostname), v))
	})
}

// HostnameContainsFold applies the ContainsFold predicate on the "Hostname" field.
func HostnameContainsFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostname), v))
	})
}

// UpTimeEQ applies the EQ predicate on the "UpTime" field.
func UpTimeEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpTime), v))
	})
}

// UpTimeNEQ applies the NEQ predicate on the "UpTime" field.
func UpTimeNEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpTime), v))
	})
}

// UpTimeIn applies the In predicate on the "UpTime" field.
func UpTimeIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpTime), v...))
	})
}

// UpTimeNotIn applies the NotIn predicate on the "UpTime" field.
func UpTimeNotIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpTime), v...))
	})
}

// UpTimeGT applies the GT predicate on the "UpTime" field.
func UpTimeGT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpTime), v))
	})
}

// UpTimeGTE applies the GTE predicate on the "UpTime" field.
func UpTimeGTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpTime), v))
	})
}

// UpTimeLT applies the LT predicate on the "UpTime" field.
func UpTimeLT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpTime), v))
	})
}

// UpTimeLTE applies the LTE predicate on the "UpTime" field.
func UpTimeLTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpTime), v))
	})
}

// BootTimeEQ applies the EQ predicate on the "BootTime" field.
func BootTimeEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBootTime), v))
	})
}

// BootTimeNEQ applies the NEQ predicate on the "BootTime" field.
func BootTimeNEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBootTime), v))
	})
}

// BootTimeIn applies the In predicate on the "BootTime" field.
func BootTimeIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBootTime), v...))
	})
}

// BootTimeNotIn applies the NotIn predicate on the "BootTime" field.
func BootTimeNotIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBootTime), v...))
	})
}

// BootTimeGT applies the GT predicate on the "BootTime" field.
func BootTimeGT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBootTime), v))
	})
}

// BootTimeGTE applies the GTE predicate on the "BootTime" field.
func BootTimeGTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBootTime), v))
	})
}

// BootTimeLT applies the LT predicate on the "BootTime" field.
func BootTimeLT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBootTime), v))
	})
}

// BootTimeLTE applies the LTE predicate on the "BootTime" field.
func BootTimeLTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBootTime), v))
	})
}

// NumProcsEQ applies the EQ predicate on the "NumProcs" field.
func NumProcsEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumProcs), v))
	})
}

// NumProcsNEQ applies the NEQ predicate on the "NumProcs" field.
func NumProcsNEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumProcs), v))
	})
}

// NumProcsIn applies the In predicate on the "NumProcs" field.
func NumProcsIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNumProcs), v...))
	})
}

// NumProcsNotIn applies the NotIn predicate on the "NumProcs" field.
func NumProcsNotIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNumProcs), v...))
	})
}

// NumProcsGT applies the GT predicate on the "NumProcs" field.
func NumProcsGT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumProcs), v))
	})
}

// NumProcsGTE applies the GTE predicate on the "NumProcs" field.
func NumProcsGTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumProcs), v))
	})
}

// NumProcsLT applies the LT predicate on the "NumProcs" field.
func NumProcsLT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumProcs), v))
	})
}

// NumProcsLTE applies the LTE predicate on the "NumProcs" field.
func NumProcsLTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumProcs), v))
	})
}

// OsEQ applies the EQ predicate on the "Os" field.
func OsEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// OsNEQ applies the NEQ predicate on the "Os" field.
func OsNEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOs), v))
	})
}

// OsIn applies the In predicate on the "Os" field.
func OsIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOs), v...))
	})
}

// OsNotIn applies the NotIn predicate on the "Os" field.
func OsNotIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOs), v...))
	})
}

// OsGT applies the GT predicate on the "Os" field.
func OsGT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOs), v))
	})
}

// OsGTE applies the GTE predicate on the "Os" field.
func OsGTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOs), v))
	})
}

// OsLT applies the LT predicate on the "Os" field.
func OsLT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOs), v))
	})
}

// OsLTE applies the LTE predicate on the "Os" field.
func OsLTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOs), v))
	})
}

// OsContains applies the Contains predicate on the "Os" field.
func OsContains(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOs), v))
	})
}

// OsHasPrefix applies the HasPrefix predicate on the "Os" field.
func OsHasPrefix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOs), v))
	})
}

// OsHasSuffix applies the HasSuffix predicate on the "Os" field.
func OsHasSuffix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOs), v))
	})
}

// OsEqualFold applies the EqualFold predicate on the "Os" field.
func OsEqualFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOs), v))
	})
}

// OsContainsFold applies the ContainsFold predicate on the "Os" field.
func OsContainsFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOs), v))
	})
}

// HostIDEQ applies the EQ predicate on the "HostID" field.
func HostIDEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostID), v))
	})
}

// HostIDNEQ applies the NEQ predicate on the "HostID" field.
func HostIDNEQ(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostID), v))
	})
}

// HostIDIn applies the In predicate on the "HostID" field.
func HostIDIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHostID), v...))
	})
}

// HostIDNotIn applies the NotIn predicate on the "HostID" field.
func HostIDNotIn(vs ...string) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHostID), v...))
	})
}

// HostIDGT applies the GT predicate on the "HostID" field.
func HostIDGT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostID), v))
	})
}

// HostIDGTE applies the GTE predicate on the "HostID" field.
func HostIDGTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostID), v))
	})
}

// HostIDLT applies the LT predicate on the "HostID" field.
func HostIDLT(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostID), v))
	})
}

// HostIDLTE applies the LTE predicate on the "HostID" field.
func HostIDLTE(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostID), v))
	})
}

// HostIDContains applies the Contains predicate on the "HostID" field.
func HostIDContains(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostID), v))
	})
}

// HostIDHasPrefix applies the HasPrefix predicate on the "HostID" field.
func HostIDHasPrefix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostID), v))
	})
}

// HostIDHasSuffix applies the HasSuffix predicate on the "HostID" field.
func HostIDHasSuffix(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostID), v))
	})
}

// HostIDEqualFold applies the EqualFold predicate on the "HostID" field.
func HostIDEqualFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostID), v))
	})
}

// HostIDContainsFold applies the ContainsFold predicate on the "HostID" field.
func HostIDContainsFold(v string) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostID), v))
	})
}

// Load1EQ applies the EQ predicate on the "Load1" field.
func Load1EQ(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad1), v))
	})
}

// Load1NEQ applies the NEQ predicate on the "Load1" field.
func Load1NEQ(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoad1), v))
	})
}

// Load1In applies the In predicate on the "Load1" field.
func Load1In(vs ...float64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLoad1), v...))
	})
}

// Load1NotIn applies the NotIn predicate on the "Load1" field.
func Load1NotIn(vs ...float64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLoad1), v...))
	})
}

// Load1GT applies the GT predicate on the "Load1" field.
func Load1GT(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoad1), v))
	})
}

// Load1GTE applies the GTE predicate on the "Load1" field.
func Load1GTE(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoad1), v))
	})
}

// Load1LT applies the LT predicate on the "Load1" field.
func Load1LT(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoad1), v))
	})
}

// Load1LTE applies the LTE predicate on the "Load1" field.
func Load1LTE(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoad1), v))
	})
}

// Load5EQ applies the EQ predicate on the "Load5" field.
func Load5EQ(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad5), v))
	})
}

// Load5NEQ applies the NEQ predicate on the "Load5" field.
func Load5NEQ(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoad5), v))
	})
}

// Load5In applies the In predicate on the "Load5" field.
func Load5In(vs ...float64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLoad5), v...))
	})
}

// Load5NotIn applies the NotIn predicate on the "Load5" field.
func Load5NotIn(vs ...float64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLoad5), v...))
	})
}

// Load5GT applies the GT predicate on the "Load5" field.
func Load5GT(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoad5), v))
	})
}

// Load5GTE applies the GTE predicate on the "Load5" field.
func Load5GTE(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoad5), v))
	})
}

// Load5LT applies the LT predicate on the "Load5" field.
func Load5LT(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoad5), v))
	})
}

// Load5LTE applies the LTE predicate on the "Load5" field.
func Load5LTE(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoad5), v))
	})
}

// Load15EQ applies the EQ predicate on the "Load15" field.
func Load15EQ(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad15), v))
	})
}

// Load15NEQ applies the NEQ predicate on the "Load15" field.
func Load15NEQ(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoad15), v))
	})
}

// Load15In applies the In predicate on the "Load15" field.
func Load15In(vs ...float64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLoad15), v...))
	})
}

// Load15NotIn applies the NotIn predicate on the "Load15" field.
func Load15NotIn(vs ...float64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLoad15), v...))
	})
}

// Load15GT applies the GT predicate on the "Load15" field.
func Load15GT(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoad15), v))
	})
}

// Load15GTE applies the GTE predicate on the "Load15" field.
func Load15GTE(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoad15), v))
	})
}

// Load15LT applies the LT predicate on the "Load15" field.
func Load15LT(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoad15), v))
	})
}

// Load15LTE applies the LTE predicate on the "Load15" field.
func Load15LTE(v float64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoad15), v))
	})
}

// TotalMemEQ applies the EQ predicate on the "TotalMem" field.
func TotalMemEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalMem), v))
	})
}

// TotalMemNEQ applies the NEQ predicate on the "TotalMem" field.
func TotalMemNEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalMem), v))
	})
}

// TotalMemIn applies the In predicate on the "TotalMem" field.
func TotalMemIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalMem), v...))
	})
}

// TotalMemNotIn applies the NotIn predicate on the "TotalMem" field.
func TotalMemNotIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalMem), v...))
	})
}

// TotalMemGT applies the GT predicate on the "TotalMem" field.
func TotalMemGT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalMem), v))
	})
}

// TotalMemGTE applies the GTE predicate on the "TotalMem" field.
func TotalMemGTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalMem), v))
	})
}

// TotalMemLT applies the LT predicate on the "TotalMem" field.
func TotalMemLT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalMem), v))
	})
}

// TotalMemLTE applies the LTE predicate on the "TotalMem" field.
func TotalMemLTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalMem), v))
	})
}

// FreeMemEQ applies the EQ predicate on the "FreeMem" field.
func FreeMemEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeMem), v))
	})
}

// FreeMemNEQ applies the NEQ predicate on the "FreeMem" field.
func FreeMemNEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFreeMem), v))
	})
}

// FreeMemIn applies the In predicate on the "FreeMem" field.
func FreeMemIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFreeMem), v...))
	})
}

// FreeMemNotIn applies the NotIn predicate on the "FreeMem" field.
func FreeMemNotIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFreeMem), v...))
	})
}

// FreeMemGT applies the GT predicate on the "FreeMem" field.
func FreeMemGT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFreeMem), v))
	})
}

// FreeMemGTE applies the GTE predicate on the "FreeMem" field.
func FreeMemGTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFreeMem), v))
	})
}

// FreeMemLT applies the LT predicate on the "FreeMem" field.
func FreeMemLT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFreeMem), v))
	})
}

// FreeMemLTE applies the LTE predicate on the "FreeMem" field.
func FreeMemLTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFreeMem), v))
	})
}

// UsedMemEQ applies the EQ predicate on the "UsedMem" field.
func UsedMemEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedMem), v))
	})
}

// UsedMemNEQ applies the NEQ predicate on the "UsedMem" field.
func UsedMemNEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsedMem), v))
	})
}

// UsedMemIn applies the In predicate on the "UsedMem" field.
func UsedMemIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsedMem), v...))
	})
}

// UsedMemNotIn applies the NotIn predicate on the "UsedMem" field.
func UsedMemNotIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsedMem), v...))
	})
}

// UsedMemGT applies the GT predicate on the "UsedMem" field.
func UsedMemGT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsedMem), v))
	})
}

// UsedMemGTE applies the GTE predicate on the "UsedMem" field.
func UsedMemGTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsedMem), v))
	})
}

// UsedMemLT applies the LT predicate on the "UsedMem" field.
func UsedMemLT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsedMem), v))
	})
}

// UsedMemLTE applies the LTE predicate on the "UsedMem" field.
func UsedMemLTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsedMem), v))
	})
}

// TimestampEQ applies the EQ predicate on the "Timestamp" field.
func TimestampEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "Timestamp" field.
func TimestampNEQ(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "Timestamp" field.
func TimestampIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "Timestamp" field.
func TimestampNotIn(vs ...int64) predicate.AgentStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "Timestamp" field.
func TimestampGT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "Timestamp" field.
func TimestampGTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "Timestamp" field.
func TimestampLT(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "Timestamp" field.
func TimestampLTE(v int64) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// HasProvisionedHost applies the HasEdge predicate on the "ProvisionedHost" edge.
func HasProvisionedHost() predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostTable, ProvisionedHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostWith applies the HasEdge predicate on the "ProvisionedHost" edge with a given conditions (other predicates).
func HasProvisionedHostWith(preds ...predicate.ProvisionedHost) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostTable, ProvisionedHostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedNetwork applies the HasEdge predicate on the "ProvisionedNetwork" edge.
func HasProvisionedNetwork() predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkTable, ProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworkWith applies the HasEdge predicate on the "ProvisionedNetwork" edge with a given conditions (other predicates).
func HasProvisionedNetworkWith(preds ...predicate.ProvisionedNetwork) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkTable, ProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuild applies the HasEdge predicate on the "Build" edge.
func HasBuild() predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildWith applies the HasEdge predicate on the "Build" edge with a given conditions (other predicates).
func HasBuildWith(preds ...predicate.Build) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AgentStatus) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AgentStatus) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AgentStatus) predicate.AgentStatus {
	return predicate.AgentStatus(func(s *sql.Selector) {
		p(s.Not())
	})
}
