// Code generated by ent, DO NOT EDIT.

package agentstatus

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the agentstatus type in the database.
	Label = "agent_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClientID holds the string denoting the clientid field in the database.
	FieldClientID = "client_id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldUpTime holds the string denoting the uptime field in the database.
	FieldUpTime = "up_time"
	// FieldBootTime holds the string denoting the boottime field in the database.
	FieldBootTime = "boot_time"
	// FieldNumProcs holds the string denoting the numprocs field in the database.
	FieldNumProcs = "num_procs"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldHostID holds the string denoting the hostid field in the database.
	FieldHostID = "host_id"
	// FieldLoad1 holds the string denoting the load1 field in the database.
	FieldLoad1 = "load1"
	// FieldLoad5 holds the string denoting the load5 field in the database.
	FieldLoad5 = "load5"
	// FieldLoad15 holds the string denoting the load15 field in the database.
	FieldLoad15 = "load15"
	// FieldTotalMem holds the string denoting the totalmem field in the database.
	FieldTotalMem = "total_mem"
	// FieldFreeMem holds the string denoting the freemem field in the database.
	FieldFreeMem = "free_mem"
	// FieldUsedMem holds the string denoting the usedmem field in the database.
	FieldUsedMem = "used_mem"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// EdgeAgentStatusToProvisionedHost holds the string denoting the agentstatustoprovisionedhost edge name in mutations.
	EdgeAgentStatusToProvisionedHost = "AgentStatusToProvisionedHost"
	// EdgeAgentStatusToProvisionedNetwork holds the string denoting the agentstatustoprovisionednetwork edge name in mutations.
	EdgeAgentStatusToProvisionedNetwork = "AgentStatusToProvisionedNetwork"
	// EdgeAgentStatusToBuild holds the string denoting the agentstatustobuild edge name in mutations.
	EdgeAgentStatusToBuild = "AgentStatusToBuild"
	// Table holds the table name of the agentstatus in the database.
	Table = "agent_status"
	// AgentStatusToProvisionedHostTable is the table that holds the AgentStatusToProvisionedHost relation/edge.
	AgentStatusToProvisionedHostTable = "agent_status"
	// AgentStatusToProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	AgentStatusToProvisionedHostInverseTable = "provisioned_hosts"
	// AgentStatusToProvisionedHostColumn is the table column denoting the AgentStatusToProvisionedHost relation/edge.
	AgentStatusToProvisionedHostColumn = "agent_status_agent_status_to_provisioned_host"
	// AgentStatusToProvisionedNetworkTable is the table that holds the AgentStatusToProvisionedNetwork relation/edge.
	AgentStatusToProvisionedNetworkTable = "agent_status"
	// AgentStatusToProvisionedNetworkInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	AgentStatusToProvisionedNetworkInverseTable = "provisioned_networks"
	// AgentStatusToProvisionedNetworkColumn is the table column denoting the AgentStatusToProvisionedNetwork relation/edge.
	AgentStatusToProvisionedNetworkColumn = "agent_status_agent_status_to_provisioned_network"
	// AgentStatusToBuildTable is the table that holds the AgentStatusToBuild relation/edge.
	AgentStatusToBuildTable = "agent_status"
	// AgentStatusToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	AgentStatusToBuildInverseTable = "builds"
	// AgentStatusToBuildColumn is the table column denoting the AgentStatusToBuild relation/edge.
	AgentStatusToBuildColumn = "agent_status_agent_status_to_build"
)

// Columns holds all SQL columns for agentstatus fields.
var Columns = []string{
	FieldID,
	FieldClientID,
	FieldHostname,
	FieldUpTime,
	FieldBootTime,
	FieldNumProcs,
	FieldOs,
	FieldHostID,
	FieldLoad1,
	FieldLoad5,
	FieldLoad15,
	FieldTotalMem,
	FieldFreeMem,
	FieldUsedMem,
	FieldTimestamp,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "agent_status"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agent_status_agent_status_to_provisioned_host",
	"agent_status_agent_status_to_provisioned_network",
	"agent_status_agent_status_to_build",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the AgentStatus queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClientID orders the results by the ClientID field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByHostname orders the results by the Hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByUpTime orders the results by the UpTime field.
func ByUpTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpTime, opts...).ToFunc()
}

// ByBootTime orders the results by the BootTime field.
func ByBootTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBootTime, opts...).ToFunc()
}

// ByNumProcs orders the results by the NumProcs field.
func ByNumProcs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumProcs, opts...).ToFunc()
}

// ByOs orders the results by the Os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByHostID orders the results by the HostID field.
func ByHostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostID, opts...).ToFunc()
}

// ByLoad1 orders the results by the Load1 field.
func ByLoad1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoad1, opts...).ToFunc()
}

// ByLoad5 orders the results by the Load5 field.
func ByLoad5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoad5, opts...).ToFunc()
}

// ByLoad15 orders the results by the Load15 field.
func ByLoad15(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoad15, opts...).ToFunc()
}

// ByTotalMem orders the results by the TotalMem field.
func ByTotalMem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalMem, opts...).ToFunc()
}

// ByFreeMem orders the results by the FreeMem field.
func ByFreeMem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFreeMem, opts...).ToFunc()
}

// ByUsedMem orders the results by the UsedMem field.
func ByUsedMem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedMem, opts...).ToFunc()
}

// ByTimestamp orders the results by the Timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByAgentStatusToProvisionedHostField orders the results by AgentStatusToProvisionedHost field.
func ByAgentStatusToProvisionedHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStatusToProvisionedHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentStatusToProvisionedNetworkField orders the results by AgentStatusToProvisionedNetwork field.
func ByAgentStatusToProvisionedNetworkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStatusToProvisionedNetworkStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentStatusToBuildField orders the results by AgentStatusToBuild field.
func ByAgentStatusToBuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStatusToBuildStep(), sql.OrderByField(field, opts...))
	}
}
func newAgentStatusToProvisionedHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentStatusToProvisionedHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AgentStatusToProvisionedHostTable, AgentStatusToProvisionedHostColumn),
	)
}
func newAgentStatusToProvisionedNetworkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentStatusToProvisionedNetworkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AgentStatusToProvisionedNetworkTable, AgentStatusToProvisionedNetworkColumn),
	)
}
func newAgentStatusToBuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentStatusToBuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AgentStatusToBuildTable, AgentStatusToBuildColumn),
	)
}
