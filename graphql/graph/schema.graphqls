# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Map

type varsMap {
  key: String!
  value: String!
}

type configMap {
  key: String!
  value: String!
}

type tagMap {
  key: String!
  value: String!
}

type intMap {
  key: String!
  value: Int!
}

enum FindingSeverity {
  ZeroSeverity
  LowSeverity
  MediumSeverity
  HighSeverity
  CriticalSeverity
  NullSeverity
}

enum FindingDifficulty {
  ZeroDifficulty
  NoviceDifficulty
  AdvancedDifficulty
  ExpertDifficulty
  NullDifficulty
}

enum ProvisionStatus {
  PLANNING
  AWAITING
  PARENTAWAITING
  INPROGRESS
  FAILED
  COMPLETE
  TAINTED
  UNDEFINED
  TODELETE
  DELETEINPROGRESS
  DELETED
  TOREBUILD
  CANCELLED
}

enum ProvisionStatusFor {
  Build
  Team
  Plan
  ProvisionedNetwork
  ProvisionedHost
  ProvisioningStep
  Undefined
}

enum PlanType {
  start_build
  start_team
  provision_network
  provision_host
  execute_step
  undefined
}

enum ProvisioningStepType {
  Ansible
  Script
  Command
  DNSRecord
  FileDelete
  FileDownload
  FileExtract
  Undefined
}

enum ProvisioningScheduledStepType {
  Ansible
  Script
  Command
  DNSRecord
  FileDelete
  FileDownload
  FileExtract
  Undefined
}

enum RoleLevel {
  ADMIN
  USER
  UNDEFINED
}

enum ProviderType {
  LOCAL
  GITHUB
  OPENID
  UNDEFINED
}

enum AgentCommand {
  DEFAULT
  DELETE
  REBOOT
  EXTRACT
  DOWNLOAD
  CREATEUSER
  CREATEUSERPASS
  ADDTOGROUP
  EXECUTE
  VALIDATE
  CHANGEPERMS
  APPENDFILE
}

enum AgentTaskState {
  AWAITING
  INPROGRESS
  FAILED
  COMPLETE
}

enum ServerTaskType {
  LOADENV
  CREATEBUILD
  RENDERFILES
  DELETEBUILD
  REBUILD
  EXECUTEBUILD
}

enum BuildCommitType {
  ROOT
  REBUILD
  DELETE
}

enum BuildCommitState {
  PLANNING
  INPROGRESS
  APPLIED
  CANCELLED
  APPROVED
}

enum AnsibleMethod {
  LOCAL
}

enum ProvisionedHostAddonType {
  DNS
}

enum ScheduledStepType {
  CRON
  RUNONCE
}

type AdhocPlan {
  id: ID!
  NextAdhocPlans: [AdhocPlan]
  PrevAdhocPlans: [AdhocPlan]
  Build: Build!
  Status: Status!
  AgentTask: AgentTask!
}

type AgentStatus {
  clientId: String!
  hostname: String!
  upTime: Int!
  bootTime: Int!
  numProcs: Int!
  OS: String!
  hostID: String!
  load1: Float
  load5: Float
  load15: Float
  totalMem: Int!
  freeMem: Int!
  usedMem: Int!
  timestamp: Int!
  ProvisionedHost: ProvisionedHost
  ProvisionedNetwork: ProvisionedNetwork
  Build: Build
}

type AgentTask {
  id: ID!
  args: String
  command: AgentCommand!
  number: Int!
  output: String
  state: AgentTaskState!
  errorMessage: String
  ProvisioningStep: ProvisioningStep
  ProvisioningScheduledStep: ProvisioningScheduledStep
  ProvisionedHost: ProvisionedHost!
  AdhocPlans: [AdhocPlan]
}

type Ansible {
  id: ID!
  hclId: String!
  name: String!
  description: String!
  source: String!
  playbookName: String!
  method: AnsibleMethod!
  inventory: String!
  absPath: String!
  tags: [tagMap]
  Users: [User]
  Environment: Environment
}

type AuthUser {
  id: ID!
  username: String!
  # password <- hidden
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  company: String!
  occupation: String!
  # privateKeyPath <- hidden
  publicKey: String!
  role: RoleLevel!
  provider: ProviderType!
  # Tokens <- hidden
  ServerTasks: [ServerTask]
}

type Build {
  id: ID!
  revision: Int!
  environmentRevision: Int!
  completedPlan: Boolean!
  Status: Status!
  Environment: Environment!
  Competition: Competition!
  LatestBuildCommit: BuildCommit
  RepoCommit: RepoCommit!
  ProvisionedNetworks: [ProvisionedNetwork]!
  Teams: [Team]!
  Plans: [Plan]!
  BuildCommits: [BuildCommit]!
  AdhocPlans: [AdhocPlan]!
  AgentStatuses: [AgentStatus]!
  ServerTasks: [ServerTask]!
}

type BuildCommit {
  id: ID!
  type: BuildCommitType!
  revision: Int!
  state: BuildCommitState!
  createdAt: Time!
  Build: Build!
  ServerTasks: [ServerTask]!
  PlanDiffs: [PlanDiff]!
}

type Command {
  id: ID!
  hclId: String!
  name: String!
  description: String!
  program: String!
  args: [String]!
  ignoreErrors: Boolean!
  disabled: Boolean!
  cooldown: Int!
  timeout: Int!
  vars: [varsMap]
  tags: [tagMap]
  Users: [User]!
  Environment: Environment!
}

type Competition {
  id: ID!
  hclId: String!
  rootPassword: String!
  startTime: Int
  stopTime: Int
  config: [configMap]
  tags: [tagMap]
  DNS: [DNS]!
  Environment: Environment!
  Builds: [Build]!
}

type Disk {
  id: ID!
  size: Int!
  Host: Host!
}

type DNS {
  id: ID!
  hclId: String!
  type: String!
  rootDomain: String!
  dnsServers: [String]!
  ntpServers: [String]!
  config: [configMap]
  Environments: [Environment]!
  Competitions: [Competition]!
}

type DNSRecord {
  id: ID!
  hclId: String!
  name: String!
  values: [String]!
  type: String!
  zone: String!
  vars: [varsMap]!
  disabled: Boolean!
  tags: [tagMap]!
  Environment: Environment!
}

type Environment {
  id: ID!
  hclId: String!
  competitionId: String!
  name: String!
  description: String!
  builder: String!
  teamCount: Int!
  revision: Int!
  adminCidrs: [String]!
  exposedVdiPorts: [String]!
  config: [configMap]
  tags: [tagMap]
  Users: [User]!
  Hosts: [Host]!
  Competitions: [Competition]!
  Identities: [Identity]!
  Commands: [Command]!
  Scripts: [Script]!
  FileDownloads: [FileDownload]!
  FileDeletes: [FileDelete]!
  FileExtracts: [FileExtract]!
  IncludedNetworks: [IncludedNetwork]!
  Findings: [Finding]!
  DNSRecords: [DNSRecord]!
  DNS: [DNS]!
  Networks: [Network]!
  HostDependencies: [HostDependency]!
  Ansibles: [Ansible]!
  ScheduledSteps: [ScheduledStep]!
  Builds: [Build]!
  Repositories: [Repository]!
  ServerTasks: [ServerTask]!
}

type FileDelete {
  id: ID!
  hclId: String!
  path: String!
  tags: [tagMap]!
  Environment: Environment!
}

type FileDownload {
  id: ID!
  hclId: String!
  sourceType: String!
  source: String!
  destination: String!
  template: Boolean!
  perms: String!
  disabled: Boolean!
  md5: String!
  absPath: String!
  tags: [tagMap]!
  Environment: Environment!
}

type FileExtract {
  id: ID!
  hclId: String!
  source: String!
  destination: String!
  type: String!
  tags: [tagMap]!
  Environment: Environment!
}

type Finding {
  id: ID!
  name: String!
  description: String!
  severity: FindingSeverity!
  difficulty: FindingDifficulty!
  tags: [tagMap]!
  Users: [User]!
  Host: Host
  Script: Script
  Environment: Environment
}

type GinFileMiddleware {
  id: ID!
  urlId: String!
  filePath: String!
  accessed: Boolean!
  ProvisionedHost: ProvisionedHost
  ProvisioningStep: ProvisioningStep
  ProvisioningScheduledStep: ProvisioningScheduledStep
}

type Host {
  id: ID!
  hclId: String!
  hostname: String!
  description: String!
  OS: String!
  lastOctet: Int!
  instanceSize: String!
  allowMacChanges: Boolean!
  exposedTcpPorts: [String]!
  exposedUdpPorts: [String]!
  overridePassword: String!
  vars: [varsMap]
  userGroups: [String]!
  provisionSteps: [String]!
  tags: [tagMap]!
  Disk: Disk!
  Users: [User]!
  Environment: Environment!
  IncludedNetworks: [IncludedNetwork]!
  DependOnHostDependencies: [HostDependency]!
  RequiredByHostDependencies: [HostDependency]!
}

type HostDependency {
  id: ID!
  hostId: String!
  networkId: String!
  RequiredBy: Host
  DependOnHost: Host
  DependOnNetwork: Network
  Environment: Environment
}

type Identity {
  id: ID!
  hclid: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  description: String!
  avatarFile: String!
  vars: [varsMap]!
  tags: [tagMap]!
  Environment: Environment!
}

type IncludedNetwork {
  id: ID!
  name: String!
  includedHosts: [String]!
  Tags: [Tag]!
  Hosts: [Host]!
  Network: Network
  Environments: [Environment]!
}

type Network {
  id: ID!
  hclId: String!
  name: String!
  cidr: String!
  vdiVisible: Boolean!
  vars: [varsMap]
  tags: [tagMap]!
  Environment: Environment!
  HostDependencies: [HostDependency]!
  IncludedNetworks: [IncludedNetwork]!
}

type Plan {
  id: ID!
  stepNumber: Int!
  type: PlanType!
  NextPlans: [Plan]!
  PrevPlans: [Plan]!
  Build: Build
  Team: Team
  ProvisionedNetwork: ProvisionedNetwork
  ProvisionedHost: ProvisionedHost
  ProvisioningStep: ProvisioningStep
  ProvisioningScheduledStep: ProvisioningScheduledStep
  Status: Status!
  PlanDiffs: [PlanDiff]!
}

type PlanDiff {
  id: ID!
  revision: Int!
  newState: ProvisionStatus!
  BuildCommit: BuildCommit!
  Plan: Plan!
}

type ProvisionedHost {
  id: ID!
  subnetIp: String!
  addonType: ProvisionedHostAddonType
  vars: [varsMap]
  Status: Status!
  ProvisionedNetwork: ProvisionedNetwork!
  Host: Host!
  EndStepPlan: Plan
  Build: Build!
  ProvisioningSteps: [ProvisioningStep]!
  ProvisioningScheduledSteps: [ProvisioningScheduledStep]!
  AgentStatuses: [AgentStatus]!
  AgentTasks: [AgentTask]!
  Plan: Plan!
  GinFileMiddleware: GinFileMiddleware
}

type ProvisionedNetwork {
  id: ID!
  name: String!
  cidr: String!
  vars: [varsMap]
  Status: Status
  Network: Network
  Build: Build
  Team: Team
  ProvisionedHosts: [ProvisionedHost]!
  Plan: Plan
}

type ProvisioningScheduledStep {
  id: ID!
  type: ProvisioningScheduledStepType!
  runTime: Time!
  Status: Status
  ScheduledStep: ScheduledStep!
  ProvisionedHost: ProvisionedHost!
  Script: Script
  Command: Command
  DNSRecord: DNSRecord
  FileDelete: FileDelete
  FileDownload: FileDownload
  FileExtract: FileExtract
  Ansible: Ansible
  AgentTasks: [AgentTask]!
  Plan: Plan
  GinFileMiddleware: GinFileMiddleware
}

type ProvisioningStep {
  id: ID!
  type: ProvisioningStepType!
  stepNumber: Int!
  Status: Status
  ProvisionedHost: ProvisionedHost!
  Script: Script
  Command: Command
  DNSRecord: DNSRecord
  FileDelete: FileDelete
  FileDownload: FileDownload
  FileExtract: FileExtract
  Ansible: Ansible
  Plan: Plan
  AgentTasks: [AgentTask]!
  GinFileMiddleware: GinFileMiddleware
}

type RepoCommit {
  id: ID!
  revision: Int!
  hash: String!
  author: String!
  committer: String!
  pgpSignature: String!
  message: String!
  treeHash: String!
  parentHashes: [String]!
  Repository: Repository!
}

type Repository {
  id: ID!
  repoUrl: String!
  branchName: String!
  environmentFilepath: String!
  Environments: [Environment]!
  RepoCommits: [RepoCommit]!
}

type ScheduledStep {
  id: ID!
  hclId: String!
  name: String!
  description: String!
  step: String!
  type: ScheduledStepType!
  schedule: String
  runAt: Int
  Environment: Environment
}

type Script {
  id: ID!
  hclId: String!
  name: String!
  language: String!
  description: String!
  source: String!
  sourceType: String!
  cooldown: Int!
  timeout: Int!
  ignoreErrors: Boolean!
  args: [String]!
  disabled: Boolean!
  vars: [varsMap]
  absPath: String!
  tags: [tagMap]
  Users: [User]!
  Findings: [Finding]!
  Environment: Environment!
}

type ServerTask {
  id: ID!
  type: ServerTaskType!
  startTime: Time
  endTime: Time
  errors: [String]
  logFilePath: String
  AuthUser: AuthUser!
  Status: Status!
  Environment: Environment
  Build: Build
  BuildCommit: BuildCommit
  GinFileMiddleware: [GinFileMiddleware]!
}

type Status {
  id: ID!
  state: ProvisionStatus!
  statusFor: ProvisionStatusFor!
  startedAt: String!
  endedAt: String!
  failed: Boolean!
  completed: Boolean!
  error: String
  Build: Build
  ProvisionedNetwork: ProvisionedNetwork
  ProvisionedHost: ProvisionedHost
  ProvisioningStep: ProvisioningStep
  Team: Team
  Plan: Plan
  ServerTask: ServerTask
  AdhocPlan: AdhocPlan
  ProvisioningScheduledStep: ProvisioningScheduledStep
}

type Tag {
  id: ID!
  uuid: ID!
  name: String!
  description: [tagMap]!
}

type Team {
  id: ID!
  teamNumber: Int!
  Build: Build!
  Status: Status
  ProvisionedNetworks: [ProvisionedNetwork]!
  Plan: Plan!
}

type User {
  id: ID!
  hclId: ID!
  name: String!
  uuid: String!
  email: String!
  Tag: [Tag]!
  Environments: [Environment]!
}

type LaForgePageInfo {
  total: Int!
  nextOffset: Int!
}

type AgentStatusBatch {
  agentStatuses: [AgentStatus]!
  pageInfo: LaForgePageInfo!
}

type StatusBatch {
  statuses: [Status]!
  pageInfo: LaForgePageInfo!
}

type PlanCounts {
  planning: Int!
  awaiting: Int!
  parentAwaiting: Int!
  inProgress: Int!
  failed: Int!
  complete: Int!
  tainted: Int!
  undefined: Int!
  toDelete: Int!
  deleteInProgress: Int!
  deleted: Int!
  toRebuild: Int!
  cancelled: Int!
}

type ServerConfig {
  ConfigFile: String!
  Debug: Boolean
  LogFolder: String!
  GinMode: String!
  Builders: Map!
  Database: DatabaseConfig
  Auth: AuthConfig
  UI: UIConfig
  Agent: AgentConfig
  Graphql: GraphqlConfig
}

type BuilderConfig {
  Builder: String!
  ConfigFile: String!
}

type DatabaseConfig {
  PostgresUri: String!
  AdminUser: String!
  # AdminPass <-- hidden
}

type AuthConfig {
  GithubId: String!
  # GithubSecret <-- hidden
  CookieTimeout: Int!
}

type UIConfig {
  HttpsEnabled: Boolean!
  AllowedOrigins: [String]!
}

type AgentConfig {
  GrpcServerUri: String!
  ApiDownloadUrl: String!
}

type GraphqlConfig {
  Hostname: String!
  RedisServerUri: String!
  # RedisPassword <-- hidden
}

# TODO: Can use on INPUT_FIELD_DEFINITION if wanna have auth on a per variable level
directive @hasRole(roles: [RoleLevel!]!) on FIELD_DEFINITION

type Query {
  environments: [Environment] @hasRole(roles: [ADMIN, USER])
  environment(envUUID: String!): Environment @hasRole(roles: [ADMIN, USER])
  provisionedHost(proHostUUID: String!): ProvisionedHost
    @hasRole(roles: [ADMIN, USER])
  provisionedNetwork(proNetUUID: String!): ProvisionedNetwork
    @hasRole(roles: [ADMIN, USER])
  provisionedStep(proStepUUID: String!): ProvisioningStep
    @hasRole(roles: [ADMIN, USER])
  plan(planUUID: String!): Plan @hasRole(roles: [ADMIN, USER])
  getBuilds: [Build] @hasRole(roles: [ADMIN, USER])
  build(buildUUID: String!): Build @hasRole(roles: [ADMIN, USER])
  getBuildCommits(envUUID: String!): [BuildCommit]
    @hasRole(roles: [ADMIN, USER])
  getBuildCommit(buildCommitUUID: String!): BuildCommit
    @hasRole(roles: [ADMIN, USER])
  status(statusUUID: String!): Status @hasRole(roles: [ADMIN, USER])
  agentStatus(clientId: String!): AgentStatus @hasRole(roles: [ADMIN, USER])
  getServerTasks: [ServerTask] @hasRole(roles: [ADMIN, USER])
  currentUser: AuthUser @hasRole(roles: [ADMIN, USER])
  getUserList: [AuthUser] @hasRole(roles: [ADMIN])
  getCurrentUserTasks: [ServerTask] @hasRole(roles: [ADMIN, USER])
  getAgentTasks(proStepUUID: String, proSchedStepUUID: String): [AgentTask]
    @hasRole(roles: [ADMIN, USER])
  listAgentStatuses(buildUUID: String!): [AgentStatus]
    @hasRole(roles: [ADMIN, USER])
  listBuildStatuses(buildUUID: String!): [Status] @hasRole(roles: [ADMIN, USER])
  getAllAgentStatus(
    buildUUID: String!
    count: Int!
    offset: Int!
  ): AgentStatusBatch @hasRole(roles: [ADMIN, USER])
  getAllPlanStatus(buildUUID: String!, count: Int!, offset: Int!): StatusBatch
    @hasRole(roles: [ADMIN, USER])
  getPlanStatusCounts(buildUUID: String!): PlanCounts!
    @hasRole(roles: [ADMIN, USER])
  viewServerTaskLogs(taskID: String!): String! @hasRole(roles: [ADMIN, USER])
  viewAgentTask(taskID: String!): AgentTask! @hasRole(roles: [ADMIN, USER])
  serverTasks(taskUUIDs: [String]!): [ServerTask] @hasRole(roles: [ADMIN, USER])
  serverConfig: ServerConfig @hasRole(roles: [ADMIN])
}

type Mutation {
  loadEnvironment(envFilePath: String!): [Environment]
    @hasRole(roles: [ADMIN, USER])
  createBuild(envUUID: String!, renderFiles: Boolean! = true): Build
    @hasRole(roles: [ADMIN, USER])
  deleteUser(userUUID: String!): Boolean! @hasRole(roles: [ADMIN, USER])
  executePlan(buildUUID: String!): Build @hasRole(roles: [ADMIN, USER])
  deleteBuild(buildUUID: String!): String! @hasRole(roles: [ADMIN, USER]) # returns the build commit uuid of delete commit
  createTask(
    proHostUUID: String!
    command: AgentCommand!
    args: String!
  ): Boolean! @hasRole(roles: [ADMIN, USER])
  dumpBuild(buildUUID: String!): String! @hasRole(roles: [ADMIN, USER])
  rebuild(rootPlans: [String]!): Boolean! @hasRole(roles: [ADMIN, USER])
  approveCommit(commitUUID: String!): Boolean! @hasRole(roles: [ADMIN, USER])
  cancelCommit(commitUUID: String!): Boolean! @hasRole(roles: [ADMIN, USER])

  # createAdhoc(rootPlans: [AdhocPlan]!): Boolean!

  createAgentTasks(
    hostHCLID: String!
    command: AgentCommand!
    buildUUID: String!
    args: [String!]!
    teams: [Int!]!
  ): [AgentTask]! @hasRole(roles: [ADMIN, USER])

  createBatchAgentTasks(
    proHostUUIDs: [String!]!
    command: AgentCommand!
    args: [String!]!
  ): [AgentTask]! @hasRole(roles: [ADMIN, USER])

  createEnviromentFromRepo(
    repoURL: String!
    branchName: String! = "master"
    envFilePath: String!
  ): [Environment]! @hasRole(roles: [ADMIN, USER])

  updateEnviromentViaPull(envUUID: String!): [Environment]!
    @hasRole(roles: [ADMIN, USER])

  cancelBuild(buildUUID: String!): Boolean! @hasRole(roles: [ADMIN, USER])

  # User Info
  modifySelfPassword(currentPassword: String!, newPassword: String!): Boolean!
    @hasRole(roles: [ADMIN, USER])
  modifySelfUserInfo(
    firstName: String
    lastName: String
    email: String
    phone: String
    company: String
    occupation: String
  ): AuthUser @hasRole(roles: [ADMIN, USER])

  # User Admin Stuff
  createUser(
    username: String!
    password: String!
    role: RoleLevel!
    provider: ProviderType!
  ): AuthUser @hasRole(roles: [ADMIN])
  modifyAdminUserInfo(
    userID: String!
    username: String
    firstName: String
    lastName: String
    email: String
    phone: String
    company: String
    occupation: String
    role: RoleLevel
    provider: ProviderType
  ): AuthUser @hasRole(roles: [ADMIN])
  modifyAdminPassword(userID: String!, newPassword: String!): Boolean!
    @hasRole(roles: [ADMIN])

  nukeBackend: [intMap]! @hasRole(roles: [ADMIN])
}

type Subscription {
  updatedAgentStatus: AgentStatus! @hasRole(roles: [ADMIN, USER])
  updatedStatus: Status! @hasRole(roles: [ADMIN, USER])
  updatedServerTask: ServerTask! @hasRole(roles: [ADMIN, USER])
  updatedBuild: Build! @hasRole(roles: [ADMIN, USER])
  updatedCommit: BuildCommit! @hasRole(roles: [ADMIN, USER])
  updatedAgentTask: AgentTask! @hasRole(roles: [ADMIN, USER])
  streamServerTaskLog(taskID: String!): String! @hasRole(roles: [ADMIN, USER])
}
